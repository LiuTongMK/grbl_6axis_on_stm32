
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b678  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800b788  0800b788  0001b788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bdb8  0800bdb8  0001bdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000114  20000000  0800bdbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f90  20000114  0800bed0  00020114  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  200010a4  0800bed0  000210a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018952  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003c43  00000000  00000000  00038a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e48  00000000  00000000  0003c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d20  00000000  00000000  0003d520  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000143e5  00000000  00000000  0003e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000df30  00000000  00000000  00052625  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0005c729  00000000  00000000  00060555  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000bcc7e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003fe4  00000000  00000000  000bccfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000114 	.word	0x20000114
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b770 	.word	0x0800b770

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000118 	.word	0x20000118
 800014c:	0800b770 	.word	0x0800b770

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <NVIC_PriorityGroupConfig+0x20>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60d3      	str	r3, [r2, #12]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d03a      	beq.n	80011aa <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <NVIC_Init+0xbc>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f1c3 0304 	rsb	r3, r3, #4
 8001148:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	461a      	mov	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	789b      	ldrb	r3, [r3, #2]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4313      	orrs	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <NVIC_Init+0xc0>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	6979      	ldr	r1, [r7, #20]
 8001180:	b2c9      	uxtb	r1, r1
 8001182:	4413      	add	r3, r2
 8001184:	460a      	mov	r2, r1
 8001186:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <NVIC_Init+0xc0>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	095b      	lsrs	r3, r3, #5
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80011a8:	e00f      	b.n	80011ca <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011aa:	490b      	ldr	r1, [pc, #44]	; (80011d8 <NVIC_Init+0xc0>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2201      	movs	r2, #1
 80011c0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011c2:	f100 0320 	add.w	r3, r0, #32
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	e000e100 	.word	0xe000e100

080011dc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <EXTI_Init+0xe0>)
 80011ea:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d04f      	beq.n	8001294 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80011f4:	4931      	ldr	r1, [pc, #196]	; (80012bc <EXTI_Init+0xe0>)
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <EXTI_Init+0xe0>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	43db      	mvns	r3, r3
 8001200:	4013      	ands	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001204:	492d      	ldr	r1, [pc, #180]	; (80012bc <EXTI_Init+0xe0>)
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <EXTI_Init+0xe0>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	43db      	mvns	r3, r3
 8001210:	4013      	ands	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	791b      	ldrb	r3, [r3, #4]
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800122e:	4923      	ldr	r1, [pc, #140]	; (80012bc <EXTI_Init+0xe0>)
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <EXTI_Init+0xe0>)
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	43db      	mvns	r3, r3
 800123a:	4013      	ands	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800123e:	491f      	ldr	r1, [pc, #124]	; (80012bc <EXTI_Init+0xe0>)
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <EXTI_Init+0xe0>)
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	43db      	mvns	r3, r3
 800124a:	4013      	ands	r3, r2
 800124c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d10e      	bne.n	8001274 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001256:	4919      	ldr	r1, [pc, #100]	; (80012bc <EXTI_Init+0xe0>)
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <EXTI_Init+0xe0>)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001264:	4915      	ldr	r1, [pc, #84]	; (80012bc <EXTI_Init+0xe0>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <EXTI_Init+0xe0>)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001272:	e01d      	b.n	80012b0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <EXTI_Init+0xe0>)
 8001276:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	6811      	ldr	r1, [r2, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	e00d      	b.n	80012b0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	43d2      	mvns	r2, r2
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40010400 	.word	0x40010400

080012c0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <EXTI_GetITStatus+0x44>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <EXTI_GetITStatus+0x44>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <EXTI_GetITStatus+0x32>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e001      	b.n	80012f6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40010400 	.word	0x40010400

08001308 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <EXTI_ClearITPendingBit+0x18>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6153      	str	r3, [r2, #20]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40010400 	.word	0x40010400

08001324 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <FLASH_Unlock+0x18>)
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <FLASH_Unlock+0x1c>)
 800132c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800132e:	4b03      	ldr	r3, [pc, #12]	; (800133c <FLASH_Unlock+0x18>)
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <FLASH_Unlock+0x20>)
 8001332:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40022000 	.word	0x40022000
 8001340:	45670123 	.word	0x45670123
 8001344:	cdef89ab 	.word	0xcdef89ab

08001348 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001350:	2304      	movs	r3, #4
 8001352:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001354:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001358:	f000 f880 	bl	800145c <FLASH_WaitForLastOperation>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b04      	cmp	r3, #4
 8001364:	d11b      	bne.n	800139e <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <FLASH_ErasePage+0x60>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <FLASH_ErasePage+0x60>)
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <FLASH_ErasePage+0x60>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001384:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001388:	f000 f868 	bl	800145c <FLASH_WaitForLastOperation>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001390:	4905      	ldr	r1, [pc, #20]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800139a:	4013      	ands	r3, r2
 800139c:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40022000 	.word	0x40022000

080013ac <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80013b8:	2304      	movs	r3, #4
 80013ba:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80013bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c0:	f000 f84c 	bl	800145c <FLASH_WaitForLastOperation>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d115      	bne.n	80013fa <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 80013ce:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80013e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e4:	f000 f83a 	bl	800145c <FLASH_WaitForLastOperation>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 80013ec:	4905      	ldr	r1, [pc, #20]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80013f6:	4013      	ands	r3, r2
 80013f8:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40022000 	.word	0x40022000

08001408 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800140e:	2304      	movs	r3, #4
 8001410:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <FLASH_GetBank1Status+0x50>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800141e:	2301      	movs	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e013      	b.n	800144c <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <FLASH_GetBank1Status+0x50>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001430:	2302      	movs	r3, #2
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	e00a      	b.n	800144c <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <FLASH_GetBank1Status+0x50>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8001442:	2303      	movs	r3, #3
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e001      	b.n	800144c <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001448:	2304      	movs	r3, #4
 800144a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40022000 	.word	0x40022000

0800145c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001464:	2304      	movs	r3, #4
 8001466:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8001468:	f7ff ffce 	bl	8001408 <FLASH_GetBank1Status>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001470:	e006      	b.n	8001480 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 8001472:	f7ff ffc9 	bl	8001408 <FLASH_GetBank1Status>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3b01      	subs	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <FLASH_WaitForLastOperation+0x30>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f2      	bne.n	8001472 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8001492:	2305      	movs	r3, #5
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	78db      	ldrb	r3, [r3, #3]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	461a      	mov	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d044      	beq.n	8001578 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	e038      	b.n	800156c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80014fa:	2201      	movs	r2, #1
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d126      	bne.n	8001566 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800151e:	220f      	movs	r2, #15
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	43db      	mvns	r3, r3
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4013      	ands	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	78db      	ldrb	r3, [r3, #3]
 8001544:	2b28      	cmp	r3, #40	; 0x28
 8001546:	d105      	bne.n	8001554 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001548:	2201      	movs	r2, #1
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	409a      	lsls	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	e008      	b.n	8001566 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	2b48      	cmp	r3, #72	; 0x48
 800155a:	d104      	bne.n	8001566 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800155c:	2201      	movs	r2, #1
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	3301      	adds	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b07      	cmp	r3, #7
 8001570:	d9c3      	bls.n	80014fa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2bff      	cmp	r3, #255	; 0xff
 800157e:	d946      	bls.n	800160e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	e03a      	b.n	8001602 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3308      	adds	r3, #8
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d127      	bne.n	80015fc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80015b2:	220f      	movs	r2, #15
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	43db      	mvns	r3, r3
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4013      	ands	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	2b28      	cmp	r3, #40	; 0x28
 80015da:	d105      	bne.n	80015e8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3308      	adds	r3, #8
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	2b48      	cmp	r3, #72	; 0x48
 80015ee:	d105      	bne.n	80015fc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	3308      	adds	r3, #8
 80015f4:	2201      	movs	r2, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b07      	cmp	r3, #7
 8001606:	d9c1      	bls.n	800158c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	605a      	str	r2, [r3, #4]
  }
}
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	b29b      	uxth	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	b29b      	uxth	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	615a      	str	r2, [r3, #20]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 800169c:	e002      	b.n	80016a4 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da03      	bge.n	80016da <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e002      	b.n	80016e0 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016fa:	d10a      	bne.n	8001712 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001702:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800170e:	6053      	str	r3, [r2, #4]
 8001710:	e021      	b.n	8001756 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00e      	beq.n	800173a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800171c:	2203      	movs	r2, #3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e00d      	b.n	8001756 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0d5b      	lsrs	r3, r3, #21
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4013      	ands	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001754:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	da03      	bge.n	800177c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800177a:	e002      	b.n	8001782 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6053      	str	r3, [r2, #4]
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40010000 	.word	0x40010000

08001790 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001790:	b490      	push	{r4, r7}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	401a      	ands	r2, r3
 80017d2:	1c83      	adds	r3, r0, #2
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461c      	mov	r4, r3
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017f0:	79f9      	ldrb	r1, [r7, #7]
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	1ca3      	adds	r3, r4, #2
 8001802:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bc90      	pop	{r4, r7}
 800180e:	4770      	bx	lr
 8001810:	40010000 	.word	0x40010000

08001814 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d007      	beq.n	800184c <RCC_GetClocksFreq+0x38>
 800183c:	2b08      	cmp	r3, #8
 800183e:	d009      	beq.n	8001854 <RCC_GetClocksFreq+0x40>
 8001840:	2b00      	cmp	r3, #0
 8001842:	d133      	bne.n	80018ac <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <RCC_GetClocksFreq+0x150>)
 8001848:	601a      	str	r2, [r3, #0]
      break;
 800184a:	e033      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a45      	ldr	r2, [pc, #276]	; (8001964 <RCC_GetClocksFreq+0x150>)
 8001850:	601a      	str	r2, [r3, #0]
      break;
 8001852:	e02f      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800185c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	3302      	adds	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <RCC_GetClocksFreq+0x154>)
 800187a:	fb02 f203 	mul.w	r2, r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001882:	e017      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4a35      	ldr	r2, [pc, #212]	; (8001968 <RCC_GetClocksFreq+0x154>)
 8001894:	fb02 f203 	mul.w	r2, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
      break;
 800189c:	e00a      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <RCC_GetClocksFreq+0x150>)
 80018a2:	fb02 f203 	mul.w	r2, r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
      break;
 80018aa:	e003      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <RCC_GetClocksFreq+0x150>)
 80018b0:	601a      	str	r2, [r3, #0]
      break;
 80018b2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018bc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <RCC_GetClocksFreq+0x158>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018e4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <RCC_GetClocksFreq+0x158>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	40da      	lsrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800190c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	0adb      	lsrs	r3, r3, #11
 8001912:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <RCC_GetClocksFreq+0x158>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	40da      	lsrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001934:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	0b9b      	lsrs	r3, r3, #14
 800193a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <RCC_GetClocksFreq+0x15c>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	007a1200 	.word	0x007a1200
 8001968:	003d0900 	.word	0x003d0900
 800196c:	20000000 	.word	0x20000000
 8001970:	20000010 	.word	0x20000010

08001974 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001986:	4909      	ldr	r1, [pc, #36]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4313      	orrs	r3, r2
 8001990:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001992:	e006      	b.n	80019a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001994:	4905      	ldr	r1, [pc, #20]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	43db      	mvns	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	618b      	str	r3, [r1, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000

080019b0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <TIM_TimeBaseInit+0xd0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a2d      	ldr	r2, [pc, #180]	; (8001a84 <TIM_TimeBaseInit+0xd4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00f      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d00b      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <TIM_TimeBaseInit+0xd8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <TIM_TimeBaseInit+0xdc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d003      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <TIM_TimeBaseInit+0xe0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	885a      	ldrh	r2, [r3, #2]
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <TIM_TimeBaseInit+0xe4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00c      	beq.n	8001a28 <TIM_TimeBaseInit+0x78>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <TIM_TimeBaseInit+0xe8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d008      	beq.n	8001a28 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a1c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	88da      	ldrh	r2, [r3, #6]
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	89fa      	ldrh	r2, [r7, #14]
 8001a2c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	889a      	ldrh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <TIM_TimeBaseInit+0xd0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00f      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <TIM_TimeBaseInit+0xd4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00b      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <TIM_TimeBaseInit+0xec>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <TIM_TimeBaseInit+0xf0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <TIM_TimeBaseInit+0xf4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d104      	bne.n	8001a70 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	7a1b      	ldrb	r3, [r3, #8]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	829a      	strh	r2, [r3, #20]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40013400 	.word	0x40013400
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40000800 	.word	0x40000800
 8001a90:	40000c00 	.word	0x40000c00
 8001a94:	40001000 	.word	0x40001000
 8001a98:	40001400 	.word	0x40001400
 8001a9c:	40014000 	.word	0x40014000
 8001aa0:	40014400 	.word	0x40014400
 8001aa4:	40014800 	.word	0x40014800

08001aa8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	81fb      	strh	r3, [r7, #14]
 8001aba:	2300      	movs	r3, #0
 8001abc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	8c1b      	ldrh	r3, [r3, #32]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8c1b      	ldrh	r3, [r3, #32]
 8001ad2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	8b1b      	ldrh	r3, [r3, #24]
 8001ade:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001ae0:	897b      	ldrh	r3, [r7, #10]
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001ae8:	897b      	ldrh	r3, [r7, #10]
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	881a      	ldrh	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	f023 0302 	bic.w	r3, r3, #2
 8001b00:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	891a      	ldrh	r2, [r3, #8]
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	885a      	ldrh	r2, [r3, #2]
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a24      	ldr	r2, [pc, #144]	; (8001bac <TIM_OC1Init+0x104>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00f      	beq.n	8001b3e <TIM_OC1Init+0x96>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <TIM_OC1Init+0x108>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <TIM_OC1Init+0x96>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <TIM_OC1Init+0x10c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_OC1Init+0x96>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <TIM_OC1Init+0x110>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <TIM_OC1Init+0x114>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d123      	bne.n	8001b86 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	f023 0308 	bic.w	r3, r3, #8
 8001b44:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	895a      	ldrh	r2, [r3, #10]
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	889a      	ldrh	r2, [r3, #4]
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001b62:	89bb      	ldrh	r3, [r7, #12]
 8001b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b68:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b70:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	899a      	ldrh	r2, [r3, #12]
 8001b76:	89bb      	ldrh	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	89da      	ldrh	r2, [r3, #14]
 8001b80:	89bb      	ldrh	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	89ba      	ldrh	r2, [r7, #12]
 8001b8a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	897a      	ldrh	r2, [r7, #10]
 8001b90:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	88da      	ldrh	r2, [r3, #6]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	841a      	strh	r2, [r3, #32]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40012c00 	.word	0x40012c00
 8001bb0:	40013400 	.word	0x40013400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800

08001bc0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bce:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	721a      	strb	r2, [r3, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001c14:	e007      	b.n	8001c26 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	801a      	strh	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8001c5a:	e009      	b.n	8001c70 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	807b      	strh	r3, [r7, #2]
 8001c86:	4613      	mov	r3, r2
 8001c88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c8a:	787b      	ldrb	r3, [r7, #1]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	899b      	ldrh	r3, [r3, #12]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001ca0:	e009      	b.n	8001cb6 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	899b      	ldrh	r3, [r3, #12]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	819a      	strh	r2, [r3, #12]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	8b1b      	ldrh	r3, [r3, #24]
 8001cd4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	f023 0308 	bic.w	r3, r3, #8
 8001cdc:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001cde:	89fa      	ldrh	r2, [r7, #14]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	89fa      	ldrh	r2, [r7, #14]
 8001cea:	831a      	strh	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	821a      	strh	r2, [r3, #16]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
	...

08001d18 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8a1b      	ldrh	r3, [r3, #16]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d44:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	88db      	ldrh	r3, [r3, #6]
 8001d50:	461a      	mov	r2, r3
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	4313      	orrs	r3, r2
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	899b      	ldrh	r3, [r3, #12]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001d6e:	4013      	ands	r3, r2
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	889a      	ldrh	r2, [r3, #4]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	891b      	ldrh	r3, [r3, #8]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8a9b      	ldrh	r3, [r3, #20]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001da4:	4013      	ands	r3, r2
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	899b      	ldrh	r3, [r3, #12]
 8001dac:	461a      	mov	r2, r3
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	4313      	orrs	r3, r2
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001dbc:	f107 0308 	add.w	r3, r7, #8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd27 	bl	8001814 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4a2e      	ldr	r2, [pc, #184]	; (8001e84 <USART_Init+0x16c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d102      	bne.n	8001dd4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	e001      	b.n	8001dd8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	899b      	ldrh	r3, [r3, #12]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da0c      	bge.n	8001dfe <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	441a      	add	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfc:	e00b      	b.n	8001e16 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <USART_Init+0x170>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	2264      	movs	r2, #100	; 0x64
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0c      	bge.n	8001e5a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	3332      	adds	r3, #50	; 0x32
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <USART_Init+0x170>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e54:	4313      	orrs	r3, r2
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	e00b      	b.n	8001e72 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <USART_Init+0x170>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	811a      	strh	r2, [r3, #8]
}
 8001e7a:	bf00      	nop
 8001e7c:	3730      	adds	r7, #48	; 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40013800 	.word	0x40013800
 8001e88:	51eb851f 	.word	0x51eb851f

08001e8c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	899b      	ldrh	r3, [r3, #12]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001eae:	e007      	b.n	8001ec0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	899b      	ldrh	r3, [r3, #12]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	819a      	strh	r2, [r3, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001f00:	2201      	movs	r2, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d103      	bne.n	8001f18 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	330c      	adds	r3, #12
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e009      	b.n	8001f2c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d103      	bne.n	8001f26 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3310      	adds	r3, #16
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e002      	b.n	8001f2c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	6811      	ldr	r1, [r2, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001f3e:	e006      	b.n	8001f4e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	43d2      	mvns	r2, r2
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
    COOLANT_MIST_DDR |= (1 << COOLANT_MIST_BIT);
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2008      	movs	r0, #8
 8001f62:	f7ff fd07 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f66:	2303      	movs	r3, #3
 8001f68:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001f6e:	2310      	movs	r3, #16
 8001f70:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <coolant_init+0x50>)
 8001f78:	f7ff fa92 	bl	80014a0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f7ff fcf8 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f84:	2303      	movs	r3, #3
 8001f86:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001f88:	2310      	movs	r3, #16
 8001f8a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <coolant_init+0x50>)
 8001f96:	f7ff fa83 	bl	80014a0 <GPIO_Init>
#endif
  coolant_stop();
 8001f9a:	f000 f82b 	bl	8001ff4 <coolant_stop>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40010c00 	.word	0x40010c00

08001fac <coolant_get_state>:


// Returns current coolant output state. Overrides may alter it from programmed state.
uint8_t coolant_get_state()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]
#else
		GPIO_ReadOutputData(COOLANT_FLOOD_PORT)
#endif
		,(1 << COOLANT_FLOOD_BIT))) {
  #else
    if (bit_istrue(
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <coolant_get_state+0x44>)
 8001fb8:	f7ff fb3a 	bl	8001630 <GPIO_ReadOutputData>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <coolant_get_state+0x22>
#else
		GPIO_ReadOutputData(COOLANT_FLOOD_PORT)
#endif
		,(1 << COOLANT_FLOOD_BIT))) {
  #endif
    cl_state |= COOLANT_STATE_FLOOD;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
#else
		  GPIO_ReadOutputData(COOLANT_MIST_PORT)
#endif
		  ,(1 << COOLANT_MIST_BIT))) {
    #else
      if (bit_istrue(
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <coolant_get_state+0x44>)
 8001fd0:	f7ff fb2e 	bl	8001630 <GPIO_ReadOutputData>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <coolant_get_state+0x3a>
#else
		  GPIO_ReadOutputData(COOLANT_MIST_PORT)
#endif
		  ,(1 << COOLANT_MIST_BIT))) {
    #endif
      cl_state |= COOLANT_STATE_MIST;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	71fb      	strb	r3, [r7, #7]
    }
  #endif
#endif
  return(cl_state);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010c00 	.word	0x40010c00

08001ff4 <coolant_stop>:


// Directly called by coolant_init(), coolant_set_state(), and mc_reset(), which can be at
// an interrupt-level. No report flag set, but only called by routines that don't need it.
void coolant_stop()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ff8:	2110      	movs	r1, #16
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <coolant_stop+0x18>)
 8001ffc:	f7ff fb32 	bl	8001664 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8002000:	2108      	movs	r1, #8
 8002002:	4802      	ldr	r0, [pc, #8]	; (800200c <coolant_stop+0x18>)
 8002004:	f7ff fb2e 	bl	8001664 <GPIO_ResetBits>
#endif
    #endif
  #endif
#endif
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010c00 	.word	0x40010c00

08002010 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if (sys.abort) { return; } // Block during abort.  
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <coolant_set_state+0x50>)
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d11a      	bne.n	8002058 <coolant_set_state+0x48>
  
  if (mode == COOLANT_DISABLE) {
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <coolant_set_state+0x1e>
  
    coolant_stop(); 
 8002028:	f7ff ffe4 	bl	8001ff4 <coolant_stop>
 800202c:	e010      	b.n	8002050 <coolant_set_state+0x40>
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <coolant_set_state+0x30>
#endif
      #else
#ifdef AVRTARGET
		COOLANT_FLOOD_PORT |= (1 << COOLANT_FLOOD_BIT);
#else
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8002038:	2110      	movs	r1, #16
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <coolant_set_state+0x54>)
 800203c:	f7ff fb04 	bl	8001648 <GPIO_SetBits>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da03      	bge.n	8002050 <coolant_set_state+0x40>
#endif
        #else
#ifdef AVRTARGET
		  COOLANT_MIST_PORT |= (1 << COOLANT_MIST_BIT);
#else
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8002048:	2108      	movs	r1, #8
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <coolant_set_state+0x54>)
 800204c:	f7ff fafc 	bl	8001648 <GPIO_SetBits>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <coolant_set_state+0x50>)
 8002052:	2200      	movs	r2, #0
 8002054:	731a      	strb	r2, [r3, #12]
 8002056:	e000      	b.n	800205a <coolant_set_state+0x4a>
  if (sys.abort) { return; } // Block during abort.  
 8002058:	bf00      	nop
}
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000efc 	.word	0x20000efc
 8002064:	40010c00 	.word	0x40010c00

08002068 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <coolant_sync+0x28>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d006      	beq.n	8002088 <coolant_sync+0x20>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 800207a:	f004 f83b 	bl	80060f4 <protocol_buffer_synchronize>
  coolant_set_state(mode);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ffc5 	bl	8002010 <coolant_set_state>
 8002086:	e000      	b.n	800208a <coolant_sync+0x22>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002088:	bf00      	nop
}
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000efc 	.word	0x20000efc

08002094 <eeprom_flush>:
#endif

#ifdef STM32F103C8
#ifndef NOEEPROMSUPPORT
void eeprom_flush()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
	uint32_t nAddress = EEPROM_START_ADDRESS;
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <eeprom_flush+0x90>)
 800209c:	60fb      	str	r3, [r7, #12]
	uint16_t *pBuffer = (uint16_t *)EE_Buffer;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <eeprom_flush+0x94>)
 80020a0:	60bb      	str	r3, [r7, #8]
	uint16_t nSize = PAGE_SIZE;
 80020a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a6:	80fb      	strh	r3, [r7, #6]

	FLASH_Status FlashStatus = FLASH_COMPLETE;
 80020a8:	2304      	movs	r3, #4
 80020aa:	717b      	strb	r3, [r7, #5]

	/* Erase Page0 */
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 80020ac:	481d      	ldr	r0, [pc, #116]	; (8002124 <eeprom_flush+0x90>)
 80020ae:	f7ff f94b 	bl	8001348 <FLASH_ErasePage>
 80020b2:	4603      	mov	r3, r0
 80020b4:	717b      	strb	r3, [r7, #5]

	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != FLASH_COMPLETE)
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d12f      	bne.n	800211c <eeprom_flush+0x88>
	{
		return;
	}

	while (nSize > 0)
 80020bc:	e02a      	b.n	8002114 <eeprom_flush+0x80>
	{
		if (*pBuffer != 0xffff)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d008      	beq.n	80020dc <eeprom_flush+0x48>
		{
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1c9a      	adds	r2, r3, #2
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff f969 	bl	80013ac <FLASH_ProgramHalfWord>
 80020da:	e002      	b.n	80020e2 <eeprom_flush+0x4e>
		}
		else
		{
			pBuffer++;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3302      	adds	r3, #2
 80020e0:	60bb      	str	r3, [r7, #8]
		}
		if (*pBuffer != 0xffff)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d009      	beq.n	8002102 <eeprom_flush+0x6e>
		{
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1c98      	adds	r0, r3, #2
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c9a      	adds	r2, r3, #2
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7ff f956 	bl	80013ac <FLASH_ProgramHalfWord>
 8002100:	e002      	b.n	8002108 <eeprom_flush+0x74>
		}
		else
		{
			pBuffer++;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3302      	adds	r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
		}
		nSize -= 4;
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	3b04      	subs	r3, #4
 800210c:	80fb      	strh	r3, [r7, #6]
		nAddress += 4;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
	while (nSize > 0)
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1d1      	bne.n	80020be <eeprom_flush+0x2a>
 800211a:	e000      	b.n	800211e <eeprom_flush+0x8a>
		return;
 800211c:	bf00      	nop
	}
}
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0801fc00 	.word	0x0801fc00
 8002128:	20000a74 	.word	0x20000a74

0800212c <eeprom_init>:
void eeprom_init()
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
	uint16_t VarIdx = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	80fb      	strh	r3, [r7, #6]
	uint8_t *pTmp = EE_Buffer;
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <eeprom_init+0x6c>)
 8002138:	603b      	str	r3, [r7, #0]

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	80fb      	strh	r3, [r7, #6]
 800213e:	e00d      	b.n	800215c <eeprom_init+0x30>
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	1c53      	adds	r3, r2, #1
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800214c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	7013      	strb	r3, [r2, #0]
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	3301      	adds	r3, #1
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d3ed      	bcc.n	8002140 <eeprom_init+0x14>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <eeprom_init+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b0a      	cmp	r3, #10
 800216a:	d010      	beq.n	800218e <eeprom_init+0x62>
	{
		pTmp = EE_Buffer;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <eeprom_init+0x6c>)
 800216e:	603b      	str	r3, [r7, #0]

		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002170:	2300      	movs	r3, #0
 8002172:	80fb      	strh	r3, [r7, #6]
 8002174:	e007      	b.n	8002186 <eeprom_init+0x5a>
		{
			*pTmp++ = 0xFF;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	603a      	str	r2, [r7, #0]
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	701a      	strb	r2, [r3, #0]
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	3301      	adds	r3, #1
 8002184:	80fb      	strh	r3, [r7, #6]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218c:	d3f3      	bcc.n	8002176 <eeprom_init+0x4a>
		}
	}
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000a74 	.word	0x20000a74

0800219c <eeprom_get_char>:
 *
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <eeprom_get_char+0x1c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
#endif
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000a74 	.word	0x20000a74

080021bc <eeprom_put_char>:
 *
 *  \param  addr  EEPROM address to write to.
 *  \param  new_value  New EEPROM value.
 */
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <eeprom_put_char+0x20>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	701a      	strb	r2, [r3, #0]
#endif
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	20000a74 	.word	0x20000a74

080021e0 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  unsigned char checksum = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	75fb      	strb	r3, [r7, #23]
  for(; size > 0; size--) { 
 80021f0:	e01e      	b.n	8002230 <memcpy_to_eeprom_with_checksum+0x50>
    checksum = (checksum << 1) || (checksum >> 7);
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <memcpy_to_eeprom_with_checksum+0x22>
 80021fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da01      	bge.n	8002206 <memcpy_to_eeprom_with_checksum+0x26>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <memcpy_to_eeprom_with_checksum+0x28>
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    checksum += *source;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	4413      	add	r3, r2
 8002212:	75fb      	strb	r3, [r7, #23]
    eeprom_put_char(destination++, *(source++)); 
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	1c53      	adds	r3, r2, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f7ff ffc9 	bl	80021bc <eeprom_put_char>
  for(; size > 0; size--) { 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3b01      	subs	r3, #1
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1dd      	bne.n	80021f2 <memcpy_to_eeprom_with_checksum+0x12>
  }
  eeprom_put_char(destination, checksum);
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ffbe 	bl	80021bc <eeprom_put_char>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
 8002240:	f7ff ff28 	bl	8002094 <eeprom_flush>
#endif
#endif
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  unsigned char data, checksum = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]
  for(; size > 0; size--) { 
 800225c:	e01f      	b.n	800229e <memcpy_from_eeprom_with_checksum+0x52>
    data = eeprom_get_char(source++);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	60ba      	str	r2, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff99 	bl	800219c <eeprom_get_char>
 800226a:	4603      	mov	r3, r0
 800226c:	75bb      	strb	r3, [r7, #22]
    checksum = (checksum << 1) || (checksum >> 7);
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <memcpy_from_eeprom_with_checksum+0x32>
 8002276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da01      	bge.n	8002282 <memcpy_from_eeprom_with_checksum+0x36>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <memcpy_from_eeprom_with_checksum+0x38>
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    checksum += data;    
 8002286:	7dfa      	ldrb	r2, [r7, #23]
 8002288:	7dbb      	ldrb	r3, [r7, #22]
 800228a:	4413      	add	r3, r2
 800228c:	75fb      	strb	r3, [r7, #23]
    *(destination++) = data; 
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60fa      	str	r2, [r7, #12]
 8002294:	7dba      	ldrb	r2, [r7, #22]
 8002296:	701a      	strb	r2, [r3, #0]
  for(; size > 0; size--) { 
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1dc      	bne.n	800225e <memcpy_from_eeprom_with_checksum+0x12>
  }
  return(checksum == eeprom_get_char(source));
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f7ff ff79 	bl	800219c <eeprom_get_char>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  memset(&gc_state, 0, sizeof(parser_state_t));
 80022c8:	2244      	movs	r2, #68	; 0x44
 80022ca:	2100      	movs	r1, #0
 80022cc:	4808      	ldr	r0, [pc, #32]	; (80022f0 <gc_init+0x2c>)
 80022ce:	f008 f992 	bl	800a5f6 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <gc_init+0x2c>)
 80022d4:	799b      	ldrb	r3, [r3, #6]
 80022d6:	4907      	ldr	r1, [pc, #28]	; (80022f4 <gc_init+0x30>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 fd2d 	bl	8007d38 <settings_read_coord_data>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <gc_init+0x26>
    report_status_message(STATUS_SETTING_READ_FAIL);
 80022e4:	2007      	movs	r0, #7
 80022e6:	f004 fbdb 	bl	8006aa0 <report_status_message>
  }
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000e74 	.word	0x20000e74
 80022f4:	20000e9c 	.word	0x20000e9c

080022f8 <gc_sync_position>:


// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 80022fc:	4902      	ldr	r1, [pc, #8]	; (8002308 <gc_sync_position+0x10>)
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <gc_sync_position+0x14>)
 8002300:	f007 ffa0 	bl	800a244 <system_convert_array_steps_to_mpos>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000f20 	.word	0x20000f20
 800230c:	20000e90 	.word	0x20000e90

08002310 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b09c      	sub	sp, #112	; 0x70
 8002314:	af06      	add	r7, sp, #24
 8002316:	6078      	str	r0, [r7, #4]
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	2100      	movs	r1, #0
 800231c:	48e0      	ldr	r0, [pc, #896]	; (80026a0 <gc_execute_line+0x390>)
 800231e:	f008 f96a 	bl	800a5f6 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8002322:	4bdf      	ldr	r3, [pc, #892]	; (80026a0 <gc_execute_line+0x390>)
 8002324:	49df      	ldr	r1, [pc, #892]	; (80026a4 <gc_execute_line+0x394>)
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	460b      	mov	r3, r1
 800232a:	cb03      	ldmia	r3!, {r0, r1}
 800232c:	6010      	str	r0, [r2, #0]
 800232e:	6051      	str	r1, [r2, #4]
 8002330:	8819      	ldrh	r1, [r3, #0]
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	8111      	strh	r1, [r2, #8]
 8002336:	7293      	strb	r3, [r2, #10]

  uint8_t axis_command = AXIS_COMMAND_NONE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t axis_0, axis_1, axis_linear;
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

  // Initialize bitflag tracking variables for axis indices compatible operations.
  uint8_t axis_words = 0; // XYZ tracking
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t ijk_words = 0; // IJK tracking
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

  // Initialize command and value words and parser flags variables.
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
 8002350:	2300      	movs	r3, #0
 8002352:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t value_words = 0; // Tracks value words.
 8002356:	2300      	movs	r3, #0
 8002358:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b24      	cmp	r3, #36	; 0x24
 8002368:	d10b      	bne.n	8002382 <gc_execute_line+0x72>
						// Set G1 and G94 enforced modes to ensure accurate error checks.
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 800236a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002376:	4bca      	ldr	r3, [pc, #808]	; (80026a0 <gc_execute_line+0x390>)
 8002378:	2201      	movs	r2, #1
 800237a:	705a      	strb	r2, [r3, #1]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 800237c:	4bc8      	ldr	r3, [pc, #800]	; (80026a0 <gc_execute_line+0x390>)
 800237e:	2200      	movs	r2, #0
 8002380:	709a      	strb	r2, [r3, #2]

  uint8_t word_bit; // Bit-value for assigning tracking variables
  uint8_t char_counter;
  char letter;
  float value;
  uint8_t int_value = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  uint16_t mantissa = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 800238e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <gc_execute_line+0x92>
 800239a:	2303      	movs	r3, #3
 800239c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80023a0:	e3ee      	b.n	8002b80 <gc_execute_line+0x870>
  else { char_counter = 0; }
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 80023a8:	e3ea      	b.n	8002b80 <gc_execute_line+0x870>

    // Import the next g-code word, expecting a letter followed by a value. Otherwise, error out.
    letter = line[char_counter];
 80023aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 80023ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d903      	bls.n	80023ca <gc_execute_line+0xba>
 80023c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023c6:	2b5a      	cmp	r3, #90	; 0x5a
 80023c8:	d902      	bls.n	80023d0 <gc_execute_line+0xc0>
 80023ca:	2301      	movs	r3, #1
 80023cc:	f001 bc47 	b.w	8003c5e <gc_execute_line+0x194e>
    char_counter++;
 80023d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80023dc:	f107 0220 	add.w	r2, r7, #32
 80023e0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f002 fce6 	bl	8004db8 <read_float>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <gc_execute_line+0xe8>
 80023f2:	2302      	movs	r3, #2
 80023f4:	f001 bc33 	b.w	8003c5e <gc_execute_line+0x194e>
    // accurate than the NIST gcode requirement of x10 when used for commands, but not quite
    // accurate enough for value words that require integers to within 0.0001. This should be
    // a good enough comprimise and catch most all non-integer errors. To make it compliant,
    // we would simply need to change the mantissa to int16, but this add compiled flash space.
    // Maybe update this later.
    int_value = truncf(value);
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f008 fa1a 	bl	800a834 <truncf>
 8002400:	4603      	mov	r3, r0
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fe56 	bl	80010b4 <__aeabi_f2uiz>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 800240e:	6a3c      	ldr	r4, [r7, #32]
 8002410:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fbf7 	bl	8000c08 <__aeabi_i2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4619      	mov	r1, r3
 800241e:	4620      	mov	r0, r4
 8002420:	f7fe fb3c 	bl	8000a9c <__aeabi_fsub>
 8002424:	4603      	mov	r3, r0
 8002426:	49a0      	ldr	r1, [pc, #640]	; (80026a8 <gc_execute_line+0x398>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc41 	bl	8000cb0 <__aeabi_fmul>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	f008 f99d 	bl	800a770 <lroundf>
 8002436:	4603      	mov	r3, r0
 8002438:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    // NOTE: Rounding must be used to catch small floating point errors.

    // Check if the g-code word is supported or errors due to modal group violations or has
    // been repeated in the g-code block. If ok, update the command or record its value.
    switch(letter) {
 800243c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002440:	2b47      	cmp	r3, #71	; 0x47
 8002442:	d003      	beq.n	800244c <gc_execute_line+0x13c>
 8002444:	2b4d      	cmp	r3, #77	; 0x4d
 8002446:	f000 81ea 	beq.w	800281e <gc_execute_line+0x50e>
 800244a:	e299      	b.n	8002980 <gc_execute_line+0x670>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'G' command and its modal group
        switch(int_value) {
 800244c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002450:	2b5e      	cmp	r3, #94	; 0x5e
 8002452:	f200 81bb 	bhi.w	80027cc <gc_execute_line+0x4bc>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <gc_execute_line+0x14c>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800264d 	.word	0x0800264d
 8002460:	0800264d 	.word	0x0800264d
 8002464:	0800264d 	.word	0x0800264d
 8002468:	0800264d 	.word	0x0800264d
 800246c:	080025f5 	.word	0x080025f5
 8002470:	080027cd 	.word	0x080027cd
 8002474:	080027cd 	.word	0x080027cd
 8002478:	080027cd 	.word	0x080027cd
 800247c:	080027cd 	.word	0x080027cd
 8002480:	080027cd 	.word	0x080027cd
 8002484:	080025d9 	.word	0x080025d9
 8002488:	080027cd 	.word	0x080027cd
 800248c:	080027cd 	.word	0x080027cd
 8002490:	080027cd 	.word	0x080027cd
 8002494:	080027cd 	.word	0x080027cd
 8002498:	080027cd 	.word	0x080027cd
 800249c:	080027cd 	.word	0x080027cd
 80024a0:	080026d5 	.word	0x080026d5
 80024a4:	080026d5 	.word	0x080026d5
 80024a8:	080026d5 	.word	0x080026d5
 80024ac:	0800273f 	.word	0x0800273f
 80024b0:	0800273f 	.word	0x0800273f
 80024b4:	080027cd 	.word	0x080027cd
 80024b8:	080027cd 	.word	0x080027cd
 80024bc:	080027cd 	.word	0x080027cd
 80024c0:	080027cd 	.word	0x080027cd
 80024c4:	080027cd 	.word	0x080027cd
 80024c8:	080027cd 	.word	0x080027cd
 80024cc:	080025d9 	.word	0x080025d9
 80024d0:	080027cd 	.word	0x080027cd
 80024d4:	080025d9 	.word	0x080025d9
 80024d8:	080027cd 	.word	0x080027cd
 80024dc:	080027cd 	.word	0x080027cd
 80024e0:	080027cd 	.word	0x080027cd
 80024e4:	080027cd 	.word	0x080027cd
 80024e8:	080027cd 	.word	0x080027cd
 80024ec:	080027cd 	.word	0x080027cd
 80024f0:	080027cd 	.word	0x080027cd
 80024f4:	0800264d 	.word	0x0800264d
 80024f8:	080027cd 	.word	0x080027cd
 80024fc:	08002755 	.word	0x08002755
 8002500:	080027cd 	.word	0x080027cd
 8002504:	080027cd 	.word	0x080027cd
 8002508:	0800275d 	.word	0x0800275d
 800250c:	080027cd 	.word	0x080027cd
 8002510:	080027cd 	.word	0x080027cd
 8002514:	080027cd 	.word	0x080027cd
 8002518:	080027cd 	.word	0x080027cd
 800251c:	080027cd 	.word	0x080027cd
 8002520:	0800275d 	.word	0x0800275d
 8002524:	080027cd 	.word	0x080027cd
 8002528:	080027cd 	.word	0x080027cd
 800252c:	080027cd 	.word	0x080027cd
 8002530:	080025f5 	.word	0x080025f5
 8002534:	080027a5 	.word	0x080027a5
 8002538:	080027a5 	.word	0x080027a5
 800253c:	080027a5 	.word	0x080027a5
 8002540:	080027a5 	.word	0x080027a5
 8002544:	080027a5 	.word	0x080027a5
 8002548:	080027a5 	.word	0x080027a5
 800254c:	080027cd 	.word	0x080027cd
 8002550:	080027b9 	.word	0x080027b9
 8002554:	080027cd 	.word	0x080027cd
 8002558:	080027cd 	.word	0x080027cd
 800255c:	080027cd 	.word	0x080027cd
 8002560:	080027cd 	.word	0x080027cd
 8002564:	080027cd 	.word	0x080027cd
 8002568:	080027cd 	.word	0x080027cd
 800256c:	080027cd 	.word	0x080027cd
 8002570:	080027cd 	.word	0x080027cd
 8002574:	080027cd 	.word	0x080027cd
 8002578:	080027cd 	.word	0x080027cd
 800257c:	080027cd 	.word	0x080027cd
 8002580:	080027cd 	.word	0x080027cd
 8002584:	080027cd 	.word	0x080027cd
 8002588:	080027cd 	.word	0x080027cd
 800258c:	080027cd 	.word	0x080027cd
 8002590:	080027cd 	.word	0x080027cd
 8002594:	080027cd 	.word	0x080027cd
 8002598:	080027cd 	.word	0x080027cd
 800259c:	08002661 	.word	0x08002661
 80025a0:	080027cd 	.word	0x080027cd
 80025a4:	080027cd 	.word	0x080027cd
 80025a8:	080027cd 	.word	0x080027cd
 80025ac:	080027cd 	.word	0x080027cd
 80025b0:	080027cd 	.word	0x080027cd
 80025b4:	080027cd 	.word	0x080027cd
 80025b8:	080027cd 	.word	0x080027cd
 80025bc:	080027cd 	.word	0x080027cd
 80025c0:	080027cd 	.word	0x080027cd
 80025c4:	080026e9 	.word	0x080026e9
 80025c8:	080026e9 	.word	0x080026e9
 80025cc:	080025d9 	.word	0x080025d9
 80025d0:	08002729 	.word	0x08002729
 80025d4:	08002729 	.word	0x08002729
          case 10: case 28: case 30: case 92:
            // Check for G10/28/30/92 being called with G0/1/2/3/38 on same block.
            // * G43.1 is also an axis command but is not explicitly defined this way.
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 80025d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <gc_execute_line+0x2e4>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80025e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <gc_execute_line+0x2de>
 80025e8:	2318      	movs	r3, #24
 80025ea:	f001 bb38 	b.w	8003c5e <gc_execute_line+0x194e>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            }
            // No break. Continues to next line.
          case 4: case 53:
            word_bit = MODAL_GROUP_G0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.non_modal_command = int_value;
 80025fa:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <gc_execute_line+0x390>)
 80025fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002600:	7013      	strb	r3, [r2, #0]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002602:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002606:	2b1c      	cmp	r3, #28
 8002608:	d008      	beq.n	800261c <gc_execute_line+0x30c>
 800260a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800260e:	2b1e      	cmp	r3, #30
 8002610:	d004      	beq.n	800261c <gc_execute_line+0x30c>
 8002612:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002616:	2b5c      	cmp	r3, #92	; 0x5c
 8002618:	f040 80db 	bne.w	80027d2 <gc_execute_line+0x4c2>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 800261c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <gc_execute_line+0x322>
 8002624:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d002      	beq.n	8002632 <gc_execute_line+0x322>
 800262c:	2314      	movs	r3, #20
 800262e:	f001 bb16 	b.w	8003c5e <gc_execute_line+0x194e>
              gc_block.non_modal_command += mantissa;
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <gc_execute_line+0x390>)
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <gc_execute_line+0x390>)
 8002642:	701a      	strb	r2, [r3, #0]
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
 8002644:	2300      	movs	r3, #0
 8002646:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }                
            break;
 800264a:	e0c2      	b.n	80027d2 <gc_execute_line+0x4c2>
          case 0: case 1: case 2: case 3: case 38:
            // Check for G0/1/2/3/38 being called with G10/28/30/92 on same block.
            // * G43.1 is also an axis command but is not explicitly defined this way.
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800264c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <gc_execute_line+0x34a>
 8002654:	2318      	movs	r3, #24
 8002656:	f001 bb02 	b.w	8003c5e <gc_execute_line+0x194e>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 800265a:	2302      	movs	r3, #2
 800265c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            // No break. Continues to next line.
          case 80:
            word_bit = MODAL_GROUP_G1;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.motion = int_value;
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <gc_execute_line+0x390>)
 8002668:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800266c:	7053      	strb	r3, [r2, #1]
            if (int_value == 38){
 800266e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002672:	2b26      	cmp	r3, #38	; 0x26
 8002674:	f040 80af 	bne.w	80027d6 <gc_execute_line+0x4c6>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800267c:	2b14      	cmp	r3, #20
 800267e:	d015      	beq.n	80026ac <gc_execute_line+0x39c>
 8002680:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002684:	2b1e      	cmp	r3, #30
 8002686:	d011      	beq.n	80026ac <gc_execute_line+0x39c>
 8002688:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800268c:	2b28      	cmp	r3, #40	; 0x28
 800268e:	d00d      	beq.n	80026ac <gc_execute_line+0x39c>
 8002690:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002694:	2b32      	cmp	r3, #50	; 0x32
 8002696:	d009      	beq.n	80026ac <gc_execute_line+0x39c>
                FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 8002698:	2314      	movs	r3, #20
 800269a:	f001 bae0 	b.w	8003c5e <gc_execute_line+0x194e>
 800269e:	bf00      	nop
 80026a0:	20000eb8 	.word	0x20000eb8
 80026a4:	20000e74 	.word	0x20000e74
 80026a8:	42c80000 	.word	0x42c80000
              }
              gc_block.modal.motion += (mantissa/10)+100;
 80026ac:	4bd2      	ldr	r3, [pc, #840]	; (80029f8 <gc_execute_line+0x6e8>)
 80026ae:	785a      	ldrb	r2, [r3, #1]
 80026b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026b4:	49d1      	ldr	r1, [pc, #836]	; (80029fc <gc_execute_line+0x6ec>)
 80026b6:	fba1 1303 	umull	r1, r3, r1, r3
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3364      	adds	r3, #100	; 0x64
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4bcb      	ldr	r3, [pc, #812]	; (80029f8 <gc_execute_line+0x6e8>)
 80026ca:	705a      	strb	r2, [r3, #1]
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }  
            break;
 80026d2:	e080      	b.n	80027d6 <gc_execute_line+0x4c6>
          case 17: case 18: case 19:
            word_bit = MODAL_GROUP_G2;
 80026d4:	2302      	movs	r3, #2
 80026d6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.plane_select = int_value - 17;
 80026da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026de:	3b11      	subs	r3, #17
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4bc5      	ldr	r3, [pc, #788]	; (80029f8 <gc_execute_line+0x6e8>)
 80026e4:	715a      	strb	r2, [r3, #5]
            break;
 80026e6:	e079      	b.n	80027dc <gc_execute_line+0x4cc>
          case 90: case 91:
            if (mantissa == 0) {
 80026e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <gc_execute_line+0x3f4>
              word_bit = MODAL_GROUP_G3;
 80026f0:	2303      	movs	r3, #3
 80026f2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              gc_block.modal.distance = int_value - 90;
 80026f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026fa:	3b5a      	subs	r3, #90	; 0x5a
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4bbe      	ldr	r3, [pc, #760]	; (80029f8 <gc_execute_line+0x6e8>)
 8002700:	711a      	strb	r2, [r3, #4]
              word_bit = MODAL_GROUP_G4;
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
              // Otherwise, arc IJK incremental mode is default. G91.1 does nothing.
            }
            break;
 8002702:	e06b      	b.n	80027dc <gc_execute_line+0x4cc>
              word_bit = MODAL_GROUP_G4;
 8002704:	2304      	movs	r3, #4
 8002706:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 800270a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800270e:	2b0a      	cmp	r3, #10
 8002710:	d103      	bne.n	800271a <gc_execute_line+0x40a>
 8002712:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002716:	2b5a      	cmp	r3, #90	; 0x5a
 8002718:	d102      	bne.n	8002720 <gc_execute_line+0x410>
 800271a:	2314      	movs	r3, #20
 800271c:	f001 ba9f 	b.w	8003c5e <gc_execute_line+0x194e>
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
 8002720:	2300      	movs	r3, #0
 8002722:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 8002726:	e059      	b.n	80027dc <gc_execute_line+0x4cc>
          case 93: case 94:
            word_bit = MODAL_GROUP_G5;
 8002728:	2305      	movs	r3, #5
 800272a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.feed_rate = 94 - int_value;
 800272e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002732:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4baf      	ldr	r3, [pc, #700]	; (80029f8 <gc_execute_line+0x6e8>)
 800273a:	709a      	strb	r2, [r3, #2]
            break;
 800273c:	e04e      	b.n	80027dc <gc_execute_line+0x4cc>
          case 20: case 21:
            word_bit = MODAL_GROUP_G6;
 800273e:	2306      	movs	r3, #6
 8002740:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.units = 21 - int_value;
 8002744:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002748:	f1c3 0315 	rsb	r3, r3, #21
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4baa      	ldr	r3, [pc, #680]	; (80029f8 <gc_execute_line+0x6e8>)
 8002750:	70da      	strb	r2, [r3, #3]
            break;
 8002752:	e043      	b.n	80027dc <gc_execute_line+0x4cc>
          case 40:
            word_bit = MODAL_GROUP_G7;
 8002754:	2307      	movs	r3, #7
 8002756:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            // NOTE: Not required since cutter radius compensation is always disabled. Only here
            // to support G40 commands that often appear in g-code program headers to setup defaults.
            // gc_block.modal.cutter_comp = CUTTER_COMP_DISABLE; // G40
            break;
 800275a:	e03f      	b.n	80027dc <gc_execute_line+0x4cc>
          case 43: case 49:
            word_bit = MODAL_GROUP_G8;
 800275c:	2308      	movs	r3, #8
 800275e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            // NOTE: The NIST g-code standard vaguely states that when a tool length offset is changed,
            // there cannot be any axis motion or coordinate offsets updated. Meaning G43, G43.1, and G49
            // all are explicit axis commands, regardless if they require axis words or not.
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8002762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <gc_execute_line+0x460>
 800276a:	2318      	movs	r3, #24
 800276c:	f001 ba77 	b.w	8003c5e <gc_execute_line+0x194e>
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002770:	2303      	movs	r3, #3
 8002772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (int_value == 49) { // G49
 8002776:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800277a:	2b31      	cmp	r3, #49	; 0x31
 800277c:	d103      	bne.n	8002786 <gc_execute_line+0x476>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 800277e:	4b9e      	ldr	r3, [pc, #632]	; (80029f8 <gc_execute_line+0x6e8>)
 8002780:	2200      	movs	r2, #0
 8002782:	719a      	strb	r2, [r3, #6]
 8002784:	e00a      	b.n	800279c <gc_execute_line+0x48c>
            } else if (mantissa == 10) { // G43.1
 8002786:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800278a:	2b0a      	cmp	r3, #10
 800278c:	d103      	bne.n	8002796 <gc_execute_line+0x486>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 800278e:	4b9a      	ldr	r3, [pc, #616]	; (80029f8 <gc_execute_line+0x6e8>)
 8002790:	2201      	movs	r2, #1
 8002792:	719a      	strb	r2, [r3, #6]
 8002794:	e002      	b.n	800279c <gc_execute_line+0x48c>
            } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported G43.x command]
 8002796:	2314      	movs	r3, #20
 8002798:	f001 ba61 	b.w	8003c5e <gc_execute_line+0x194e>
            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800279c:	2300      	movs	r3, #0
 800279e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 80027a2:	e01b      	b.n	80027dc <gc_execute_line+0x4cc>
          case 54: case 55: case 56: case 57: case 58: case 59:
            // NOTE: G59.x are not supported. (But their int_values would be 60, 61, and 62.)
            word_bit = MODAL_GROUP_G12;
 80027a4:	2309      	movs	r3, #9
 80027a6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 80027aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80027ae:	3b36      	subs	r3, #54	; 0x36
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b91      	ldr	r3, [pc, #580]	; (80029f8 <gc_execute_line+0x6e8>)
 80027b4:	71da      	strb	r2, [r3, #7]
            break;
 80027b6:	e011      	b.n	80027dc <gc_execute_line+0x4cc>
          case 61:
            word_bit = MODAL_GROUP_G13;
 80027b8:	230a      	movs	r3, #10
 80027ba:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 80027be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <gc_execute_line+0x4ca>
 80027c6:	2314      	movs	r3, #20
 80027c8:	f001 ba49 	b.w	8003c5e <gc_execute_line+0x194e>
            // gc_block.modal.control = CONTROL_MODE_EXACT_PATH; // G61
            break;
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G command]
 80027cc:	2314      	movs	r3, #20
 80027ce:	f001 ba46 	b.w	8003c5e <gc_execute_line+0x194e>
            break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <gc_execute_line+0x4cc>
            break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <gc_execute_line+0x4cc>
            break;
 80027da:	bf00      	nop
        }
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80027dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <gc_execute_line+0x4da>
 80027e4:	2317      	movs	r3, #23
 80027e6:	f001 ba3a 	b.w	8003c5e <gc_execute_line+0x194e>
        // Check for more than one command per modal group violations in the current block
        // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80027ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80027ee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80027f2:	fa42 f303 	asr.w	r3, r2, r3
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <gc_execute_line+0x4f4>
 80027fe:	2315      	movs	r3, #21
 8002800:	f001 ba2d 	b.w	8003c5e <gc_execute_line+0x194e>
        command_words |= bit(word_bit);
 8002804:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002808:	2201      	movs	r2, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	b21a      	sxth	r2, r3
 8002810:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002814:	4313      	orrs	r3, r2
 8002816:	b21b      	sxth	r3, r3
 8002818:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        break;
 800281c:	e1b0      	b.n	8002b80 <gc_execute_line+0x870>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'M' command and its modal group
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 800281e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <gc_execute_line+0x51c>
 8002826:	2317      	movs	r3, #23
 8002828:	f001 ba19 	b.w	8003c5e <gc_execute_line+0x194e>
        switch(int_value) {
 800282c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002830:	2b1e      	cmp	r3, #30
 8002832:	f200 8088 	bhi.w	8002946 <gc_execute_line+0x636>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <gc_execute_line+0x52c>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	080028b9 	.word	0x080028b9
 8002840:	080028b9 	.word	0x080028b9
 8002844:	080028b9 	.word	0x080028b9
 8002848:	080028e3 	.word	0x080028e3
 800284c:	080028e3 	.word	0x080028e3
 8002850:	080028e3 	.word	0x080028e3
 8002854:	08002947 	.word	0x08002947
 8002858:	08002915 	.word	0x08002915
 800285c:	08002915 	.word	0x08002915
 8002860:	08002915 	.word	0x08002915
 8002864:	08002947 	.word	0x08002947
 8002868:	08002947 	.word	0x08002947
 800286c:	08002947 	.word	0x08002947
 8002870:	08002947 	.word	0x08002947
 8002874:	08002947 	.word	0x08002947
 8002878:	08002947 	.word	0x08002947
 800287c:	08002947 	.word	0x08002947
 8002880:	08002947 	.word	0x08002947
 8002884:	08002947 	.word	0x08002947
 8002888:	08002947 	.word	0x08002947
 800288c:	08002947 	.word	0x08002947
 8002890:	08002947 	.word	0x08002947
 8002894:	08002947 	.word	0x08002947
 8002898:	08002947 	.word	0x08002947
 800289c:	08002947 	.word	0x08002947
 80028a0:	08002947 	.word	0x08002947
 80028a4:	08002947 	.word	0x08002947
 80028a8:	08002947 	.word	0x08002947
 80028ac:	08002947 	.word	0x08002947
 80028b0:	08002947 	.word	0x08002947
 80028b4:	080028b9 	.word	0x080028b9
          case 0: case 1: case 2: case 30:
            word_bit = MODAL_GROUP_M4;
 80028b8:	230b      	movs	r3, #11
 80028ba:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            switch(int_value) {
 80028be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <gc_execute_line+0x5bc>
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d009      	beq.n	80028de <gc_execute_line+0x5ce>
 80028ca:	e003      	b.n	80028d4 <gc_execute_line+0x5c4>
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 80028cc:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <gc_execute_line+0x6e8>)
 80028ce:	2203      	movs	r2, #3
 80028d0:	721a      	strb	r2, [r3, #8]
 80028d2:	e005      	b.n	80028e0 <gc_execute_line+0x5d0>
              case 1: break; // Optional stop not supported. Ignore.
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 80028d4:	4a48      	ldr	r2, [pc, #288]	; (80029f8 <gc_execute_line+0x6e8>)
 80028d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80028da:	7213      	strb	r3, [r2, #8]
            }
            break;
 80028dc:	e036      	b.n	800294c <gc_execute_line+0x63c>
              case 1: break; // Optional stop not supported. Ignore.
 80028de:	bf00      	nop
            break;
 80028e0:	e034      	b.n	800294c <gc_execute_line+0x63c>
					case 3: case 4: case 5:
            word_bit = MODAL_GROUP_M7;
 80028e2:	230c      	movs	r3, #12
 80028e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            switch(int_value) {
 80028e8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d008      	beq.n	8002902 <gc_execute_line+0x5f2>
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d00a      	beq.n	800290a <gc_execute_line+0x5fa>
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d000      	beq.n	80028fa <gc_execute_line+0x5ea>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
            }
            break;
 80028f8:	e028      	b.n	800294c <gc_execute_line+0x63c>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <gc_execute_line+0x6e8>)
 80028fc:	2210      	movs	r2, #16
 80028fe:	729a      	strb	r2, [r3, #10]
 8002900:	e007      	b.n	8002912 <gc_execute_line+0x602>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <gc_execute_line+0x6e8>)
 8002904:	2220      	movs	r2, #32
 8002906:	729a      	strb	r2, [r3, #10]
 8002908:	e003      	b.n	8002912 <gc_execute_line+0x602>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <gc_execute_line+0x6e8>)
 800290c:	2200      	movs	r2, #0
 800290e:	729a      	strb	r2, [r3, #10]
 8002910:	bf00      	nop
            break;
 8002912:	e01b      	b.n	800294c <gc_execute_line+0x63c>
          #ifdef ENABLE_M7
            case 7: case 8: case 9:
          #else
            case 8: case 9:
          #endif
            word_bit = MODAL_GROUP_M8;
 8002914:	230d      	movs	r3, #13
 8002916:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            switch(int_value) {
 800291a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800291e:	2b08      	cmp	r3, #8
 8002920:	d008      	beq.n	8002934 <gc_execute_line+0x624>
 8002922:	2b09      	cmp	r3, #9
 8002924:	d00a      	beq.n	800293c <gc_execute_line+0x62c>
 8002926:	2b07      	cmp	r3, #7
 8002928:	d000      	beq.n	800292c <gc_execute_line+0x61c>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
            }
            break;
 800292a:	e00f      	b.n	800294c <gc_execute_line+0x63c>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <gc_execute_line+0x6e8>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	725a      	strb	r2, [r3, #9]
 8002932:	e007      	b.n	8002944 <gc_execute_line+0x634>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <gc_execute_line+0x6e8>)
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	725a      	strb	r2, [r3, #9]
 800293a:	e003      	b.n	8002944 <gc_execute_line+0x634>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <gc_execute_line+0x6e8>)
 800293e:	2200      	movs	r2, #0
 8002940:	725a      	strb	r2, [r3, #9]
 8002942:	bf00      	nop
            break;
 8002944:	e002      	b.n	800294c <gc_execute_line+0x63c>
						case 56:
							word_bit = MODAL_GROUP_M9;
							gc_block.modal.override = OVERRIDE_PARKING_MOTION;
							break;
					#endif
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported M command]
 8002946:	2314      	movs	r3, #20
 8002948:	f001 b989 	b.w	8003c5e <gc_execute_line+0x194e>
        }

        // Check for more than one command per modal group violations in the current block
        // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800294c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002950:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002954:	fa42 f303 	asr.w	r3, r2, r3
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <gc_execute_line+0x656>
 8002960:	2315      	movs	r3, #21
 8002962:	f001 b97c 	b.w	8003c5e <gc_execute_line+0x194e>
        command_words |= bit(word_bit);
 8002966:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800296a:	2201      	movs	r2, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	b21a      	sxth	r2, r3
 8002972:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002976:	4313      	orrs	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        break;
 800297e:	e0ff      	b.n	8002b80 <gc_execute_line+0x870>
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8002980:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002984:	3b46      	subs	r3, #70	; 0x46
 8002986:	2b14      	cmp	r3, #20
 8002988:	f200 80c8 	bhi.w	8002b1c <gc_execute_line+0x80c>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <gc_execute_line+0x684>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029e9 	.word	0x080029e9
 8002998:	08002b1d 	.word	0x08002b1d
 800299c:	08002b1d 	.word	0x08002b1d
 80029a0:	08002a01 	.word	0x08002a01
 80029a4:	08002a1b 	.word	0x08002a1b
 80029a8:	08002a35 	.word	0x08002a35
 80029ac:	08002a4f 	.word	0x08002a4f
 80029b0:	08002b1d 	.word	0x08002b1d
 80029b4:	08002a5f 	.word	0x08002a5f
 80029b8:	08002b1d 	.word	0x08002b1d
 80029bc:	08002a7d 	.word	0x08002a7d
 80029c0:	08002b1d 	.word	0x08002b1d
 80029c4:	08002a8b 	.word	0x08002a8b
 80029c8:	08002a99 	.word	0x08002a99
 80029cc:	08002aa7 	.word	0x08002aa7
 80029d0:	08002b1d 	.word	0x08002b1d
 80029d4:	08002b1d 	.word	0x08002b1d
 80029d8:	08002b1d 	.word	0x08002b1d
 80029dc:	08002acf 	.word	0x08002acf
 80029e0:	08002ae9 	.word	0x08002ae9
 80029e4:	08002b03 	.word	0x08002b03
		  #if defined ABC_AXIS
          case 'C': word_bit = WORD_C; gc_block.values.xyz[C_AXIS] = value; axis_words |= (1<<C_AXIS); break;
		  #endif
// ---
          // case 'D': // Not supported
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	4a01      	ldr	r2, [pc, #4]	; (80029f8 <gc_execute_line+0x6e8>)
 80029f2:	60d3      	str	r3, [r2, #12]
 80029f4:	e095      	b.n	8002b22 <gc_execute_line+0x812>
 80029f6:	bf00      	nop
 80029f8:	20000eb8 	.word	0x20000eb8
 80029fc:	cccccccd 	.word	0xcccccccd
          // case 'H': // Not supported
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	4ab4      	ldr	r2, [pc, #720]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a0a:	6113      	str	r3, [r2, #16]
 8002a0c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002a18:	e083      	b.n	8002b22 <gc_execute_line+0x812>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	4aae      	ldr	r2, [pc, #696]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a24:	6153      	str	r3, [r2, #20]
 8002a26:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002a32:	e076      	b.n	8002b22 <gc_execute_line+0x812>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002a34:	2303      	movs	r3, #3
 8002a36:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	4aa7      	ldr	r2, [pc, #668]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002a4c:	e069      	b.n	8002b22 <gc_execute_line+0x812>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a54:	4aa1      	ldr	r2, [pc, #644]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002a5a:	7713      	strb	r3, [r2, #28]
 8002a5c:	e061      	b.n	8002b22 <gc_execute_line+0x812>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f007 fee4 	bl	800a834 <truncf>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fafa 	bl	8001068 <__aeabi_f2iz>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b99      	ldr	r3, [pc, #612]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a78:	621a      	str	r2, [r3, #32]
 8002a7a:	e052      	b.n	8002b22 <gc_execute_line+0x812>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8002a7c:	2306      	movs	r3, #6
 8002a7e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	4a95      	ldr	r2, [pc, #596]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a86:	6253      	str	r3, [r2, #36]	; 0x24
 8002a88:	e04b      	b.n	8002b22 <gc_execute_line+0x812>
          // NOTE: For certain commands, P value must be an integer, but none of these commands are supported.
          // case 'Q': // Not supported
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a94:	6293      	str	r3, [r2, #40]	; 0x28
 8002a96:	e044      	b.n	8002b22 <gc_execute_line+0x812>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	4a8e      	ldr	r2, [pc, #568]	; (8002cdc <gc_execute_line+0x9cc>)
 8002aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002aa4:	e03d      	b.n	8002b22 <gc_execute_line+0x812>
		  case 'T': word_bit = WORD_T;
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	498c      	ldr	r1, [pc, #560]	; (8002ce0 <gc_execute_line+0x9d0>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fab9 	bl	8001028 <__aeabi_fcmpgt>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <gc_execute_line+0x7b2>
 8002abc:	2326      	movs	r3, #38	; 0x26
 8002abe:	f001 b8ce 	b.w	8003c5e <gc_execute_line+0x194e>
					gc_block.values.t = int_value;
 8002ac2:	4a86      	ldr	r2, [pc, #536]	; (8002cdc <gc_execute_line+0x9cc>)
 8002ac4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ac8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
				break;
 8002acc:	e029      	b.n	8002b22 <gc_execute_line+0x812>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8002ace:	230a      	movs	r3, #10
 8002ad0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	4a81      	ldr	r2, [pc, #516]	; (8002cdc <gc_execute_line+0x9cc>)
 8002ad8:	6353      	str	r3, [r2, #52]	; 0x34
 8002ada:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002ae6:	e01c      	b.n	8002b22 <gc_execute_line+0x812>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8002ae8:	230b      	movs	r3, #11
 8002aea:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <gc_execute_line+0x9cc>)
 8002af2:	6393      	str	r3, [r2, #56]	; 0x38
 8002af4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002b00:	e00f      	b.n	8002b22 <gc_execute_line+0x812>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8002b02:	230c      	movs	r3, #12
 8002b04:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	4a74      	ldr	r2, [pc, #464]	; (8002cdc <gc_execute_line+0x9cc>)
 8002b0c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002b0e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002b1a:	e002      	b.n	8002b22 <gc_execute_line+0x812>
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 8002b1c:	2314      	movs	r3, #20
 8002b1e:	f001 b89e 	b.w	8003c5e <gc_execute_line+0x194e>
        }

        // NOTE: Variable 'word_bit' is always assigned, if the non-command letter is valid.
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002b22:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b26:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b2a:	fa42 f303 	asr.w	r3, r2, r3
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <gc_execute_line+0x82c>
 8002b36:	2319      	movs	r3, #25
 8002b38:	f001 b891 	b.w	8003c5e <gc_execute_line+0x194e>
        // Check for invalid negative values for words F, N, P, T, and S.
        // NOTE: Negative value check is done here simply for code-efficiency.
        if ( bit(word_bit) & (bit(WORD_F)|bit(WORD_N)|bit(WORD_P)|bit(WORD_T)|bit(WORD_S)) ) {
 8002b3c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b40:	f240 3261 	movw	r2, #865	; 0x361
 8002b44:	fa42 f303 	asr.w	r3, r2, r3
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <gc_execute_line+0x858>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fa48 	bl	8000fec <__aeabi_fcmplt>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <gc_execute_line+0x858>
 8002b62:	2304      	movs	r3, #4
 8002b64:	f001 b87b 	b.w	8003c5e <gc_execute_line+0x194e>
        }
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002b68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8002b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f ac0c 	bne.w	80023aa <gc_execute_line+0x9a>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8002b92:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <gc_execute_line+0x898>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8002b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <gc_execute_line+0x898>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8002ba8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <gc_execute_line+0x8b4>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8002bb4:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <gc_execute_line+0x9cc>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	; (8002ce4 <gc_execute_line+0x9d4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	dd02      	ble.n	8002bc4 <gc_execute_line+0x8b4>
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	f001 b84d 	b.w	8003c5e <gc_execute_line+0x194e>
  // [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

  // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
  //   is not defined after switching to G94 from G93.
  // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002bc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d017      	beq.n	8002c00 <gc_execute_line+0x8f0>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8002bd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <gc_execute_line+0x8d2>
 8002bdc:	2316      	movs	r3, #22
 8002bde:	f001 b83e 	b.w	8003c5e <gc_execute_line+0x194e>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8002be2:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <gc_execute_line+0x9cc>)
 8002be4:	78db      	ldrb	r3, [r3, #3]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d140      	bne.n	8002c6c <gc_execute_line+0x95c>
 8002bea:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <gc_execute_line+0x9cc>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	493e      	ldr	r1, [pc, #248]	; (8002ce8 <gc_execute_line+0x9d8>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f85d 	bl	8000cb0 <__aeabi_fmul>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <gc_execute_line+0x9cc>)
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e035      	b.n	8002c6c <gc_execute_line+0x95c>
  } else {
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c02:	789b      	ldrb	r3, [r3, #2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d114      	bne.n	8002c32 <gc_execute_line+0x922>
      // NOTE: G38 can also operate in inverse time, but is undefined as an error. Missing F word check added here.
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d12d      	bne.n	8002c6c <gc_execute_line+0x95c>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d029      	beq.n	8002c6c <gc_execute_line+0x95c>
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d025      	beq.n	8002c6c <gc_execute_line+0x95c>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002c20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11f      	bne.n	8002c6c <gc_execute_line+0x95c>
 8002c2c:	2316      	movs	r3, #22
 8002c2e:	f001 b816 	b.w	8003c5e <gc_execute_line+0x194e>
      // value in the block. If no F word is passed with a motion command that requires a feed rate, this will error
      // out in the motion modes error-checking. However, if no F word is passed with NO motion command that requires
      // a feed rate, we simply move on and the state feed rate value gets updated to zero and remains undefined.
    } else { // = G94
      // - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last state value.
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 8002c32:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <gc_execute_line+0x9dc>)
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <gc_execute_line+0x95c>
        if (bit_istrue(value_words,bit(WORD_F))) {
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <gc_execute_line+0x954>
          if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c48:	78db      	ldrb	r3, [r3, #3]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <gc_execute_line+0x95c>
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <gc_execute_line+0x9d8>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f82b 	bl	8000cb0 <__aeabi_fmul>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e003      	b.n	8002c6c <gc_execute_line+0x95c>
        } else {
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <gc_execute_line+0x9dc>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c6a:	60d3      	str	r3, [r2, #12]
    }
  }
  // bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-checking.

  // [4. Set spindle speed ]: S is negative (done.)
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8002c6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <gc_execute_line+0x970>
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <gc_execute_line+0x9dc>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
#endif
	
  // [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d10e      	bne.n	8002ca6 <gc_execute_line+0x996>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <gc_execute_line+0x98a>
 8002c94:	231c      	movs	r3, #28
 8002c96:	f000 bfe2 	b.w	8003c5e <gc_execute_line+0x194e>
    bit_false(value_words,bit(WORD_P));
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  }

  // [11. Set active plane ]: N/A
  switch (gc_block.modal.plane_select) {
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <gc_execute_line+0x9cc>)
 8002ca8:	795b      	ldrb	r3, [r3, #5]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <gc_execute_line+0x9a4>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00a      	beq.n	8002cc8 <gc_execute_line+0x9b8>
 8002cb2:	e01d      	b.n	8002cf0 <gc_execute_line+0x9e0>
    case PLANE_SELECT_XY:
      axis_0 = X_AXIS;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      axis_1 = Y_AXIS;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      axis_linear = Z_AXIS;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
      break;
 8002cc6:	e01c      	b.n	8002d02 <gc_execute_line+0x9f2>
    case PLANE_SELECT_ZX:
      axis_0 = Z_AXIS;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      axis_1 = X_AXIS;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      axis_linear = Y_AXIS;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
      break;
 8002cda:	e012      	b.n	8002d02 <gc_execute_line+0x9f2>
 8002cdc:	20000eb8 	.word	0x20000eb8
 8002ce0:	437f0000 	.word	0x437f0000
 8002ce4:	00989680 	.word	0x00989680
 8002ce8:	41cb3333 	.word	0x41cb3333
 8002cec:	20000e74 	.word	0x20000e74
    default: // case PLANE_SELECT_YZ:
      axis_0 = Y_AXIS;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      axis_1 = Z_AXIS;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      axis_linear = X_AXIS;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  }

  // [12. Set length units ]: N/A
  // Pre-convert XYZ coordinate values to millimeters, if applicable.
  uint8_t idx;
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d02:	4b9e      	ldr	r3, [pc, #632]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d04:	78db      	ldrb	r3, [r3, #3]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d12b      	bne.n	8002d62 <gc_execute_line+0xa52>
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d10:	e023      	b.n	8002d5a <gc_execute_line+0xa4a>
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002d12:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d1a:	fa42 f303 	asr.w	r3, r2, r3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <gc_execute_line+0xa40>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002d26:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002d2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d2e:	4a93      	ldr	r2, [pc, #588]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d30:	330c      	adds	r3, #12
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4991      	ldr	r1, [pc, #580]	; (8002f80 <gc_execute_line+0xc70>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ffb8 	bl	8000cb0 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4a8d      	ldr	r2, [pc, #564]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d46:	f104 030c 	add.w	r3, r4, #12
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	6059      	str	r1, [r3, #4]
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d54:	3301      	adds	r3, #1
 8002d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d9d7      	bls.n	8002d12 <gc_execute_line+0xa02>
  // [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
  // [G43.1 Errors]: Motion command in same line.
  //   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
  //   axis that is configured (in config.h). There should be an error if the configured axis
  //   is absent or if any of the other axis words are present.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8002d62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d10a      	bne.n	8002d80 <gc_execute_line+0xa70>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8002d6a:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d6c:	799b      	ldrb	r3, [r3, #6]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d106      	bne.n	8002d80 <gc_execute_line+0xa70>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 8002d72:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d002      	beq.n	8002d80 <gc_execute_line+0xa70>
 8002d7a:	2325      	movs	r3, #37	; 0x25
 8002d7c:	f000 bf6f 	b.w	8003c5e <gc_execute_line+0x194e>
  // TODO: An EEPROM read of the coordinate data may require a buffer sync when the cycle
  // is active. The read pauses the processor temporarily and may cause a rare crash. For
  // future versions on processors with enough memory, all coordinate data should be stored
  // in memory and written to EEPROM only when there is not a cycle active.
  float block_coord_system[N_AXIS];
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8002d80:	4a80      	ldr	r2, [pc, #512]	; (8002f84 <gc_execute_line+0xc74>)
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	3228      	adds	r2, #40	; 0x28
 8002d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8002d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01a      	beq.n	8002dd0 <gc_execute_line+0xac0>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002d9a:	4b78      	ldr	r3, [pc, #480]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d9c:	79db      	ldrb	r3, [r3, #7]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <gc_execute_line+0xa98>
 8002da2:	231d      	movs	r3, #29
 8002da4:	f000 bf5b 	b.w	8003c5e <gc_execute_line+0x194e>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002da8:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <gc_execute_line+0xc74>)
 8002daa:	799a      	ldrb	r2, [r3, #6]
 8002dac:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <gc_execute_line+0xc6c>)
 8002dae:	79db      	ldrb	r3, [r3, #7]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d00d      	beq.n	8002dd0 <gc_execute_line+0xac0>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002db4:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <gc_execute_line+0xc6c>)
 8002db6:	79db      	ldrb	r3, [r3, #7]
 8002db8:	f107 0214 	add.w	r2, r7, #20
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 ffba 	bl	8007d38 <settings_read_coord_data>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <gc_execute_line+0xac0>
 8002dca:	2307      	movs	r3, #7
 8002dcc:	f000 bf47 	b.w	8003c5e <gc_execute_line+0x194e>
  // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offsets.
  // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as these
  // commands all treat axis words differently. G10 as absolute offsets or computes current position as
  // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that observes
  // all the current coordinate system and G92 offsets.
  switch (gc_block.non_modal_command) {
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <gc_execute_line+0xc6c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b0a      	cmp	r3, #10
 8002dd6:	d003      	beq.n	8002de0 <gc_execute_line+0xad0>
 8002dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8002dda:	f000 80c3 	beq.w	8002f64 <gc_execute_line+0xc54>
 8002dde:	e13d      	b.n	800305c <gc_execute_line+0xd4c>
    case NON_MODAL_SET_COORDINATE_DATA:
      // [G10 Errors]: L missing and is not 2 or 20. P word missing. (Negative P value done.)
      // [G10 L2 Errors]: R word NOT SUPPORTED. P value not 0 to nCoordSys(max 9). Axis words missing.
      // [G10 L20 Errors]: P must be 0 to nCoordSys(max 9). Axis words missing.
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002de0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <gc_execute_line+0xade>
 8002de8:	231a      	movs	r3, #26
 8002dea:	f000 bf38 	b.w	8003c5e <gc_execute_line+0x194e>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 8002dee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002df2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <gc_execute_line+0xaf0>
 8002dfa:	231c      	movs	r3, #28
 8002dfc:	f000 bf2f 	b.w	8003c5e <gc_execute_line+0x194e>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f007 fd15 	bl	800a834 <truncf>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f951 	bl	80010b4 <__aeabi_f2uiz>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002e18:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d902      	bls.n	8002e26 <gc_execute_line+0xb16>
 8002e20:	231d      	movs	r3, #29
 8002e22:	f000 bf1c 	b.w	8003c5e <gc_execute_line+0x194e>
      if (gc_block.values.l != 20) {
 8002e26:	4b55      	ldr	r3, [pc, #340]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e28:	7f1b      	ldrb	r3, [r3, #28]
 8002e2a:	2b14      	cmp	r3, #20
 8002e2c:	d00f      	beq.n	8002e4e <gc_execute_line+0xb3e>
        if (gc_block.values.l == 2) {
 8002e2e:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d108      	bne.n	8002e48 <gc_execute_line+0xb38>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002e36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <gc_execute_line+0xb3e>
 8002e42:	2314      	movs	r3, #20
 8002e44:	f000 bf0b 	b.w	8003c5e <gc_execute_line+0x194e>
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8002e48:	2314      	movs	r3, #20
 8002e4a:	f000 bf08 	b.w	8003c5e <gc_execute_line+0x194e>
      }
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 8002e4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e52:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8002e56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      // Determine coordinate system to change and try to load from EEPROM.
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002e5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <gc_execute_line+0xb5e>
 8002e62:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002e6c:	e003      	b.n	8002e76 <gc_execute_line+0xb66>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e70:	79db      	ldrb	r3, [r3, #7]
 8002e72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      
      // NOTE: Store parameter data in IJK values. By rule, they are not in use with this command.
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 8002e76:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e7a:	4943      	ldr	r1, [pc, #268]	; (8002f88 <gc_execute_line+0xc78>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 ff5b 	bl	8007d38 <settings_read_coord_data>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <gc_execute_line+0xb7e>
 8002e88:	2307      	movs	r3, #7
 8002e8a:	f000 bee8 	b.w	8003c5e <gc_execute_line+0x194e>

      // Pre-calculate the coordinate data changes.
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e94:	e061      	b.n	8002f5a <gc_execute_line+0xc4a>
        // Update axes defined only in block. Always in machine coordinates. Can change non-active system.
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002e96:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002e9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e9e:	fa42 f303 	asr.w	r3, r2, r3
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d052      	beq.n	8002f50 <gc_execute_line+0xc40>
          if (gc_block.values.l == 20) {
 8002eaa:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <gc_execute_line+0xc6c>)
 8002eac:	7f1b      	ldrb	r3, [r3, #28]
 8002eae:	2b14      	cmp	r3, #20
 8002eb0:	d140      	bne.n	8002f34 <gc_execute_line+0xc24>
            // L20: Update coordinate system axis at current position (with modifiers) with programmed value
            // WPos = MPos - WCS - G92 - TLO  ->  WCS = MPos - G92 - TLO - WPos
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002eb2:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002eb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eba:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <gc_execute_line+0xc74>)
 8002ebc:	3306      	adds	r3, #6
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	6858      	ldr	r0, [r3, #4]
 8002ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	; (8002f84 <gc_execute_line+0xc74>)
 8002eca:	330c      	adds	r3, #12
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fde2 	bl	8000a9c <__aeabi_fsub>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ee0:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <gc_execute_line+0xc6c>)
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7fd fdd6 	bl	8000a9c <__aeabi_fsub>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <gc_execute_line+0xc6c>)
 8002ef6:	1ca3      	adds	r3, r4, #2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	6099      	str	r1, [r3, #8]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d124      	bne.n	8002f50 <gc_execute_line+0xc40>
 8002f06:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002f0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f10:	3302      	adds	r3, #2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <gc_execute_line+0xc74>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f7fd fdbc 	bl	8000a9c <__aeabi_fsub>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4619      	mov	r1, r3
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f2a:	1ca3      	adds	r3, r4, #2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	6099      	str	r1, [r3, #8]
 8002f32:	e00d      	b.n	8002f50 <gc_execute_line+0xc40>
          } else {
            // L2: Update coordinate system axis to programmed value.
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002f34:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8002f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f3e:	330c      	adds	r3, #12
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f48:	1c8b      	adds	r3, r1, #2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4403      	add	r3, r0
 8002f4e:	609a      	str	r2, [r3, #8]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002f50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f54:	3301      	adds	r3, #1
 8002f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d999      	bls.n	8002e96 <gc_execute_line+0xb86>
          }
        } // Else, keep current stored value.
      }
      break;
 8002f62:	e17b      	b.n	800325c <gc_execute_line+0xf4c>
    case NON_MODAL_SET_COORDINATE_OFFSET:
      // [G92 Errors]: No axis words.
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002f64:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <gc_execute_line+0xc62>
 8002f6c:	231a      	movs	r3, #26
 8002f6e:	f000 be76 	b.w	8003c5e <gc_execute_line+0x194e>

      // Update axes defined only in block. Offsets current system to defined value. Does not update when
      // active coordinate system is selected, but is still active unless G92.1 disables it.
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f78:	e06b      	b.n	8003052 <gc_execute_line+0xd42>
 8002f7a:	bf00      	nop
 8002f7c:	20000eb8 	.word	0x20000eb8
 8002f80:	41cb3333 	.word	0x41cb3333
 8002f84:	20000e74 	.word	0x20000e74
 8002f88:	20000ec8 	.word	0x20000ec8
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002f8c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002f90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f94:	fa42 f303 	asr.w	r3, r2, r3
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d044      	beq.n	800302a <gc_execute_line+0xd1a>
          // WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002fa0:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fa8:	4abb      	ldr	r2, [pc, #748]	; (8003298 <gc_execute_line+0xf88>)
 8002faa:	3306      	adds	r3, #6
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fd fd69 	bl	8000a9c <__aeabi_fsub>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fd2:	4ab2      	ldr	r2, [pc, #712]	; (800329c <gc_execute_line+0xf8c>)
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fd5d 	bl	8000a9c <__aeabi_fsub>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4aad      	ldr	r2, [pc, #692]	; (800329c <gc_execute_line+0xf8c>)
 8002fe8:	f104 030c 	add.w	r3, r4, #12
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	6059      	str	r1, [r3, #4]
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002ff2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d126      	bne.n	8003048 <gc_execute_line+0xd38>
 8002ffa:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003002:	4aa6      	ldr	r2, [pc, #664]	; (800329c <gc_execute_line+0xf8c>)
 8003004:	330c      	adds	r3, #12
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4ba2      	ldr	r3, [pc, #648]	; (8003298 <gc_execute_line+0xf88>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7fd fd42 	bl	8000a9c <__aeabi_fsub>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	4a9f      	ldr	r2, [pc, #636]	; (800329c <gc_execute_line+0xf8c>)
 800301e:	f104 030c 	add.w	r3, r4, #12
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	6059      	str	r1, [r3, #4]
 8003028:	e00e      	b.n	8003048 <gc_execute_line+0xd38>
        } else {
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800302a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800302e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003032:	4a99      	ldr	r2, [pc, #612]	; (8003298 <gc_execute_line+0xf88>)
 8003034:	330c      	adds	r3, #12
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4897      	ldr	r0, [pc, #604]	; (800329c <gc_execute_line+0xf8c>)
 800303e:	f101 030c 	add.w	r3, r1, #12
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4403      	add	r3, r0
 8003046:	605a      	str	r2, [r3, #4]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8003048:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800304c:	3301      	adds	r3, #1
 800304e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003052:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003056:	2b02      	cmp	r3, #2
 8003058:	d998      	bls.n	8002f8c <gc_execute_line+0xc7c>
        }
      }
      break;
 800305a:	e0ff      	b.n	800325c <gc_execute_line+0xf4c>

      // At this point, the rest of the explicit axis commands treat the axis values as the traditional
      // target position with the coordinate system offsets, G92 offsets, absolute override, and distance
      // modes applied. This includes the motion mode commands. We can now pre-compute the target position.
      // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 800305c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003060:	2b03      	cmp	r3, #3
 8003062:	f000 8094 	beq.w	800318e <gc_execute_line+0xe7e>
        if (axis_words) {
 8003066:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 808f 	beq.w	800318e <gc_execute_line+0xe7e>
          for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003076:	e085      	b.n	8003184 <gc_execute_line+0xe74>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8003078:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800307c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003080:	fa42 f303 	asr.w	r3, r2, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <gc_execute_line+0xd9c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800308c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003090:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003094:	4a80      	ldr	r2, [pc, #512]	; (8003298 <gc_execute_line+0xf88>)
 8003096:	3306      	adds	r3, #6
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	487f      	ldr	r0, [pc, #508]	; (800329c <gc_execute_line+0xf8c>)
 80030a0:	f101 030c 	add.w	r3, r1, #12
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4403      	add	r3, r0
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e066      	b.n	800317a <gc_execute_line+0xe6a>
            } else {
              // Update specified value according to distance mode or ignore if absolute override is active.
              // NOTE: G53 is never active with G28/30 since they are in the same modal group.
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <gc_execute_line+0xf8c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b35      	cmp	r3, #53	; 0x35
 80030b2:	d062      	beq.n	800317a <gc_execute_line+0xe6a>
                // Apply coordinate offsets based on distance mode.
                if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE) {
 80030b4:	4b79      	ldr	r3, [pc, #484]	; (800329c <gc_execute_line+0xf8c>)
 80030b6:	791b      	ldrb	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d143      	bne.n	8003144 <gc_execute_line+0xe34>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80030bc:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80030c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030c4:	4a75      	ldr	r2, [pc, #468]	; (800329c <gc_execute_line+0xf8c>)
 80030c6:	330c      	adds	r3, #12
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	685d      	ldr	r5, [r3, #4]
 80030ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030d8:	4413      	add	r3, r2
 80030da:	f853 0c44 	ldr.w	r0, [r3, #-68]
 80030de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030e2:	4a6d      	ldr	r2, [pc, #436]	; (8003298 <gc_execute_line+0xf88>)
 80030e4:	330c      	adds	r3, #12
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fcd7 	bl	8000aa0 <__addsf3>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4619      	mov	r1, r3
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7fd fcd2 	bl	8000aa0 <__addsf3>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4619      	mov	r1, r3
 8003100:	4a66      	ldr	r2, [pc, #408]	; (800329c <gc_execute_line+0xf8c>)
 8003102:	f104 030c 	add.w	r3, r4, #12
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	6059      	str	r1, [r3, #4]
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 800310c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003110:	2b02      	cmp	r3, #2
 8003112:	d132      	bne.n	800317a <gc_execute_line+0xe6a>
 8003114:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800311c:	4a5f      	ldr	r2, [pc, #380]	; (800329c <gc_execute_line+0xf8c>)
 800311e:	330c      	adds	r3, #12
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <gc_execute_line+0xf88>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fd fcb7 	bl	8000aa0 <__addsf3>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	4a59      	ldr	r2, [pc, #356]	; (800329c <gc_execute_line+0xf8c>)
 8003138:	f104 030c 	add.w	r3, r4, #12
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	6059      	str	r1, [r3, #4]
 8003142:	e01a      	b.n	800317a <gc_execute_line+0xe6a>
                } else {  // Incremental mode
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8003144:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003148:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800314c:	4a53      	ldr	r2, [pc, #332]	; (800329c <gc_execute_line+0xf8c>)
 800314e:	330c      	adds	r3, #12
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	6858      	ldr	r0, [r3, #4]
 8003156:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800315a:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <gc_execute_line+0xf88>)
 800315c:	3306      	adds	r3, #6
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4619      	mov	r1, r3
 8003166:	f7fd fc9b 	bl	8000aa0 <__addsf3>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	4a4b      	ldr	r2, [pc, #300]	; (800329c <gc_execute_line+0xf8c>)
 8003170:	f104 030c 	add.w	r3, r4, #12
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	6059      	str	r1, [r3, #4]
          for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 800317a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800317e:	3301      	adds	r3, #1
 8003180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003184:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003188:	2b02      	cmp	r3, #2
 800318a:	f67f af75 	bls.w	8003078 <gc_execute_line+0xd68>
          }
        }
      }

      // Check remaining non-modal commands for errors.
      switch (gc_block.non_modal_command) {
 800318e:	4b43      	ldr	r3, [pc, #268]	; (800329c <gc_execute_line+0xf8c>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b26      	cmp	r3, #38	; 0x26
 8003194:	d05d      	beq.n	8003252 <gc_execute_line+0xf42>
 8003196:	2b26      	cmp	r3, #38	; 0x26
 8003198:	dc04      	bgt.n	80031a4 <gc_execute_line+0xe94>
 800319a:	2b1c      	cmp	r3, #28
 800319c:	d008      	beq.n	80031b0 <gc_execute_line+0xea0>
 800319e:	2b1e      	cmp	r3, #30
 80031a0:	d006      	beq.n	80031b0 <gc_execute_line+0xea0>
 80031a2:	e05b      	b.n	800325c <gc_execute_line+0xf4c>
 80031a4:	2b35      	cmp	r3, #53	; 0x35
 80031a6:	d049      	beq.n	800323c <gc_execute_line+0xf2c>
 80031a8:	2b66      	cmp	r3, #102	; 0x66
 80031aa:	d054      	beq.n	8003256 <gc_execute_line+0xf46>
 80031ac:	2b28      	cmp	r3, #40	; 0x28
          break;
        case NON_MODAL_SET_HOME_0: // G28.1
        case NON_MODAL_SET_HOME_1: // G30.1
          // [G28.1/30.1 Errors]: Cutter compensation is enabled.
          // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
          break;
 80031ae:	e050      	b.n	8003252 <gc_execute_line+0xf42>
          if (gc_block.non_modal_command == NON_MODAL_GO_HOME_0) {
 80031b0:	4b3a      	ldr	r3, [pc, #232]	; (800329c <gc_execute_line+0xf8c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b1c      	cmp	r3, #28
 80031b6:	d109      	bne.n	80031cc <gc_execute_line+0xebc>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <gc_execute_line+0xf90>)
 80031ba:	2006      	movs	r0, #6
 80031bc:	f004 fdbc 	bl	8007d38 <settings_read_coord_data>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <gc_execute_line+0xed0>
 80031c6:	2307      	movs	r3, #7
 80031c8:	f000 bd49 	b.w	8003c5e <gc_execute_line+0x194e>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80031cc:	4934      	ldr	r1, [pc, #208]	; (80032a0 <gc_execute_line+0xf90>)
 80031ce:	2007      	movs	r0, #7
 80031d0:	f004 fdb2 	bl	8007d38 <settings_read_coord_data>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <gc_execute_line+0xed0>
 80031da:	2307      	movs	r3, #7
 80031dc:	f000 bd3f 	b.w	8003c5e <gc_execute_line+0x194e>
          if (axis_words) {
 80031e0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d025      	beq.n	8003234 <gc_execute_line+0xf24>
            for (idx=0; idx<N_AXIS; idx++) {
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80031ee:	e01c      	b.n	800322a <gc_execute_line+0xf1a>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 80031f0:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80031f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031f8:	fa42 f303 	asr.w	r3, r2, r3
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <gc_execute_line+0xf10>
 8003204:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003208:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <gc_execute_line+0xf88>)
 800320e:	3306      	adds	r3, #6
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4821      	ldr	r0, [pc, #132]	; (800329c <gc_execute_line+0xf8c>)
 8003218:	1c8b      	adds	r3, r1, #2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4403      	add	r3, r0
 800321e:	609a      	str	r2, [r3, #8]
            for (idx=0; idx<N_AXIS; idx++) {
 8003220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003224:	3301      	adds	r3, #1
 8003226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800322a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800322e:	2b02      	cmp	r3, #2
 8003230:	d9de      	bls.n	80031f0 <gc_execute_line+0xee0>
          break;
 8003232:	e013      	b.n	800325c <gc_execute_line+0xf4c>
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 800323a:	e00f      	b.n	800325c <gc_execute_line+0xf4c>
          // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
          break;
        case NON_MODAL_ABSOLUTE_OVERRIDE:
          // [G53 Errors]: G0 and G1 are not active. Cutter compensation is enabled.
          // NOTE: All explicit axis word commands are in this modal group. So no implicit check necessary.
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <gc_execute_line+0xf8c>)
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <gc_execute_line+0xf4a>
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <gc_execute_line+0xf8c>)
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d006      	beq.n	800325a <gc_execute_line+0xf4a>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 800324c:	231e      	movs	r3, #30
 800324e:	f000 bd06 	b.w	8003c5e <gc_execute_line+0x194e>
          break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <gc_execute_line+0xf4c>
          break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <gc_execute_line+0xf4c>
          }
          break;
 800325a:	bf00      	nop
      }
  }

  // [20. Motion modes ]:
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <gc_execute_line+0xf8c>)
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b50      	cmp	r3, #80	; 0x50
 8003262:	d107      	bne.n	8003274 <gc_execute_line+0xf64>
    // [G80 Errors]: Axis word are programmed while G80 is active.
    // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8003264:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 821b 	beq.w	80036a4 <gc_execute_line+0x1394>
 800326e:	231f      	movs	r3, #31
 8003270:	f000 bcf5 	b.w	8003c5e <gc_execute_line+0x194e>

  // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), or
  // was explicitly commanded in the g-code block.
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8003274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003278:	2b02      	cmp	r3, #2
 800327a:	f040 8213 	bne.w	80036a4 <gc_execute_line+0x1394>

    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <gc_execute_line+0xf8c>)
 8003280:	785b      	ldrb	r3, [r3, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <gc_execute_line+0xf94>
      // [G0 Errors]: Axis letter not configured or without real value (done.)
      // Axis words are optional. If missing, set axis command flag to ignore execution.
      if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8003286:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 820a 	bne.w	80036a4 <gc_execute_line+0x1394>
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003296:	e205      	b.n	80036a4 <gc_execute_line+0x1394>
 8003298:	20000e74 	.word	0x20000e74
 800329c:	20000eb8 	.word	0x20000eb8
 80032a0:	20000ec8 	.word	0x20000ec8

    // All remaining motion modes (all but G0 and G80), require a valid feed rate value. In units per mm mode,
    // the value must be positive. In inverse time mode, a positive value must be passed with each block.
    } else {
      // Check if feed rate is defined for the motion modes that require it.
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80032a4:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <gc_execute_line+0x1224>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe93 	bl	8000fd8 <__aeabi_fcmpeq>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <gc_execute_line+0xfae>
 80032b8:	2316      	movs	r3, #22
 80032ba:	f000 bcd0 	b.w	8003c5e <gc_execute_line+0x194e>

      switch (gc_block.modal.motion) {
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <gc_execute_line+0x1224>)
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b8c      	cmp	r3, #140	; 0x8c
 80032c4:	f000 81cd 	beq.w	8003662 <gc_execute_line+0x1352>
 80032c8:	2b8c      	cmp	r3, #140	; 0x8c
 80032ca:	dc06      	bgt.n	80032da <gc_execute_line+0xfca>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d017      	beq.n	8003300 <gc_execute_line+0xff0>
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d01b      	beq.n	800330c <gc_execute_line+0xffc>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d00a      	beq.n	80032ee <gc_execute_line+0xfde>
 80032d8:	e1e4      	b.n	80036a4 <gc_execute_line+0x1394>
 80032da:	2b8e      	cmp	r3, #142	; 0x8e
 80032dc:	f000 81c1 	beq.w	8003662 <gc_execute_line+0x1352>
 80032e0:	2b8e      	cmp	r3, #142	; 0x8e
 80032e2:	f2c0 81b8 	blt.w	8003656 <gc_execute_line+0x1346>
 80032e6:	2b8f      	cmp	r3, #143	; 0x8f
 80032e8:	f000 81b5 	beq.w	8003656 <gc_execute_line+0x1346>
 80032ec:	e1da      	b.n	80036a4 <gc_execute_line+0x1394>
        case MOTION_MODE_LINEAR:
          // [G1 Errors]: Feed rate undefined. Axis letter not configured or without real value.
          // Axis words are optional. If missing, set axis command flag to ignore execution.
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 80032ee:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 81d3 	bne.w	800369e <gc_execute_line+0x138e>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

          break;
 80032fe:	e1ce      	b.n	800369e <gc_execute_line+0x138e>
        case MOTION_MODE_CW_ARC: 
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8003300:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          // [G2/3 Offset-Mode Errors]: No axis words and/or offsets in selected plane. The radius to the current
          //   point and the radius to the target point differs more than 0.002mm (EMC def. 0.5mm OR 0.005mm and 0.1% radius).
          // [G2/3 Full-Circle-Mode Errors]: NOT SUPPORTED. Axis words exist. No offsets programmed. P must be an integer.
          // NOTE: Both radius and offsets are required for arc tracing and are pre-computed with the error-checking.

          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 800330c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <gc_execute_line+0x100a>
 8003314:	231a      	movs	r3, #26
 8003316:	f000 bca2 	b.w	8003c5e <gc_execute_line+0x194e>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 800331a:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800331e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003322:	2101      	movs	r1, #1
 8003324:	4099      	lsls	r1, r3
 8003326:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800332a:	2001      	movs	r0, #1
 800332c:	fa00 f303 	lsl.w	r3, r0, r3
 8003330:	430b      	orrs	r3, r1
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <gc_execute_line+0x102e>
 8003338:	2320      	movs	r3, #32
 800333a:	f000 bc90 	b.w	8003c5e <gc_execute_line+0x194e>

          // Calculate the change in position along each selected axis
          float x,y;
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 800333e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003342:	4a7c      	ldr	r2, [pc, #496]	; (8003534 <gc_execute_line+0x1224>)
 8003344:	330c      	adds	r3, #12
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	6858      	ldr	r0, [r3, #4]
 800334c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003350:	4a79      	ldr	r2, [pc, #484]	; (8003538 <gc_execute_line+0x1228>)
 8003352:	3306      	adds	r3, #6
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd fb9e 	bl	8000a9c <__aeabi_fsub>
 8003360:	4603      	mov	r3, r0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8003364:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003368:	4a72      	ldr	r2, [pc, #456]	; (8003534 <gc_execute_line+0x1224>)
 800336a:	330c      	adds	r3, #12
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	6858      	ldr	r0, [r3, #4]
 8003372:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <gc_execute_line+0x1228>)
 8003378:	3306      	adds	r3, #6
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4619      	mov	r1, r3
 8003382:	f7fd fb8b 	bl	8000a9c <__aeabi_fsub>
 8003386:	4603      	mov	r3, r0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34

          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 800338a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80af 	beq.w	80034f6 <gc_execute_line+0x11e6>
            bit_false(value_words,bit(WORD_R));
 8003398:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 80033a4:	220c      	movs	r2, #12
 80033a6:	4965      	ldr	r1, [pc, #404]	; (800353c <gc_execute_line+0x122c>)
 80033a8:	4865      	ldr	r0, [pc, #404]	; (8003540 <gc_execute_line+0x1230>)
 80033aa:	f007 f915 	bl	800a5d8 <memcmp>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <gc_execute_line+0x10aa>
 80033b4:	2321      	movs	r3, #33	; 0x21
 80033b6:	f000 bc52 	b.w	8003c5e <gc_execute_line+0x194e>

            // Convert radius value to proper units.
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <gc_execute_line+0x1224>)
 80033bc:	78db      	ldrb	r3, [r3, #3]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d109      	bne.n	80033d6 <gc_execute_line+0x10c6>
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <gc_execute_line+0x1224>)
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	495f      	ldr	r1, [pc, #380]	; (8003544 <gc_execute_line+0x1234>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fc71 	bl	8000cb0 <__aeabi_fmul>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b58      	ldr	r3, [pc, #352]	; (8003534 <gc_execute_line+0x1224>)
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
                j = (y + (x * h_x2_div_d))/2
            */

            // First, use h_x2_div_d to compute 4*h^2 to check if it is negative or r is smaller
            // than d. If so, the sqrt of a negative number is complex and error out.
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <gc_execute_line+0x1224>)
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fc66 	bl	8000cb0 <__aeabi_fmul>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b52      	ldr	r3, [pc, #328]	; (8003534 <gc_execute_line+0x1224>)
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fd fc5e 	bl	8000cb0 <__aeabi_fmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461c      	mov	r4, r3
 80033f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033fc:	f7fd fc58 	bl	8000cb0 <__aeabi_fmul>
 8003400:	4603      	mov	r3, r0
 8003402:	4619      	mov	r1, r3
 8003404:	4620      	mov	r0, r4
 8003406:	f7fd fb49 	bl	8000a9c <__aeabi_fsub>
 800340a:	4603      	mov	r3, r0
 800340c:	461c      	mov	r4, r3
 800340e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003410:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003412:	f7fd fc4d 	bl	8000cb0 <__aeabi_fmul>
 8003416:	4603      	mov	r3, r0
 8003418:	4619      	mov	r1, r3
 800341a:	4620      	mov	r0, r4
 800341c:	f7fd fb3e 	bl	8000a9c <__aeabi_fsub>
 8003420:	4603      	mov	r3, r0
 8003422:	643b      	str	r3, [r7, #64]	; 0x40

            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800342a:	f7fd fddf 	bl	8000fec <__aeabi_fcmplt>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <gc_execute_line+0x112a>
 8003434:	2322      	movs	r3, #34	; 0x22
 8003436:	f000 bc12 	b.w	8003c5e <gc_execute_line+0x194e>

            // Finish computing h_x2_div_d.
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 800343a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800343c:	f007 fa0e 	bl	800a85c <sqrtf>
 8003440:	4603      	mov	r3, r0
 8003442:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003446:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800344a:	f001 fdcf 	bl	8004fec <hypot_f>
 800344e:	4603      	mov	r3, r0
 8003450:	4619      	mov	r1, r3
 8003452:	4620      	mov	r0, r4
 8003454:	f7fd fce0 	bl	8000e18 <__aeabi_fdiv>
 8003458:	4603      	mov	r3, r0
 800345a:	643b      	str	r3, [r7, #64]	; 0x40
            // Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <gc_execute_line+0x1224>)
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d103      	bne.n	800346c <gc_execute_line+0x115c>
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
            */
            // Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel" (go figure!),
            // even though it is advised against ever generating such circles in a single line of g-code. By
            // inverting the sign of h_x2_div_d the center of the circles is placed on the opposite side of the line of
            // travel and thus we get the unadvisably long arcs as prescribed.
            if (gc_block.values.r < 0) {
 800346c:	4b31      	ldr	r3, [pc, #196]	; (8003534 <gc_execute_line+0x1224>)
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fdb9 	bl	8000fec <__aeabi_fcmplt>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <gc_execute_line+0x1184>
                h_x2_div_d = -h_x2_div_d;
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <gc_execute_line+0x1224>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <gc_execute_line+0x1224>)
 8003492:	6293      	str	r3, [r2, #40]	; 0x28
            }
            // Complete the operation by calculating the actual center of the arc
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8003494:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8003498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800349a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800349c:	f7fd fc08 	bl	8000cb0 <__aeabi_fmul>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034a6:	f7fd faf9 	bl	8000a9c <__aeabi_fsub>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd fbfd 	bl	8000cb0 <__aeabi_fmul>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4619      	mov	r1, r3
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <gc_execute_line+0x1224>)
 80034bc:	1ca3      	adds	r3, r4, #2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	6099      	str	r1, [r3, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80034c4:	f897 4055 	ldrb.w	r4, [r7, #85]	; 0x55
 80034c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034cc:	f7fd fbf0 	bl	8000cb0 <__aeabi_fmul>
 80034d0:	4603      	mov	r3, r0
 80034d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd fae3 	bl	8000aa0 <__addsf3>
 80034da:	4603      	mov	r3, r0
 80034dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fbe5 	bl	8000cb0 <__aeabi_fmul>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4619      	mov	r1, r3
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <gc_execute_line+0x1224>)
 80034ec:	1ca3      	adds	r3, r4, #2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	6099      	str	r1, [r3, #8]
            if (delta_r > 0.005f) {
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
            }
          }
          break;
 80034f4:	e0d6      	b.n	80036a4 <gc_execute_line+0x1394>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 80034f6:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80034fa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80034fe:	2101      	movs	r1, #1
 8003500:	4099      	lsls	r1, r3
 8003502:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003506:	2001      	movs	r0, #1
 8003508:	fa00 f303 	lsl.w	r3, r0, r3
 800350c:	430b      	orrs	r3, r1
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <gc_execute_line+0x1208>
 8003514:	2323      	movs	r3, #35	; 0x23
 8003516:	e3a2      	b.n	8003c5e <gc_execute_line+0x194e>
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8003518:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800351c:	f023 030e 	bic.w	r3, r3, #14
 8003520:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <gc_execute_line+0x1224>)
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d134      	bne.n	8003596 <gc_execute_line+0x1286>
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003532:	e02c      	b.n	800358e <gc_execute_line+0x127e>
 8003534:	20000eb8 	.word	0x20000eb8
 8003538:	20000e74 	.word	0x20000e74
 800353c:	20000eec 	.word	0x20000eec
 8003540:	20000e90 	.word	0x20000e90
 8003544:	41cb3333 	.word	0x41cb3333
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8003548:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800354c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003550:	fa42 f303 	asr.w	r3, r2, r3
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <gc_execute_line+0x1274>
 800355c:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003564:	4aa5      	ldr	r2, [pc, #660]	; (80037fc <gc_execute_line+0x14ec>)
 8003566:	3302      	adds	r3, #2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	49a4      	ldr	r1, [pc, #656]	; (8003800 <gc_execute_line+0x14f0>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb9d 	bl	8000cb0 <__aeabi_fmul>
 8003576:	4603      	mov	r3, r0
 8003578:	4619      	mov	r1, r3
 800357a:	4aa0      	ldr	r2, [pc, #640]	; (80037fc <gc_execute_line+0x14ec>)
 800357c:	1ca3      	adds	r3, r4, #2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	6099      	str	r1, [r3, #8]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8003584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003588:	3301      	adds	r3, #1
 800358a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800358e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003592:	2b02      	cmp	r3, #2
 8003594:	d9d8      	bls.n	8003548 <gc_execute_line+0x1238>
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8003596:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800359a:	4a98      	ldr	r2, [pc, #608]	; (80037fc <gc_execute_line+0x14ec>)
 800359c:	3302      	adds	r3, #2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4619      	mov	r1, r3
 80035a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035a8:	f7fd fa78 	bl	8000a9c <__aeabi_fsub>
 80035ac:	4603      	mov	r3, r0
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 80035b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035b4:	4a91      	ldr	r2, [pc, #580]	; (80037fc <gc_execute_line+0x14ec>)
 80035b6:	3302      	adds	r3, #2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4619      	mov	r1, r3
 80035c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035c2:	f7fd fa6b 	bl	8000a9c <__aeabi_fsub>
 80035c6:	4603      	mov	r3, r0
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
            float target_r = hypot_f(x,y);
 80035ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035ce:	f001 fd0d 	bl	8004fec <hypot_f>
 80035d2:	6338      	str	r0, [r7, #48]	; 0x30
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 80035d4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80035d8:	4a88      	ldr	r2, [pc, #544]	; (80037fc <gc_execute_line+0x14ec>)
 80035da:	3302      	adds	r3, #2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	6898      	ldr	r0, [r3, #8]
 80035e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035e6:	4a85      	ldr	r2, [pc, #532]	; (80037fc <gc_execute_line+0x14ec>)
 80035e8:	3302      	adds	r3, #2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f001 fcfb 	bl	8004fec <hypot_f>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b80      	ldr	r3, [pc, #512]	; (80037fc <gc_execute_line+0x14ec>)
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
            float delta_r = fabsf(target_r-gc_block.values.r);
 80035fc:	4b7f      	ldr	r3, [pc, #508]	; (80037fc <gc_execute_line+0x14ec>)
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	4619      	mov	r1, r3
 8003602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003604:	f7fd fa4a 	bl	8000a9c <__aeabi_fsub>
 8003608:	4603      	mov	r3, r0
 800360a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (delta_r > 0.005f) {
 8003610:	497c      	ldr	r1, [pc, #496]	; (8003804 <gc_execute_line+0x14f4>)
 8003612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003614:	f7fd fd08 	bl	8001028 <__aeabi_fcmpgt>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d100      	bne.n	8003620 <gc_execute_line+0x1310>
          break;
 800361e:	e041      	b.n	80036a4 <gc_execute_line+0x1394>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8003620:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003626:	f7fd fcff 	bl	8001028 <__aeabi_fcmpgt>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <gc_execute_line+0x1324>
 8003630:	2321      	movs	r3, #33	; 0x21
 8003632:	e314      	b.n	8003c5e <gc_execute_line+0x194e>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8003634:	4b71      	ldr	r3, [pc, #452]	; (80037fc <gc_execute_line+0x14ec>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	4973      	ldr	r1, [pc, #460]	; (8003808 <gc_execute_line+0x14f8>)
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fb38 	bl	8000cb0 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fcd1 	bl	8000fec <__aeabi_fcmplt>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d100      	bne.n	8003652 <gc_execute_line+0x1342>
          break;
 8003650:	e028      	b.n	80036a4 <gc_execute_line+0x1394>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8003652:	2321      	movs	r3, #33	; 0x21
 8003654:	e303      	b.n	8003c5e <gc_execute_line+0x194e>
        case MOTION_MODE_PROBE_TOWARD_NO_ERROR: case MOTION_MODE_PROBE_AWAY_NO_ERROR:
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8003656:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800365a:	f043 0310 	orr.w	r3, r3, #16
 800365e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        case MOTION_MODE_PROBE_TOWARD: case MOTION_MODE_PROBE_AWAY:
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8003662:	4b66      	ldr	r3, [pc, #408]	; (80037fc <gc_execute_line+0x14ec>)
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b8e      	cmp	r3, #142	; 0x8e
 8003668:	d003      	beq.n	8003672 <gc_execute_line+0x1362>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 800366a:	4b64      	ldr	r3, [pc, #400]	; (80037fc <gc_execute_line+0x14ec>)
 800366c:	785b      	ldrb	r3, [r3, #1]
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 800366e:	2b8f      	cmp	r3, #143	; 0x8f
 8003670:	d105      	bne.n	800367e <gc_execute_line+0x136e>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8003672:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          // [G38 Errors]: Target is same current. No axis words. Cutter compensation is enabled. Feed rate
          //   is undefined. Probe is triggered. NOTE: Probe check moved to probe cycle. Instead of returning
          //   an error, it issues an alarm to prevent further motion to the probe. It's also done there to
          //   allow the planner buffer to empty and move off the probe trigger before another probing cycle.
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 800367e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <gc_execute_line+0x137a>
 8003686:	231a      	movs	r3, #26
 8003688:	e2e9      	b.n	8003c5e <gc_execute_line+0x194e>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 800368a:	220c      	movs	r2, #12
 800368c:	495f      	ldr	r1, [pc, #380]	; (800380c <gc_execute_line+0x14fc>)
 800368e:	4860      	ldr	r0, [pc, #384]	; (8003810 <gc_execute_line+0x1500>)
 8003690:	f006 ffa2 	bl	800a5d8 <memcmp>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <gc_execute_line+0x1392>
 800369a:	2321      	movs	r3, #33	; 0x21
 800369c:	e2df      	b.n	8003c5e <gc_execute_line+0x194e>
          break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <gc_execute_line+0x1394>
          break;
 80036a2:	bf00      	nop

  // [21. Program flow ]: No error checks required.

  // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
  // radius mode, or axis words that aren't used in the block.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80036a4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <gc_execute_line+0x13ae>
      // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 80036b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036b4:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 80036b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80036bc:	e007      	b.n	80036ce <gc_execute_line+0x13be>
  } else {
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80036be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036c2:	f423 7348 	bic.w	r3, r3, #800	; 0x320
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  #elif defined AB_AXIS
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B))); } // Remove axis words.
  #elif defined ABC_AXIS
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B)|bit(WORD_C))); } // Remove axis words.
  #else
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
 80036ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <gc_execute_line+0x13d2>
 80036d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036da:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80036de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  #endif
// ---
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80036e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <gc_execute_line+0x13de>
 80036ea:	2324      	movs	r3, #36	; 0x24
 80036ec:	e2b7      	b.n	8003c5e <gc_execute_line+0x194e>
     need to update the state and execute the block according to the order-of-execution.
  */

  // Initialize planner data struct for motion blocks.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 80036f4:	220c      	movs	r2, #12
 80036f6:	2100      	movs	r1, #0
 80036f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fa:	f006 ff7c 	bl	800a5f6 <memset>

                                              // Intercept jog commands and complete error checking for valid jog commands and execute.
                                              // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
                                              // targets are computed correctly. The final parser position after a jog is updated in
                                              // protocol_execute_realtime() when jogging completes or is canceled.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80036fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d033      	beq.n	8003772 <gc_execute_line+0x1462>
      // Only distance and unit modal commands and G53 absolute override command are allowed.
      // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 800370a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800370e:	f023 0349 	bic.w	r3, r3, #73	; 0x49
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <gc_execute_line+0x140a>
 8003716:	2310      	movs	r3, #16
 8003718:	e2a1      	b.n	8003c5e <gc_execute_line+0x194e>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 800371a:	4b38      	ldr	r3, [pc, #224]	; (80037fc <gc_execute_line+0x14ec>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b35      	cmp	r3, #53	; 0x35
 8003720:	d005      	beq.n	800372e <gc_execute_line+0x141e>
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <gc_execute_line+0x14ec>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <gc_execute_line+0x141e>
 800372a:	2310      	movs	r3, #16
 800372c:	e297      	b.n	8003c5e <gc_execute_line+0x194e>

      // Initialize planner data to current spindle and coolant modal state.
      pl_data->spindle_speed = gc_state.spindle_speed;
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <gc_execute_line+0x1504>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	605a      	str	r2, [r3, #4]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <gc_execute_line+0x1504>)
 8003738:	7a5a      	ldrb	r2, [r3, #9]
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <gc_execute_line+0x1504>)
 800373c:	7a1b      	ldrb	r3, [r3, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	743b      	strb	r3, [r7, #16]

      uint8_t status = jog_execute(&plan_data, &gc_block);
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	492c      	ldr	r1, [pc, #176]	; (80037fc <gc_execute_line+0x14ec>)
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fa9c 	bl	8003c88 <jog_execute>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8003756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <gc_execute_line+0x145c>
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <gc_execute_line+0x1504>)
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <gc_execute_line+0x14ec>)
 8003762:	331c      	adds	r3, #28
 8003764:	3234      	adds	r2, #52	; 0x34
 8003766:	ca07      	ldmia	r2, {r0, r1, r2}
 8003768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      return(status);
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003770:	e275      	b.n	8003c5e <gc_execute_line+0x194e>
  }

  // If in laser mode, setup laser power based on current and past parser conditions.
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <gc_execute_line+0x1508>)
 8003774:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d059      	beq.n	8003834 <gc_execute_line+0x1524>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <gc_execute_line+0x14ec>)
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d00d      	beq.n	80037a4 <gc_execute_line+0x1494>
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <gc_execute_line+0x14ec>)
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d009      	beq.n	80037a4 <gc_execute_line+0x1494>
          || (gc_block.modal.motion == MOTION_MODE_CCW_ARC))) {
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <gc_execute_line+0x14ec>)
 8003792:	785b      	ldrb	r3, [r3, #1]
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8003794:	2b03      	cmp	r3, #3
 8003796:	d005      	beq.n	80037a4 <gc_execute_line+0x1494>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8003798:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      }

      // Any motion mode with axis words is allowed to be passed from a spindle speed update. 
      // NOTE: G1 and G0 without axis words sets axis_command to none. G28/30 are intentionally omitted.
      // TODO: Check sync conditions for M3 enabled motions that don't enter the planner. (zero length).
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 80037a4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <gc_execute_line+0x14b2>
 80037ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d106      	bne.n	80037c2 <gc_execute_line+0x14b2>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 80037b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80037c0:	e038      	b.n	8003834 <gc_execute_line+0x1524>
      }
      else {
        // M3 constant power laser requires planner syncs to update the laser when changing between
        // a G1/2/3 motion mode state and vice versa when there is no motion in the line.
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <gc_execute_line+0x1504>)
 80037c4:	7a5b      	ldrb	r3, [r3, #9]
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d134      	bne.n	8003834 <gc_execute_line+0x1524>
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <gc_execute_line+0x1504>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d007      	beq.n	80037e2 <gc_execute_line+0x14d2>
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <gc_execute_line+0x1504>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <gc_execute_line+0x14d2>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <gc_execute_line+0x1504>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d11c      	bne.n	800381c <gc_execute_line+0x150c>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80037e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d022      	beq.n	8003834 <gc_execute_line+0x1524>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
 80037ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80037fa:	e01b      	b.n	8003834 <gc_execute_line+0x1524>
 80037fc:	20000eb8 	.word	0x20000eb8
 8003800:	41cb3333 	.word	0x41cb3333
 8003804:	3ba3d70a 	.word	0x3ba3d70a
 8003808:	3a83126f 	.word	0x3a83126f
 800380c:	20000eec 	.word	0x20000eec
 8003810:	20000e90 	.word	0x20000e90
 8003814:	20000e74 	.word	0x20000e74
 8003818:	20001048 	.word	0x20001048
            }
          }
          else {
            // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800381c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <gc_execute_line+0x1524>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8003828:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800382c:	f043 0320 	orr.w	r3, r3, #32
 8003830:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      }
  }

  // [0. Non-specific/common error-checks and miscellaneous setup]:
  // NOTE: If no line number is present, the value is zero.
  gc_state.line_number = gc_block.values.n;
 8003834:	4b9d      	ldr	r3, [pc, #628]	; (8003aac <gc_execute_line+0x179c>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a9d      	ldr	r2, [pc, #628]	; (8003ab0 <gc_execute_line+0x17a0>)
 800383a:	6193      	str	r3, [r2, #24]
  #endif

  // [1. Comments feedback ]:  NOT SUPPORTED

  // [2. Set feed rate mode ]:
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800383c:	4b9b      	ldr	r3, [pc, #620]	; (8003aac <gc_execute_line+0x179c>)
 800383e:	789a      	ldrb	r2, [r3, #2]
 8003840:	4b9b      	ldr	r3, [pc, #620]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003842:	705a      	strb	r2, [r3, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <gc_execute_line+0x154a>
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	7a1b      	ldrb	r3, [r3, #8]
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	b2da      	uxtb	r2, r3
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	721a      	strb	r2, [r3, #8]

  // [3. Set feed rate ]:
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800385a:	4b94      	ldr	r3, [pc, #592]	; (8003aac <gc_execute_line+0x179c>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a94      	ldr	r2, [pc, #592]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003860:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8003862:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	601a      	str	r2, [r3, #0]

  // [4. Set spindle speed ]:
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 800386a:	4b91      	ldr	r3, [pc, #580]	; (8003ab0 <gc_execute_line+0x17a0>)
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <gc_execute_line+0x179c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fd fbaf 	bl	8000fd8 <__aeabi_fcmpeq>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <gc_execute_line+0x157c>
 8003880:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d021      	beq.n	80038d0 <gc_execute_line+0x15c0>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800388c:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <gc_execute_line+0x17a0>)
 800388e:	7a5b      	ldrb	r3, [r3, #9]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <gc_execute_line+0x15b8>
#ifdef VARIABLE_SPINDLE
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8003894:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003898:	2b00      	cmp	r3, #0
 800389a:	db15      	blt.n	80038c8 <gc_execute_line+0x15b8>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800389c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <gc_execute_line+0x15a8>
            spindle_sync(gc_state.modal.spindle, 0.0);
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038aa:	7a5b      	ldrb	r3, [r3, #9]
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fe37 	bl	8008524 <spindle_sync>
 80038b6:	e007      	b.n	80038c8 <gc_execute_line+0x15b8>
          }
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 80038b8:	4b7d      	ldr	r3, [pc, #500]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038ba:	7a5a      	ldrb	r2, [r3, #9]
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <gc_execute_line+0x179c>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f004 fe2e 	bl	8008524 <spindle_sync>
        }
#else
          spindle_sync(gc_state.modal.spindle, 0.0);
#endif
      }
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80038c8:	4b78      	ldr	r3, [pc, #480]	; (8003aac <gc_execute_line+0x179c>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a78      	ldr	r2, [pc, #480]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038ce:	60d3      	str	r3, [r2, #12]
  }
  // NOTE: Pass zero spindle speed for all restricted laser motions.
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80038d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <gc_execute_line+0x15d4>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 80038dc:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	605a      	str	r2, [r3, #4]
  } // else { pl_data->spindle_speed = 0.0; } // Initialized as zero already.

  // [5. Select tool ]: NOT SUPPORTED. Only tracks tool value.
  gc_state.tool = gc_block.values.t;
 80038e4:	4b71      	ldr	r3, [pc, #452]	; (8003aac <gc_execute_line+0x179c>)
 80038e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80038ea:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038ec:	751a      	strb	r2, [r3, #20]

  // [6. Change tool ]: NOT SUPPORTED

  // [7. Spindle control ]:
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80038ee:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038f0:	7a5a      	ldrb	r2, [r3, #9]
 80038f2:	4b6e      	ldr	r3, [pc, #440]	; (8003aac <gc_execute_line+0x179c>)
 80038f4:	7a9b      	ldrb	r3, [r3, #10]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d00b      	beq.n	8003912 <gc_execute_line+0x1602>
    // Update spindle control and apply spindle speed when enabling it in this block.
    // NOTE: All spindle state changes are synced, even in laser mode. Also, pl_data,
    // rather than gc_state, is used to manage laser state for non-laser motions.
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <gc_execute_line+0x179c>)
 80038fc:	7a9a      	ldrb	r2, [r3, #10]
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f004 fe0d 	bl	8008524 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 800390a:	4b68      	ldr	r3, [pc, #416]	; (8003aac <gc_execute_line+0x179c>)
 800390c:	7a9a      	ldrb	r2, [r3, #10]
 800390e:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003910:	725a      	strb	r2, [r3, #9]
  }
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	7a1a      	ldrb	r2, [r3, #8]
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003918:	7a5b      	ldrb	r3, [r3, #9]
 800391a:	4313      	orrs	r3, r2
 800391c:	b2da      	uxtb	r2, r3
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	721a      	strb	r2, [r3, #8]

  // [8. Coolant control ]:
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003924:	7a1a      	ldrb	r2, [r3, #8]
 8003926:	4b61      	ldr	r3, [pc, #388]	; (8003aac <gc_execute_line+0x179c>)
 8003928:	7a5b      	ldrb	r3, [r3, #9]
 800392a:	429a      	cmp	r2, r3
 800392c:	d014      	beq.n	8003958 <gc_execute_line+0x1648>
    // NOTE: Coolant M-codes are modal. Only one command per line is allowed. But, multiple states
    // can exist at the same time, while coolant disable clears all states.
    coolant_sync(gc_block.modal.coolant);
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <gc_execute_line+0x179c>)
 8003930:	7a5b      	ldrb	r3, [r3, #9]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fb98 	bl	8002068 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 8003938:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <gc_execute_line+0x179c>)
 800393a:	7a5b      	ldrb	r3, [r3, #9]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <gc_execute_line+0x1638>
 8003940:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003942:	2200      	movs	r2, #0
 8003944:	721a      	strb	r2, [r3, #8]
 8003946:	e007      	b.n	8003958 <gc_execute_line+0x1648>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <gc_execute_line+0x17a0>)
 800394a:	7a1a      	ldrb	r2, [r3, #8]
 800394c:	4b57      	ldr	r3, [pc, #348]	; (8003aac <gc_execute_line+0x179c>)
 800394e:	7a5b      	ldrb	r3, [r3, #9]
 8003950:	4313      	orrs	r3, r2
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003956:	721a      	strb	r2, [r3, #8]
  }
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	7a1a      	ldrb	r2, [r3, #8]
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <gc_execute_line+0x17a0>)
 800395e:	7a1b      	ldrb	r3, [r3, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	b2da      	uxtb	r2, r3
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	721a      	strb	r2, [r3, #8]
		mc_override_ctrl_update(gc_state.modal.override);
	}
#endif

  // [10. Dwell ]:
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <gc_execute_line+0x179c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <gc_execute_line+0x166a>
 8003970:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <gc_execute_line+0x179c>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f91f 	bl	8004bb8 <mc_dwell>

  // [11. Set active plane ]:
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <gc_execute_line+0x179c>)
 800397c:	795a      	ldrb	r2, [r3, #5]
 800397e:	4b4c      	ldr	r3, [pc, #304]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003980:	711a      	strb	r2, [r3, #4]

  // [12. Set length units ]:
  gc_state.modal.units = gc_block.modal.units;
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <gc_execute_line+0x179c>)
 8003984:	78da      	ldrb	r2, [r3, #3]
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003988:	709a      	strb	r2, [r3, #2]

  // [14. Cutter length compensation ]: G43.1 and G49 supported. G43 NOT SUPPORTED.
  // NOTE: If G43 were supported, its operation wouldn't be any different from G43.1 in terms
  // of execution. The error-checking step would simply load the offset value into the correct
  // axis of the block XYZ value array.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 800398a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800398e:	2b03      	cmp	r3, #3
 8003990:	d11c      	bne.n	80039cc <gc_execute_line+0x16bc>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <gc_execute_line+0x179c>)
 8003994:	799a      	ldrb	r2, [r3, #6]
 8003996:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003998:	715a      	strb	r2, [r3, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 800399a:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <gc_execute_line+0x17a0>)
 800399c:	795b      	ldrb	r3, [r3, #5]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <gc_execute_line+0x169a>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 80039a2:	4b42      	ldr	r3, [pc, #264]	; (8003aac <gc_execute_line+0x179c>)
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	63da      	str	r2, [r3, #60]	; 0x3c
    } // else G43.1
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <gc_execute_line+0x179c>)
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fd fb0f 	bl	8000fd8 <__aeabi_fcmpeq>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <gc_execute_line+0x16bc>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 80039c0:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <gc_execute_line+0x179c>)
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
      system_flag_wco_change();
 80039c8:	f006 fc12 	bl	800a1f0 <system_flag_wco_change>
    }
  }

  // [15. Coordinate system selection ]:
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039ce:	799a      	ldrb	r2, [r3, #6]
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <gc_execute_line+0x179c>)
 80039d2:	79db      	ldrb	r3, [r3, #7]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d00c      	beq.n	80039f2 <gc_execute_line+0x16e2>
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <gc_execute_line+0x179c>)
 80039da:	79da      	ldrb	r2, [r3, #7]
 80039dc:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039de:	719a      	strb	r2, [r3, #6]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 80039e0:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039e2:	3328      	adds	r3, #40	; 0x28
 80039e4:	f107 0214 	add.w	r2, r7, #20
 80039e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    system_flag_wco_change();
 80039ee:	f006 fbff 	bl	800a1f0 <system_flag_wco_change>

  // [16. Set path control mode ]: G61.1/G64 NOT SUPPORTED
  // gc_state.modal.control = gc_block.modal.control; // NOTE: Always default.

  // [17. Set distance mode ]:
  gc_state.modal.distance = gc_block.modal.distance;
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <gc_execute_line+0x179c>)
 80039f4:	791a      	ldrb	r2, [r3, #4]
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039f8:	70da      	strb	r2, [r3, #3]

  // [18. Set retract mode ]: NOT SUPPORTED

  // [19. Go to predefined position, Set G10, or Set axis offsets ]:
  switch(gc_block.non_modal_command) {
 80039fa:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <gc_execute_line+0x179c>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b26      	cmp	r3, #38	; 0x26
 8003a00:	d040      	beq.n	8003a84 <gc_execute_line+0x1774>
 8003a02:	2b26      	cmp	r3, #38	; 0x26
 8003a04:	dc06      	bgt.n	8003a14 <gc_execute_line+0x1704>
 8003a06:	2b1c      	cmp	r3, #28
 8003a08:	d021      	beq.n	8003a4e <gc_execute_line+0x173e>
 8003a0a:	2b1e      	cmp	r3, #30
 8003a0c:	d01f      	beq.n	8003a4e <gc_execute_line+0x173e>
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d007      	beq.n	8003a22 <gc_execute_line+0x1712>
 8003a12:	e05e      	b.n	8003ad2 <gc_execute_line+0x17c2>
 8003a14:	2b5c      	cmp	r3, #92	; 0x5c
 8003a16:	d03f      	beq.n	8003a98 <gc_execute_line+0x1788>
 8003a18:	2b66      	cmp	r3, #102	; 0x66
 8003a1a:	d051      	beq.n	8003ac0 <gc_execute_line+0x17b0>
 8003a1c:	2b28      	cmp	r3, #40	; 0x28
 8003a1e:	d036      	beq.n	8003a8e <gc_execute_line+0x177e>
 8003a20:	e057      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_COORDINATE_DATA:
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8003a22:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003a26:	4923      	ldr	r1, [pc, #140]	; (8003ab4 <gc_execute_line+0x17a4>)
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 f837 	bl	8007a9c <settings_write_coord_data>
      // Update system coordinate system if currently active.
      if (gc_state.modal.coord_select == coord_select) {
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a30:	799b      	ldrb	r3, [r3, #6]
 8003a32:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d14a      	bne.n	8003ad0 <gc_execute_line+0x17c0>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <gc_execute_line+0x179c>)
 8003a3e:	3328      	adds	r3, #40	; 0x28
 8003a40:	3210      	adds	r2, #16
 8003a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        system_flag_wco_change();
 8003a48:	f006 fbd2 	bl	800a1f0 <system_flag_wco_change>
      }
      break;
 8003a4c:	e040      	b.n	8003ad0 <gc_execute_line+0x17c0>
    case NON_MODAL_GO_HOME_0: case NON_MODAL_GO_HOME_1:
      // Move to intermediate position before going home. Obeys current coordinate system and offsets
      // and absolute and incremental modes.
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	7a1b      	ldrb	r3, [r3, #8]
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	721a      	strb	r2, [r3, #8]
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8003a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <gc_execute_line+0x175c>
 8003a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a66:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <gc_execute_line+0x17a8>)
 8003a68:	f000 fe1a 	bl	80046a0 <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8003a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6e:	4811      	ldr	r0, [pc, #68]	; (8003ab4 <gc_execute_line+0x17a4>)
 8003a70:	f000 fe16 	bl	80046a0 <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <gc_execute_line+0x179c>)
 8003a78:	331c      	adds	r3, #28
 8003a7a:	3210      	adds	r2, #16
 8003a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      break;
 8003a82:	e026      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_HOME_0:
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8003a84:	490d      	ldr	r1, [pc, #52]	; (8003abc <gc_execute_line+0x17ac>)
 8003a86:	2006      	movs	r0, #6
 8003a88:	f004 f808 	bl	8007a9c <settings_write_coord_data>
      break;
 8003a8c:	e021      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_HOME_1:
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8003a8e:	490b      	ldr	r1, [pc, #44]	; (8003abc <gc_execute_line+0x17ac>)
 8003a90:	2007      	movs	r0, #7
 8003a92:	f004 f803 	bl	8007a9c <settings_write_coord_data>
      break;
 8003a96:	e01c      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_COORDINATE_OFFSET:
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <gc_execute_line+0x179c>)
 8003a9c:	3334      	adds	r3, #52	; 0x34
 8003a9e:	3234      	adds	r2, #52	; 0x34
 8003aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      system_flag_wco_change();
 8003aa6:	f006 fba3 	bl	800a1f0 <system_flag_wco_change>
      break;
 8003aaa:	e012      	b.n	8003ad2 <gc_execute_line+0x17c2>
 8003aac:	20000eb8 	.word	0x20000eb8
 8003ab0:	20000e74 	.word	0x20000e74
 8003ab4:	20000ec8 	.word	0x20000ec8
 8003ab8:	20000eec 	.word	0x20000eec
 8003abc:	20000e90 	.word	0x20000e90
    case NON_MODAL_RESET_COORDINATE_OFFSET:
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8003ac0:	220c      	movs	r2, #12
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4868      	ldr	r0, [pc, #416]	; (8003c68 <gc_execute_line+0x1958>)
 8003ac6:	f006 fd96 	bl	800a5f6 <memset>
      system_flag_wco_change();
 8003aca:	f006 fb91 	bl	800a1f0 <system_flag_wco_change>
      break;
 8003ace:	e000      	b.n	8003ad2 <gc_execute_line+0x17c2>
      break;
 8003ad0:	bf00      	nop


  // [20. Motion modes ]:
  // NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes.
  // Enter motion modes only if there are axis words or a motion mode command word in the block.
  gc_state.modal.motion = gc_block.modal.motion;
 8003ad2:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <gc_execute_line+0x195c>)
 8003ad4:	785a      	ldrb	r2, [r3, #1]
 8003ad6:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <gc_execute_line+0x1960>)
 8003ad8:	701a      	strb	r2, [r3, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8003ada:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <gc_execute_line+0x1960>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b50      	cmp	r3, #80	; 0x50
 8003ae0:	d067      	beq.n	8003bb2 <gc_execute_line+0x18a2>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8003ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d163      	bne.n	8003bb2 <gc_execute_line+0x18a2>
      uint8_t gc_update_pos = GC_UPDATE_POS_TARGET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8003af0:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <gc_execute_line+0x1960>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d104      	bne.n	8003b02 <gc_execute_line+0x17f2>
        mc_line(gc_block.values.xyz, pl_data);
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	485e      	ldr	r0, [pc, #376]	; (8003c74 <gc_execute_line+0x1964>)
 8003afc:	f000 fdd0 	bl	80046a0 <mc_line>
 8003b00:	e045      	b.n	8003b8e <gc_execute_line+0x187e>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <gc_execute_line+0x1960>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <gc_execute_line+0x1812>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	7a1b      	ldrb	r3, [r3, #8]
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	721a      	strb	r2, [r3, #8]
        mc_line(gc_block.values.xyz, pl_data);
 8003b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b1a:	4856      	ldr	r0, [pc, #344]	; (8003c74 <gc_execute_line+0x1964>)
 8003b1c:	f000 fdc0 	bl	80046a0 <mc_line>
 8003b20:	e035      	b.n	8003b8e <gc_execute_line+0x187e>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8003b22:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <gc_execute_line+0x1960>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <gc_execute_line+0x1822>
 8003b2a:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <gc_execute_line+0x1960>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d11c      	bne.n	8003b6c <gc_execute_line+0x185c>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8003b32:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <gc_execute_line+0x195c>)
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              axis_0, axis_1, axis_linear, bit_istrue(gc_parser_flags, GC_PARSER_ARC_IS_CLOCKWISE));
 8003b36:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003b3a:	f002 0204 	and.w	r2, r2, #4
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	bf14      	ite	ne
 8003b42:	2201      	movne	r2, #1
 8003b44:	2200      	moveq	r2, #0
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	9204      	str	r2, [sp, #16]
 8003b4a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003b4e:	9203      	str	r2, [sp, #12]
 8003b50:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003b54:	9202      	str	r2, [sp, #8]
 8003b56:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003b5a:	9201      	str	r2, [sp, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <gc_execute_line+0x1968>)
 8003b60:	4a46      	ldr	r2, [pc, #280]	; (8003c7c <gc_execute_line+0x196c>)
 8003b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b64:	4843      	ldr	r0, [pc, #268]	; (8003c74 <gc_execute_line+0x1964>)
 8003b66:	f000 fde7 	bl	8004738 <mc_arc>
 8003b6a:	e010      	b.n	8003b8e <gc_execute_line+0x187e>
      } else {
        // NOTE: gc_block.values.xyz is returned from mc_probe_cycle with the updated position value. So
        // upon a successful probing cycle, the machine position and the returned value should be the same.
        #ifndef ALLOW_FEED_OVERRIDE_DURING_PROBE_CYCLES
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	7a1b      	ldrb	r3, [r3, #8]
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	721a      	strb	r2, [r3, #8]
        #endif
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8003b7a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b82:	483c      	ldr	r0, [pc, #240]	; (8003c74 <gc_execute_line+0x1964>)
 8003b84:	f001 f856 	bl	8004c34 <mc_probe_cycle>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }  
     
      // As far as the parser is concerned, the position is now == target. In reality the
      // motion control system might still be processing the action and the real tool position
      // in any intermediate location.
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8003b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <gc_execute_line+0x1896>
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <gc_execute_line+0x1960>)
 8003b98:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <gc_execute_line+0x195c>)
 8003b9a:	331c      	adds	r3, #28
 8003b9c:	3234      	adds	r2, #52	; 0x34
 8003b9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ba4:	e005      	b.n	8003bb2 <gc_execute_line+0x18a2>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8003ba6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <gc_execute_line+0x18a2>
        gc_sync_position(); // gc_state.position[] = sys_position
 8003bae:	f7fe fba3 	bl	80022f8 <gc_sync_position>
  }

  // [21. Program flow ]:
  // M0,M1,M2,M30: Perform non-running program flow actions. During a program pause, the buffer may
  // refill and can only be resumed by the cycle start run-time command.
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <gc_execute_line+0x195c>)
 8003bb4:	7a1a      	ldrb	r2, [r3, #8]
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <gc_execute_line+0x1960>)
 8003bb8:	71da      	strb	r2, [r3, #7]
  if (gc_state.modal.program_flow) {
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <gc_execute_line+0x1960>)
 8003bbc:	79db      	ldrb	r3, [r3, #7]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d04c      	beq.n	8003c5c <gc_execute_line+0x194c>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8003bc2:	f002 fa97 	bl	80060f4 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <gc_execute_line+0x1960>)
 8003bc8:	79db      	ldrb	r3, [r3, #7]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d109      	bne.n	8003be2 <gc_execute_line+0x18d2>
      if (sys.state != STATE_CHECK_MODE) {
 8003bce:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <gc_execute_line+0x1970>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d03f      	beq.n	8003c56 <gc_execute_line+0x1946>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8003bd6:	2008      	movs	r0, #8
 8003bd8:	f006 fb86 	bl	800a2e8 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8003bdc:	f002 faae 	bl	800613c <protocol_execute_realtime>
 8003be0:	e039      	b.n	8003c56 <gc_execute_line+0x1946>
    } else { // == PROGRAM_FLOW_COMPLETED
      // Upon program complete, only a subset of g-codes reset to certain defaults, according to
      // LinuxCNC's program end descriptions and testing. Only modal groups [G-code 1,2,3,5,7,12]
      // and [M-code 7,8,9] reset to [G1,G17,G90,G94,G40,G54,M5,M9,M48]. The remaining modal groups
      // [G-code 4,6,8,10,13,14,15] and [M-code 4,5,6] and the modal words [F,S,T,H] do not reset.
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <gc_execute_line+0x1960>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <gc_execute_line+0x1960>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	711a      	strb	r2, [r3, #4]
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <gc_execute_line+0x1960>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	70da      	strb	r2, [r3, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <gc_execute_line+0x1960>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	705a      	strb	r2, [r3, #1]
      // gc_state.modal.cutter_comp = CUTTER_COMP_DISABLE; // Not supported.
      gc_state.modal.coord_select = 0; // G54
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <gc_execute_line+0x1960>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	719a      	strb	r2, [r3, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <gc_execute_line+0x1960>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	725a      	strb	r2, [r3, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 8003c06:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <gc_execute_line+0x1960>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	721a      	strb	r2, [r3, #8]
					gc_state.modal.override = OVERRIDE_PARKING_MOTION;
				#endif
			#endif

      #ifdef RESTORE_OVERRIDES_AFTER_PROGRAM_END
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <gc_execute_line+0x1970>)
 8003c0e:	2264      	movs	r2, #100	; 0x64
 8003c10:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <gc_execute_line+0x1970>)
 8003c14:	2264      	movs	r2, #100	; 0x64
 8003c16:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <gc_execute_line+0x1970>)
 8003c1a:	2264      	movs	r2, #100	; 0x64
 8003c1c:	729a      	strb	r2, [r3, #10]
      #endif

      // Execute coordinate change and spindle/coolant stop.
      if (sys.state != STATE_CHECK_MODE) {
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <gc_execute_line+0x1970>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d014      	beq.n	8003c50 <gc_execute_line+0x1940>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <gc_execute_line+0x1960>)
 8003c28:	799b      	ldrb	r3, [r3, #6]
 8003c2a:	4916      	ldr	r1, [pc, #88]	; (8003c84 <gc_execute_line+0x1974>)
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 f883 	bl	8007d38 <settings_read_coord_data>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <gc_execute_line+0x192c>
 8003c38:	2307      	movs	r3, #7
 8003c3a:	e010      	b.n	8003c5e <gc_execute_line+0x194e>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8003c3c:	f006 fad8 	bl	800a1f0 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	2000      	movs	r0, #0
 8003c46:	f004 fc23 	bl	8008490 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fe f9e0 	bl	8002010 <coolant_set_state>
      }
      report_feedback_message(MESSAGE_PROGRAM_END);
 8003c50:	2008      	movs	r0, #8
 8003c52:	f002 ff5b 	bl	8006b0c <report_feedback_message>
    }
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <gc_execute_line+0x1960>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	71da      	strb	r2, [r3, #7]
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3758      	adds	r7, #88	; 0x58
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bdb0      	pop	{r4, r5, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000ea8 	.word	0x20000ea8
 8003c6c:	20000eb8 	.word	0x20000eb8
 8003c70:	20000e74 	.word	0x20000e74
 8003c74:	20000eec 	.word	0x20000eec
 8003c78:	20000ec8 	.word	0x20000ec8
 8003c7c:	20000e90 	.word	0x20000e90
 8003c80:	20000efc 	.word	0x20000efc
 8003c84:	20000e9c 	.word	0x20000e9c

08003c88 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7a1b      	ldrb	r3, [r3, #8]
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	721a      	strb	r2, [r3, #8]
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003ca8:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <jog_execute+0x78>)
 8003caa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <jog_execute+0x42>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3334      	adds	r3, #52	; 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 fae0 	bl	800a280 <system_check_travel_limits>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <jog_execute+0x42>
 8003cc6:	230f      	movs	r3, #15
 8003cc8:	e016      	b.n	8003cf8 <jog_execute+0x70>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	3334      	adds	r3, #52	; 0x34
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fce5 	bl	80046a0 <mc_line>
  if (sys.state == STATE_IDLE) {
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <jog_execute+0x7c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <jog_execute+0x6e>
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8003cde:	f001 fbe5 	bl	80054ac <plan_get_current_block>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <jog_execute+0x6e>
      sys.state = STATE_JOG;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <jog_execute+0x7c>)
 8003cea:	2220      	movs	r2, #32
 8003cec:	701a      	strb	r2, [r3, #0]
      st_prep_buffer();
 8003cee:	f005 f891 	bl	8008e14 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8003cf2:	f004 fc9b 	bl	800862c <st_wake_up>
    }
  }

  return(STATUS_OK);
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20001048 	.word	0x20001048
 8003d04:	20000efc 	.word	0x20000efc

08003d08 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8003d12:	4909      	ldr	r1, [pc, #36]	; (8003d38 <NVIC_DisableIRQ+0x30>)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	79fa      	ldrb	r2, [r7, #7]
 8003d1c:	f002 021f 	and.w	r2, r2, #31
 8003d20:	2001      	movs	r0, #1
 8003d22:	fa00 f202 	lsl.w	r2, r0, r2
 8003d26:	3320      	adds	r3, #32
 8003d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003d46:	4909      	ldr	r1, [pc, #36]	; (8003d6c <NVIC_ClearPendingIRQ+0x30>)
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	79fa      	ldrb	r2, [r7, #7]
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2001      	movs	r0, #1
 8003d56:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5a:	3360      	adds	r3, #96	; 0x60
 8003d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000e100 	.word	0xe000e100

08003d70 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8003d76:	2101      	movs	r1, #1
 8003d78:	2009      	movs	r0, #9
 8003d7a:	f7fd fdfb 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73bb      	strb	r3, [r7, #14]
	#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003d82:	2348      	movs	r3, #72	; 0x48
 8003d84:	73fb      	strb	r3, [r7, #15]
	#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8003d86:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003d8a:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	4619      	mov	r1, r3
 8003d92:	4820      	ldr	r0, [pc, #128]	; (8003e14 <limits_init+0xa4>)
 8003d94:	f7fd fb84 	bl	80014a0 <GPIO_Init>

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <limits_init+0xa8>)
 8003d9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d02f      	beq.n	8003e06 <limits_init+0x96>
	{
		//delay_ms(100);                                      // added by MS for debug
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8003da6:	210c      	movs	r1, #12
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fd fcf1 	bl	8001790 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8003dae:	210d      	movs	r1, #13
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7fd fced 	bl	8001790 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8003db6:	210e      	movs	r1, #14
 8003db8:	2001      	movs	r0, #1
 8003dba:	f7fd fce9 	bl	8001790 <GPIO_EXTILineConfig>
		#ifdef ABC_AXIS
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, C_LIMIT_BIT);
		#endif
// ---
		EXTI_InitTypeDef EXTI_InitStructure;
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8003dbe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003dc2:	607b      	str	r3, [r7, #4]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	723b      	strb	r3, [r7, #8]
		//EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)

		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <limits_init+0xa8>)
 8003dca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <limits_init+0x6c>
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising ; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	727b      	strb	r3, [r7, #9]
 8003dda:	e001      	b.n	8003de0 <limits_init+0x70>
		} else {
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003ddc:	230c      	movs	r3, #12
 8003dde:	727b      	strb	r3, [r7, #9]
		}

		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	72bb      	strb	r3, [r7, #10]
		EXTI_Init(&EXTI_InitStructure);
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd f9f8 	bl	80011dc <EXTI_Init>

		NVIC_InitTypeDef NVIC_InitStructure;
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003dec:	2328      	movs	r3, #40	; 0x28
 8003dee:	703b      	strb	r3, [r7, #0]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
 8003df0:	2302      	movs	r3, #2
 8003df2:	707b      	strb	r3, [r7, #1]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
 8003df4:	2302      	movs	r3, #2
 8003df6:	70bb      	strb	r3, [r7, #2]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
 8003df8:	2301      	movs	r3, #1
 8003dfa:	70fb      	strb	r3, [r7, #3]
		NVIC_Init(&NVIC_InitStructure);
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f98a 	bl	8001118 <NVIC_Init>
	else
	{
		limits_disable();
	}
#endif
}
 8003e04:	e001      	b.n	8003e0a <limits_init+0x9a>
		limits_disable();
 8003e06:	f000 f809 	bl	8003e1c <limits_disable>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40010c00 	.word	0x40010c00
 8003e18:	20001048 	.word	0x20001048

08003e1c <limits_disable>:


// Disables hard limits.
void limits_disable()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
#ifdef AVRTARGET
  LIMIT_PCMSK &= ~LIMIT_MASK;  // Disable specific pins of the Pin Change Interrupt
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003e20:	2028      	movs	r0, #40	; 0x28
 8003e22:	f7ff ff71 	bl	8003d08 <NVIC_DisableIRQ>
#endif
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  uint8_t limit_state = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	71fb      	strb	r3, [r7, #7]
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003e36:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <limits_get_state+0x74>)
 8003e38:	f7fd fbee 	bl	8001618 <GPIO_ReadInputData>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	80bb      	strh	r3, [r7, #4]
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <limits_get_state+0x78>)
 8003e42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <limits_get_state+0x2a>
 8003e4e:	88bb      	ldrh	r3, [r7, #4]
 8003e50:	f483 43e0 	eor.w	r3, r3, #28672	; 0x7000
 8003e54:	80bb      	strh	r3, [r7, #4]
  if (pin) {
 8003e56:	88bb      	ldrh	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <limits_get_state+0x68>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	70fb      	strb	r3, [r7, #3]
 8003e60:	e015      	b.n	8003e8e <limits_get_state+0x62>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <limits_get_state+0x7c>)
 8003e66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003e6a:	88bb      	ldrh	r3, [r7, #4]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <limits_get_state+0x5c>
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	b25a      	sxtb	r2, r3
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	71fb      	strb	r3, [r7, #7]
    for (idx=0; idx<N_AXIS; idx++) {
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	70fb      	strb	r3, [r7, #3]
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9e6      	bls.n	8003e62 <limits_get_state+0x36>
    }
  }
#endif
  return(limit_state);
 8003e94:	79fb      	ldrb	r3, [r7, #7]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40010c00 	.word	0x40010c00
 8003ea4:	20001048 	.word	0x20001048
 8003ea8:	0800b9b8 	.word	0x0800b9b8

08003eac <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8003eb0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003eb4:	f7fd fa04 	bl	80012c0 <EXTI_GetITStatus>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <EXTI15_10_IRQHandler+0x1a>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8003ebe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ec2:	f7fd fa21 	bl	8001308 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8003ec6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003eca:	f7fd f9f9 	bl	80012c0 <EXTI_GetITStatus>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <EXTI15_10_IRQHandler+0x30>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8003ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ed8:	f7fd fa16 	bl	8001308 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8003edc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ee0:	f7fd f9ee 	bl	80012c0 <EXTI_GetITStatus>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <EXTI15_10_IRQHandler+0x46>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8003eea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003eee:	f7fd fa0b 	bl	8001308 <EXTI_ClearITPendingBit>
	{
		EXTI_ClearITPendingBit(1 << C_LIMIT_BIT);
	}	
	#endif
// ---
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8003ef2:	2028      	movs	r0, #40	; 0x28
 8003ef4:	f7ff ff22 	bl	8003d3c <NVIC_ClearPendingIRQ>
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <EXTI15_10_IRQHandler+0x6c>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d009      	beq.n	8003f14 <EXTI15_10_IRQHandler+0x68>
    if (!(sys_rt_exec_alarm)) {
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <EXTI15_10_IRQHandler+0x70>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <EXTI15_10_IRQHandler+0x68>
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 8003f0a:	f000 ff1f 	bl	8004d4c <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f006 fa1c 	bl	800a34c <system_set_exec_alarm>
#endif
    }
  }
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000efc 	.word	0x20000efc
 8003f1c:	20000f2c 	.word	0x20000f2c

08003f20 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b094      	sub	sp, #80	; 0x50
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003f2a:	4bbf      	ldr	r3, [pc, #764]	; (8004228 <limits_go_home+0x308>)
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8215 	bne.w	800435e <limits_go_home+0x43e>

  // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
 8003f34:	f107 0320 	add.w	r3, r7, #32
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
  memset(pl_data,0,sizeof(plan_line_data_t));
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f40:	f006 fb59 	bl	800a5f6 <memset>
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	2206      	movs	r2, #6
 8003f48:	721a      	strb	r2, [r3, #8]
  #ifdef USE_LINE_NUMBERS
    pl_data->line_number = HOMING_CYCLE_LINE_NUMBER;
  #endif

  // Initialize variables used for homing computations.
  uint8_t n_cycle = (2*N_HOMING_LOCATE_CYCLE+1);
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  PORTPINDEF step_pin[N_AXIS];
  float target[N_AXIS];
  float max_travel = 0.0f;
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003f5c:	e03c      	b.n	8003fd8 <limits_go_home+0xb8>
    // Initialize step pin masks
    step_pin[idx] = step_pin_mask[idx];
 8003f5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f62:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003f66:	49b1      	ldr	r1, [pc, #708]	; (800422c <limits_go_home+0x30c>)
 8003f68:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f72:	440b      	add	r3, r1
 8003f74:	f823 2c38 	strh.w	r2, [r3, #-56]
    #ifdef COREXY
      if ((idx==A_MOTOR)||(idx==B_MOTOR)) { step_pin[idx] = (step_pin_mask[X_AXIS]| step_pin_mask[Y_AXIS]); }
    #endif

    if (bit_istrue(cycle_mask,bit(idx))) {
 8003f78:	79fa      	ldrb	r2, [r7, #7]
 8003f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f7e:	fa42 f303 	asr.w	r3, r2, r3
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d021      	beq.n	8003fce <limits_go_home+0xae>
      // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
      // NOTE: settings.max_travel[] is stored as a negative value.
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f8e:	4aa8      	ldr	r2, [pc, #672]	; (8004230 <limits_go_home+0x310>)
 8003f90:	3308      	adds	r3, #8
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	49a6      	ldr	r1, [pc, #664]	; (8004234 <limits_go_home+0x314>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fe88 	bl	8000cb0 <__aeabi_fmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd f821 	bl	8000fec <__aeabi_fcmplt>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <limits_go_home+0x94>
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb2:	e00b      	b.n	8003fcc <limits_go_home+0xac>
 8003fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fb8:	4a9d      	ldr	r2, [pc, #628]	; (8004230 <limits_go_home+0x310>)
 8003fba:	3308      	adds	r3, #8
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	499c      	ldr	r1, [pc, #624]	; (8004234 <limits_go_home+0x314>)
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fe73 	bl	8000cb0 <__aeabi_fmul>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  for (idx=0; idx<N_AXIS; idx++) {
 8003fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003fd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d9be      	bls.n	8003f5e <limits_go_home+0x3e>
    }
  }

  // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit switches.
  bool approach = true;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	643b      	str	r3, [r7, #64]	; 0x40
  float homing_rate = settings.homing_seek_rate;
 8003fe4:	4b92      	ldr	r3, [pc, #584]	; (8004230 <limits_go_home+0x310>)
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe8:	63fb      	str	r3, [r7, #60]	; 0x3c

  PORTPINDEF axislock;
  uint8_t limit_state, n_active_axis;
  do {

    system_convert_array_steps_to_mpos(target,sys_position);  // fill target (mm) with sys_position (steps)
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	4992      	ldr	r1, [pc, #584]	; (8004238 <limits_go_home+0x318>)
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f006 f927 	bl	800a244 <system_convert_array_steps_to_mpos>

    // Initialize and declare variables needed for homing routine.
    axislock = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
    n_active_axis = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    for (idx=0; idx<N_AXIS; idx++) {
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004006:	e060      	b.n	80040ca <limits_go_home+0x1aa>
      // Set target location for active axes and setup computation for homing rate.
      if (bit_istrue(cycle_mask,bit(idx))) {
 8004008:	79fa      	ldrb	r2, [r7, #7]
 800400a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800400e:	fa42 f303 	asr.w	r3, r2, r3
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d052      	beq.n	80040c0 <limits_go_home+0x1a0>
        n_active_axis++;
 800401a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800401e:	3301      	adds	r3, #1
 8004020:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            sys_position[A_MOTOR] = sys_position[B_MOTOR] = axis_position;
          } else {
            sys_position[Z_AXIS] = 0;
          }
        #else
          sys_position[idx] = 0;
 8004024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004028:	4a83      	ldr	r2, [pc, #524]	; (8004238 <limits_go_home+0x318>)
 800402a:	2100      	movs	r1, #0
 800402c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        #endif
        // Set target direction based on cycle mask and homing cycle approach state.
        // NOTE: This happens to compile smaller than any other implementation tried.
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8004030:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <limits_go_home+0x310>)
 8004032:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004036:	461a      	mov	r2, r3
 8004038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800403c:	fa42 f303 	asr.w	r3, r2, r3
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <limits_go_home+0x15a>
          if (approach) { target[idx] = -max_travel; }
 8004048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <limits_go_home+0x146>
 800404e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004054:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800405e:	440b      	add	r3, r1
 8004060:	f843 2c44 	str.w	r2, [r3, #-68]
 8004064:	e021      	b.n	80040aa <limits_go_home+0x18a>
          else { target[idx] = max_travel; }
 8004066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004070:	4413      	add	r3, r2
 8004072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004074:	f843 2c44 	str.w	r2, [r3, #-68]
 8004078:	e017      	b.n	80040aa <limits_go_home+0x18a>
        } else {
          if (approach) { target[idx] = max_travel; }
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <limits_go_home+0x174>
 8004080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800408a:	4413      	add	r3, r2
 800408c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408e:	f843 2c44 	str.w	r2, [r3, #-68]
 8004092:	e00a      	b.n	80040aa <limits_go_home+0x18a>
          else { target[idx] = -max_travel; }
 8004094:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409a:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80040a4:	440b      	add	r3, r1
 80040a6:	f843 2c44 	str.w	r2, [r3, #-68]
        }
        // Apply axislock to the step port pins active in this cycle.
        axislock |= step_pin[idx];
 80040aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040b4:	4413      	add	r3, r2
 80040b6:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 80040ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040bc:	4313      	orrs	r3, r2
 80040be:	877b      	strh	r3, [r7, #58]	; 0x3a
    for (idx=0; idx<N_AXIS; idx++) {
 80040c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040c4:	3301      	adds	r3, #1
 80040c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80040ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d99a      	bls.n	8004008 <limits_go_home+0xe8>
      }

    }
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80040d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fc fd92 	bl	8000c00 <__aeabi_ui2f>
 80040dc:	4603      	mov	r3, r0
 80040de:	4618      	mov	r0, r3
 80040e0:	f006 fbbc 	bl	800a85c <sqrtf>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4619      	mov	r1, r3
 80040e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ea:	f7fc fde1 	bl	8000cb0 <__aeabi_fmul>
 80040ee:	4603      	mov	r3, r0
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sys.homing_axis_lock = axislock;
 80040f2:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <limits_go_home+0x308>)
 80040f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040f6:	80d3      	strh	r3, [r2, #6]

    // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fc:	601a      	str	r2, [r3, #0]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 80040fe:	f107 030c 	add.w	r3, r7, #12
 8004102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004104:	4618      	mov	r0, r3
 8004106:	f001 fae5 	bl	80056d4 <plan_buffer_line>

    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <limits_go_home+0x308>)
 800410c:	2204      	movs	r2, #4
 800410e:	711a      	strb	r2, [r3, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8004110:	f004 fe80 	bl	8008e14 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8004114:	f004 fa8a 	bl	800862c <st_wake_up>
    do {
      if (approach) {
 8004118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d03b      	beq.n	8004196 <limits_go_home+0x276>
        // Check limit state. Lock out cycle axes when they change.
        limit_state = limits_get_state();
 800411e:	f7ff fe85 	bl	8003e2c <limits_get_state>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (idx=0; idx<N_AXIS; idx++) {
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800412e:	e02b      	b.n	8004188 <limits_go_home+0x268>
          if (axislock & step_pin[idx]) {
 8004130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800413a:	4413      	add	r3, r2
 800413c:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 8004140:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d019      	beq.n	800417e <limits_go_home+0x25e>
            if (limit_state & (1 << idx)) {
 800414a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800414e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004152:	fa42 f303 	asr.w	r3, r2, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <limits_go_home+0x25e>
              #ifdef COREXY
                if (idx==Z_AXIS) { axislock &= ~(step_pin[Z_AXIS]); }
                else { axislock &= ~(step_pin[A_MOTOR]|step_pin[B_MOTOR]); }
              #else
                axislock &= ~(step_pin[idx]);
 800415e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004168:	4413      	add	r3, r2
 800416a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800416e:	b21b      	sxth	r3, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	b21a      	sxth	r2, r3
 8004174:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8004178:	4013      	ands	r3, r2
 800417a:	b21b      	sxth	r3, r3
 800417c:	877b      	strh	r3, [r7, #58]	; 0x3a
        for (idx=0; idx<N_AXIS; idx++) {
 800417e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004182:	3301      	adds	r3, #1
 8004184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800418c:	2b02      	cmp	r3, #2
 800418e:	d9cf      	bls.n	8004130 <limits_go_home+0x210>
              #endif
            }
          }
        }
        sys.homing_axis_lock = axislock;
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <limits_go_home+0x308>)
 8004192:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004194:	80d3      	strh	r3, [r2, #6]
      }

      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8004196:	f004 fe3d 	bl	8008e14 <st_prep_buffer>

      // Exit routines: No time to run protocol_execute_realtime() in this loop.
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800419a:	4b28      	ldr	r3, [pc, #160]	; (800423c <limits_go_home+0x31c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0334 	and.w	r3, r3, #52	; 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d04d      	beq.n	8004244 <limits_go_home+0x324>
        uint8_t rt_exec = sys_rt_exec_state;
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <limits_go_home+0x31c>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        // Homing failure condition: Reset issued during cycle.
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80041b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <limits_go_home+0x2a2>
 80041bc:	2006      	movs	r0, #6
 80041be:	f006 f8c5 	bl	800a34c <system_set_exec_alarm>
        // Homing failure condition: Safety door was opened.
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80041c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <limits_go_home+0x2b4>
 80041ce:	2007      	movs	r0, #7
 80041d0:	f006 f8bc 	bl	800a34c <system_set_exec_alarm>
        // Homing failure condition: Limit switch still engaged after pull-off motion
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80041d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <limits_go_home+0x2d2>
 80041da:	f7ff fe27 	bl	8003e2c <limits_get_state>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	4013      	ands	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <limits_go_home+0x2d2>
 80041ec:	2008      	movs	r0, #8
 80041ee:	f006 f8ad 	bl	800a34c <system_set_exec_alarm>
        // Homing failure condition: Limit switch not found during approach.
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <limits_go_home+0x2ea>
 80041f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <limits_go_home+0x2ea>
 8004204:	2009      	movs	r0, #9
 8004206:	f006 f8a1 	bl	800a34c <system_set_exec_alarm>
        if (sys_rt_exec_alarm) {
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <limits_go_home+0x320>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <limits_go_home+0x2fe>
        	mc_reset(); // Stop motors, if they are running.
 8004214:	f000 fd9a 	bl	8004d4c <mc_reset>
          protocol_execute_realtime();
 8004218:	f001 ff90 	bl	800613c <protocol_execute_realtime>
          return;
 800421c:	e0a0      	b.n	8004360 <limits_go_home+0x440>
        } else {
          // Pull-off motion complete. Disable CYCLE_STOP from executing.
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800421e:	2004      	movs	r0, #4
 8004220:	f006 f878 	bl	800a314 <system_clear_exec_state_flag>
          break;
 8004224:	e015      	b.n	8004252 <limits_go_home+0x332>
 8004226:	bf00      	nop
 8004228:	20000efc 	.word	0x20000efc
 800422c:	0800b9a8 	.word	0x0800b9a8
 8004230:	20001048 	.word	0x20001048
 8004234:	bfc00000 	.word	0xbfc00000
 8004238:	20000f20 	.word	0x20000f20
 800423c:	20000f11 	.word	0x20000f11
 8004240:	20000f2c 	.word	0x20000f2c
        }
      }

    } while (STEP_MASK & axislock);
 8004244:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004246:	f003 0315 	and.w	r3, r3, #21
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	f47f af63 	bne.w	8004118 <limits_go_home+0x1f8>

    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8004252:	f004 fcc3 	bl	8008bdc <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8004256:	4b44      	ldr	r3, [pc, #272]	; (8004368 <limits_go_home+0x448>)
 8004258:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800425c:	4618      	mov	r0, r3
 800425e:	f000 feb3 	bl	8004fc8 <delay_ms>

    // Reverse direction and reset homing rate for locate cycle(s).
    approach = !approach;
 8004262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	643b      	str	r3, [r7, #64]	; 0x40

    // After first cycle, homing enters locating phase. Shorten search to pull-off distance.
    if (approach) {
 8004270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <limits_go_home+0x36e>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <limits_go_home+0x448>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	493c      	ldr	r1, [pc, #240]	; (800436c <limits_go_home+0x44c>)
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc fd17 	bl	8000cb0 <__aeabi_fmul>
 8004282:	4603      	mov	r3, r0
 8004284:	64bb      	str	r3, [r7, #72]	; 0x48
      homing_rate = settings.homing_feed_rate;
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <limits_go_home+0x448>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428c:	e005      	b.n	800429a <limits_go_home+0x37a>
    } else {
      max_travel = settings.homing_pulloff;
 800428e:	4b36      	ldr	r3, [pc, #216]	; (8004368 <limits_go_home+0x448>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
      homing_rate = settings.homing_seek_rate;
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <limits_go_home+0x448>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  } while (n_cycle-- > 0);
 800429a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f aea0 	bne.w	8003fea <limits_go_home+0xca>
  // set up pull-off maneuver from axes limit switches that have been homed. This provides
  // some initial clearance off the switches and should also help prevent them from falsely
  // triggering when hard limits are enabled or when more than one axes shares a limit pin.
  int32_t set_axis_position;
  // Set machine positions for homed limit switches. Don't update non-homed axes.
  for (idx=0; idx<N_AXIS; idx++) {
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80042b0:	e04d      	b.n	800434e <limits_go_home+0x42e>
    // NOTE: settings.max_travel[] is stored as a negative value.
    if (cycle_mask & bit(idx)) {
 80042b2:	79fa      	ldrb	r2, [r7, #7]
 80042b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042b8:	fa42 f303 	asr.w	r3, r2, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d03f      	beq.n	8004344 <limits_go_home+0x424>
      #ifdef HOMING_FORCE_SET_ORIGIN
        set_axis_position = 0;
      #else
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80042c4:	4b28      	ldr	r3, [pc, #160]	; (8004368 <limits_go_home+0x448>)
 80042c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80042ca:	461a      	mov	r2, r3
 80042cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042d0:	fa42 f303 	asr.w	r3, r2, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01c      	beq.n	8004316 <limits_go_home+0x3f6>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 80042dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042e0:	4a21      	ldr	r2, [pc, #132]	; (8004368 <limits_go_home+0x448>)
 80042e2:	3308      	adds	r3, #8
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <limits_go_home+0x448>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7fc fbd5 	bl	8000aa0 <__addsf3>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042fe:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <limits_go_home+0x448>)
 8004300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004304:	4619      	mov	r1, r3
 8004306:	f7fc fcd3 	bl	8000cb0 <__aeabi_fmul>
 800430a:	4603      	mov	r3, r0
 800430c:	4618      	mov	r0, r3
 800430e:	f006 fa2f 	bl	800a770 <lroundf>
 8004312:	6378      	str	r0, [r7, #52]	; 0x34
 8004314:	e010      	b.n	8004338 <limits_go_home+0x418>
        } else {
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <limits_go_home+0x448>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f083 4000 	eor.w	r0, r3, #2147483648	; 0x80000000
 800431e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004322:	4a11      	ldr	r2, [pc, #68]	; (8004368 <limits_go_home+0x448>)
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fcc1 	bl	8000cb0 <__aeabi_fmul>
 800432e:	4603      	mov	r3, r0
 8004330:	4618      	mov	r0, r3
 8004332:	f006 fa1d 	bl	800a770 <lroundf>
 8004336:	6378      	str	r0, [r7, #52]	; 0x34
          sys_position[B_MOTOR] = off_axis_position - set_axis_position;
        } else {
          sys_position[idx] = set_axis_position;
        }
      #else
        sys_position[idx] = set_axis_position;
 8004338:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <limits_go_home+0x450>)
 800433e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx=0; idx<N_AXIS; idx++) {
 8004344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004348:	3301      	adds	r3, #1
 800434a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800434e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004352:	2b02      	cmp	r3, #2
 8004354:	d9ad      	bls.n	80042b2 <limits_go_home+0x392>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <limits_go_home+0x454>)
 8004358:	2200      	movs	r2, #0
 800435a:	711a      	strb	r2, [r3, #4]
 800435c:	e000      	b.n	8004360 <limits_go_home+0x440>
  if (sys.abort) { return; } // Block if system reset has been issued.
 800435e:	bf00      	nop
}
 8004360:	3750      	adds	r7, #80	; 0x50
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20001048 	.word	0x20001048
 800436c:	40a00000 	.word	0x40a00000
 8004370:	20000f20 	.word	0x20000f20
 8004374:	20000efc 	.word	0x20000efc

08004378 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if (system_check_travel_limits(target)) {
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f005 ff7d 	bl	800a280 <system_check_travel_limits>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01d      	beq.n	80043c8 <limits_soft_check+0x50>
    sys.soft_limit = true;
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <limits_soft_check+0x58>)
 800438e:	2201      	movs	r2, #1
 8004390:	70da      	strb	r2, [r3, #3]
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <limits_soft_check+0x58>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10c      	bne.n	80043b4 <limits_soft_check+0x3c>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800439a:	2008      	movs	r0, #8
 800439c:	f005 ffa4 	bl	800a2e8 <system_set_exec_state_flag>
      do {
        protocol_execute_realtime();
 80043a0:	f001 fecc 	bl	800613c <protocol_execute_realtime>
        if (sys.abort) { return; }
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <limits_soft_check+0x58>)
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <limits_soft_check+0x4e>
      } while ( sys.state != STATE_IDLE );
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <limits_soft_check+0x58>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f5      	bne.n	80043a0 <limits_soft_check+0x28>
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80043b4:	f000 fcca 	bl	8004d4c <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 80043b8:	2002      	movs	r0, #2
 80043ba:	f005 ffc7 	bl	800a34c <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 80043be:	f001 febd 	bl	800613c <protocol_execute_realtime>
    return;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <limits_soft_check+0x50>
        if (sys.abort) { return; }
 80043c6:	bf00      	nop
  }
}
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000efc 	.word	0x20000efc

080043d4 <USART1_Configuration>:
#include "stm32eeprom.h"
#ifndef USEUSB
#include "stm32f10x_usart.h"
//volatile uint8_t tx_restart = 1;  // added by MS; 1 means that the tx buffer is empty and so writing a byte in the buffer has to activate Tx interrupt
void USART1_Configuration(u32 BaudRate)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80043dc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80043e0:	f7fc fe88 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;   
 80043e4:	2325      	movs	r3, #37	; 0x25
 80043e6:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
 80043e8:	2300      	movs	r3, #0
 80043ea:	727b      	strb	r3, [r7, #9]

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 80043ec:	2301      	movs	r3, #1
 80043ee:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);                 
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fe8f 	bl	8001118 <NVIC_Init>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 80043fa:	2101      	movs	r1, #1
 80043fc:	f244 0005 	movw	r0, #16389	; 0x4005
 8004400:	f7fd fab8 	bl	8001974 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8004404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004408:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	
 800440a:	2318      	movs	r3, #24
 800440c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		
 800440e:	2303      	movs	r3, #3
 8004410:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004412:	f107 031c 	add.w	r3, r7, #28
 8004416:	4619      	mov	r1, r3
 8004418:	481a      	ldr	r0, [pc, #104]	; (8004484 <USART1_Configuration+0xb0>)
 800441a:	f7fd f841 	bl	80014a0 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800441e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004422:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	
 8004424:	2304      	movs	r3, #4
 8004426:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	4619      	mov	r1, r3
 800442e:	4815      	ldr	r0, [pc, #84]	; (8004484 <USART1_Configuration+0xb0>)
 8004430:	f7fd f836 	bl	80014a0 <GPIO_Init>

	USART_InitStructure.USART_BaudRate = BaudRate;	  
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b; 
 8004438:	2300      	movs	r3, #0
 800443a:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;	 
 800443c:	2300      	movs	r3, #0
 800443e:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;	 
 8004440:	2300      	movs	r3, #0
 8004442:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004444:	2300      	movs	r3, #0
 8004446:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004448:	230c      	movs	r3, #12
 800444a:	82fb      	strh	r3, [r7, #22]
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 800444c:	4a0e      	ldr	r2, [pc, #56]	; (8004488 <USART1_Configuration+0xb4>)
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <USART1_Configuration+0xb4>)
 8004450:	899b      	ldrh	r3, [r3, #12]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f043 030c 	orr.w	r3, r3, #12
 8004458:	b29b      	uxth	r3, r3
 800445a:	8193      	strh	r3, [r2, #12]
	USART_Init(USART1, &USART_InitStructure);
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	4619      	mov	r1, r3
 8004462:	4809      	ldr	r0, [pc, #36]	; (8004488 <USART1_Configuration+0xb4>)
 8004464:	f7fd fc58 	bl	8001d18 <USART_Init>
	//	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8004468:	2201      	movs	r2, #1
 800446a:	f240 5125 	movw	r1, #1317	; 0x525
 800446e:	4806      	ldr	r0, [pc, #24]	; (8004488 <USART1_Configuration+0xb4>)
 8004470:	f7fd fd2b 	bl	8001eca <USART_ITConfig>
	USART_Cmd(USART1, ENABLE);
 8004474:	2101      	movs	r1, #1
 8004476:	4804      	ldr	r0, [pc, #16]	; (8004488 <USART1_Configuration+0xb4>)
 8004478:	f7fd fd08 	bl	8001e8c <USART_Cmd>
	//tx_restart = 1; // 1 means that Tx interrupt has to be restarted when a (first) byte will be added in the tx buffer
}
 800447c:	bf00      	nop
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40010800 	.word	0x40010800
 8004488:	40013800 	.word	0x40013800

0800448c <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004492:	2101      	movs	r1, #1
 8004494:	2010      	movs	r0, #16
 8004496:	f7fd fa6d 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800449a:	2302      	movs	r3, #2
 800449c:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800449e:	2310      	movs	r3, #16
 80044a0:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80044a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a6:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80044a8:	463b      	mov	r3, r7
 80044aa:	4619      	mov	r1, r3
 80044ac:	4835      	ldr	r0, [pc, #212]	; (8004584 <main+0xf8>)
 80044ae:	f7fc fff7 	bl	80014a0 <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(BAUD_RATE);
 80044b2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80044b6:	f7ff ff8d 	bl	80043d4 <USART1_Configuration>
	USB_Interrupts_Config();
	USB_Init();
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 80044ba:	f7fc ff33 	bl	8001324 <FLASH_Unlock>
	eeprom_init();
 80044be:	f7fd fe35 	bl	800212c <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 80044c2:	4a31      	ldr	r2, [pc, #196]	; (8004588 <main+0xfc>)
 80044c4:	4b30      	ldr	r3, [pc, #192]	; (8004588 <main+0xfc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6013      	str	r3, [r2, #0]
#endif
  // Initialize system upon power-up.
  serial_init();   // Setup serial baud rate and interrupts
 80044ce:	f003 f911 	bl	80076f4 <serial_init>
#ifdef WIN32
  winserial_init(argv[1]);
  eeprom_init();
#endif
  settings_init(); // Load Grbl settings from EEPROM
 80044d2:	f003 fe6b 	bl	80081ac <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80044d6:	f004 fbe1 	bl	8008c9c <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80044da:	f005 fb1f 	bl	8009b1c <system_init>

  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80044de:	220c      	movs	r2, #12
 80044e0:	2100      	movs	r1, #0
 80044e2:	482a      	ldr	r0, [pc, #168]	; (800458c <main+0x100>)
 80044e4:	f006 f887 	bl	800a5f6 <memset>
  // Initialize system state.
  #ifdef FORCE_INITIALIZATION_ALARM
    // Force Grbl into an ALARM state upon a power-cycle or hard reset.
    sys.state = STATE_ALARM;
  #else
    sys.state = STATE_IDLE;
 80044e8:	4b29      	ldr	r3, [pc, #164]	; (8004590 <main+0x104>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
  // cycle '$H' or kill alarm locks '$X' will disable the alarm.
  // NOTE: The startup script will run after successful completion of the homing cycle, but
  // not after disabling the alarm locks. Prevents motion startup blocks from crashing into
  // things uncontrollably. Very bad.
  #ifdef HOMING_INIT_LOCK
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <main+0x108>)
 80044f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <main+0x76>
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <main+0x104>)
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
  // Grbl initialization loop upon power-up or a system abort. For the latter, all processes
  // will return to this loop to be cleanly re-initialized.
  for(;;) {

    // Reset system variables.
    uint8_t prior_state = sys.state;
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <main+0x104>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	71fb      	strb	r3, [r7, #7]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8004508:	2214      	movs	r2, #20
 800450a:	2100      	movs	r1, #0
 800450c:	4820      	ldr	r0, [pc, #128]	; (8004590 <main+0x104>)
 800450e:	f006 f872 	bl	800a5f6 <memset>
    sys.state = prior_state;
 8004512:	4a1f      	ldr	r2, [pc, #124]	; (8004590 <main+0x104>)
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	7013      	strb	r3, [r2, #0]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <main+0x104>)
 800451a:	2264      	movs	r2, #100	; 0x64
 800451c:	721a      	strb	r2, [r3, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 800451e:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <main+0x104>)
 8004520:	2264      	movs	r2, #100	; 0x64
 8004522:	725a      	strb	r2, [r3, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <main+0x104>)
 8004526:	2264      	movs	r2, #100	; 0x64
 8004528:	729a      	strb	r2, [r3, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 800452a:	220c      	movs	r2, #12
 800452c:	2100      	movs	r1, #0
 800452e:	481a      	ldr	r0, [pc, #104]	; (8004598 <main+0x10c>)
 8004530:	f006 f861 	bl	800a5f6 <memset>
    sys_probe_state = 0;
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <main+0x110>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_state = 0;
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <main+0x114>)
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_alarm = 0;
 8004540:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <main+0x118>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_motion_override = 0;
 8004546:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <main+0x11c>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_accessory_override = 0;
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <main+0x120>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 8004552:	f003 fa6d 	bl	8007a30 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 8004556:	f7fd feb5 	bl	80022c4 <gc_init>
    spindle_init();
 800455a:	f003 fe39 	bl	80081d0 <spindle_init>
    coolant_init();
 800455e:	f7fd fcfb 	bl	8001f58 <coolant_init>
    limits_init();
 8004562:	f7ff fc05 	bl	8003d70 <limits_init>
    probe_init();
 8004566:	f001 fc63 	bl	8005e30 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 800456a:	f000 ff3f 	bl	80053ec <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 800456e:	f004 fb35 	bl	8008bdc <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 8004572:	f001 facd 	bl	8005b10 <plan_sync_position>
    gc_sync_position();
 8004576:	f7fd febf 	bl	80022f8 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 800457a:	f002 fb37 	bl	8006bec <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 800457e:	f001 fcd3 	bl	8005f28 <protocol_main_loop>
  for(;;) {
 8004582:	e7be      	b.n	8004502 <main+0x76>
 8004584:	40011000 	.word	0x40011000
 8004588:	e000e010 	.word	0xe000e010
 800458c:	20000f20 	.word	0x20000f20
 8004590:	20000efc 	.word	0x20000efc
 8004594:	20001048 	.word	0x20001048
 8004598:	20000f14 	.word	0x20000f14
 800459c:	20000f12 	.word	0x20000f12
 80045a0:	20000f11 	.word	0x20000f11
 80045a4:	20000f2c 	.word	0x20000f2c
 80045a8:	20000ef8 	.word	0x20000ef8
 80045ac:	20000f10 	.word	0x20000f10

080045b0 <_delay_ms>:
  }
  return 0;   /* Never reached */
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80045b8:	4a12      	ldr	r2, [pc, #72]	; (8004604 <_delay_ms+0x54>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f242 3128 	movw	r1, #9000	; 0x2328
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <_delay_ms+0x54>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <_delay_ms+0x54>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL;
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <_delay_ms+0x54>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <_delay_ms+0x3c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f2      	beq.n	80045d2 <_delay_ms+0x22>
	SysTick->CTRL = 0x00;                                            // Close the counter
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <_delay_ms+0x54>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <_delay_ms+0x54>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000e010 	.word	0xe000e010

08004608 <LedBlink>:
void LedBlink(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 800460c:	4b09      	ldr	r3, [pc, #36]	; (8004634 <LedBlink+0x2c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004616:	4808      	ldr	r0, [pc, #32]	; (8004638 <LedBlink+0x30>)
 8004618:	f7fd f832 	bl	8001680 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <LedBlink+0x2c>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	bf14      	ite	ne
 8004624:	2301      	movne	r3, #1
 8004626:	2300      	moveq	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	4b01      	ldr	r3, [pc, #4]	; (8004634 <LedBlink+0x2c>)
 800462e:	701a      	strb	r2, [r3, #0]
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000014 	.word	0x20000014
 8004638:	40011000 	.word	0x40011000

0800463c <NVIC_EnableIRQ>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8004646:	4908      	ldr	r1, [pc, #32]	; (8004668 <NVIC_EnableIRQ+0x2c>)
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	79fa      	ldrb	r2, [r7, #7]
 8004650:	f002 021f 	and.w	r2, r2, #31
 8004654:	2001      	movs	r0, #1
 8004656:	fa00 f202 	lsl.w	r2, r0, r2
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	e000e100 	.word	0xe000e100

0800466c <NVIC_ClearPendingIRQ>:
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8004676:	4909      	ldr	r1, [pc, #36]	; (800469c <NVIC_ClearPendingIRQ+0x30>)
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	79fa      	ldrb	r2, [r7, #7]
 8004680:	f002 021f 	and.w	r2, r2, #31
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	3360      	adds	r3, #96	; 0x60
 800468c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <mc_line+0x90>)
 80046ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d006      	beq.n	80046c6 <mc_line+0x26>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <mc_line+0x94>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d002      	beq.n	80046c6 <mc_line+0x26>
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fe59 	bl	8004378 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <mc_line+0x94>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d029      	beq.n	8004722 <mc_line+0x82>
  // parser and planner are separate from the system machine positions, this is doable.

  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
 80046ce:	f001 fd35 	bl	800613c <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <mc_line+0x94>)
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d125      	bne.n	8004726 <mc_line+0x86>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 80046da:	f000 ff27 	bl	800552c <plan_check_full_buffer>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <mc_line+0x4a>
 80046e4:	f001 fd1e 	bl	8006124 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 80046e8:	e7f1      	b.n	80046ce <mc_line+0x2e>
    else { break; }
 80046ea:	bf00      	nop
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fff0 	bl	80056d4 <plan_buffer_line>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <mc_line+0x88>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80046fa:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <mc_line+0x90>)
 80046fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <mc_line+0x88>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	7a1b      	ldrb	r3, [r3, #8]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <mc_line+0x88>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4619      	mov	r1, r3
 800471a:	2010      	movs	r0, #16
 800471c:	f003 ff02 	bl	8008524 <spindle_sync>
 8004720:	e002      	b.n	8004728 <mc_line+0x88>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <mc_line+0x88>
    if (sys.abort) { return; } // Bail, if system abort.
 8004726:	bf00      	nop
			}
		}
	}
}
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20001048 	.word	0x20001048
 8004734:	20000efc 	.word	0x20000efc

08004738 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b094      	sub	sp, #80	; 0x50
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004746:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4413      	add	r3, r2
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	f7fc f99e 	bl	8000aa0 <__addsf3>
 8004764:	4603      	mov	r3, r0
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
  float center_axis1 = position[axis_1] + offset[axis_1];
 8004768:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	f7fc f98d 	bl	8000aa0 <__addsf3>
 8004786:	4603      	mov	r3, r0
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 800478a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	4413      	add	r3, r2
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
  float r_axis1 = -offset[axis_1];
 800479c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4413      	add	r3, r2
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
  float rt_axis0 = target[axis_0] - center_axis0;
 80047ae:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc f96d 	bl	8000a9c <__aeabi_fsub>
 80047c2:	4603      	mov	r3, r0
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
  float rt_axis1 = target[axis_1] - center_axis1;
 80047c6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fc f961 	bl	8000a9c <__aeabi_fsub>
 80047da:	4603      	mov	r3, r0
 80047dc:	633b      	str	r3, [r7, #48]	; 0x30

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80047de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80047e2:	f7fc fa65 	bl	8000cb0 <__aeabi_fmul>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461c      	mov	r4, r3
 80047ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80047ee:	f7fc fa5f 	bl	8000cb0 <__aeabi_fmul>
 80047f2:	4603      	mov	r3, r0
 80047f4:	4619      	mov	r1, r3
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7fc f950 	bl	8000a9c <__aeabi_fsub>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461c      	mov	r4, r3
 8004800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004802:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004804:	f7fc fa54 	bl	8000cb0 <__aeabi_fmul>
 8004808:	4603      	mov	r3, r0
 800480a:	461d      	mov	r5, r3
 800480c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800480e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004810:	f7fc fa4e 	bl	8000cb0 <__aeabi_fmul>
 8004814:	4603      	mov	r3, r0
 8004816:	4619      	mov	r1, r3
 8004818:	4628      	mov	r0, r5
 800481a:	f7fc f941 	bl	8000aa0 <__addsf3>
 800481e:	4603      	mov	r3, r0
 8004820:	4619      	mov	r1, r3
 8004822:	4620      	mov	r0, r4
 8004824:	f006 f818 	bl	800a858 <atan2f>
 8004828:	6478      	str	r0, [r7, #68]	; 0x44
  if (is_clockwise_arc) { // Correct atan2 output per direction
 800482a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01b      	beq.n	800486a <mc_arc+0x132>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8004832:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004834:	f7fb fdf0 	bl	8000418 <__aeabi_f2d>
 8004838:	a385      	add	r3, pc, #532	; (adr r3, 8004a50 <mc_arc+0x318>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	f7fc f8c5 	bl	80009cc <__aeabi_dcmpge>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02b      	beq.n	80048a0 <mc_arc+0x168>
 8004848:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800484a:	f7fb fde5 	bl	8000418 <__aeabi_f2d>
 800484e:	a382      	add	r3, pc, #520	; (adr r3, 8004a58 <mc_arc+0x320>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb fc80 	bl	8000158 <__aeabi_dsub>
 8004858:	4603      	mov	r3, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4618      	mov	r0, r3
 800485e:	4621      	mov	r1, r4
 8004860:	f7fc f8c8 	bl	80009f4 <__aeabi_d2f>
 8004864:	4603      	mov	r3, r0
 8004866:	647b      	str	r3, [r7, #68]	; 0x44
 8004868:	e01a      	b.n	80048a0 <mc_arc+0x168>
  } else {
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 800486a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800486c:	f7fb fdd4 	bl	8000418 <__aeabi_f2d>
 8004870:	a37b      	add	r3, pc, #492	; (adr r3, 8004a60 <mc_arc+0x328>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fc f89f 	bl	80009b8 <__aeabi_dcmple>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00f      	beq.n	80048a0 <mc_arc+0x168>
 8004880:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004882:	f7fb fdc9 	bl	8000418 <__aeabi_f2d>
 8004886:	a374      	add	r3, pc, #464	; (adr r3, 8004a58 <mc_arc+0x320>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fc66 	bl	800015c <__adddf3>
 8004890:	4603      	mov	r3, r0
 8004892:	460c      	mov	r4, r1
 8004894:	4618      	mov	r0, r3
 8004896:	4621      	mov	r1, r4
 8004898:	f7fc f8ac 	bl	80009f4 <__aeabi_d2f>
 800489c:	4603      	mov	r3, r0
 800489e:	647b      	str	r3, [r7, #68]	; 0x44

  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80048a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80048a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80048a6:	f7fc fa03 	bl	8000cb0 <__aeabi_fmul>
 80048aa:	4603      	mov	r3, r0
 80048ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc f9fe 	bl	8000cb0 <__aeabi_fmul>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80048ba:	4b6b      	ldr	r3, [pc, #428]	; (8004a68 <mc_arc+0x330>)
 80048bc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80048be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c0:	4619      	mov	r1, r3
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fc f8ec 	bl	8000aa0 <__addsf3>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <mc_arc+0x330>)
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fc f8e2 	bl	8000a9c <__aeabi_fsub>
 80048d8:	4603      	mov	r3, r0
 80048da:	4619      	mov	r1, r3
 80048dc:	4628      	mov	r0, r5
 80048de:	f7fc f9e7 	bl	8000cb0 <__aeabi_fmul>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f005 ffb9 	bl	800a85c <sqrtf>
 80048ea:	4603      	mov	r3, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80048ec:	4619      	mov	r1, r3
 80048ee:	4620      	mov	r0, r4
 80048f0:	f7fc fa92 	bl	8000e18 <__aeabi_fdiv>
 80048f4:	4603      	mov	r3, r0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f005 fefa 	bl	800a6f0 <floorf>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fbd8 	bl	80010b4 <__aeabi_f2uiz>
 8004904:	4603      	mov	r3, r0
 8004906:	85fb      	strh	r3, [r7, #46]	; 0x2e

  if (segments) {
 8004908:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8149 	beq.w	8004ba2 <mc_arc+0x46a>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	7a1b      	ldrb	r3, [r3, #8]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <mc_arc+0x210>
      pl_data->feed_rate *= segments; 
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	681c      	ldr	r4, [r3, #0]
 8004920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc f970 	bl	8000c08 <__aeabi_i2f>
 8004928:	4603      	mov	r3, r0
 800492a:	4619      	mov	r1, r3
 800492c:	4620      	mov	r0, r4
 800492e:	f7fc f9bf 	bl	8000cb0 <__aeabi_fmul>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	601a      	str	r2, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	7a1b      	ldrb	r3, [r3, #8]
 800493e:	f023 0308 	bic.w	r3, r3, #8
 8004942:	b2da      	uxtb	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	721a      	strb	r2, [r3, #8]
    }
    
    float theta_per_segment = angular_travel/segments;
 8004948:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc f95c 	bl	8000c08 <__aeabi_i2f>
 8004950:	4603      	mov	r3, r0
 8004952:	4619      	mov	r1, r3
 8004954:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004956:	f7fc fa5f 	bl	8000e18 <__aeabi_fdiv>
 800495a:	4603      	mov	r3, r0
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 800495e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	f7fc f890 	bl	8000a9c <__aeabi_fsub>
 800497c:	4603      	mov	r3, r0
 800497e:	461c      	mov	r4, r3
 8004980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004982:	4618      	mov	r0, r3
 8004984:	f7fc f940 	bl	8000c08 <__aeabi_i2f>
 8004988:	4603      	mov	r3, r0
 800498a:	4619      	mov	r1, r3
 800498c:	4620      	mov	r0, r4
 800498e:	f7fc fa43 	bl	8000e18 <__aeabi_fdiv>
 8004992:	4603      	mov	r3, r0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8004996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499a:	f7fc f989 	bl	8000cb0 <__aeabi_fmul>
 800499e:	4603      	mov	r3, r0
 80049a0:	4619      	mov	r1, r3
 80049a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049a6:	f7fc f879 	bl	8000a9c <__aeabi_fsub>
 80049aa:	4603      	mov	r3, r0
 80049ac:	623b      	str	r3, [r7, #32]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80049ae:	492f      	ldr	r1, [pc, #188]	; (8004a6c <mc_arc+0x334>)
 80049b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b2:	f7fc f97d 	bl	8000cb0 <__aeabi_fmul>
 80049b6:	4603      	mov	r3, r0
 80049b8:	461c      	mov	r4, r3
 80049ba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80049be:	6a38      	ldr	r0, [r7, #32]
 80049c0:	f7fc f86e 	bl	8000aa0 <__addsf3>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4619      	mov	r1, r3
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7fc f971 	bl	8000cb0 <__aeabi_fmul>
 80049ce:	4603      	mov	r3, r0
 80049d0:	61fb      	str	r3, [r7, #28]
    cos_T *= 0.5;
 80049d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049d6:	6a38      	ldr	r0, [r7, #32]
 80049d8:	f7fc f96a 	bl	8000cb0 <__aeabi_fmul>
 80049dc:	4603      	mov	r3, r0
 80049de:	623b      	str	r3, [r7, #32]

    float sin_Ti;
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80049e6:	2301      	movs	r3, #1
 80049e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049ec:	e0d3      	b.n	8004b96 <mc_arc+0x45e>

      if (count < N_ARC_CORRECTION) {
 80049ee:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80049f2:	2b0b      	cmp	r3, #11
 80049f4:	d83c      	bhi.n	8004a70 <mc_arc+0x338>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 80049f6:	69f9      	ldr	r1, [r7, #28]
 80049f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80049fa:	f7fc f959 	bl	8000cb0 <__aeabi_fmul>
 80049fe:	4603      	mov	r3, r0
 8004a00:	461c      	mov	r4, r3
 8004a02:	6a39      	ldr	r1, [r7, #32]
 8004a04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a06:	f7fc f953 	bl	8000cb0 <__aeabi_fmul>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7fc f846 	bl	8000aa0 <__addsf3>
 8004a14:	4603      	mov	r3, r0
 8004a16:	61bb      	str	r3, [r7, #24]
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004a1c:	f7fc f948 	bl	8000cb0 <__aeabi_fmul>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461c      	mov	r4, r3
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a28:	f7fc f942 	bl	8000cb0 <__aeabi_fmul>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7fc f833 	bl	8000a9c <__aeabi_fsub>
 8004a36:	4603      	mov	r3, r0
 8004a38:	64fb      	str	r3, [r7, #76]	; 0x4c
        r_axis1 = r_axisi;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
        count++;
 8004a3e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004a42:	3301      	adds	r3, #1
 8004a44:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004a48:	e071      	b.n	8004b2e <mc_arc+0x3f6>
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w
 8004a50:	a0b5ed8d 	.word	0xa0b5ed8d
 8004a54:	bea0c6f7 	.word	0xbea0c6f7
 8004a58:	54442d18 	.word	0x54442d18
 8004a5c:	401921fb 	.word	0x401921fb
 8004a60:	a0b5ed8d 	.word	0xa0b5ed8d
 8004a64:	3ea0c6f7 	.word	0x3ea0c6f7
 8004a68:	20001048 	.word	0x20001048
 8004a6c:	3e2aaaab 	.word	0x3e2aaaab
      } else {
        // Arc correction to radius vector. Computed only every N_ARC_CORRECTION increments. ~375 usec
        // Compute exact location by applying transformation matrix from initial radius vector(=-offset).
        cos_Ti = cosf(i*theta_per_segment);
 8004a70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fc f8c7 	bl	8000c08 <__aeabi_i2f>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc f916 	bl	8000cb0 <__aeabi_fmul>
 8004a84:	4603      	mov	r3, r0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 fdfe 	bl	800a688 <cosf>
 8004a8c:	6178      	str	r0, [r7, #20]
        sin_Ti = sinf(i*theta_per_segment);
 8004a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc f8b8 	bl	8000c08 <__aeabi_i2f>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fc f907 	bl	8000cb0 <__aeabi_fmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f005 fe8f 	bl	800a7c8 <sinf>
 8004aaa:	6138      	str	r0, [r7, #16]
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8004aac:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc f8f6 	bl	8000cb0 <__aeabi_fmul>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461c      	mov	r4, r3
 8004ac8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6939      	ldr	r1, [r7, #16]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fc f8ea 	bl	8000cb0 <__aeabi_fmul>
 8004adc:	4603      	mov	r3, r0
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7fb ffdd 	bl	8000aa0 <__addsf3>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8004aea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	4413      	add	r3, r2
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fc f8d7 	bl	8000cb0 <__aeabi_fmul>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461c      	mov	r4, r3
 8004b06:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	4413      	add	r3, r2
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fc f8cb 	bl	8000cb0 <__aeabi_fmul>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f7fb ffbc 	bl	8000a9c <__aeabi_fsub>
 8004b24:	4603      	mov	r3, r0
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
        count = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8004b2e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	18d4      	adds	r4, r2, r3
 8004b38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b3c:	f7fb ffb0 	bl	8000aa0 <__addsf3>
 8004b40:	4603      	mov	r3, r0
 8004b42:	6023      	str	r3, [r4, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8004b44:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	18d4      	adds	r4, r2, r3
 8004b4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b52:	f7fb ffa5 	bl	8000aa0 <__addsf3>
 8004b56:	4603      	mov	r3, r0
 8004b58:	6023      	str	r3, [r4, #0]
      position[axis_linear] += linear_per_segment;
 8004b5a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	18d4      	adds	r4, r2, r3
 8004b64:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb ff94 	bl	8000aa0 <__addsf3>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	6023      	str	r3, [r4, #0]

      mc_line(position, pl_data);
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fd8e 	bl	80046a0 <mc_line>

      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <mc_arc+0x47c>)
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10f      	bne.n	8004bac <mc_arc+0x474>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8004b8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b90:	3301      	adds	r3, #1
 8004b92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	f4ff af26 	bcc.w	80049ee <mc_arc+0x2b6>
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fd7b 	bl	80046a0 <mc_line>
 8004baa:	e000      	b.n	8004bae <mc_arc+0x476>
      if (sys.abort) { return; }
 8004bac:	bf00      	nop
}
 8004bae:	3750      	adds	r7, #80	; 0x50
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb4:	20000efc 	.word	0x20000efc

08004bb8 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8004bc0:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <mc_dwell+0x28>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d006      	beq.n	8004bd6 <mc_dwell+0x1e>
  protocol_buffer_synchronize();
 8004bc8:	f001 fa94 	bl	80060f4 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9c0 	bl	8004f54 <delay_sec>
 8004bd4:	e000      	b.n	8004bd8 <mc_dwell+0x20>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8004bd6:	bf00      	nop
}
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000efc 	.word	0x20000efc

08004be4 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8004bee:	f7ff f915 	bl	8003e1c <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8004bf2:	2004      	movs	r0, #4
 8004bf4:	f7ff f994 	bl	8003f20 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8004bf8:	2003      	movs	r0, #3
 8004bfa:	f7ff f991 	bl	8003f20 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8004bfe:	f001 fa9d 	bl	800613c <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <mc_homing_cycle+0x4c>)
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10e      	bne.n	8004c28 <mc_homing_cycle+0x44>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8004c0a:	f7fd fb75 	bl	80022f8 <gc_sync_position>
  plan_sync_position();
 8004c0e:	f000 ff7f 	bl	8005b10 <plan_sync_position>
	#elif defined AB_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT) | (1 << B_LIMIT_BIT));
	#elif defined ABC_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT) | (1 << B_LIMIT_BIT) | (1 << C_LIMIT_BIT));
	#else
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT));
 8004c12:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8004c16:	f7fc fb77 	bl	8001308 <EXTI_ClearITPendingBit>
	#endif
// ---
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004c1a:	2028      	movs	r0, #40	; 0x28
 8004c1c:	f7ff fd26 	bl	800466c <NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c20:	2028      	movs	r0, #40	; 0x28
 8004c22:	f7ff fd0b 	bl	800463c <NVIC_EnableIRQ>
 8004c26:	e000      	b.n	8004c2a <mc_homing_cycle+0x46>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8004c28:	bf00      	nop
#else
	limits_init();
#endif
}
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000efc 	.word	0x20000efc

08004c34 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004c42:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <mc_probe_cycle+0x108>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d101      	bne.n	8004c4e <mc_probe_cycle+0x1a>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e071      	b.n	8004d32 <mc_probe_cycle+0xfe>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8004c4e:	f001 fa51 	bl	80060f4 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <mc_probe_cycle+0x108>)
 8004c54:	785b      	ldrb	r3, [r3, #1]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <mc_probe_cycle+0x2a>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e069      	b.n	8004d32 <mc_probe_cycle+0xfe>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf14      	ite	ne
 8004c68:	2301      	movne	r3, #1
 8004c6a:	2300      	moveq	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	75fb      	strb	r3, [r7, #23]
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	75bb      	strb	r3, [r7, #22]
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8004c82:	4b2e      	ldr	r3, [pc, #184]	; (8004d3c <mc_probe_cycle+0x108>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	715a      	strb	r2, [r3, #5]
  probe_configure_invert_mask(is_probe_away);
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 f8ec 	bl	8005e68 <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 8004c90:	f001 f912 	bl	8005eb8 <probe_get_state>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <mc_probe_cycle+0x7a>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8004c9a:	2004      	movs	r0, #4
 8004c9c:	f005 fb56 	bl	800a34c <system_set_exec_alarm>
    protocol_execute_realtime();
 8004ca0:	f001 fa4c 	bl	800613c <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f001 f8df 	bl	8005e68 <probe_configure_invert_mask>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8004caa:	2302      	movs	r3, #2
 8004cac:	e041      	b.n	8004d32 <mc_probe_cycle+0xfe>
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fcf5 	bl	80046a0 <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <mc_probe_cycle+0x10c>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	701a      	strb	r2, [r3, #0]

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8004cbc:	2002      	movs	r0, #2
 8004cbe:	f005 fb13 	bl	800a2e8 <system_set_exec_state_flag>
  do {
    protocol_execute_realtime();
 8004cc2:	f001 fa3b 	bl	800613c <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <mc_probe_cycle+0x108>)
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <mc_probe_cycle+0x9e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e02f      	b.n	8004d32 <mc_probe_cycle+0xfe>
  } while (sys.state != STATE_IDLE);
 8004cd2:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <mc_probe_cycle+0x108>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f3      	bne.n	8004cc2 <mc_probe_cycle+0x8e>

  // Probing cycle complete!

  // Set state variables and error out, if the probe failed and cycle with error is enabled.
  if (sys_probe_state == PROBE_ACTIVE) {
 8004cda:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <mc_probe_cycle+0x10c>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <mc_probe_cycle+0xca>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8004ce4:	7dbb      	ldrb	r3, [r7, #22]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <mc_probe_cycle+0xc2>
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <mc_probe_cycle+0x110>)
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <mc_probe_cycle+0x114>)
 8004cee:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004cf4:	e006      	b.n	8004d04 <mc_probe_cycle+0xd0>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8004cf6:	2005      	movs	r0, #5
 8004cf8:	f005 fb28 	bl	800a34c <system_set_exec_alarm>
 8004cfc:	e002      	b.n	8004d04 <mc_probe_cycle+0xd0>
  } else {
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <mc_probe_cycle+0x108>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	715a      	strb	r2, [r3, #5]
  }
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <mc_probe_cycle+0x10c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f001 f8ac 	bl	8005e68 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8004d10:	f001 fa14 	bl	800613c <protocol_execute_realtime>

  // Reset the stepper and planner buffers to remove the remainder of the probe motion.
  st_reset(); // Reset step segment buffer.
 8004d14:	f003 ff62 	bl	8008bdc <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8004d18:	f000 fb68 	bl	80053ec <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8004d1c:	f000 fef8 	bl	8005b10 <plan_sync_position>

  #ifdef MESSAGE_PROBE_COORDINATES
    // All done! Output the probe position as message.
    report_probe_parameters();
 8004d20:	f002 f8b6 	bl	8006e90 <report_probe_parameters>
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <mc_probe_cycle+0x108>)
 8004d26:	795b      	ldrb	r3, [r3, #5]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <mc_probe_cycle+0xfc>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <mc_probe_cycle+0xfe>
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000efc 	.word	0x20000efc
 8004d40:	20000f12 	.word	0x20000f12
 8004d44:	20000f14 	.word	0x20000f14
 8004d48:	20000f20 	.word	0x20000f20

08004d4c <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8004d50:	4b16      	ldr	r3, [pc, #88]	; (8004dac <mc_reset+0x60>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d124      	bne.n	8004da8 <mc_reset+0x5c>
    system_set_exec_state_flag(EXEC_RESET);
 8004d5e:	2010      	movs	r0, #16
 8004d60:	f005 fac2 	bl	800a2e8 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 8004d64:	f003 faec 	bl	8008340 <spindle_stop>
    coolant_stop();
 8004d68:	f7fd f944 	bl	8001ff4 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <mc_reset+0x64>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 032c 	and.w	r3, r3, #44	; 0x2c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <mc_reset+0x38>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <mc_reset+0x64>)
 8004d7a:	791b      	ldrb	r3, [r3, #4]
 8004d7c:	f003 0306 	and.w	r3, r3, #6
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d011      	beq.n	8004da8 <mc_reset+0x5c>
#endif
    {
      if (sys.state == STATE_HOMING) {
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <mc_reset+0x64>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d108      	bne.n	8004d9e <mc_reset+0x52>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <mc_reset+0x68>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <mc_reset+0x58>
 8004d96:	2006      	movs	r0, #6
 8004d98:	f005 fad8 	bl	800a34c <system_set_exec_alarm>
 8004d9c:	e002      	b.n	8004da4 <mc_reset+0x58>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8004d9e:	2003      	movs	r0, #3
 8004da0:	f005 fad4 	bl	800a34c <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8004da4:	f003 fc9c 	bl	80086e0 <st_go_idle>
    }
  }
}
 8004da8:	bf00      	nop
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20000f11 	.word	0x20000f11
 8004db0:	20000efc 	.word	0x20000efc
 8004db4:	20000f2c 	.word	0x20000f2c

08004db8 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  char *ptr = line + *char_counter;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  // Capture initial positive/minus character
  bool isnegative = false;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (c == '-') {
 8004de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004de4:	2b2d      	cmp	r3, #45	; 0x2d
 8004de6:	d108      	bne.n	8004dfa <read_float+0x42>
    isnegative = true;
 8004de8:	2301      	movs	r3, #1
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
    c = *ptr++;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df8:	e009      	b.n	8004e0e <read_float+0x56>
  } else if (c == '+') {
 8004dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	2b2b      	cmp	r3, #43	; 0x2b
 8004e00:	d105      	bne.n	8004e0e <read_float+0x56>
    c = *ptr++;
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  int8_t exp = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	77fb      	strb	r3, [r7, #31]
  uint8_t ndigit = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	77bb      	strb	r3, [r7, #30]
  bool isdecimal = false;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
  while(1) {
    c -= '0';
 8004e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e22:	3b30      	subs	r3, #48	; 0x30
 8004e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (c <= 9) {
 8004e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e2c:	2b09      	cmp	r3, #9
 8004e2e:	d822      	bhi.n	8004e76 <read_float+0xbe>
      ndigit++;
 8004e30:	7fbb      	ldrb	r3, [r7, #30]
 8004e32:	3301      	adds	r3, #1
 8004e34:	77bb      	strb	r3, [r7, #30]
      if (ndigit <= MAX_INT_DIGITS) {
 8004e36:	7fbb      	ldrb	r3, [r7, #30]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d812      	bhi.n	8004e62 <read_float+0xaa>
        if (isdecimal) { exp--; }
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <read_float+0x96>
 8004e42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	77fb      	strb	r3, [r7, #31]
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	009a      	lsls	r2, r3, #2
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	4413      	add	r3, r2
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e5c:	4413      	add	r3, r2
 8004e5e:	623b      	str	r3, [r7, #32]
 8004e60:	e012      	b.n	8004e88 <read_float+0xd0>
      } else {
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <read_float+0xd0>
 8004e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e008      	b.n	8004e88 <read_float+0xd0>
      }
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8004e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e7a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e7c:	d10b      	bne.n	8004e96 <read_float+0xde>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <read_float+0xde>
      isdecimal = true;
 8004e84:	2301      	movs	r3, #1
 8004e86:	61bb      	str	r3, [r7, #24]
    } else {
      break;
    }
    c = *ptr++;
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    c -= '0';
 8004e94:	e7c3      	b.n	8004e1e <read_float+0x66>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8004e96:	7fbb      	ldrb	r3, [r7, #30]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <read_float+0xe8>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e04e      	b.n	8004f3e <read_float+0x186>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8004ea0:	6a38      	ldr	r0, [r7, #32]
 8004ea2:	f7fb fead 	bl	8000c00 <__aeabi_ui2f>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	617b      	str	r3, [r7, #20]

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f7fc f892 	bl	8000fd8 <__aeabi_fcmpeq>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12c      	bne.n	8004f14 <read_float+0x15c>
    while (exp <= -2) {
 8004eba:	e009      	b.n	8004ed0 <read_float+0x118>
      fval *= 0.01f;
 8004ebc:	4922      	ldr	r1, [pc, #136]	; (8004f48 <read_float+0x190>)
 8004ebe:	6978      	ldr	r0, [r7, #20]
 8004ec0:	f7fb fef6 	bl	8000cb0 <__aeabi_fmul>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	617b      	str	r3, [r7, #20]
      exp += 2;
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	77fb      	strb	r3, [r7, #31]
    while (exp <= -2) {
 8004ed0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	dbf0      	blt.n	8004ebc <read_float+0x104>
    }
    if (exp < 0) {
 8004eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da06      	bge.n	8004ef0 <read_float+0x138>
      fval *= 0.1f;
 8004ee2:	491a      	ldr	r1, [pc, #104]	; (8004f4c <read_float+0x194>)
 8004ee4:	6978      	ldr	r0, [r7, #20]
 8004ee6:	f7fb fee3 	bl	8000cb0 <__aeabi_fmul>
 8004eea:	4603      	mov	r3, r0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e011      	b.n	8004f14 <read_float+0x15c>
    } else if (exp > 0) {
 8004ef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dd0d      	ble.n	8004f14 <read_float+0x15c>
      do {
        fval *= 10.0f;
 8004ef8:	4915      	ldr	r1, [pc, #84]	; (8004f50 <read_float+0x198>)
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f7fb fed8 	bl	8000cb0 <__aeabi_fmul>
 8004f00:	4603      	mov	r3, r0
 8004f02:	617b      	str	r3, [r7, #20]
      } while (--exp > 0);
 8004f04:	7ffb      	ldrb	r3, [r7, #31]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dcf1      	bgt.n	8004ef8 <read_float+0x140>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <read_float+0x16e>
    *float_ptr = -fval;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e002      	b.n	8004f2c <read_float+0x174>
  } else {
    *float_ptr = fval;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8004f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	701a      	strb	r2, [r3, #0]

  return(true);
 8004f3c:	2301      	movs	r3, #1
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3730      	adds	r7, #48	; 0x30
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	3c23d70a 	.word	0x3c23d70a
 8004f4c:	3dcccccd 	.word	0x3dcccccd
 8004f50:	41200000 	.word	0x41200000

08004f54 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8004f60:	4917      	ldr	r1, [pc, #92]	; (8004fc0 <delay_sec+0x6c>)
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fb fea4 	bl	8000cb0 <__aeabi_fmul>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f005 fb4c 	bl	800a608 <ceilf>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fc f89e 	bl	80010b4 <__aeabi_f2uiz>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	81fb      	strh	r3, [r7, #14]
	while (i-- > 0) {
 8004f7c:	e014      	b.n	8004fa8 <delay_sec+0x54>
		if (sys.abort) { return; }
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <delay_sec+0x70>)
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d116      	bne.n	8004fb4 <delay_sec+0x60>
		if (mode == DELAY_MODE_DWELL) {
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <delay_sec+0x3e>
			protocol_execute_realtime();
 8004f8c:	f001 f8d6 	bl	800613c <protocol_execute_realtime>
 8004f90:	e007      	b.n	8004fa2 <delay_sec+0x4e>
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
 8004f92:	f001 f8e1 	bl	8006158 <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <delay_sec+0x70>)
 8004f98:	789b      	ldrb	r3, [r3, #2]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <delay_sec+0x64>
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8004fa2:	2032      	movs	r0, #50	; 0x32
 8004fa4:	f7ff fb04 	bl	80045b0 <_delay_ms>
	while (i-- > 0) {
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	81fa      	strh	r2, [r7, #14]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <delay_sec+0x2a>
 8004fb2:	e002      	b.n	8004fba <delay_sec+0x66>
		if (sys.abort) { return; }
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <delay_sec+0x66>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8004fb8:	bf00      	nop
	}
}
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	41a00000 	.word	0x41a00000
 8004fc4:	20000efc 	.word	0x20000efc

08004fc8 <delay_ms>:


// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	80fb      	strh	r3, [r7, #6]
  while ( ms-- ) { _delay_ms(1); }
 8004fd2:	e002      	b.n	8004fda <delay_ms+0x12>
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	f7ff faeb 	bl	80045b0 <_delay_ms>
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	1e5a      	subs	r2, r3, #1
 8004fde:	80fa      	strh	r2, [r7, #6]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f7      	bne.n	8004fd4 <delay_ms+0xc>
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fb fe59 	bl	8000cb0 <__aeabi_fmul>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461c      	mov	r4, r3
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6838      	ldr	r0, [r7, #0]
 8005006:	f7fb fe53 	bl	8000cb0 <__aeabi_fmul>
 800500a:	4603      	mov	r3, r0
 800500c:	4619      	mov	r1, r3
 800500e:	4620      	mov	r0, r4
 8005010:	f7fb fd46 	bl	8000aa0 <__addsf3>
 8005014:	4603      	mov	r3, r0
 8005016:	4618      	mov	r0, r3
 8005018:	f005 fc20 	bl	800a85c <sqrtf>
 800501c:	4603      	mov	r3, r0
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}

08005026 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8005026:	b590      	push	{r4, r7, lr}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  uint8_t idx;
  float magnitude = 0.0f;
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
  for (idx=0; idx<N_AXIS; idx++) {
 8005034:	2300      	movs	r3, #0
 8005036:	75fb      	strb	r3, [r7, #23]
 8005038:	e023      	b.n	8005082 <convert_delta_vector_to_unit_vector+0x5c>
    if (vector[idx] != 0.0f) {
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f7fb ffc5 	bl	8000fd8 <__aeabi_fcmpeq>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d113      	bne.n	800507c <convert_delta_vector_to_unit_vector+0x56>
      magnitude += vector[idx]*vector[idx];
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4619      	mov	r1, r3
 800506a:	f7fb fe21 	bl	8000cb0 <__aeabi_fmul>
 800506e:	4603      	mov	r3, r0
 8005070:	4619      	mov	r1, r3
 8005072:	6938      	ldr	r0, [r7, #16]
 8005074:	f7fb fd14 	bl	8000aa0 <__addsf3>
 8005078:	4603      	mov	r3, r0
 800507a:	613b      	str	r3, [r7, #16]
  for (idx=0; idx<N_AXIS; idx++) {
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	3301      	adds	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d9d8      	bls.n	800503a <convert_delta_vector_to_unit_vector+0x14>
    }
  }
  magnitude = sqrtf(magnitude);
 8005088:	6938      	ldr	r0, [r7, #16]
 800508a:	f005 fbe7 	bl	800a85c <sqrtf>
 800508e:	6138      	str	r0, [r7, #16]
  float inv_magnitude = 1.0f/magnitude;
 8005090:	6939      	ldr	r1, [r7, #16]
 8005092:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005096:	f7fb febf 	bl	8000e18 <__aeabi_fdiv>
 800509a:	4603      	mov	r3, r0
 800509c:	60fb      	str	r3, [r7, #12]
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 800509e:	2300      	movs	r3, #0
 80050a0:	75fb      	strb	r3, [r7, #23]
 80050a2:	e011      	b.n	80050c8 <convert_delta_vector_to_unit_vector+0xa2>
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	18d4      	adds	r4, r2, r3
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	4413      	add	r3, r2
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fb fdf9 	bl	8000cb0 <__aeabi_fmul>
 80050be:	4603      	mov	r3, r0
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	3301      	adds	r3, #1
 80050c6:	75fb      	strb	r3, [r7, #23]
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d9ea      	bls.n	80050a4 <convert_delta_vector_to_unit_vector+0x7e>
  return(magnitude);
 80050ce:	693b      	ldr	r3, [r7, #16]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}

080050d8 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <limit_value_by_axis_maximum+0x98>)
 80050e4:	60bb      	str	r3, [r7, #8]
  for (idx=0; idx<N_AXIS; idx++) {
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]
 80050ea:	e039      	b.n	8005160 <limit_value_by_axis_maximum+0x88>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	4413      	add	r3, r2
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb ff6c 	bl	8000fd8 <__aeabi_fcmpeq>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d129      	bne.n	800515a <limit_value_by_axis_maximum+0x82>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	4413      	add	r3, r2
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	f7fb fe7c 	bl	8000e18 <__aeabi_fdiv>
 8005120:	4603      	mov	r3, r0
 8005122:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb ff7d 	bl	8001028 <__aeabi_fcmpgt>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <limit_value_by_axis_maximum+0x60>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	e00f      	b.n	8005158 <limit_value_by_axis_maximum+0x80>
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	4413      	add	r3, r2
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	f7fb fe63 	bl	8000e18 <__aeabi_fdiv>
 8005152:	4603      	mov	r3, r0
 8005154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005158:	60bb      	str	r3, [r7, #8]
  for (idx=0; idx<N_AXIS; idx++) {
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	3301      	adds	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d9c2      	bls.n	80050ec <limit_value_by_axis_maximum+0x14>
    }
  }
  return(limit_value);
 8005166:	68bb      	ldr	r3, [r7, #8]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	7f7fffff 	.word	0x7f7fffff

08005174 <plan_next_block_index>:
static planner_t pl;


// Returns the index of the next block in the ring buffer. Also called by stepper segment buffer.
uint8_t plan_next_block_index(uint8_t block_index)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  block_index++;
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	3301      	adds	r3, #1
 8005182:	71fb      	strb	r3, [r7, #7]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	2b24      	cmp	r3, #36	; 0x24
 8005188:	d101      	bne.n	800518e <plan_next_block_index+0x1a>
 800518a:	2300      	movs	r3, #0
 800518c:	71fb      	strb	r3, [r7, #7]
  return(block_index);
 800518e:	79fb      	ldrb	r3, [r7, #7]
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <plan_prev_block_index>:


// Returns the index of the previous block in the ring buffer
static uint8_t plan_prev_block_index(uint8_t block_index)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <plan_prev_block_index+0x14>
 80051aa:	2324      	movs	r3, #36	; 0x24
 80051ac:	71fb      	strb	r3, [r7, #7]
  block_index--;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	71fb      	strb	r3, [r7, #7]
  return(block_index);
 80051b4:	79fb      	ldrb	r3, [r7, #7]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80051c6:	4b85      	ldr	r3, [pc, #532]	; (80053dc <planner_recalculate+0x21c>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ffe5 	bl	800519a <plan_prev_block_index>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80051d4:	4b82      	ldr	r3, [pc, #520]	; (80053e0 <planner_recalculate+0x220>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	429a      	cmp	r2, r3
 80051dc:	f000 80fa 	beq.w	80053d4 <planner_recalculate+0x214>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2234      	movs	r2, #52	; 0x34
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	4a7e      	ldr	r2, [pc, #504]	; (80053e4 <planner_recalculate+0x224>)
 80051ea:	4413      	add	r3, r2
 80051ec:	607b      	str	r3, [r7, #4]

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699c      	ldr	r4, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	4619      	mov	r1, r3
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb fc51 	bl	8000aa0 <__addsf3>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f7fb fd51 	bl	8000cb0 <__aeabi_fmul>
 800520e:	4603      	mov	r3, r0
 8005210:	4619      	mov	r1, r3
 8005212:	4620      	mov	r0, r4
 8005214:	f7fb feea 	bl	8000fec <__aeabi_fcmplt>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <planner_recalculate+0x64>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	e00e      	b.n	8005242 <planner_recalculate+0x82>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4619      	mov	r1, r3
 800522a:	4618      	mov	r0, r3
 800522c:	f7fb fc38 	bl	8000aa0 <__addsf3>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fb fd38 	bl	8000cb0 <__aeabi_fmul>
 8005240:	4603      	mov	r3, r0
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6153      	str	r3, [r2, #20]

  block_index = plan_prev_block_index(block_index);
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ffa6 	bl	800519a <plan_prev_block_index>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <planner_recalculate+0x220>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	429a      	cmp	r2, r3
 800525a:	d151      	bne.n	8005300 <planner_recalculate+0x140>
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800525c:	4b62      	ldr	r3, [pc, #392]	; (80053e8 <planner_recalculate+0x228>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	429a      	cmp	r2, r3
 8005264:	d151      	bne.n	800530a <planner_recalculate+0x14a>
 8005266:	f003 fd9f 	bl	8008da8 <st_update_plan_block_parameters>
 800526a:	e04e      	b.n	800530a <planner_recalculate+0x14a>
  } else { // Three or more plan-able blocks
    while (block_index != block_buffer_planned) {
      next = current;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60bb      	str	r3, [r7, #8]
      current = &block_buffer[block_index];
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2234      	movs	r2, #52	; 0x34
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	4a5a      	ldr	r2, [pc, #360]	; (80053e4 <planner_recalculate+0x224>)
 800527a:	4413      	add	r3, r2
 800527c:	607b      	str	r3, [r7, #4]
      block_index = plan_prev_block_index(block_index);
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff ff8a 	bl	800519a <plan_prev_block_index>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800528a:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <planner_recalculate+0x228>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	7bfa      	ldrb	r2, [r7, #15]
 8005290:	429a      	cmp	r2, r3
 8005292:	d101      	bne.n	8005298 <planner_recalculate+0xd8>
 8005294:	f003 fd88 	bl	8008da8 <st_update_plan_block_parameters>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fb fe98 	bl	8000fd8 <__aeabi_fcmpeq>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d000      	beq.n	80052b0 <planner_recalculate+0xf0>
 80052ae:	e027      	b.n	8005300 <planner_recalculate+0x140>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	695c      	ldr	r4, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	4619      	mov	r1, r3
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb fbf0 	bl	8000aa0 <__addsf3>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f7fb fcf0 	bl	8000cb0 <__aeabi_fmul>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4619      	mov	r1, r3
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7fb fbe3 	bl	8000aa0 <__addsf3>
 80052da:	4603      	mov	r3, r0
 80052dc:	603b      	str	r3, [r7, #0]
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fb fe9f 	bl	8001028 <__aeabi_fcmpgt>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <planner_recalculate+0x138>
          current->entry_speed_sqr = entry_speed_sqr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	615a      	str	r2, [r3, #20]
 80052f6:	e003      	b.n	8005300 <planner_recalculate+0x140>
        } else {
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	615a      	str	r2, [r3, #20]
    while (block_index != block_buffer_planned) {
 8005300:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <planner_recalculate+0x220>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	429a      	cmp	r2, r3
 8005308:	d1b0      	bne.n	800526c <planner_recalculate+0xac>
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 800530a:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <planner_recalculate+0x220>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	2334      	movs	r3, #52	; 0x34
 8005312:	fb03 f302 	mul.w	r3, r3, r2
 8005316:	4a33      	ldr	r2, [pc, #204]	; (80053e4 <planner_recalculate+0x224>)
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
  block_index = plan_next_block_index(block_buffer_planned);
 800531c:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <planner_recalculate+0x220>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff27 	bl	8005174 <plan_next_block_index>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
  while (block_index != block_buffer_head) {
 800532a:	e04d      	b.n	80053c8 <planner_recalculate+0x208>
    current = next;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	607b      	str	r3, [r7, #4]
    next = &block_buffer[block_index];
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2234      	movs	r2, #52	; 0x34
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <planner_recalculate+0x224>)
 800533a:	4413      	add	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	4619      	mov	r1, r3
 8005348:	4610      	mov	r0, r2
 800534a:	f7fb fe4f 	bl	8000fec <__aeabi_fcmplt>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d025      	beq.n	80053a0 <planner_recalculate+0x1e0>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695c      	ldr	r4, [r3, #20]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4619      	mov	r1, r3
 800535e:	4618      	mov	r0, r3
 8005360:	f7fb fb9e 	bl	8000aa0 <__addsf3>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7fb fc9e 	bl	8000cb0 <__aeabi_fmul>
 8005374:	4603      	mov	r3, r0
 8005376:	4619      	mov	r1, r3
 8005378:	4620      	mov	r0, r4
 800537a:	f7fb fb91 	bl	8000aa0 <__addsf3>
 800537e:	4603      	mov	r3, r0
 8005380:	603b      	str	r3, [r7, #0]
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fb fe4d 	bl	8001028 <__aeabi_fcmpgt>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <planner_recalculate+0x1e0>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	615a      	str	r2, [r3, #20]
        block_buffer_planned = block_index; // Set optimal plan pointer.
 800539a:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <planner_recalculate+0x220>)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	7013      	strb	r3, [r2, #0]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7fb fe14 	bl	8000fd8 <__aeabi_fcmpeq>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <planner_recalculate+0x1fc>
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <planner_recalculate+0x220>)
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	7013      	strb	r3, [r2, #0]
    block_index = plan_next_block_index( block_index );
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fed8 	bl	8005174 <plan_next_block_index>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
  while (block_index != block_buffer_head) {
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <planner_recalculate+0x21c>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d1ac      	bne.n	800532c <planner_recalculate+0x16c>
 80053d2:	e000      	b.n	80053d6 <planner_recalculate+0x216>
  if (block_index == block_buffer_planned) { return; }
 80053d4:	bf00      	nop
  }
}
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	20000881 	.word	0x20000881
 80053e0:	20000883 	.word	0x20000883
 80053e4:	20000130 	.word	0x20000130
 80053e8:	20000880 	.word	0x20000880

080053ec <plan_reset>:


void plan_reset()
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 80053f0:	221c      	movs	r2, #28
 80053f2:	2100      	movs	r1, #0
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <plan_reset+0x18>)
 80053f6:	f005 f8fe 	bl	800a5f6 <memset>
  plan_reset_buffer();
 80053fa:	f000 f805 	bl	8005408 <plan_reset_buffer>
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000884 	.word	0x20000884

08005408 <plan_reset_buffer>:


void plan_reset_buffer()
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  block_buffer_tail = 0;
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <plan_reset_buffer+0x24>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
  block_buffer_head = 0; // Empty = tail
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <plan_reset_buffer+0x28>)
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <plan_reset_buffer+0x2c>)
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <plan_reset_buffer+0x30>)
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	20000880 	.word	0x20000880
 8005430:	20000881 	.word	0x20000881
 8005434:	20000882 	.word	0x20000882
 8005438:	20000883 	.word	0x20000883

0800543c <plan_discard_current_block>:


void plan_discard_current_block()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <plan_discard_current_block+0x40>)
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <plan_discard_current_block+0x44>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d012      	beq.n	8005474 <plan_discard_current_block+0x38>
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <plan_discard_current_block+0x44>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fe8e 	bl	8005174 <plan_next_block_index>
 8005458:	4603      	mov	r3, r0
 800545a:	71fb      	strb	r3, [r7, #7]
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800545c:	4b08      	ldr	r3, [pc, #32]	; (8005480 <plan_discard_current_block+0x44>)
 800545e:	781a      	ldrb	r2, [r3, #0]
 8005460:	4b08      	ldr	r3, [pc, #32]	; (8005484 <plan_discard_current_block+0x48>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d102      	bne.n	800546e <plan_discard_current_block+0x32>
 8005468:	4a06      	ldr	r2, [pc, #24]	; (8005484 <plan_discard_current_block+0x48>)
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	7013      	strb	r3, [r2, #0]
    block_buffer_tail = block_index;
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <plan_discard_current_block+0x44>)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	7013      	strb	r3, [r2, #0]
  }
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000881 	.word	0x20000881
 8005480:	20000880 	.word	0x20000880
 8005484:	20000883 	.word	0x20000883

08005488 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return(&block_buffer[block_buffer_head]);
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <plan_get_system_motion_block+0x1c>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	2334      	movs	r3, #52	; 0x34
 8005494:	fb03 f302 	mul.w	r3, r3, r2
 8005498:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <plan_get_system_motion_block+0x20>)
 800549a:	4413      	add	r3, r2
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	20000881 	.word	0x20000881
 80054a8:	20000130 	.word	0x20000130

080054ac <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <plan_get_current_block+0x2c>)
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <plan_get_current_block+0x30>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d101      	bne.n	80054c0 <plan_get_current_block+0x14>
 80054bc:	2300      	movs	r3, #0
 80054be:	e007      	b.n	80054d0 <plan_get_current_block+0x24>
  return(&block_buffer[block_buffer_tail]);
 80054c0:	4b06      	ldr	r3, [pc, #24]	; (80054dc <plan_get_current_block+0x30>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	2334      	movs	r3, #52	; 0x34
 80054c8:	fb03 f302 	mul.w	r3, r3, r2
 80054cc:	4a04      	ldr	r2, [pc, #16]	; (80054e0 <plan_get_current_block+0x34>)
 80054ce:	4413      	add	r3, r2
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bc80      	pop	{r7}
 80054d6:	4770      	bx	lr
 80054d8:	20000881 	.word	0x20000881
 80054dc:	20000880 	.word	0x20000880
 80054e0:	20000130 	.word	0x20000130

080054e4 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <plan_get_exec_block_exit_speed_sqr+0x3c>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fe40 	bl	8005174 <plan_next_block_index>
 80054f4:	4603      	mov	r3, r0
 80054f6:	71fb      	strb	r3, [r7, #7]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <plan_get_exec_block_exit_speed_sqr+0x40>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	79fa      	ldrb	r2, [r7, #7]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d102      	bne.n	8005508 <plan_get_exec_block_exit_speed_sqr+0x24>
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	e007      	b.n	8005518 <plan_get_exec_block_exit_speed_sqr+0x34>
  return( block_buffer[block_index].entry_speed_sqr );
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	4a07      	ldr	r2, [pc, #28]	; (8005528 <plan_get_exec_block_exit_speed_sqr+0x44>)
 800550c:	2134      	movs	r1, #52	; 0x34
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3314      	adds	r3, #20
 8005516:	681b      	ldr	r3, [r3, #0]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000880 	.word	0x20000880
 8005524:	20000881 	.word	0x20000881
 8005528:	20000130 	.word	0x20000130

0800552c <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8005530:	4b06      	ldr	r3, [pc, #24]	; (800554c <plan_check_full_buffer+0x20>)
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <plan_check_full_buffer+0x24>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d101      	bne.n	8005540 <plan_check_full_buffer+0x14>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <plan_check_full_buffer+0x16>
  return(false);
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000880 	.word	0x20000880
 8005550:	20000882 	.word	0x20000882

08005554 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  float nominal_speed = block->programmed_rate;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	60fb      	str	r3, [r7, #12]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7c9b      	ldrb	r3, [r3, #18]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d011      	beq.n	8005592 <plan_compute_profile_nominal_speed+0x3e>
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <plan_compute_profile_nominal_speed+0xa4>)
 8005570:	7a5b      	ldrb	r3, [r3, #9]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fb fb48 	bl	8000c08 <__aeabi_i2f>
 8005578:	4603      	mov	r3, r0
 800557a:	4920      	ldr	r1, [pc, #128]	; (80055fc <plan_compute_profile_nominal_speed+0xa8>)
 800557c:	4618      	mov	r0, r3
 800557e:	f7fb fb97 	bl	8000cb0 <__aeabi_fmul>
 8005582:	4603      	mov	r3, r0
 8005584:	4619      	mov	r1, r3
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7fb fb92 	bl	8000cb0 <__aeabi_fmul>
 800558c:	4603      	mov	r3, r0
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e022      	b.n	80055d8 <plan_compute_profile_nominal_speed+0x84>
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7c9b      	ldrb	r3, [r3, #18]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d110      	bne.n	80055c0 <plan_compute_profile_nominal_speed+0x6c>
 800559e:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <plan_compute_profile_nominal_speed+0xa4>)
 80055a0:	7a1b      	ldrb	r3, [r3, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fb fb30 	bl	8000c08 <__aeabi_i2f>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4914      	ldr	r1, [pc, #80]	; (80055fc <plan_compute_profile_nominal_speed+0xa8>)
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fb fb7f 	bl	8000cb0 <__aeabi_fmul>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7fb fb7a 	bl	8000cb0 <__aeabi_fmul>
 80055bc:	4603      	mov	r3, r0
 80055be:	60fb      	str	r3, [r7, #12]
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb fd10 	bl	8000fec <__aeabi_fcmplt>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <plan_compute_profile_nominal_speed+0x84>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	60fb      	str	r3, [r7, #12]
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80055d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7fb fd23 	bl	8001028 <__aeabi_fcmpgt>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <plan_compute_profile_nominal_speed+0x98>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	e001      	b.n	80055f0 <plan_compute_profile_nominal_speed+0x9c>
  return(MINIMUM_FEED_RATE);
 80055ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000efc 	.word	0x20000efc
 80055fc:	3c23d70a 	.word	0x3c23d70a

08005600 <plan_compute_profile_parameters>:


// Computes and updates the max entry speed (sqr) of the block, based on the minimum of the junction's
// previous and current nominal speeds and max junction speed.
static void plan_compute_profile_parameters(plan_block_t *block, float nominal_speed, float prev_nominal_speed)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  // Compute the junction maximum entry based on the minimum of the junction speed and neighboring nominal speeds.
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	68b8      	ldr	r0, [r7, #8]
 8005610:	f7fb fd0a 	bl	8001028 <__aeabi_fcmpgt>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <plan_compute_profile_parameters+0x2c>
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7fb fb47 	bl	8000cb0 <__aeabi_fmul>
 8005622:	4603      	mov	r3, r0
 8005624:	461a      	mov	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	619a      	str	r2, [r3, #24]
 800562a:	e007      	b.n	800563c <plan_compute_profile_parameters+0x3c>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68b8      	ldr	r0, [r7, #8]
 8005630:	f7fb fb3e 	bl	8000cb0 <__aeabi_fmul>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	619a      	str	r2, [r3, #24]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fb fcee 	bl	8001028 <__aeabi_fcmpgt>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d100      	bne.n	8005654 <plan_compute_profile_parameters+0x54>
}
 8005652:	e003      	b.n	800565c <plan_compute_profile_parameters+0x5c>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	619a      	str	r2, [r3, #24]
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <plan_update_velocity_profile_parameters>:


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
  uint8_t block_index = block_buffer_tail;
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <plan_update_velocity_profile_parameters+0x5c>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	73fb      	strb	r3, [r7, #15]
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <plan_update_velocity_profile_parameters+0x60>)
 8005672:	60bb      	str	r3, [r7, #8]
  while (block_index != block_buffer_head) {
 8005674:	e017      	b.n	80056a6 <plan_update_velocity_profile_parameters+0x42>
    block = &block_buffer[block_index];
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	2234      	movs	r2, #52	; 0x34
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <plan_update_velocity_profile_parameters+0x64>)
 8005680:	4413      	add	r3, r2
 8005682:	607b      	str	r3, [r7, #4]
    nominal_speed = plan_compute_profile_nominal_speed(block);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff ff65 	bl	8005554 <plan_compute_profile_nominal_speed>
 800568a:	6038      	str	r0, [r7, #0]
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ffb5 	bl	8005600 <plan_compute_profile_parameters>
    prev_nominal_speed = nominal_speed;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	60bb      	str	r3, [r7, #8]
    block_index = plan_next_block_index(block_index);
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fd69 	bl	8005174 <plan_next_block_index>
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
  while (block_index != block_buffer_head) {
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <plan_update_velocity_profile_parameters+0x68>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d1e2      	bne.n	8005676 <plan_update_velocity_profile_parameters+0x12>
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80056b0:	4a07      	ldr	r2, [pc, #28]	; (80056d0 <plan_update_velocity_profile_parameters+0x6c>)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6193      	str	r3, [r2, #24]
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000880 	.word	0x20000880
 80056c4:	7f7fffff 	.word	0x7f7fffff
 80056c8:	20000130 	.word	0x20000130
 80056cc:	20000881 	.word	0x20000881
 80056d0:	20000884 	.word	0x20000884

080056d4 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b097      	sub	sp, #92	; 0x5c
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 80056de:	4bb2      	ldr	r3, [pc, #712]	; (80059a8 <plan_buffer_line+0x2d4>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	2334      	movs	r3, #52	; 0x34
 80056e6:	fb03 f302 	mul.w	r3, r3, r2
 80056ea:	4ab0      	ldr	r2, [pc, #704]	; (80059ac <plan_buffer_line+0x2d8>)
 80056ec:	4413      	add	r3, r2
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 80056f0:	2234      	movs	r2, #52	; 0x34
 80056f2:	2100      	movs	r1, #0
 80056f4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80056f6:	f004 ff7e 	bl	800a5f6 <memset>
  block->condition = pl_data->condition;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	7a1a      	ldrb	r2, [r3, #8]
 80056fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005700:	749a      	strb	r2, [r3, #18]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	7c9b      	ldrb	r3, [r3, #18]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d006      	beq.n	8005724 <plan_buffer_line+0x50>
#ifdef COREXY
    position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
    position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
    position_steps[Z_AXIS] = sys_position[Z_AXIS];
#else
    memcpy(position_steps, sys_position, sizeof(sys_position));
 8005716:	4aa6      	ldr	r2, [pc, #664]	; (80059b0 <plan_buffer_line+0x2dc>)
 8005718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800571c:	ca07      	ldmia	r2, {r0, r1, r2}
 800571e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005722:	e005      	b.n	8005730 <plan_buffer_line+0x5c>
#endif
  }
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8005724:	4aa3      	ldr	r2, [pc, #652]	; (80059b4 <plan_buffer_line+0x2e0>)
 8005726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572a:	ca07      	ldmia	r2, {r0, r1, r2}
 800572c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target_steps[B_MOTOR] = lround(target[B_MOTOR]*settings.steps_per_mm[B_MOTOR]);
    block->steps[A_MOTOR] = labs((target_steps[X_AXIS]-position_steps[X_AXIS]) + (target_steps[Y_AXIS]-position_steps[Y_AXIS]));
    block->steps[B_MOTOR] = labs((target_steps[X_AXIS]-position_steps[X_AXIS]) - (target_steps[Y_AXIS]-position_steps[Y_AXIS]));
  #endif

  for (idx=0; idx<N_AXIS; idx++) {
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005736:	e07f      	b.n	8005838 <plan_buffer_line+0x164>
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8005738:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 800573c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800574c:	4a9a      	ldr	r2, [pc, #616]	; (80059b8 <plan_buffer_line+0x2e4>)
 800574e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005752:	4619      	mov	r1, r3
 8005754:	f7fb faac 	bl	8000cb0 <__aeabi_fmul>
 8005758:	4603      	mov	r3, r0
 800575a:	4618      	mov	r0, r3
 800575c:	f005 f808 	bl	800a770 <lroundf>
 8005760:	4602      	mov	r2, r0
 8005762:	00a3      	lsls	r3, r4, #2
 8005764:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005768:	440b      	add	r3, r1
 800576a:	f843 2c28 	str.w	r2, [r3, #-40]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800576e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005772:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800577c:	440b      	add	r3, r1
 800577e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8005782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800578c:	4403      	add	r3, r0
 800578e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005792:	1acb      	subs	r3, r1, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	bfb8      	it	lt
 8005798:	425b      	neglt	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80057a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	bf38      	it	cc
 80057b4:	461a      	movcc	r2, r3
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	60da      	str	r2, [r3, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80057ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057c4:	4413      	add	r3, r2
 80057c6:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80057ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80057d4:	440b      	add	r3, r1
 80057d6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fb fa13 	bl	8000c08 <__aeabi_i2f>
 80057e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057e6:	4a74      	ldr	r2, [pc, #464]	; (80059b8 <plan_buffer_line+0x2e4>)
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	4619      	mov	r1, r3
 80057ee:	f7fb fb13 	bl	8000e18 <__aeabi_fdiv>
 80057f2:	4603      	mov	r3, r0
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80057f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005800:	4413      	add	r3, r2
 8005802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005804:	f843 2c40 	str.w	r2, [r3, #-64]

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8005808:	f04f 0100 	mov.w	r1, #0
 800580c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800580e:	f7fb fbed 	bl	8000fec <__aeabi_fcmplt>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <plan_buffer_line+0x15a>
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	8a1a      	ldrh	r2, [r3, #16]
 800581c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005820:	4966      	ldr	r1, [pc, #408]	; (80059bc <plan_buffer_line+0x2e8>)
 8005822:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005826:	4313      	orrs	r3, r2
 8005828:	b29a      	uxth	r2, r3
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	821a      	strh	r2, [r3, #16]
  for (idx=0; idx<N_AXIS; idx++) {
 800582e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005832:	3301      	adds	r3, #1
 8005834:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800583c:	2b02      	cmp	r3, #2
 800583e:	f67f af7b 	bls.w	8005738 <plan_buffer_line+0x64>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8005842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <plan_buffer_line+0x17a>
 800584a:	2300      	movs	r3, #0
 800584c:	e151      	b.n	8005af2 <plan_buffer_line+0x41e>

  // Calculate the unit vector of the line move and the block maximum feed rate and acceleration scaled
  // down such that no individual axes maximum values are exceeded with respect to the line direction.
  // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
  // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800584e:	f107 0318 	add.w	r3, r7, #24
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fbe7 	bl	8005026 <convert_delta_vector_to_unit_vector>
 8005858:	4602      	mov	r2, r0
 800585a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585c:	621a      	str	r2, [r3, #32]
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 800585e:	f107 0318 	add.w	r3, r7, #24
 8005862:	4619      	mov	r1, r3
 8005864:	4856      	ldr	r0, [pc, #344]	; (80059c0 <plan_buffer_line+0x2ec>)
 8005866:	f7ff fc37 	bl	80050d8 <limit_value_by_axis_maximum>
 800586a:	4602      	mov	r2, r0
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	61da      	str	r2, [r3, #28]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8005870:	f107 0318 	add.w	r3, r7, #24
 8005874:	4619      	mov	r1, r3
 8005876:	4853      	ldr	r0, [pc, #332]	; (80059c4 <plan_buffer_line+0x2f0>)
 8005878:	f7ff fc2e 	bl	80050d8 <limit_value_by_axis_maximum>
 800587c:	4602      	mov	r2, r0
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	629a      	str	r2, [r3, #40]	; 0x28

  // Store programmed rate.
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8005882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005884:	7c9b      	ldrb	r3, [r3, #18]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <plan_buffer_line+0x1c4>
 800588e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
 8005896:	e015      	b.n	80058c4 <plan_buffer_line+0x1f0>
  else { 
    block->programmed_rate = pl_data->feed_rate;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80058a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a2:	7c9b      	ldrb	r3, [r3, #18]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <plan_buffer_line+0x1f0>
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f7fb f9fa 	bl	8000cb0 <__aeabi_fmul>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  // TODO: Need to check this method handling zero junction speeds when starting from rest.
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80058c4:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <plan_buffer_line+0x2d4>)
 80058c6:	781a      	ldrb	r2, [r3, #0]
 80058c8:	4b3f      	ldr	r3, [pc, #252]	; (80059c8 <plan_buffer_line+0x2f4>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d005      	beq.n	80058dc <plan_buffer_line+0x208>
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	7c9b      	ldrb	r3, [r3, #18]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <plan_buffer_line+0x21a>

    // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will correct this later.
    // If system motion, the system motion block always is assumed to start from rest and end at a complete stop.
    block->entry_speed_sqr = 0.0f;
 80058dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	615a      	str	r2, [r3, #20]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 80058e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
 80058ec:	e0ce      	b.n	8005a8c <plan_buffer_line+0x3b8>
    // changed dynamically during operation nor can the line move geometry. This must be kept in
    // memory in the event of a feedrate override changing the nominal speeds of blocks, which can
    // change the overall maximum entry speed conditions of all blocks.

    float junction_unit_vec[N_AXIS];
    float junction_cos_theta = 0.0f;
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	653b      	str	r3, [r7, #80]	; 0x50
    for (idx=0; idx<N_AXIS; idx++) {
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80058fa:	e03a      	b.n	8005972 <plan_buffer_line+0x29e>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 80058fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <plan_buffer_line+0x2e0>)
 8005902:	3302      	adds	r3, #2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005914:	440b      	add	r3, r1
 8005916:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f7fb f9c7 	bl	8000cb0 <__aeabi_fmul>
 8005922:	4603      	mov	r3, r0
 8005924:	4619      	mov	r1, r3
 8005926:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005928:	f7fb f8b8 	bl	8000a9c <__aeabi_fsub>
 800592c:	4603      	mov	r3, r0
 800592e:	653b      	str	r3, [r7, #80]	; 0x50
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8005930:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8005934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800593e:	4413      	add	r3, r2
 8005940:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8005944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005948:	4a1a      	ldr	r2, [pc, #104]	; (80059b4 <plan_buffer_line+0x2e0>)
 800594a:	3302      	adds	r3, #2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	4619      	mov	r1, r3
 8005954:	f7fb f8a2 	bl	8000a9c <__aeabi_fsub>
 8005958:	4603      	mov	r3, r0
 800595a:	461a      	mov	r2, r3
 800595c:	00a3      	lsls	r3, r4, #2
 800595e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005962:	440b      	add	r3, r1
 8005964:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (idx=0; idx<N_AXIS; idx++) {
 8005968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800596c:	3301      	adds	r3, #1
 800596e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005976:	2b02      	cmp	r3, #2
 8005978:	d9c0      	bls.n	80058fc <plan_buffer_line+0x228>
    }

    // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of cos(theta).
    if (junction_cos_theta > 0.999999f) {
 800597a:	4914      	ldr	r1, [pc, #80]	; (80059cc <plan_buffer_line+0x2f8>)
 800597c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800597e:	f7fb fb53 	bl	8001028 <__aeabi_fcmpgt>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d004      	beq.n	8005992 <plan_buffer_line+0x2be>
      //  For a 0 degree acute junction, just set minimum junction speed.
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8005988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	625a      	str	r2, [r3, #36]	; 0x24
 8005990:	e07c      	b.n	8005a8c <plan_buffer_line+0x3b8>
    } else {
      if (junction_cos_theta < -0.999999f) {
 8005992:	490f      	ldr	r1, [pc, #60]	; (80059d0 <plan_buffer_line+0x2fc>)
 8005994:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005996:	f7fb fb29 	bl	8000fec <__aeabi_fcmplt>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01b      	beq.n	80059d8 <plan_buffer_line+0x304>
        // Junction is a straight line or 180 degrees. Junction speed is infinite.
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80059a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a2:	4a0c      	ldr	r2, [pc, #48]	; (80059d4 <plan_buffer_line+0x300>)
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24
 80059a6:	e071      	b.n	8005a8c <plan_buffer_line+0x3b8>
 80059a8:	20000881 	.word	0x20000881
 80059ac:	20000130 	.word	0x20000130
 80059b0:	20000f20 	.word	0x20000f20
 80059b4:	20000884 	.word	0x20000884
 80059b8:	20001048 	.word	0x20001048
 80059bc:	0800b9b0 	.word	0x0800b9b0
 80059c0:	20001060 	.word	0x20001060
 80059c4:	20001054 	.word	0x20001054
 80059c8:	20000880 	.word	0x20000880
 80059cc:	3f7fffef 	.word	0x3f7fffef
 80059d0:	bf7fffef 	.word	0xbf7fffef
 80059d4:	7f7fffff 	.word	0x7f7fffff
      } else {
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 80059d8:	f107 030c 	add.w	r3, r7, #12
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fb22 	bl	8005026 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	4619      	mov	r1, r3
 80059e8:	4844      	ldr	r0, [pc, #272]	; (8005afc <plan_buffer_line+0x428>)
 80059ea:	f7ff fb75 	bl	80050d8 <limit_value_by_axis_maximum>
 80059ee:	6478      	str	r0, [r7, #68]	; 0x44
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 80059f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80059f6:	f7fb f851 	bl	8000a9c <__aeabi_fsub>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fb f955 	bl	8000cb0 <__aeabi_fmul>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f004 ff27 	bl	800a85c <sqrtf>
 8005a0e:	6438      	str	r0, [r7, #64]	; 0x40
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8005a10:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <plan_buffer_line+0x42c>)
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fb f94a 	bl	8000cb0 <__aeabi_fmul>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fb f945 	bl	8000cb0 <__aeabi_fmul>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461c      	mov	r4, r3
 8005a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a30:	f7fb f834 	bl	8000a9c <__aeabi_fsub>
 8005a34:	4603      	mov	r3, r0
 8005a36:	4619      	mov	r1, r3
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7fb f9ed 	bl	8000e18 <__aeabi_fdiv>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fb fad1 	bl	8000fec <__aeabi_fcmplt>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <plan_buffer_line+0x382>
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	e018      	b.n	8005a88 <plan_buffer_line+0x3b4>
 8005a56:	4b2a      	ldr	r3, [pc, #168]	; (8005b00 <plan_buffer_line+0x42c>)
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fb f927 	bl	8000cb0 <__aeabi_fmul>
 8005a62:	4603      	mov	r3, r0
 8005a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb f922 	bl	8000cb0 <__aeabi_fmul>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461c      	mov	r4, r3
 8005a70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a72:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a76:	f7fb f811 	bl	8000a9c <__aeabi_fsub>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7fb f9ca 	bl	8000e18 <__aeabi_fdiv>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
  }

  // Block system motion from updating this data to ensure next g-code motion is computed correctly.
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8005a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8e:	7c9b      	ldrb	r3, [r3, #18]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d12b      	bne.n	8005af0 <plan_buffer_line+0x41c>
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 8005a98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a9a:	f7ff fd5b 	bl	8005554 <plan_compute_profile_nominal_speed>
 8005a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <plan_buffer_line+0x430>)
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005aaa:	f7ff fda9 	bl	8005600 <plan_compute_profile_parameters>
    pl.previous_nominal_speed = nominal_speed;
 8005aae:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <plan_buffer_line+0x430>)
 8005ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab2:	6193      	str	r3, [r2, #24]

    // Update previous path unit_vector and planner position.
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8005ab4:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <plan_buffer_line+0x430>)
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	f107 0218 	add.w	r2, r7, #24
 8005abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <plan_buffer_line+0x430>)
 8005ac4:	461c      	mov	r4, r3
 8005ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // New block is all set. Update buffer head and next buffer head indices.
    block_buffer_head = next_buffer_head;
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <plan_buffer_line+0x434>)
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <plan_buffer_line+0x438>)
 8005ad8:	701a      	strb	r2, [r3, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8005ada:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <plan_buffer_line+0x438>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fb48 	bl	8005174 <plan_next_block_index>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <plan_buffer_line+0x434>)
 8005aea:	701a      	strb	r2, [r3, #0]

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
 8005aec:	f7ff fb68 	bl	80051c0 <planner_recalculate>
  }
  return(PLAN_OK);
 8005af0:	2301      	movs	r3, #1
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	375c      	adds	r7, #92	; 0x5c
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd90      	pop	{r4, r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20001060 	.word	0x20001060
 8005b00:	20001048 	.word	0x20001048
 8005b04:	20000884 	.word	0x20000884
 8005b08:	20000882 	.word	0x20000882
 8005b0c:	20000881 	.word	0x20000881

08005b10 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
  // TODO: For motor configurations not in the same coordinate frame as the machine position,
  // this function needs to be updated to accomodate the difference.
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 8005b16:	2300      	movs	r3, #0
 8005b18:	71fb      	strb	r3, [r7, #7]
 8005b1a:	e00a      	b.n	8005b32 <plan_sync_position+0x22>
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	79fa      	ldrb	r2, [r7, #7]
 8005b20:	4908      	ldr	r1, [pc, #32]	; (8005b44 <plan_sync_position+0x34>)
 8005b22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b26:	4908      	ldr	r1, [pc, #32]	; (8005b48 <plan_sync_position+0x38>)
 8005b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx=0; idx<N_AXIS; idx++) {
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	71fb      	strb	r3, [r7, #7]
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d9f1      	bls.n	8005b1c <plan_sync_position+0xc>
    #endif
  }
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000f20 	.word	0x20000f20
 8005b48:	20000884 	.word	0x20000884

08005b4c <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <plan_get_block_buffer_available+0x3c>)
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <plan_get_block_buffer_available+0x40>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d308      	bcc.n	8005b6e <plan_get_block_buffer_available+0x22>
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <plan_get_block_buffer_available+0x40>)
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <plan_get_block_buffer_available+0x3c>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	3323      	adds	r3, #35	; 0x23
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e007      	b.n	8005b7e <plan_get_block_buffer_available+0x32>
  return((block_buffer_tail-block_buffer_head-1));
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <plan_get_block_buffer_available+0x40>)
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <plan_get_block_buffer_available+0x3c>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b2db      	uxtb	r3, r3
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	20000881 	.word	0x20000881
 8005b8c:	20000880 	.word	0x20000880

08005b90 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8005b94:	f003 f908 	bl	8008da8 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8005b98:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <plan_cycle_reinitialize+0x18>)
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <plan_cycle_reinitialize+0x1c>)
 8005b9e:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
 8005ba0:	f7ff fb0e 	bl	80051c0 <planner_recalculate>
}
 8005ba4:	bf00      	nop
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000880 	.word	0x20000880
 8005bac:	20000883 	.word	0x20000883

08005bb0 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  while (*s)
 8005bb8:	e006      	b.n	8005bc8 <printString+0x18>
    serial_write(*s++);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fd9c 	bl	8007700 <serial_write>
  while (*s)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f4      	bne.n	8005bba <printString+0xa>
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <print_uint8_base10>:
// }


// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  uint8_t digit_a = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
  uint8_t digit_b = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73bb      	strb	r3, [r7, #14]
  if (n >= 100) { // 100-255
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b63      	cmp	r3, #99	; 0x63
 8005bee:	d912      	bls.n	8005c16 <print_uint8_base10+0x3e>
    digit_a = '0' + n % 10;
 8005bf0:	79fa      	ldrb	r2, [r7, #7]
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <print_uint8_base10+0x9c>)
 8005bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf8:	08d9      	lsrs	r1, r3, #3
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	3330      	adds	r3, #48	; 0x30
 8005c08:	73fb      	strb	r3, [r7, #15]
    n /= 10;
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <print_uint8_base10+0x9c>)
 8005c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c12:	08db      	lsrs	r3, r3, #3
 8005c14:	71fb      	strb	r3, [r7, #7]
  }
  if (n >= 10) { // 10-99
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	2b09      	cmp	r3, #9
 8005c1a:	d912      	bls.n	8005c42 <print_uint8_base10+0x6a>
    digit_b = '0' + n % 10;
 8005c1c:	79fa      	ldrb	r2, [r7, #7]
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <print_uint8_base10+0x9c>)
 8005c20:	fba3 1302 	umull	r1, r3, r3, r2
 8005c24:	08d9      	lsrs	r1, r3, #3
 8005c26:	460b      	mov	r3, r1
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	3330      	adds	r3, #48	; 0x30
 8005c34:	73bb      	strb	r3, [r7, #14]
    n /= 10;
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	4a0e      	ldr	r2, [pc, #56]	; (8005c74 <print_uint8_base10+0x9c>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	71fb      	strb	r3, [r7, #7]
  }
  serial_write('0' + n);
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	3330      	adds	r3, #48	; 0x30
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fd59 	bl	8007700 <serial_write>
  if (digit_b) { serial_write(digit_b); }
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <print_uint8_base10+0x84>
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fd52 	bl	8007700 <serial_write>
  if (digit_a) { serial_write(digit_a); }
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <print_uint8_base10+0x92>
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fd4b 	bl	8007700 <serial_write>
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	cccccccd 	.word	0xcccccccd

08005c78 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  if (n < 0) {
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7fb f9af 	bl	8000fec <__aeabi_fcmplt>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <printFloat+0x2a>
    serial_write('-');
 8005c94:	202d      	movs	r0, #45	; 0x2d
 8005c96:	f001 fd33 	bl	8007700 <serial_write>
    n = -n;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005ca0:	607b      	str	r3, [r7, #4]
  }

  uint8_t decimals = decimal_places;
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	77fb      	strb	r3, [r7, #31]
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8005ca6:	e008      	b.n	8005cba <printFloat+0x42>
    n *= 100;
 8005ca8:	493c      	ldr	r1, [pc, #240]	; (8005d9c <printFloat+0x124>)
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb f800 	bl	8000cb0 <__aeabi_fmul>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	607b      	str	r3, [r7, #4]
    decimals -= 2;
 8005cb4:	7ffb      	ldrb	r3, [r7, #31]
 8005cb6:	3b02      	subs	r3, #2
 8005cb8:	77fb      	strb	r3, [r7, #31]
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8005cba:	7ffb      	ldrb	r3, [r7, #31]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d8f3      	bhi.n	8005ca8 <printFloat+0x30>
  }
  if (decimals) { n *= 10; }
 8005cc0:	7ffb      	ldrb	r3, [r7, #31]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <printFloat+0x5a>
 8005cc6:	4936      	ldr	r1, [pc, #216]	; (8005da0 <printFloat+0x128>)
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fa fff1 	bl	8000cb0 <__aeabi_fmul>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	607b      	str	r3, [r7, #4]
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005cd2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fa fee2 	bl	8000aa0 <__addsf3>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	607b      	str	r3, [r7, #4]

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	77bb      	strb	r3, [r7, #30]
  uint32_t a = (long)n;
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fb f9bf 	bl	8001068 <__aeabi_f2iz>
 8005cea:	4603      	mov	r3, r0
 8005cec:	61bb      	str	r3, [r7, #24]
  while(a > 0) {
 8005cee:	e01b      	b.n	8005d28 <printFloat+0xb0>
    buf[i++] = (a % 10) + '0'; // Get digit
 8005cf0:	7fbb      	ldrb	r3, [r7, #30]
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	77ba      	strb	r2, [r7, #30]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <printFloat+0x12c>)
 8005cfc:	fba3 2301 	umull	r2, r3, r3, r1
 8005d00:	08da      	lsrs	r2, r3, #3
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	1aca      	subs	r2, r1, r3
 8005d0c:	b2d3      	uxtb	r3, r2
 8005d0e:	3330      	adds	r3, #48	; 0x30
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	f107 0320 	add.w	r3, r7, #32
 8005d16:	4403      	add	r3, r0
 8005d18:	f803 2c18 	strb.w	r2, [r3, #-24]
    a /= 10;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4a21      	ldr	r2, [pc, #132]	; (8005da4 <printFloat+0x12c>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	08db      	lsrs	r3, r3, #3
 8005d26:	61bb      	str	r3, [r7, #24]
  while(a > 0) {
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e0      	bne.n	8005cf0 <printFloat+0x78>
  }
  while (i < decimal_places) {
 8005d2e:	e008      	b.n	8005d42 <printFloat+0xca>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005d30:	7fbb      	ldrb	r3, [r7, #30]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	77ba      	strb	r2, [r7, #30]
 8005d36:	f107 0220 	add.w	r2, r7, #32
 8005d3a:	4413      	add	r3, r2
 8005d3c:	2230      	movs	r2, #48	; 0x30
 8005d3e:	f803 2c18 	strb.w	r2, [r3, #-24]
  while (i < decimal_places) {
 8005d42:	7fba      	ldrb	r2, [r7, #30]
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d3f2      	bcc.n	8005d30 <printFloat+0xb8>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005d4a:	7fba      	ldrb	r2, [r7, #30]
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d11d      	bne.n	8005d8e <printFloat+0x116>
    buf[i++] = '0';
 8005d52:	7fbb      	ldrb	r3, [r7, #30]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	77ba      	strb	r2, [r7, #30]
 8005d58:	f107 0220 	add.w	r2, r7, #32
 8005d5c:	4413      	add	r3, r2
 8005d5e:	2230      	movs	r2, #48	; 0x30
 8005d60:	f803 2c18 	strb.w	r2, [r3, #-24]
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8005d64:	e013      	b.n	8005d8e <printFloat+0x116>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005d66:	7fba      	ldrb	r2, [r7, #30]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d102      	bne.n	8005d74 <printFloat+0xfc>
 8005d6e:	202e      	movs	r0, #46	; 0x2e
 8005d70:	f001 fcc6 	bl	8007700 <serial_write>
    serial_write(buf[i-1]);
 8005d74:	7fbb      	ldrb	r3, [r7, #30]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	f107 0220 	add.w	r2, r7, #32
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fcbc 	bl	8007700 <serial_write>
  for (; i > 0; i--) {
 8005d88:	7fbb      	ldrb	r3, [r7, #30]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	77bb      	strb	r3, [r7, #30]
 8005d8e:	7fbb      	ldrb	r3, [r7, #30]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e8      	bne.n	8005d66 <printFloat+0xee>
  }
}
 8005d94:	bf00      	nop
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	42c80000 	.word	0x42c80000
 8005da0:	41200000 	.word	0x41200000
 8005da4:	cccccccd 	.word	0xcccccccd

08005da8 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <printFloat_CoordValue+0x3c>)
 8005db2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <printFloat_CoordValue+0x2a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8005dbe:	490a      	ldr	r1, [pc, #40]	; (8005de8 <printFloat_CoordValue+0x40>)
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fa ff75 	bl	8000cb0 <__aeabi_fmul>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2104      	movs	r1, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ff54 	bl	8005c78 <printFloat>
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8005dd0:	e003      	b.n	8005dda <printFloat_CoordValue+0x32>
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
 8005dd2:	2103      	movs	r1, #3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ff4f 	bl	8005c78 <printFloat>
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20001048 	.word	0x20001048
 8005de8:	3d21428b 	.word	0x3d21428b

08005dec <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <printFloat_RateValue+0x3c>)
 8005df6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <printFloat_RateValue+0x2a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8005e02:	490a      	ldr	r1, [pc, #40]	; (8005e2c <printFloat_RateValue+0x40>)
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fa ff53 	bl	8000cb0 <__aeabi_fmul>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff ff32 	bl	8005c78 <printFloat>
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8005e14:	e003      	b.n	8005e1e <printFloat_RateValue+0x32>
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
 8005e16:	2100      	movs	r1, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff2d 	bl	8005c78 <printFloat>
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20001048 	.word	0x20001048
 8005e2c:	3d21428b 	.word	0x3d21428b

08005e30 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8005e36:	2101      	movs	r1, #1
 8005e38:	2008      	movs	r0, #8
 8005e3a:	f7fb fd9b 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	71bb      	strb	r3, [r7, #6]
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005e42:	2348      	movs	r3, #72	; 0x48
 8005e44:	71fb      	strb	r3, [r7, #7]
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8005e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e4a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4804      	ldr	r0, [pc, #16]	; (8005e64 <probe_init+0x34>)
 8005e52:	f7fb fb25 	bl	80014a0 <GPIO_Init>
#endif
  probe_configure_invert_mask(false); // Initialize invert mask.
 8005e56:	2000      	movs	r0, #0
 8005e58:	f000 f806 	bl	8005e68 <probe_configure_invert_mask>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40010c00 	.word	0x40010c00

08005e68 <probe_configure_invert_mask>:

// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	71fb      	strb	r3, [r7, #7]
  probe_invert_mask = 0; // Initialize as zero.
 8005e72:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <probe_configure_invert_mask+0x48>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	801a      	strh	r2, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <probe_configure_invert_mask+0x4c>)
 8005e7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	db06      	blt.n	8005e92 <probe_configure_invert_mask+0x2a>
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <probe_configure_invert_mask+0x48>)
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <probe_configure_invert_mask+0x48>)
 8005e90:	801a      	strh	r2, [r3, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d006      	beq.n	8005ea6 <probe_configure_invert_mask+0x3e>
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <probe_configure_invert_mask+0x48>)
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <probe_configure_invert_mask+0x48>)
 8005ea4:	801a      	strh	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	20000f2e 	.word	0x20000f2e
 8005eb4:	20001048 	.word	0x20001048

08005eb8 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005ebc:	4807      	ldr	r0, [pc, #28]	; (8005edc <probe_get_state+0x24>)
 8005ebe:	f7fb fbab 	bl	8001618 <GPIO_ReadInputData>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec8:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <probe_get_state+0x28>)
 8005eca:	8812      	ldrh	r2, [r2, #0]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
#endif
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40010c00 	.word	0x40010c00
 8005ee0:	20000f2e 	.word	0x20000f2e

08005ee4 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0

	if (probe_get_state()) {
 8005ee8:	f7ff ffe6 	bl	8005eb8 <probe_get_state>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00f      	beq.n	8005f12 <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8005ef2:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <probe_state_monitor+0x34>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <probe_state_monitor+0x38>)
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <probe_state_monitor+0x3c>)
 8005efc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <probe_state_monitor+0x40>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <probe_state_monitor+0x40>)
 8005f10:	701a      	strb	r2, [r3, #0]
  }
}
 8005f12:	bf00      	nop
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000f12 	.word	0x20000f12
 8005f1c:	20000f14 	.word	0x20000f14
 8005f20:	20000f20 	.word	0x20000f20
 8005f24:	20000f11 	.word	0x20000f11

08005f28 <protocol_main_loop>:

/*
  GRBL PRIMARY LOOP:
*/
void protocol_main_loop()
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
  // Perform some machine checks to make sure everything is good to go.
  #ifdef CHECK_LIMITS_AT_INIT
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <protocol_main_loop+0x1bc>)
 8005f30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <protocol_main_loop+0x2a>
      if (limits_get_state()) {
 8005f3c:	f7fd ff76 	bl	8003e2c <limits_get_state>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <protocol_main_loop+0x2a>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005f46:	4b68      	ldr	r3, [pc, #416]	; (80060e8 <protocol_main_loop+0x1c0>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8005f4c:	2007      	movs	r0, #7
 8005f4e:	f000 fddd 	bl	8006b0c <report_feedback_message>
    }
  #endif
  // Check for and report alarm state after a reset, error, or an initial power up.
  // NOTE: Sleep mode disables the stepper drivers and position can't be guaranteed.
  // Re-initialize the sleep state as an ALARM mode to ensure user homes or acknowledges.
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 8005f52:	4b65      	ldr	r3, [pc, #404]	; (80060e8 <protocol_main_loop+0x1c0>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d006      	beq.n	8005f6c <protocol_main_loop+0x44>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 8005f5e:	2002      	movs	r0, #2
 8005f60:	f000 fdd4 	bl	8006b0c <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8005f64:	4b60      	ldr	r3, [pc, #384]	; (80060e8 <protocol_main_loop+0x1c0>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e014      	b.n	8005f96 <protocol_main_loop+0x6e>
  } else {
    // Check if the safety door is open.
    sys.state = STATE_IDLE;
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	; (80060e8 <protocol_main_loop+0x1c0>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
    if (system_check_safety_door_ajar()) {
 8005f72:	f003 fe93 	bl	8009c9c <system_check_safety_door_ajar>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <protocol_main_loop+0x68>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8005f7c:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <protocol_main_loop+0x1c4>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f043 0320 	orr.w	r3, r3, #32
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	4b58      	ldr	r3, [pc, #352]	; (80060ec <protocol_main_loop+0x1c4>)
 8005f8a:	701a      	strb	r2, [r3, #0]
      protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 8005f8c:	f000 f8d6 	bl	800613c <protocol_execute_realtime>
    }
    // All systems go!
    system_execute_startup(line); // Execute startup script.
 8005f90:	4857      	ldr	r0, [pc, #348]	; (80060f0 <protocol_main_loop+0x1c8>)
 8005f92:	f003 fe8d 	bl	8009cb0 <system_execute_startup>
  // ---------------------------------------------------------------------------------
  // Primary loop! Upon a system abort, this exits back to main() to reset the system.
  // This is also where Grbl idles while waiting for something to do.
  // ---------------------------------------------------------------------------------

  uint8_t line_flags = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	71fb      	strb	r3, [r7, #7]
  uint8_t char_counter = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	71bb      	strb	r3, [r7, #6]
#ifdef DEBUG_TIMING_WITH_FLOOD_AND_MIST
	  toggleFloodBit(); // added by MS for debug
#endif
	  // Process one line of incoming serial data, as the data becomes available. Performs an
    // initial filtering by removing spaces and comments and capitalizing all letters.
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005f9e:	e08a      	b.n	80060b6 <protocol_main_loop+0x18e>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 8005fa0:	797b      	ldrb	r3, [r7, #5]
 8005fa2:	2b0a      	cmp	r3, #10
 8005fa4:	d002      	beq.n	8005fac <protocol_main_loop+0x84>
 8005fa6:	797b      	ldrb	r3, [r7, #5]
 8005fa8:	2b0d      	cmp	r3, #13
 8005faa:	d13f      	bne.n	800602c <protocol_main_loop+0x104>

        protocol_execute_realtime(); // Runtime command check point.
 8005fac:	f000 f8c6 	bl	800613c <protocol_execute_realtime>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8005fb0:	4b4d      	ldr	r3, [pc, #308]	; (80060e8 <protocol_main_loop+0x1c0>)
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 808f 	bne.w	80060d8 <protocol_main_loop+0x1b0>

        line[char_counter] = 0; // Set string termination character.
 8005fba:	79bb      	ldrb	r3, [r7, #6]
 8005fbc:	4a4c      	ldr	r2, [pc, #304]	; (80060f0 <protocol_main_loop+0x1c8>)
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	54d1      	strb	r1, [r2, r3]
#ifdef LEDBLINK
				LedBlink();
 8005fc2:	f7fe fb21 	bl	8004608 <LedBlink>
				#ifdef REPORT_ECHO_LINE_RECEIVED
          report_echo_line_received(line);
        #endif

        // Direct and execute one line of formatted input, and report status of execution.
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <protocol_main_loop+0xb0>
          // Report line overflow error.
          report_status_message(STATUS_OVERFLOW);
 8005fd0:	200b      	movs	r0, #11
 8005fd2:	f000 fd65 	bl	8006aa0 <report_status_message>
 8005fd6:	e024      	b.n	8006022 <protocol_main_loop+0xfa>
        } else if (line[0] == 0) {
 8005fd8:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <protocol_main_loop+0x1c8>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d103      	bne.n	8005fe8 <protocol_main_loop+0xc0>
          // Empty or comment line. For syncing purposes.
          report_status_message(STATUS_OK);
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f000 fd5d 	bl	8006aa0 <report_status_message>
 8005fe6:	e01c      	b.n	8006022 <protocol_main_loop+0xfa>
        } else if (line[0] == '$') {
 8005fe8:	4b41      	ldr	r3, [pc, #260]	; (80060f0 <protocol_main_loop+0x1c8>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b24      	cmp	r3, #36	; 0x24
 8005fee:	d107      	bne.n	8006000 <protocol_main_loop+0xd8>
          // Grbl '$' system command
          report_status_message(system_execute_line(line));
 8005ff0:	483f      	ldr	r0, [pc, #252]	; (80060f0 <protocol_main_loop+0x1c8>)
 8005ff2:	f003 fe8d 	bl	8009d10 <system_execute_line>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fd51 	bl	8006aa0 <report_status_message>
 8005ffe:	e010      	b.n	8006022 <protocol_main_loop+0xfa>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <protocol_main_loop+0x1c0>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <protocol_main_loop+0xec>
          // Everything else is gcode. Block if in alarm or jog mode.
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 800600c:	2009      	movs	r0, #9
 800600e:	f000 fd47 	bl	8006aa0 <report_status_message>
 8006012:	e006      	b.n	8006022 <protocol_main_loop+0xfa>
        } else {
          // Parse and execute g-code block.
          report_status_message(gc_execute_line(line));
 8006014:	4836      	ldr	r0, [pc, #216]	; (80060f0 <protocol_main_loop+0x1c8>)
 8006016:	f7fc f97b 	bl	8002310 <gc_execute_line>
 800601a:	4603      	mov	r3, r0
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fd3f 	bl	8006aa0 <report_status_message>
        }

        // Reset tracking data for next line.
        line_flags = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	71fb      	strb	r3, [r7, #7]
        char_counter = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	71bb      	strb	r3, [r7, #6]
 800602a:	e044      	b.n	80060b6 <protocol_main_loop+0x18e>

      } else {

        if (line_flags) {
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <protocol_main_loop+0x124>
          // Throw away all (except EOL) comment characters and overflow characters.
          if (c == ')') {
 8006032:	797b      	ldrb	r3, [r7, #5]
 8006034:	2b29      	cmp	r3, #41	; 0x29
 8006036:	d13e      	bne.n	80060b6 <protocol_main_loop+0x18e>
            // End of '()' comment. Resume line allowed.
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d039      	beq.n	80060b6 <protocol_main_loop+0x18e>
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	f023 0302 	bic.w	r3, r3, #2
 8006048:	71fb      	strb	r3, [r7, #7]
 800604a:	e034      	b.n	80060b6 <protocol_main_loop+0x18e>
          }
        } else {
          if (c <= ' ') {
 800604c:	797b      	ldrb	r3, [r7, #5]
 800604e:	2b20      	cmp	r3, #32
 8006050:	d931      	bls.n	80060b6 <protocol_main_loop+0x18e>
            // Throw away whitepace and control characters
          } else if (c == '/') {
 8006052:	797b      	ldrb	r3, [r7, #5]
 8006054:	2b2f      	cmp	r3, #47	; 0x2f
 8006056:	d02e      	beq.n	80060b6 <protocol_main_loop+0x18e>
            // Block delete NOT SUPPORTED. Ignore character.
            // NOTE: If supported, would simply need to check the system if block delete is enabled.
          } else if (c == '(') {
 8006058:	797b      	ldrb	r3, [r7, #5]
 800605a:	2b28      	cmp	r3, #40	; 0x28
 800605c:	d104      	bne.n	8006068 <protocol_main_loop+0x140>
            // Enable comments flag and ignore all characters until ')' or EOL.
            // NOTE: This doesn't follow the NIST definition exactly, but is good enough for now.
            // In the future, we could simply remove the items within the comments, but retain the
            // comment control characters, so that the g-code parser can error-check it.
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	71fb      	strb	r3, [r7, #7]
 8006066:	e026      	b.n	80060b6 <protocol_main_loop+0x18e>
          } else if (c == ';') {
 8006068:	797b      	ldrb	r3, [r7, #5]
 800606a:	2b3b      	cmp	r3, #59	; 0x3b
 800606c:	d104      	bne.n	8006078 <protocol_main_loop+0x150>
            // NOTE: ';' comment to EOL is a LinuxCNC definition. Not NIST.
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	71fb      	strb	r3, [r7, #7]
 8006076:	e01e      	b.n	80060b6 <protocol_main_loop+0x18e>
            // Program start-end percent sign NOT SUPPORTED.
            // NOTE: This maybe installed to tell Grbl when a program is running vs manual input,
            // where, during a program, the system auto-cycle start will continue to execute
            // everything until the next '%' sign. This will help fix resuming issues with certain
            // functions that empty the planner buffer to execute its task on-time.
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 8006078:	79bb      	ldrb	r3, [r7, #6]
 800607a:	2b4e      	cmp	r3, #78	; 0x4e
 800607c:	d904      	bls.n	8006088 <protocol_main_loop+0x160>
            // Detect line buffer overflow and set flag.
            line_flags |= LINE_FLAG_OVERFLOW;
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	71fb      	strb	r3, [r7, #7]
 8006086:	e016      	b.n	80060b6 <protocol_main_loop+0x18e>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8006088:	797b      	ldrb	r3, [r7, #5]
 800608a:	2b60      	cmp	r3, #96	; 0x60
 800608c:	d90c      	bls.n	80060a8 <protocol_main_loop+0x180>
 800608e:	797b      	ldrb	r3, [r7, #5]
 8006090:	2b7a      	cmp	r3, #122	; 0x7a
 8006092:	d809      	bhi.n	80060a8 <protocol_main_loop+0x180>
            line[char_counter++] = c-'a'+'A';
 8006094:	79bb      	ldrb	r3, [r7, #6]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	71ba      	strb	r2, [r7, #6]
 800609a:	461a      	mov	r2, r3
 800609c:	797b      	ldrb	r3, [r7, #5]
 800609e:	3b20      	subs	r3, #32
 80060a0:	b2d9      	uxtb	r1, r3
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <protocol_main_loop+0x1c8>)
 80060a4:	5499      	strb	r1, [r3, r2]
 80060a6:	e006      	b.n	80060b6 <protocol_main_loop+0x18e>
          } else {
            line[char_counter++] = c;
 80060a8:	79bb      	ldrb	r3, [r7, #6]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	71ba      	strb	r2, [r7, #6]
 80060ae:	4619      	mov	r1, r3
 80060b0:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <protocol_main_loop+0x1c8>)
 80060b2:	797b      	ldrb	r3, [r7, #5]
 80060b4:	5453      	strb	r3, [r2, r1]
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80060b6:	f001 fb61 	bl	800777c <serial_read>
 80060ba:	4603      	mov	r3, r0
 80060bc:	717b      	strb	r3, [r7, #5]
 80060be:	797b      	ldrb	r3, [r7, #5]
 80060c0:	2bff      	cmp	r3, #255	; 0xff
 80060c2:	f47f af6d 	bne.w	8005fa0 <protocol_main_loop+0x78>
    }

    // If there are no more characters in the serial read buffer to be processed and executed,
    // this indicates that g-code streaming has either filled the planner buffer or has
    // completed. In either case, auto-cycle start, if enabled, any queued moves.
    protocol_auto_cycle_start();
 80060c6:	f000 f82d 	bl	8006124 <protocol_auto_cycle_start>

    protocol_execute_realtime();  // Runtime command check point.
 80060ca:	f000 f837 	bl	800613c <protocol_execute_realtime>

    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <protocol_main_loop+0x1c0>)
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <protocol_main_loop+0x1b4>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80060d6:	e7ee      	b.n	80060b6 <protocol_main_loop+0x18e>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <protocol_main_loop+0x1b6>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80060dc:	bf00      	nop
  }

  return; /* Never reached */
}
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20001048 	.word	0x20001048
 80060e8:	20000efc 	.word	0x20000efc
 80060ec:	20000f11 	.word	0x20000f11
 80060f0:	200008a0 	.word	0x200008a0

080060f4 <protocol_buffer_synchronize>:


// Block until all buffered steps are executed or in a cycle state. Works with feed hold
// during a synchronize call, if it should happen. Also, waits for clean cycle end.
void protocol_buffer_synchronize()
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  // If system is queued, ensure cycle resumes if the auto start flag is present.
  protocol_auto_cycle_start();
 80060f8:	f000 f814 	bl	8006124 <protocol_auto_cycle_start>
  do {
    protocol_execute_realtime();   // Check and execute run-time commands
 80060fc:	f000 f81e 	bl	800613c <protocol_execute_realtime>
    if (sys.abort) { return; } // Check for system abort
 8006100:	4b07      	ldr	r3, [pc, #28]	; (8006120 <protocol_buffer_synchronize+0x2c>)
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <protocol_buffer_synchronize+0x28>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8006108:	f7ff f9d0 	bl	80054ac <plan_get_current_block>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f4      	bne.n	80060fc <protocol_buffer_synchronize+0x8>
 8006112:	4b03      	ldr	r3, [pc, #12]	; (8006120 <protocol_buffer_synchronize+0x2c>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b08      	cmp	r3, #8
 8006118:	d0f0      	beq.n	80060fc <protocol_buffer_synchronize+0x8>
 800611a:	e000      	b.n	800611e <protocol_buffer_synchronize+0x2a>
    if (sys.abort) { return; } // Check for system abort
 800611c:	bf00      	nop
}
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000efc 	.word	0x20000efc

08006124 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8006128:	f7ff f9c0 	bl	80054ac <plan_get_current_block>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <protocol_auto_cycle_start+0x14>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006132:	2002      	movs	r0, #2
 8006134:	f004 f8d8 	bl	800a2e8 <system_set_exec_state_flag>
  }
}
 8006138:	bf00      	nop
 800613a:	bd80      	pop	{r7, pc}

0800613c <protocol_execute_realtime>:
// also provides a controlled way to execute certain tasks without having two or more instances of
// the same task, such as the planner recalculating the buffer upon a feedhold or overrides.
// NOTE: The sys_rt_exec_state variable flags are set by any process, step or serial interrupts, pinouts,
// limit switches, or the main program.
void protocol_execute_realtime()
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
	protocol_exec_rt_system();
 8006140:	f000 f80a 	bl	8006158 <protocol_exec_rt_system>

  if (sys.suspend) {
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <protocol_execute_realtime+0x18>)
 8006146:	789b      	ldrb	r3, [r3, #2]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <protocol_execute_realtime+0x14>
	  protocol_exec_rt_suspend();
 800614c:	f000 fad8 	bl	8006700 <protocol_exec_rt_suspend>

  }
}
 8006150:	bf00      	nop
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000efc 	.word	0x20000efc

08006158 <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800615e:	4b9d      	ldr	r3, [pc, #628]	; (80063d4 <protocol_exec_rt_system+0x27c>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) { // Enter only if any bit flag is true
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01b      	beq.n	80061a2 <protocol_exec_rt_system+0x4a>
    // System alarm. Everything has shutdown by something that has gone severely wrong. Report
    // the source of the error to the user. If critical, Grbl disables by entering an infinite
    // loop until system reset/abort.
	sys.state = STATE_ALARM; // Set system alarm state
 800616a:	4b9b      	ldr	r3, [pc, #620]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
    report_alarm_message(rt_exec);
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fcb2 	bl	8006adc <report_alarm_message>
    // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d002      	beq.n	8006184 <protocol_exec_rt_system+0x2c>
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d10c      	bne.n	800619e <protocol_exec_rt_system+0x46>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8006184:	2001      	movs	r0, #1
 8006186:	f000 fcc1 	bl	8006b0c <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800618a:	2010      	movs	r0, #16
 800618c:	f004 f8c2 	bl	800a314 <system_clear_exec_state_flag>
        // Block everything, except reset and status reports, until user issues reset or power
        // cycles. Hard limits typically occur while unattended or not paying attention. Gives
        // the user and a GUI time to do what is needed before resetting, like killing the
        // incoming stream. The same could be said about soft limits. While the position is not
        // lost, continued streaming could cause a serious crash if by chance it gets executed.
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8006190:	4b92      	ldr	r3, [pc, #584]	; (80063dc <protocol_exec_rt_system+0x284>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f8      	beq.n	8006190 <protocol_exec_rt_system+0x38>
    }
    system_clear_exec_alarm(); // Clear alarm
 800619e:	f004 f8e7 	bl	800a370 <system_clear_exec_alarm>
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80061a2:	4b8e      	ldr	r3, [pc, #568]	; (80063dc <protocol_exec_rt_system+0x284>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) {
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 817d 	beq.w	80064aa <protocol_exec_rt_system+0x352>
    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 0310 	and.w	r3, r3, #16
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <protocol_exec_rt_system+0x6a>
      sys.abort = true;  // Only place this is set true.
 80061ba:	4b87      	ldr	r3, [pc, #540]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80061bc:	2201      	movs	r2, #1
 80061be:	705a      	strb	r2, [r3, #1]
      return; // Nothing else to do but exit.
 80061c0:	e297      	b.n	80066f2 <protocol_exec_rt_system+0x59a>
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <protocol_exec_rt_system+0x7e>
      report_realtime_status();
 80061cc:	f001 f806 	bl	80071dc <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80061d0:	2001      	movs	r0, #1
 80061d2:	f004 f89f 	bl	800a314 <system_clear_exec_state_flag>
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 03e8 	and.w	r3, r3, #232	; 0xe8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8095 	beq.w	800630c <protocol_exec_rt_system+0x1b4>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80061e2:	4b7d      	ldr	r3, [pc, #500]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d179      	bne.n	80062e2 <protocol_exec_rt_system+0x18a>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80061ee:	4b7a      	ldr	r3, [pc, #488]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d019      	beq.n	800622e <protocol_exec_rt_system+0xd6>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80061fa:	4b77      	ldr	r3, [pc, #476]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80061fc:	789b      	ldrb	r3, [r3, #2]
 80061fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d113      	bne.n	800622e <protocol_exec_rt_system+0xd6>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8006206:	f002 fdcf 	bl	8008da8 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800620a:	4b73      	ldr	r3, [pc, #460]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800620c:	2202      	movs	r2, #2
 800620e:	711a      	strb	r2, [r3, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8006210:	4b71      	ldr	r3, [pc, #452]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b20      	cmp	r3, #32
 8006216:	d10a      	bne.n	800622e <protocol_exec_rt_system+0xd6>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8006218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db06      	blt.n	800622e <protocol_exec_rt_system+0xd6>
 8006220:	4b6d      	ldr	r3, [pc, #436]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006222:	789b      	ldrb	r3, [r3, #2]
 8006224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006228:	b2da      	uxtb	r2, r3
 800622a:	4b6b      	ldr	r3, [pc, #428]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800622c:	709a      	strb	r2, [r3, #2]
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 800622e:	4b6a      	ldr	r3, [pc, #424]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <protocol_exec_rt_system+0xe4>
 8006236:	4b68      	ldr	r3, [pc, #416]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006238:	2201      	movs	r2, #1
 800623a:	709a      	strb	r2, [r3, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00c      	beq.n	8006260 <protocol_exec_rt_system+0x108>
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8006246:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <protocol_exec_rt_system+0x108>
 8006252:	4b61      	ldr	r3, [pc, #388]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006254:	789b      	ldrb	r3, [r3, #2]
 8006256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625a:	b2da      	uxtb	r2, r3
 800625c:	4b5e      	ldr	r3, [pc, #376]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800625e:	709a      	strb	r2, [r3, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <protocol_exec_rt_system+0x124>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800626a:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d102      	bne.n	800627c <protocol_exec_rt_system+0x124>
 8006276:	4b58      	ldr	r3, [pc, #352]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006278:	2210      	movs	r2, #16
 800627a:	701a      	strb	r2, [r3, #0]
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02d      	beq.n	80062e2 <protocol_exec_rt_system+0x18a>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8006286:	2006      	movs	r0, #6
 8006288:	f000 fc40 	bl	8006b0c <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800628c:	4b52      	ldr	r3, [pc, #328]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800628e:	789b      	ldrb	r3, [r3, #2]
 8006290:	b25b      	sxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	db1e      	blt.n	80062d4 <protocol_exec_rt_system+0x17c>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 8006296:	4b50      	ldr	r3, [pc, #320]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d113      	bne.n	80062c6 <protocol_exec_rt_system+0x16e>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800629e:	4b4e      	ldr	r3, [pc, #312]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062a0:	789b      	ldrb	r3, [r3, #2]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <protocol_exec_rt_system+0x16e>
                    st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
                    sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION);
                    sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
                  } // else NO_MOTION is active.
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80062aa:	4b4b      	ldr	r3, [pc, #300]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062ac:	789b      	ldrb	r3, [r3, #2]
 80062ae:	f023 031c 	bic.w	r3, r3, #28
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b48      	ldr	r3, [pc, #288]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062b6:	709a      	strb	r2, [r3, #2]
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80062b8:	4b47      	ldr	r3, [pc, #284]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062ba:	789b      	ldrb	r3, [r3, #2]
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	4b45      	ldr	r3, [pc, #276]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062c4:	709a      	strb	r2, [r3, #2]
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80062c6:	4b44      	ldr	r3, [pc, #272]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b80      	cmp	r3, #128	; 0x80
 80062cc:	d002      	beq.n	80062d4 <protocol_exec_rt_system+0x17c>
 80062ce:	4b42      	ldr	r3, [pc, #264]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062d0:	2240      	movs	r2, #64	; 0x40
 80062d2:	701a      	strb	r2, [r3, #0]
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80062d4:	4b40      	ldr	r3, [pc, #256]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062d6:	789b      	ldrb	r3, [r3, #2]
 80062d8:	f043 0320 	orr.w	r3, r3, #32
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4b3e      	ldr	r3, [pc, #248]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062e0:	709a      	strb	r2, [r3, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 80062e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da0d      	bge.n	8006306 <protocol_exec_rt_system+0x1ae>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80062ea:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d106      	bne.n	8006300 <protocol_exec_rt_system+0x1a8>
 80062f2:	4b39      	ldr	r3, [pc, #228]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062f4:	789b      	ldrb	r3, [r3, #2]
 80062f6:	f043 0305 	orr.w	r3, r3, #5
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	4b36      	ldr	r3, [pc, #216]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80062fe:	709a      	strb	r2, [r3, #2]
        sys.state = STATE_SLEEP; 
 8006300:	4b35      	ldr	r3, [pc, #212]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006302:	2280      	movs	r2, #128	; 0x80
 8006304:	701a      	strb	r2, [r3, #0]
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8006306:	20e8      	movs	r0, #232	; 0xe8
 8006308:	f004 f804 	bl	800a314 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d06d      	beq.n	80063f2 <protocol_exec_rt_system+0x29a>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 0368 	and.w	r3, r3, #104	; 0x68
 800631c:	2b00      	cmp	r3, #0
 800631e:	d165      	bne.n	80063ec <protocol_exec_rt_system+0x294>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006320:	4b2d      	ldr	r3, [pc, #180]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	d11c      	bne.n	8006362 <protocol_exec_rt_system+0x20a>
 8006328:	4b2b      	ldr	r3, [pc, #172]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800632a:	789b      	ldrb	r3, [r3, #2]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <protocol_exec_rt_system+0x20a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006334:	4b28      	ldr	r3, [pc, #160]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006336:	789b      	ldrb	r3, [r3, #2]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <protocol_exec_rt_system+0x1f0>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006340:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006342:	2200      	movs	r2, #0
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	e00c      	b.n	8006362 <protocol_exec_rt_system+0x20a>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006348:	4b23      	ldr	r3, [pc, #140]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800634a:	789b      	ldrb	r3, [r3, #2]
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <protocol_exec_rt_system+0x20a>
            // Flag to re-energize powered components and restore original position, if disabled by SAFETY_DOOR.
            // NOTE: For a safety door to resume, the switch must be closed, as indicated by HOLD state, and
            // the retraction execution is complete, which implies the initial feed hold is not active. To
            // restore normal operation, the restore procedures must be initiated by the following flag. Once,
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8006354:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006356:	789b      	ldrb	r3, [r3, #2]
 8006358:	f043 0308 	orr.w	r3, r3, #8
 800635c:	b2da      	uxtb	r2, r3
 800635e:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006360:	709a      	strb	r2, [r3, #2]
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006362:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <protocol_exec_rt_system+0x22a>
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	d03a      	beq.n	80063ec <protocol_exec_rt_system+0x294>
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d034      	beq.n	80063ec <protocol_exec_rt_system+0x294>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b10      	cmp	r3, #16
 8006388:	d10b      	bne.n	80063a2 <protocol_exec_rt_system+0x24a>
 800638a:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800638c:	7adb      	ldrb	r3, [r3, #11]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <protocol_exec_rt_system+0x24a>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8006392:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <protocol_exec_rt_system+0x280>)
 8006394:	7adb      	ldrb	r3, [r3, #11]
 8006396:	f043 0308 	orr.w	r3, r3, #8
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <protocol_exec_rt_system+0x280>)
 800639e:	72da      	strb	r2, [r3, #11]
 80063a0:	e024      	b.n	80063ec <protocol_exec_rt_system+0x294>
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	711a      	strb	r2, [r3, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80063a8:	f7ff f880 	bl	80054ac <plan_get_current_block>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d016      	beq.n	80063e0 <protocol_exec_rt_system+0x288>
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80063b4:	789b      	ldrb	r3, [r3, #2]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d110      	bne.n	80063e0 <protocol_exec_rt_system+0x288>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	709a      	strb	r2, [r3, #2]
              sys.state = STATE_CYCLE;
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <protocol_exec_rt_system+0x280>)
 80063c6:	2208      	movs	r2, #8
 80063c8:	701a      	strb	r2, [r3, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80063ca:	f002 fd23 	bl	8008e14 <st_prep_buffer>
              st_wake_up();
 80063ce:	f002 f92d 	bl	800862c <st_wake_up>
 80063d2:	e00b      	b.n	80063ec <protocol_exec_rt_system+0x294>
 80063d4:	20000f2c 	.word	0x20000f2c
 80063d8:	20000efc 	.word	0x20000efc
 80063dc:	20000f11 	.word	0x20000f11
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80063e0:	4bb6      	ldr	r3, [pc, #728]	; (80066bc <protocol_exec_rt_system+0x564>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	709a      	strb	r2, [r3, #2]
              sys.state = STATE_IDLE;
 80063e6:	4bb5      	ldr	r3, [pc, #724]	; (80066bc <protocol_exec_rt_system+0x564>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80063ec:	2002      	movs	r0, #2
 80063ee:	f003 ff91 	bl	800a314 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d056      	beq.n	80064aa <protocol_exec_rt_system+0x352>
      // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
      // realtime command execution in the main program, ensuring that the planner re-plans safely.
      // NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
      // cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
      // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80063fc:	4baf      	ldr	r3, [pc, #700]	; (80066bc <protocol_exec_rt_system+0x564>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01f      	beq.n	8006448 <protocol_exec_rt_system+0x2f0>
 8006408:	4bac      	ldr	r3, [pc, #688]	; (80066bc <protocol_exec_rt_system+0x564>)
 800640a:	78db      	ldrb	r3, [r3, #3]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11b      	bne.n	8006448 <protocol_exec_rt_system+0x2f0>
 8006410:	4baa      	ldr	r3, [pc, #680]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006412:	789b      	ldrb	r3, [r3, #2]
 8006414:	b25b      	sxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	db16      	blt.n	8006448 <protocol_exec_rt_system+0x2f0>
        // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until user
        // has issued a resume command or reset.
        plan_cycle_reinitialize();
 800641a:	f7ff fbb9 	bl	8005b90 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800641e:	4ba7      	ldr	r3, [pc, #668]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006420:	791b      	ldrb	r3, [r3, #4]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d006      	beq.n	8006438 <protocol_exec_rt_system+0x2e0>
 800642a:	4ba4      	ldr	r3, [pc, #656]	; (80066bc <protocol_exec_rt_system+0x564>)
 800642c:	789b      	ldrb	r3, [r3, #2]
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	b2da      	uxtb	r2, r3
 8006434:	4ba1      	ldr	r3, [pc, #644]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006436:	709a      	strb	r2, [r3, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8006438:	4ba0      	ldr	r3, [pc, #640]	; (80066bc <protocol_exec_rt_system+0x564>)
 800643a:	791b      	ldrb	r3, [r3, #4]
 800643c:	f023 0306 	bic.w	r3, r3, #6
 8006440:	b2da      	uxtb	r2, r3
 8006442:	4b9e      	ldr	r3, [pc, #632]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006444:	711a      	strb	r2, [r3, #4]
 8006446:	e02d      	b.n	80064a4 <protocol_exec_rt_system+0x34c>
      } else {
        // Motion complete. Includes CYCLE/JOG/HOMING states and jog cancel/motion cancel/soft limit events.
        // NOTE: Motion and jog cancel both immediately return to idle after the hold completes.
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8006448:	4b9c      	ldr	r3, [pc, #624]	; (80066bc <protocol_exec_rt_system+0x564>)
 800644a:	789b      	ldrb	r3, [r3, #2]
 800644c:	b25b      	sxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	da0a      	bge.n	8006468 <protocol_exec_rt_system+0x310>

        	sys.step_control = STEP_CONTROL_NORMAL_OP;
 8006452:	4b9a      	ldr	r3, [pc, #616]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006454:	2200      	movs	r2, #0
 8006456:	711a      	strb	r2, [r3, #4]
          plan_reset();
 8006458:	f7fe ffc8 	bl	80053ec <plan_reset>
          st_reset();
 800645c:	f002 fbbe 	bl	8008bdc <st_reset>
          gc_sync_position();
 8006460:	f7fb ff4a 	bl	80022f8 <gc_sync_position>
          plan_sync_position();
 8006464:	f7ff fb54 	bl	8005b10 <plan_sync_position>
        }
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8006468:	4b94      	ldr	r3, [pc, #592]	; (80066bc <protocol_exec_rt_system+0x564>)
 800646a:	789b      	ldrb	r3, [r3, #2]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d011      	beq.n	8006498 <protocol_exec_rt_system+0x340>
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006474:	4b91      	ldr	r3, [pc, #580]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006476:	789b      	ldrb	r3, [r3, #2]
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b8f      	ldr	r3, [pc, #572]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006480:	709a      	strb	r2, [r3, #2]
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8006482:	4b8e      	ldr	r3, [pc, #568]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006484:	789b      	ldrb	r3, [r3, #2]
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	4b8b      	ldr	r3, [pc, #556]	; (80066bc <protocol_exec_rt_system+0x564>)
 800648e:	709a      	strb	r2, [r3, #2]
          sys.state = STATE_SAFETY_DOOR;
 8006490:	4b8a      	ldr	r3, [pc, #552]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e005      	b.n	80064a4 <protocol_exec_rt_system+0x34c>
        } else {
          sys.suspend = SUSPEND_DISABLE;
 8006498:	4b88      	ldr	r3, [pc, #544]	; (80066bc <protocol_exec_rt_system+0x564>)
 800649a:	2200      	movs	r2, #0
 800649c:	709a      	strb	r2, [r3, #2]
          sys.state = STATE_IDLE;
 800649e:	4b87      	ldr	r3, [pc, #540]	; (80066bc <protocol_exec_rt_system+0x564>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80064a4:	2004      	movs	r0, #4
 80064a6:	f003 ff35 	bl	800a314 <system_clear_exec_state_flag>
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80064aa:	4b85      	ldr	r3, [pc, #532]	; (80066c0 <protocol_exec_rt_system+0x568>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) {
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d063      	beq.n	800657e <protocol_exec_rt_system+0x426>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80064b6:	f003 ff95 	bl	800a3e4 <system_clear_exec_motion_overrides>

    uint8_t new_f_override =  sys.f_override;
 80064ba:	4b80      	ldr	r3, [pc, #512]	; (80066bc <protocol_exec_rt_system+0x564>)
 80064bc:	7a1b      	ldrb	r3, [r3, #8]
 80064be:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <protocol_exec_rt_system+0x376>
 80064ca:	2364      	movs	r3, #100	; 0x64
 80064cc:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <protocol_exec_rt_system+0x386>
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	330a      	adds	r3, #10
 80064dc:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <protocol_exec_rt_system+0x396>
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	3b0a      	subs	r3, #10
 80064ec:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <protocol_exec_rt_system+0x3a6>
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	3301      	adds	r3, #1
 80064fc:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <protocol_exec_rt_system+0x3b6>
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	3b01      	subs	r3, #1
 800650c:	71fb      	strb	r3, [r7, #7]
    new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	2bc8      	cmp	r3, #200	; 0xc8
 8006512:	bf28      	it	cs
 8006514:	23c8      	movcs	r3, #200	; 0xc8
 8006516:	71fb      	strb	r3, [r7, #7]
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	2b0a      	cmp	r3, #10
 800651c:	bf38      	it	cc
 800651e:	230a      	movcc	r3, #10
 8006520:	71fb      	strb	r3, [r7, #7]

    uint8_t new_r_override = sys.r_override;
 8006522:	4b66      	ldr	r3, [pc, #408]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006524:	7a5b      	ldrb	r3, [r3, #9]
 8006526:	71bb      	strb	r3, [r7, #6]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <protocol_exec_rt_system+0x3de>
 8006532:	2364      	movs	r3, #100	; 0x64
 8006534:	71bb      	strb	r3, [r7, #6]
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <protocol_exec_rt_system+0x3ec>
 8006540:	2332      	movs	r3, #50	; 0x32
 8006542:	71bb      	strb	r3, [r7, #6]
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8006544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	da01      	bge.n	8006550 <protocol_exec_rt_system+0x3f8>
 800654c:	2319      	movs	r3, #25
 800654e:	71bb      	strb	r3, [r7, #6]

    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006550:	4b5a      	ldr	r3, [pc, #360]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006552:	7a1b      	ldrb	r3, [r3, #8]
 8006554:	79fa      	ldrb	r2, [r7, #7]
 8006556:	429a      	cmp	r2, r3
 8006558:	d104      	bne.n	8006564 <protocol_exec_rt_system+0x40c>
 800655a:	4b58      	ldr	r3, [pc, #352]	; (80066bc <protocol_exec_rt_system+0x564>)
 800655c:	7a5b      	ldrb	r3, [r3, #9]
 800655e:	79ba      	ldrb	r2, [r7, #6]
 8006560:	429a      	cmp	r2, r3
 8006562:	d00c      	beq.n	800657e <protocol_exec_rt_system+0x426>
      sys.f_override = new_f_override;
 8006564:	4a55      	ldr	r2, [pc, #340]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	7213      	strb	r3, [r2, #8]
      sys.r_override = new_r_override;
 800656a:	4a54      	ldr	r2, [pc, #336]	; (80066bc <protocol_exec_rt_system+0x564>)
 800656c:	79bb      	ldrb	r3, [r7, #6]
 800656e:	7253      	strb	r3, [r2, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006570:	4b52      	ldr	r3, [pc, #328]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006572:	2200      	movs	r2, #0
 8006574:	731a      	strb	r2, [r3, #12]
      plan_update_velocity_profile_parameters();
 8006576:	f7ff f875 	bl	8005664 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800657a:	f7ff fb09 	bl	8005b90 <plan_cycle_reinitialize>
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 800657e:	4b51      	ldr	r3, [pc, #324]	; (80066c4 <protocol_exec_rt_system+0x56c>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) {
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80ab 	beq.w	80066e2 <protocol_exec_rt_system+0x58a>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 800658c:	f003 ff38 	bl	800a400 <system_clear_exec_accessory_overrides>

    // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8006590:	4b4a      	ldr	r3, [pc, #296]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006592:	7a9b      	ldrb	r3, [r3, #10]
 8006594:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <protocol_exec_rt_system+0x44c>
 80065a0:	2364      	movs	r3, #100	; 0x64
 80065a2:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <protocol_exec_rt_system+0x45c>
 80065ae:	797b      	ldrb	r3, [r7, #5]
 80065b0:	330a      	adds	r3, #10
 80065b2:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <protocol_exec_rt_system+0x46c>
 80065be:	797b      	ldrb	r3, [r7, #5]
 80065c0:	3b0a      	subs	r3, #10
 80065c2:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <protocol_exec_rt_system+0x47c>
 80065ce:	797b      	ldrb	r3, [r7, #5]
 80065d0:	3301      	adds	r3, #1
 80065d2:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 0310 	and.w	r3, r3, #16
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <protocol_exec_rt_system+0x48c>
 80065de:	797b      	ldrb	r3, [r7, #5]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	717b      	strb	r3, [r7, #5]
    last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
 80065e4:	797b      	ldrb	r3, [r7, #5]
 80065e6:	2bc8      	cmp	r3, #200	; 0xc8
 80065e8:	bf28      	it	cs
 80065ea:	23c8      	movcs	r3, #200	; 0xc8
 80065ec:	717b      	strb	r3, [r7, #5]
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80065ee:	797b      	ldrb	r3, [r7, #5]
 80065f0:	2b0a      	cmp	r3, #10
 80065f2:	bf38      	it	cc
 80065f4:	230a      	movcc	r3, #10
 80065f6:	717b      	strb	r3, [r7, #5]

    if (last_s_override != sys.spindle_speed_ovr) {
 80065f8:	4b30      	ldr	r3, [pc, #192]	; (80066bc <protocol_exec_rt_system+0x564>)
 80065fa:	7a9b      	ldrb	r3, [r3, #10]
 80065fc:	797a      	ldrb	r2, [r7, #5]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d00c      	beq.n	800661c <protocol_exec_rt_system+0x4c4>
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006602:	4b2e      	ldr	r3, [pc, #184]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006604:	791b      	ldrb	r3, [r3, #4]
 8006606:	f043 0308 	orr.w	r3, r3, #8
 800660a:	b2da      	uxtb	r2, r3
 800660c:	4b2b      	ldr	r3, [pc, #172]	; (80066bc <protocol_exec_rt_system+0x564>)
 800660e:	711a      	strb	r2, [r3, #4]
      sys.spindle_speed_ovr = last_s_override;
 8006610:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006612:	797b      	ldrb	r3, [r7, #5]
 8006614:	7293      	strb	r3, [r2, #10]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006616:	4b29      	ldr	r3, [pc, #164]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006618:	2200      	movs	r2, #0
 800661a:	731a      	strb	r2, [r3, #12]
    }

    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d018      	beq.n	8006658 <protocol_exec_rt_system+0x500>
      // Spindle stop override allowed only while in HOLD state.
      // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
      if (sys.state == STATE_HOLD) {
 8006626:	4b25      	ldr	r3, [pc, #148]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b10      	cmp	r3, #16
 800662c:	d114      	bne.n	8006658 <protocol_exec_rt_system+0x500>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800662e:	4b23      	ldr	r3, [pc, #140]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006630:	7adb      	ldrb	r3, [r3, #11]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <protocol_exec_rt_system+0x4e6>
 8006636:	4b21      	ldr	r3, [pc, #132]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006638:	2202      	movs	r2, #2
 800663a:	72da      	strb	r2, [r3, #11]
 800663c:	e00c      	b.n	8006658 <protocol_exec_rt_system+0x500>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800663e:	4b1f      	ldr	r3, [pc, #124]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006640:	7adb      	ldrb	r3, [r3, #11]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d006      	beq.n	8006658 <protocol_exec_rt_system+0x500>
 800664a:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <protocol_exec_rt_system+0x564>)
 800664c:	7adb      	ldrb	r3, [r3, #11]
 800664e:	f043 0304 	orr.w	r3, r3, #4
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b19      	ldr	r3, [pc, #100]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006656:	72da      	strb	r2, [r3, #11]
      }
    }

    // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
    // run state can be determined by checking the parser state.
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03f      	beq.n	80066e2 <protocol_exec_rt_system+0x58a>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006662:	4b16      	ldr	r3, [pc, #88]	; (80066bc <protocol_exec_rt_system+0x564>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <protocol_exec_rt_system+0x51e>
 800666a:	4b14      	ldr	r3, [pc, #80]	; (80066bc <protocol_exec_rt_system+0x564>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	f003 0318 	and.w	r3, r3, #24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d035      	beq.n	80066e2 <protocol_exec_rt_system+0x58a>
        uint8_t coolant_state = gc_state.modal.coolant;
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <protocol_exec_rt_system+0x570>)
 8006678:	7a1b      	ldrb	r3, [r3, #8]
 800667a:	713b      	strb	r3, [r7, #4]
        #ifdef ENABLE_M7
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800667c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0c      	bge.n	800669e <protocol_exec_rt_system+0x546>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8006684:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	da04      	bge.n	8006696 <protocol_exec_rt_system+0x53e>
 800668c:	793b      	ldrb	r3, [r7, #4]
 800668e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006692:	713b      	strb	r3, [r7, #4]
 8006694:	e003      	b.n	800669e <protocol_exec_rt_system+0x546>
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8006696:	793b      	ldrb	r3, [r7, #4]
 8006698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800669c:	713b      	strb	r3, [r7, #4]
          }
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d015      	beq.n	80066d4 <protocol_exec_rt_system+0x57c>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80066a8:	793b      	ldrb	r3, [r7, #4]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <protocol_exec_rt_system+0x574>
 80066b2:	793b      	ldrb	r3, [r7, #4]
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	713b      	strb	r3, [r7, #4]
 80066ba:	e00b      	b.n	80066d4 <protocol_exec_rt_system+0x57c>
 80066bc:	20000efc 	.word	0x20000efc
 80066c0:	20000ef8 	.word	0x20000ef8
 80066c4:	20000f10 	.word	0x20000f10
 80066c8:	20000e74 	.word	0x20000e74
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80066cc:	793b      	ldrb	r3, [r7, #4]
 80066ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d2:	713b      	strb	r3, [r7, #4]
          }
        #else
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
        #endif
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80066d4:	793b      	ldrb	r3, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fb fc9a 	bl	8002010 <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 80066dc:	4a06      	ldr	r2, [pc, #24]	; (80066f8 <protocol_exec_rt_system+0x5a0>)
 80066de:	793b      	ldrb	r3, [r7, #4]
 80066e0:	7213      	strb	r3, [r2, #8]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80066e2:	4b06      	ldr	r3, [pc, #24]	; (80066fc <protocol_exec_rt_system+0x5a4>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <protocol_exec_rt_system+0x59a>
    st_prep_buffer();
 80066ee:	f002 fb91 	bl	8008e14 <st_prep_buffer>
  }

}
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000e74 	.word	0x20000e74
 80066fc:	20000efc 	.word	0x20000efc

08006700 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 8006706:	f7fe fed1 	bl	80054ac <plan_get_current_block>
 800670a:	6078      	str	r0, [r7, #4]
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <protocol_exec_rt_suspend+0x26>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8006712:	4b9c      	ldr	r3, [pc, #624]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 8006714:	7a5a      	ldrb	r2, [r3, #9]
 8006716:	4b9b      	ldr	r3, [pc, #620]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 8006718:	7a1b      	ldrb	r3, [r3, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	73fb      	strb	r3, [r7, #15]
      restore_spindle_speed = gc_state.spindle_speed;
 800671e:	4b99      	ldr	r3, [pc, #612]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	e005      	b.n	8006732 <protocol_exec_rt_suspend+0x32>
    } else {
      restore_condition = block->condition;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7c9b      	ldrb	r3, [r3, #18]
 800672a:	73fb      	strb	r3, [r7, #15]
      restore_spindle_speed = block->spindle_speed;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	60bb      	str	r3, [r7, #8]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8006732:	4b95      	ldr	r3, [pc, #596]	; (8006988 <protocol_exec_rt_suspend+0x288>)
 8006734:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 8117 	beq.w	8006970 <protocol_exec_rt_suspend+0x270>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8006742:	2020      	movs	r0, #32
 8006744:	f003 fe38 	bl	800a3b8 <system_set_exec_accessory_override_flag>
  #else
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
    else { restore_condition = block->condition; }
  #endif

  while (sys.suspend) {
 8006748:	e112      	b.n	8006970 <protocol_exec_rt_suspend+0x270>

    if (sys.abort) { return; }
 800674a:	4b90      	ldr	r3, [pc, #576]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 8114 	bne.w	800697c <protocol_exec_rt_suspend+0x27c>

    // Block until initial hold is complete and the machine has stopped motion.
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8006754:	4b8d      	ldr	r3, [pc, #564]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006756:	789b      	ldrb	r3, [r3, #2]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8105 	beq.w	800696c <protocol_exec_rt_suspend+0x26c>

      // Parking manager. Handles de/re-energizing, switch state checks, and parking motions for 
      // the safety door and sleep states.
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8006762:	4b8a      	ldr	r3, [pc, #552]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 809d 	beq.w	80068aa <protocol_exec_rt_suspend+0x1aa>
      
        // Handles retraction motions and de-energizing.
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 8006770:	4b86      	ldr	r3, [pc, #536]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006772:	789b      	ldrb	r3, [r3, #2]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d119      	bne.n	80067b0 <protocol_exec_rt_suspend+0xb0>

          // Ensure any prior spindle stop override is disabled at start of safety door routine.
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 800677c:	4b83      	ldr	r3, [pc, #524]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800677e:	2200      	movs	r2, #0
 8006780:	72da      	strb	r2, [r3, #11]

          #ifndef PARKING_ENABLE

            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8006782:	f04f 0100 	mov.w	r1, #0
 8006786:	2000      	movs	r0, #0
 8006788:	f001 fe82 	bl	8008490 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 800678c:	2000      	movs	r0, #0
 800678e:	f7fb fc3f 	bl	8002010 <coolant_set_state>

            }

          #endif

          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8006792:	4b7e      	ldr	r3, [pc, #504]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006794:	789b      	ldrb	r3, [r3, #2]
 8006796:	f023 0302 	bic.w	r3, r3, #2
 800679a:	b2da      	uxtb	r2, r3
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800679e:	709a      	strb	r2, [r3, #2]
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80067a0:	4b7a      	ldr	r3, [pc, #488]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80067a2:	789b      	ldrb	r3, [r3, #2]
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4b78      	ldr	r3, [pc, #480]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80067ac:	709a      	strb	r2, [r3, #2]
 80067ae:	e0dd      	b.n	800696c <protocol_exec_rt_suspend+0x26c>

        } else {

          
          if (sys.state == STATE_SLEEP) {
 80067b0:	4b76      	ldr	r3, [pc, #472]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d114      	bne.n	80067e2 <protocol_exec_rt_suspend+0xe2>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 80067b8:	200b      	movs	r0, #11
 80067ba:	f000 f9a7 	bl	8006b0c <report_feedback_message>
            // Spindle and coolant should already be stopped, but do it again just to be sure.
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80067be:	f04f 0100 	mov.w	r1, #0
 80067c2:	2000      	movs	r0, #0
 80067c4:	f001 fe64 	bl	8008490 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 80067c8:	2000      	movs	r0, #0
 80067ca:	f7fb fc21 	bl	8002010 <coolant_set_state>
            st_go_idle(); // Disable steppers
 80067ce:	f001 ff87 	bl	80086e0 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 80067d2:	e001      	b.n	80067d8 <protocol_exec_rt_suspend+0xd8>
 80067d4:	f7ff fcc0 	bl	8006158 <protocol_exec_rt_system>
 80067d8:	4b6c      	ldr	r3, [pc, #432]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f9      	beq.n	80067d4 <protocol_exec_rt_suspend+0xd4>
            return; // Abort received. Return to re-initialize.
 80067e0:	e0cd      	b.n	800697e <protocol_exec_rt_suspend+0x27e>
          }    
          
          // Allows resuming from parking/safety door. Actively checks if safety door is closed and ready to resume.
          if (sys.state == STATE_SAFETY_DOOR) {
 80067e2:	4b6a      	ldr	r3, [pc, #424]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d10b      	bne.n	8006802 <protocol_exec_rt_suspend+0x102>
            if (!(system_check_safety_door_ajar())) {
 80067ea:	f003 fa57 	bl	8009c9c <system_check_safety_door_ajar>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d106      	bne.n	8006802 <protocol_exec_rt_suspend+0x102>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 80067f4:	4b65      	ldr	r3, [pc, #404]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80067f6:	789b      	ldrb	r3, [r3, #2]
 80067f8:	f023 0320 	bic.w	r3, r3, #32
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	4b63      	ldr	r3, [pc, #396]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006800:	709a      	strb	r2, [r3, #2]
            }
          }

          // Handles parking restore and safety door resume.
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8006802:	4b62      	ldr	r3, [pc, #392]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006804:	789b      	ldrb	r3, [r3, #2]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80ae 	beq.w	800696c <protocol_exec_rt_suspend+0x26c>
                }
              }
            #endif

            // Delayed Tasks: Restart spindle and coolant, delay to power-up, then resume cycle.
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8006810:	4b5c      	ldr	r3, [pc, #368]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 8006812:	7a5b      	ldrb	r3, [r3, #9]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d021      	beq.n	800685c <protocol_exec_rt_suspend+0x15c>
              // Block if safety door re-opened during prior restore actions.
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8006818:	4b5c      	ldr	r3, [pc, #368]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800681a:	789b      	ldrb	r3, [r3, #2]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11b      	bne.n	800685c <protocol_exec_rt_suspend+0x15c>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8006824:	4b58      	ldr	r3, [pc, #352]	; (8006988 <protocol_exec_rt_suspend+0x288>)
 8006826:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <protocol_exec_rt_suspend+0x142>
                  // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006832:	4b56      	ldr	r3, [pc, #344]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	f043 0308 	orr.w	r3, r3, #8
 800683a:	b2da      	uxtb	r2, r3
 800683c:	4b53      	ldr	r3, [pc, #332]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800683e:	711a      	strb	r2, [r3, #4]
 8006840:	e00c      	b.n	800685c <protocol_exec_rt_suspend+0x15c>
                } else {
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006848:	b2db      	uxtb	r3, r3
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fe1f 	bl	8008490 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8006852:	2101      	movs	r1, #1
 8006854:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8006858:	f7fe fb7c 	bl	8004f54 <delay_sec>
                }
              }
            }
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 800685c:	4b49      	ldr	r3, [pc, #292]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 800685e:	7a1b      	ldrb	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d011      	beq.n	8006888 <protocol_exec_rt_suspend+0x188>
              // Block if safety door re-opened during prior restore actions.
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8006864:	4b49      	ldr	r3, [pc, #292]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006866:	789b      	ldrb	r3, [r3, #2]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <protocol_exec_rt_suspend+0x188>
                // NOTE: Laser mode will honor this delay. An exhaust system is often controlled by this pin.
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	b2db      	uxtb	r3, r3
 8006878:	4618      	mov	r0, r3
 800687a:	f7fb fbc9 	bl	8002010 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 800687e:	2101      	movs	r1, #1
 8006880:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006884:	f7fe fb66 	bl	8004f54 <delay_sec>
                  mc_parking_motion(restore_target, pl_data);
                }
              }
            #endif

            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8006888:	4b40      	ldr	r3, [pc, #256]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800688a:	789b      	ldrb	r3, [r3, #2]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b00      	cmp	r3, #0
 8006892:	d16b      	bne.n	800696c <protocol_exec_rt_suspend+0x26c>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8006894:	4b3d      	ldr	r3, [pc, #244]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006896:	789b      	ldrb	r3, [r3, #2]
 8006898:	f043 0310 	orr.w	r3, r3, #16
 800689c:	b2da      	uxtb	r2, r3
 800689e:	4b3b      	ldr	r3, [pc, #236]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80068a0:	709a      	strb	r2, [r3, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 80068a2:	2002      	movs	r0, #2
 80068a4:	f003 fd20 	bl	800a2e8 <system_set_exec_state_flag>
 80068a8:	e060      	b.n	800696c <protocol_exec_rt_suspend+0x26c>

      } else {

        // Feed hold manager. Controls spindle stop override states.
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
 80068aa:	4b38      	ldr	r3, [pc, #224]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80068ac:	7adb      	ldrb	r3, [r3, #11]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d047      	beq.n	8006942 <protocol_exec_rt_suspend+0x242>
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80068b2:	4b36      	ldr	r3, [pc, #216]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80068b4:	7adb      	ldrb	r3, [r3, #11]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d010      	beq.n	80068e0 <protocol_exec_rt_suspend+0x1e0>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 80068c0:	7a5b      	ldrb	r3, [r3, #9]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <protocol_exec_rt_suspend+0x1d8>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80068c6:	f04f 0100 	mov.w	r1, #0
 80068ca:	2000      	movs	r0, #0
 80068cc:	f001 fde0 	bl	8008490 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 80068d0:	4b2e      	ldr	r3, [pc, #184]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	72da      	strb	r2, [r3, #11]
 80068d6:	e049      	b.n	800696c <protocol_exec_rt_suspend+0x26c>
            } else {
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80068d8:	4b2c      	ldr	r3, [pc, #176]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80068da:	2200      	movs	r2, #0
 80068dc:	72da      	strb	r2, [r3, #11]
 80068de:	e045      	b.n	800696c <protocol_exec_rt_suspend+0x26c>
            }
          // Handles restoring of spindle state
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80068e0:	4b2a      	ldr	r3, [pc, #168]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 80068e2:	7adb      	ldrb	r3, [r3, #11]
 80068e4:	f003 030c 	and.w	r3, r3, #12
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d03f      	beq.n	800696c <protocol_exec_rt_suspend+0x26c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80068ec:	4b25      	ldr	r3, [pc, #148]	; (8006984 <protocol_exec_rt_suspend+0x284>)
 80068ee:	7a5b      	ldrb	r3, [r3, #9]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d019      	beq.n	8006928 <protocol_exec_rt_suspend+0x228>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80068f4:	200a      	movs	r0, #10
 80068f6:	f000 f909 	bl	8006b0c <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <protocol_exec_rt_suspend+0x288>)
 80068fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <protocol_exec_rt_suspend+0x218>
                // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006908:	4b20      	ldr	r3, [pc, #128]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800690a:	791b      	ldrb	r3, [r3, #4]
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	b2da      	uxtb	r2, r3
 8006912:	4b1e      	ldr	r3, [pc, #120]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006914:	711a      	strb	r2, [r3, #4]
 8006916:	e007      	b.n	8006928 <protocol_exec_rt_suspend+0x228>
              } else {
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800691e:	b2db      	uxtb	r3, r3
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f001 fdb4 	bl	8008490 <spindle_set_state>
              }
            }
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8006928:	4b18      	ldr	r3, [pc, #96]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800692a:	7adb      	ldrb	r3, [r3, #11]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <protocol_exec_rt_suspend+0x23a>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 8006934:	2002      	movs	r0, #2
 8006936:	f003 fcd7 	bl	800a2e8 <system_set_exec_state_flag>
            }
            sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800693c:	2200      	movs	r2, #0
 800693e:	72da      	strb	r2, [r3, #11]
 8006940:	e014      	b.n	800696c <protocol_exec_rt_suspend+0x26c>
          }
        } else {
          // Handles spindle state during hold. NOTE: Spindle speed overrides may be altered during hold state.
          // NOTE: STEP_CONTROL_UPDATE_SPINDLE_PWM is automatically reset upon resume in step generator.
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006944:	791b      	ldrb	r3, [r3, #4]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <protocol_exec_rt_suspend+0x26c>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006954:	b2db      	uxtb	r3, r3
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fd99 	bl	8008490 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800695e:	4b0b      	ldr	r3, [pc, #44]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	f023 0308 	bic.w	r3, r3, #8
 8006966:	b2da      	uxtb	r2, r3
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 800696a:	711a      	strb	r2, [r3, #4]
        }

      }
    }

    protocol_exec_rt_system();
 800696c:	f7ff fbf4 	bl	8006158 <protocol_exec_rt_system>
  while (sys.suspend) {
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <protocol_exec_rt_suspend+0x28c>)
 8006972:	789b      	ldrb	r3, [r3, #2]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f47f aee8 	bne.w	800674a <protocol_exec_rt_suspend+0x4a>
 800697a:	e000      	b.n	800697e <protocol_exec_rt_suspend+0x27e>
    if (sys.abort) { return; }
 800697c:	bf00      	nop

  }
}
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000e74 	.word	0x20000e74
 8006988:	20001048 	.word	0x20001048
 800698c:	20000efc 	.word	0x20000efc

08006990 <report_util_setting_prefix>:

#include "grbl.h"


// Internal report utilities to reduce flash with repetitive tasks turned into functions.
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
 800699a:	2024      	movs	r0, #36	; 0x24
 800699c:	f000 feb0 	bl	8007700 <serial_write>
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff f918 	bl	8005bd8 <print_uint8_base10>
 80069a8:	203d      	movs	r0, #61	; 0x3d
 80069aa:	f000 fea9 	bl	8007700 <serial_write>
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <report_util_line_feed>:
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	4802      	ldr	r0, [pc, #8]	; (80069c8 <report_util_line_feed+0x10>)
 80069be:	f7ff f8f7 	bl	8005bb0 <printString>
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	0800b788 	.word	0x0800b788

080069cc <report_util_feedback_line_feed>:
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	205d      	movs	r0, #93	; 0x5d
 80069d2:	f000 fe95 	bl	8007700 <serial_write>
 80069d6:	f7ff ffef 	bl	80069b8 <report_util_line_feed>
 80069da:	bf00      	nop
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <report_util_gcode_modes_G>:
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	4802      	ldr	r0, [pc, #8]	; (80069f0 <report_util_gcode_modes_G+0x10>)
 80069e6:	f7ff f8e3 	bl	8005bb0 <printString>
 80069ea:	bf00      	nop
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	0800b78c 	.word	0x0800b78c

080069f4 <report_util_gcode_modes_M>:
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	4802      	ldr	r0, [pc, #8]	; (8006a04 <report_util_gcode_modes_M+0x10>)
 80069fa:	f7ff f8d9 	bl	8005bb0 <printString>
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	0800b790 	.word	0x0800b790

08006a08 <report_util_axis_values>:
// static void report_util_comment_line_feed() { serial_write(')'); report_util_line_feed(); }
static void report_util_axis_values(float *axis_value) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	e010      	b.n	8006a38 <report_util_axis_values+0x30>
    printFloat_CoordValue(axis_value[idx]);
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff f9c1 	bl	8005da8 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d802      	bhi.n	8006a32 <report_util_axis_values+0x2a>
 8006a2c:	202c      	movs	r0, #44	; 0x2c
 8006a2e:	f000 fe67 	bl	8007700 <serial_write>
  for (idx=0; idx<N_AXIS; idx++) {
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	3301      	adds	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d9eb      	bls.n	8006a16 <report_util_axis_values+0xe>
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <report_util_uint8_setting>:
  }
  report_util_comment_line_feed();
}
*/

static void report_util_uint8_setting(uint8_t n, int val) {
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	6039      	str	r1, [r7, #0]
 8006a50:	71fb      	strb	r3, [r7, #7]
  report_util_setting_prefix(n);
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff ff9b 	bl	8006990 <report_util_setting_prefix>
  print_uint8_base10(val);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff f8ba 	bl	8005bd8 <print_uint8_base10>
  report_util_line_feed(); // report_util_setting_string(n); 
 8006a64:	f7ff ffa8 	bl	80069b8 <report_util_line_feed>
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <report_util_float_setting>:
static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	71fb      	strb	r3, [r7, #7]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71bb      	strb	r3, [r7, #6]
  report_util_setting_prefix(n);
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff ff84 	bl	8006990 <report_util_setting_prefix>
  printFloat(val, n_decimal);
 8006a88:	79bb      	ldrb	r3, [r7, #6]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f7ff f8f3 	bl	8005c78 <printFloat>
  report_util_line_feed(); // report_util_setting_string(n);
 8006a92:	f7ff ff91 	bl	80069b8 <report_util_line_feed>
}
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	71fb      	strb	r3, [r7, #7]
  switch(status_code) {
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <report_status_message+0x18>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
 8006ab0:	4808      	ldr	r0, [pc, #32]	; (8006ad4 <report_status_message+0x34>)
 8006ab2:	f7ff f87d 	bl	8005bb0 <printString>
 8006ab6:	e008      	b.n	8006aca <report_status_message+0x2a>
    default:
      printPgmString(PSTR("error:"));
 8006ab8:	4807      	ldr	r0, [pc, #28]	; (8006ad8 <report_status_message+0x38>)
 8006aba:	f7ff f879 	bl	8005bb0 <printString>
      print_uint8_base10(status_code);
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff f889 	bl	8005bd8 <print_uint8_base10>
      report_util_line_feed();
 8006ac6:	f7ff ff77 	bl	80069b8 <report_util_line_feed>
  }
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	0800b794 	.word	0x0800b794
 8006ad8:	0800b79c 	.word	0x0800b79c

08006adc <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	71fb      	strb	r3, [r7, #7]
  printPgmString(PSTR("ALARM:"));
 8006ae6:	4808      	ldr	r0, [pc, #32]	; (8006b08 <report_alarm_message+0x2c>)
 8006ae8:	f7ff f862 	bl	8005bb0 <printString>
  print_uint8_base10(alarm_code);
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff f872 	bl	8005bd8 <print_uint8_base10>
  report_util_line_feed();
 8006af4:	f7ff ff60 	bl	80069b8 <report_util_line_feed>
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8006af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006afc:	f7fe fa64 	bl	8004fc8 <delay_ms>
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	0800b7a4 	.word	0x0800b7a4

08006b0c <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]
  printPgmString(PSTR("[MSG:"));
 8006b16:	4829      	ldr	r0, [pc, #164]	; (8006bbc <report_feedback_message+0xb0>)
 8006b18:	f7ff f84a 	bl	8005bb0 <printString>
  switch(message_code) {
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	2b0a      	cmp	r3, #10
 8006b22:	d845      	bhi.n	8006bb0 <report_feedback_message+0xa4>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <report_feedback_message+0x20>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b61 	.word	0x08006b61
 8006b34:	08006b69 	.word	0x08006b69
 8006b38:	08006b71 	.word	0x08006b71
 8006b3c:	08006b79 	.word	0x08006b79
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006b89 	.word	0x08006b89
 8006b48:	08006b91 	.word	0x08006b91
 8006b4c:	08006b99 	.word	0x08006b99
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	08006ba9 	.word	0x08006ba9
    case MESSAGE_CRITICAL_EVENT:
      printPgmString(PSTR("Reset to continue")); break;
 8006b58:	4819      	ldr	r0, [pc, #100]	; (8006bc0 <report_feedback_message+0xb4>)
 8006b5a:	f7ff f829 	bl	8005bb0 <printString>
 8006b5e:	e027      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_ALARM_LOCK:
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8006b60:	4818      	ldr	r0, [pc, #96]	; (8006bc4 <report_feedback_message+0xb8>)
 8006b62:	f7ff f825 	bl	8005bb0 <printString>
 8006b66:	e023      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_ALARM_UNLOCK:
      printPgmString(PSTR("Caution: Unlocked")); break;
 8006b68:	4817      	ldr	r0, [pc, #92]	; (8006bc8 <report_feedback_message+0xbc>)
 8006b6a:	f7ff f821 	bl	8005bb0 <printString>
 8006b6e:	e01f      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_ENABLED:
      printPgmString(PSTR("Enabled")); break;
 8006b70:	4816      	ldr	r0, [pc, #88]	; (8006bcc <report_feedback_message+0xc0>)
 8006b72:	f7ff f81d 	bl	8005bb0 <printString>
 8006b76:	e01b      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_DISABLED:
      printPgmString(PSTR("Disabled")); break;
 8006b78:	4815      	ldr	r0, [pc, #84]	; (8006bd0 <report_feedback_message+0xc4>)
 8006b7a:	f7ff f819 	bl	8005bb0 <printString>
 8006b7e:	e017      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_SAFETY_DOOR_AJAR:
      printPgmString(PSTR("Check Door")); break;
 8006b80:	4814      	ldr	r0, [pc, #80]	; (8006bd4 <report_feedback_message+0xc8>)
 8006b82:	f7ff f815 	bl	8005bb0 <printString>
 8006b86:	e013      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_CHECK_LIMITS:
      printPgmString(PSTR("Check Limits")); break;
 8006b88:	4813      	ldr	r0, [pc, #76]	; (8006bd8 <report_feedback_message+0xcc>)
 8006b8a:	f7ff f811 	bl	8005bb0 <printString>
 8006b8e:	e00f      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_PROGRAM_END:
      printPgmString(PSTR("Pgm End")); break;
 8006b90:	4812      	ldr	r0, [pc, #72]	; (8006bdc <report_feedback_message+0xd0>)
 8006b92:	f7ff f80d 	bl	8005bb0 <printString>
 8006b96:	e00b      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
 8006b98:	4811      	ldr	r0, [pc, #68]	; (8006be0 <report_feedback_message+0xd4>)
 8006b9a:	f7ff f809 	bl	8005bb0 <printString>
 8006b9e:	e007      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
 8006ba0:	4810      	ldr	r0, [pc, #64]	; (8006be4 <report_feedback_message+0xd8>)
 8006ba2:	f7ff f805 	bl	8005bb0 <printString>
 8006ba6:	e003      	b.n	8006bb0 <report_feedback_message+0xa4>
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8006ba8:	480f      	ldr	r0, [pc, #60]	; (8006be8 <report_feedback_message+0xdc>)
 8006baa:	f7ff f801 	bl	8005bb0 <printString>
 8006bae:	bf00      	nop
  }
  report_util_feedback_line_feed();
 8006bb0:	f7ff ff0c 	bl	80069cc <report_util_feedback_line_feed>
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	0800b7ac 	.word	0x0800b7ac
 8006bc0:	0800b7b4 	.word	0x0800b7b4
 8006bc4:	0800b7c8 	.word	0x0800b7c8
 8006bc8:	0800b7dc 	.word	0x0800b7dc
 8006bcc:	0800b7f0 	.word	0x0800b7f0
 8006bd0:	0800b7f8 	.word	0x0800b7f8
 8006bd4:	0800b804 	.word	0x0800b804
 8006bd8:	0800b810 	.word	0x0800b810
 8006bdc:	0800b820 	.word	0x0800b820
 8006be0:	0800b828 	.word	0x0800b828
 8006be4:	0800b83c 	.word	0x0800b83c
 8006be8:	0800b850 	.word	0x0800b850

08006bec <report_init_message>:


// Welcome message
void report_init_message()
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  printPgmString(PSTR("\r\nGrbl "  GRBL_VERSION " ['$' for help]\r\n"));
 8006bf0:	4802      	ldr	r0, [pc, #8]	; (8006bfc <report_init_message+0x10>)
 8006bf2:	f7fe ffdd 	bl	8005bb0 <printString>
}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	0800b85c 	.word	0x0800b85c

08006c00 <report_grbl_help>:

// Grbl help message
void report_grbl_help() {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8006c04:	4802      	ldr	r0, [pc, #8]	; (8006c10 <report_grbl_help+0x10>)
 8006c06:	f7fe ffd3 	bl	8005bb0 <printString>
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	0800b87c 	.word	0x0800b87c

08006c14 <report_grbl_settings>:


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006c1a:	4b9b      	ldr	r3, [pc, #620]	; (8006e88 <report_grbl_settings+0x274>)
 8006c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c20:	4619      	mov	r1, r3
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7ff ff0f 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8006c28:	4b97      	ldr	r3, [pc, #604]	; (8006e88 <report_grbl_settings+0x274>)
 8006c2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c2e:	4619      	mov	r1, r3
 8006c30:	2001      	movs	r0, #1
 8006c32:	f7ff ff08 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(2,settings.step_invert_mask);
 8006c36:	4b94      	ldr	r3, [pc, #592]	; (8006e88 <report_grbl_settings+0x274>)
 8006c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	2002      	movs	r0, #2
 8006c3e:	f7ff ff02 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8006c42:	4b91      	ldr	r3, [pc, #580]	; (8006e88 <report_grbl_settings+0x274>)
 8006c44:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006c46:	4619      	mov	r1, r3
 8006c48:	2003      	movs	r0, #3
 8006c4a:	f7ff fefc 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006c4e:	4b8e      	ldr	r3, [pc, #568]	; (8006e88 <report_grbl_settings+0x274>)
 8006c50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bf14      	ite	ne
 8006c5c:	2301      	movne	r3, #1
 8006c5e:	2300      	moveq	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	2004      	movs	r0, #4
 8006c66:	f7ff feee 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006c6a:	4b87      	ldr	r3, [pc, #540]	; (8006e88 <report_grbl_settings+0x274>)
 8006c6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	2005      	movs	r0, #5
 8006c82:	f7ff fee0 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006c86:	4b80      	ldr	r3, [pc, #512]	; (8006e88 <report_grbl_settings+0x274>)
 8006c88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006c8c:	b25b      	sxtb	r3, r3
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	09db      	lsrs	r3, r3, #7
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	4619      	mov	r1, r3
 8006c96:	2006      	movs	r0, #6
 8006c98:	f7ff fed5 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(10,settings.status_report_mask);
 8006c9c:	4b7a      	ldr	r3, [pc, #488]	; (8006e88 <report_grbl_settings+0x274>)
 8006c9e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	200a      	movs	r0, #10
 8006ca6:	f7ff fece 	bl	8006a46 <report_util_uint8_setting>
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8006caa:	4b77      	ldr	r3, [pc, #476]	; (8006e88 <report_grbl_settings+0x274>)
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	2203      	movs	r2, #3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	200b      	movs	r0, #11
 8006cb4:	f7ff fedc 	bl	8006a70 <report_util_float_setting>
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8006cb8:	4b73      	ldr	r3, [pc, #460]	; (8006e88 <report_grbl_settings+0x274>)
 8006cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	200c      	movs	r0, #12
 8006cc2:	f7ff fed5 	bl	8006a70 <report_util_float_setting>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8006cc6:	4b70      	ldr	r3, [pc, #448]	; (8006e88 <report_grbl_settings+0x274>)
 8006cc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bf14      	ite	ne
 8006cd4:	2301      	movne	r3, #1
 8006cd6:	2300      	moveq	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	4619      	mov	r1, r3
 8006cdc:	200d      	movs	r0, #13
 8006cde:	f7ff feb2 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006ce2:	4b69      	ldr	r3, [pc, #420]	; (8006e88 <report_grbl_settings+0x274>)
 8006ce4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	2014      	movs	r0, #20
 8006cfa:	f7ff fea4 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006cfe:	4b62      	ldr	r3, [pc, #392]	; (8006e88 <report_grbl_settings+0x274>)
 8006d00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	2015      	movs	r0, #21
 8006d16:	f7ff fe96 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006d1a:	4b5b      	ldr	r3, [pc, #364]	; (8006e88 <report_grbl_settings+0x274>)
 8006d1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	4619      	mov	r1, r3
 8006d30:	2016      	movs	r0, #22
 8006d32:	f7ff fe88 	bl	8006a46 <report_util_uint8_setting>
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8006d36:	4b54      	ldr	r3, [pc, #336]	; (8006e88 <report_grbl_settings+0x274>)
 8006d38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	2017      	movs	r0, #23
 8006d40:	f7ff fe81 	bl	8006a46 <report_util_uint8_setting>
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <report_grbl_settings+0x274>)
 8006d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d48:	2203      	movs	r2, #3
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	2018      	movs	r0, #24
 8006d4e:	f7ff fe8f 	bl	8006a70 <report_util_float_setting>
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8006d52:	4b4d      	ldr	r3, [pc, #308]	; (8006e88 <report_grbl_settings+0x274>)
 8006d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d56:	2203      	movs	r2, #3
 8006d58:	4619      	mov	r1, r3
 8006d5a:	2019      	movs	r0, #25
 8006d5c:	f7ff fe88 	bl	8006a70 <report_util_float_setting>
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8006d60:	4b49      	ldr	r3, [pc, #292]	; (8006e88 <report_grbl_settings+0x274>)
 8006d62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006d66:	4619      	mov	r1, r3
 8006d68:	201a      	movs	r0, #26
 8006d6a:	f7ff fe6c 	bl	8006a46 <report_util_uint8_setting>
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006d6e:	4b46      	ldr	r3, [pc, #280]	; (8006e88 <report_grbl_settings+0x274>)
 8006d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d72:	2203      	movs	r2, #3
 8006d74:	4619      	mov	r1, r3
 8006d76:	201b      	movs	r0, #27
 8006d78:	f7ff fe7a 	bl	8006a70 <report_util_float_setting>
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006d7c:	4b42      	ldr	r3, [pc, #264]	; (8006e88 <report_grbl_settings+0x274>)
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	2200      	movs	r2, #0
 8006d82:	4619      	mov	r1, r3
 8006d84:	201e      	movs	r0, #30
 8006d86:	f7ff fe73 	bl	8006a70 <report_util_float_setting>
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006d8a:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <report_grbl_settings+0x274>)
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4619      	mov	r1, r3
 8006d92:	201f      	movs	r0, #31
 8006d94:	f7ff fe6c 	bl	8006a70 <report_util_float_setting>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006d98:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <report_grbl_settings+0x274>)
 8006d9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4619      	mov	r1, r3
 8006dae:	2020      	movs	r0, #32
 8006db0:	f7ff fe49 	bl	8006a46 <report_util_uint8_setting>
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8006db4:	2364      	movs	r3, #100	; 0x64
 8006db6:	717b      	strb	r3, [r7, #5]
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006db8:	2300      	movs	r3, #0
 8006dba:	71bb      	strb	r3, [r7, #6]
 8006dbc:	e05d      	b.n	8006e7a <report_grbl_settings+0x266>
    for (idx=0; idx<N_AXIS; idx++) {
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	71fb      	strb	r3, [r7, #7]
 8006dc2:	e051      	b.n	8006e68 <report_grbl_settings+0x254>
      switch (set_idx) {
 8006dc4:	79bb      	ldrb	r3, [r7, #6]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d84b      	bhi.n	8006e62 <report_grbl_settings+0x24e>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <report_grbl_settings+0x1bc>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006dfb 	.word	0x08006dfb
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e41 	.word	0x08006e41
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006de0:	797a      	ldrb	r2, [r7, #5]
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	4413      	add	r3, r2
 8006de6:	b2d8      	uxtb	r0, r3
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	4a27      	ldr	r2, [pc, #156]	; (8006e88 <report_grbl_settings+0x274>)
 8006dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df0:	2203      	movs	r2, #3
 8006df2:	4619      	mov	r1, r3
 8006df4:	f7ff fe3c 	bl	8006a70 <report_util_float_setting>
 8006df8:	e033      	b.n	8006e62 <report_grbl_settings+0x24e>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006dfa:	797a      	ldrb	r2, [r7, #5]
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	4413      	add	r3, r2
 8006e00:	b2d8      	uxtb	r0, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	4a20      	ldr	r2, [pc, #128]	; (8006e88 <report_grbl_settings+0x274>)
 8006e06:	3302      	adds	r3, #2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2203      	movs	r2, #3
 8006e10:	4619      	mov	r1, r3
 8006e12:	f7ff fe2d 	bl	8006a70 <report_util_float_setting>
 8006e16:	e024      	b.n	8006e62 <report_grbl_settings+0x24e>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006e18:	797a      	ldrb	r2, [r7, #5]
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	b2dc      	uxtb	r4, r3
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <report_grbl_settings+0x274>)
 8006e24:	3306      	adds	r3, #6
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	4918      	ldr	r1, [pc, #96]	; (8006e8c <report_grbl_settings+0x278>)
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7f9 fff3 	bl	8000e18 <__aeabi_fdiv>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2203      	movs	r2, #3
 8006e36:	4619      	mov	r1, r3
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff fe19 	bl	8006a70 <report_util_float_setting>
 8006e3e:	e010      	b.n	8006e62 <report_grbl_settings+0x24e>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006e40:	797a      	ldrb	r2, [r7, #5]
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	4413      	add	r3, r2
 8006e46:	b2d8      	uxtb	r0, r3
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	4a0f      	ldr	r2, [pc, #60]	; (8006e88 <report_grbl_settings+0x274>)
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e58:	2203      	movs	r2, #3
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f7ff fe08 	bl	8006a70 <report_util_float_setting>
 8006e60:	bf00      	nop
    for (idx=0; idx<N_AXIS; idx++) {
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	3301      	adds	r3, #1
 8006e66:	71fb      	strb	r3, [r7, #7]
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d9aa      	bls.n	8006dc4 <report_grbl_settings+0x1b0>
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8006e6e:	797b      	ldrb	r3, [r7, #5]
 8006e70:	330a      	adds	r3, #10
 8006e72:	717b      	strb	r3, [r7, #5]
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006e74:	79bb      	ldrb	r3, [r7, #6]
 8006e76:	3301      	adds	r3, #1
 8006e78:	71bb      	strb	r3, [r7, #6]
 8006e7a:	79bb      	ldrb	r3, [r7, #6]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d99e      	bls.n	8006dbe <report_grbl_settings+0x1aa>
  }
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}
 8006e88:	20001048 	.word	0x20001048
 8006e8c:	45610000 	.word	0x45610000

08006e90 <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006e96:	480d      	ldr	r0, [pc, #52]	; (8006ecc <report_probe_parameters+0x3c>)
 8006e98:	f7fe fe8a 	bl	8005bb0 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006e9c:	1d3b      	adds	r3, r7, #4
 8006e9e:	490c      	ldr	r1, [pc, #48]	; (8006ed0 <report_probe_parameters+0x40>)
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f003 f9cf 	bl	800a244 <system_convert_array_steps_to_mpos>
  report_util_axis_values(print_position);
 8006ea6:	1d3b      	adds	r3, r7, #4
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fdad 	bl	8006a08 <report_util_axis_values>
  serial_write(':');
 8006eae:	203a      	movs	r0, #58	; 0x3a
 8006eb0:	f000 fc26 	bl	8007700 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <report_probe_parameters+0x44>)
 8006eb6:	795b      	ldrb	r3, [r3, #5]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fe8d 	bl	8005bd8 <print_uint8_base10>
  report_util_feedback_line_feed();
 8006ebe:	f7ff fd85 	bl	80069cc <report_util_feedback_line_feed>
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	0800b8c8 	.word	0x0800b8c8
 8006ed0:	20000f14 	.word	0x20000f14
 8006ed4:	20000efc 	.word	0x20000efc

08006ed8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
  float coord_data[N_AXIS];
  uint8_t coord_select;
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	e030      	b.n	8006f46 <report_ngc_parameters+0x6e>
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006ee4:	463a      	mov	r2, r7
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 ff24 	bl	8007d38 <settings_read_coord_data>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <report_ngc_parameters+0x26>
      report_status_message(STATUS_SETTING_READ_FAIL);
 8006ef6:	2007      	movs	r0, #7
 8006ef8:	f7ff fdd2 	bl	8006aa0 <report_status_message>
 8006efc:	e03a      	b.n	8006f74 <report_ngc_parameters+0x9c>
      return;
    }
    printPgmString(PSTR("[G"));
 8006efe:	481f      	ldr	r0, [pc, #124]	; (8006f7c <report_ngc_parameters+0xa4>)
 8006f00:	f7fe fe56 	bl	8005bb0 <printString>
    switch (coord_select) {
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b06      	cmp	r3, #6
 8006f08:	d002      	beq.n	8006f10 <report_ngc_parameters+0x38>
 8006f0a:	2b07      	cmp	r3, #7
 8006f0c:	d004      	beq.n	8006f18 <report_ngc_parameters+0x40>
 8006f0e:	e007      	b.n	8006f20 <report_ngc_parameters+0x48>
      case 6: printPgmString(PSTR("28")); break;
 8006f10:	481b      	ldr	r0, [pc, #108]	; (8006f80 <report_ngc_parameters+0xa8>)
 8006f12:	f7fe fe4d 	bl	8005bb0 <printString>
 8006f16:	e00a      	b.n	8006f2e <report_ngc_parameters+0x56>
      case 7: printPgmString(PSTR("30")); break;
 8006f18:	481a      	ldr	r0, [pc, #104]	; (8006f84 <report_ngc_parameters+0xac>)
 8006f1a:	f7fe fe49 	bl	8005bb0 <printString>
 8006f1e:	e006      	b.n	8006f2e <report_ngc_parameters+0x56>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	3336      	adds	r3, #54	; 0x36
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fe56 	bl	8005bd8 <print_uint8_base10>
 8006f2c:	bf00      	nop
    }
    serial_write(':');
 8006f2e:	203a      	movs	r0, #58	; 0x3a
 8006f30:	f000 fbe6 	bl	8007700 <serial_write>
    report_util_axis_values(coord_data);
 8006f34:	463b      	mov	r3, r7
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fd66 	bl	8006a08 <report_util_axis_values>
    report_util_feedback_line_feed();
 8006f3c:	f7ff fd46 	bl	80069cc <report_util_feedback_line_feed>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3301      	adds	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	2b07      	cmp	r3, #7
 8006f4a:	d9cb      	bls.n	8006ee4 <report_ngc_parameters+0xc>
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006f4c:	480e      	ldr	r0, [pc, #56]	; (8006f88 <report_ngc_parameters+0xb0>)
 8006f4e:	f7fe fe2f 	bl	8005bb0 <printString>
  report_util_axis_values(gc_state.coord_offset);
 8006f52:	480e      	ldr	r0, [pc, #56]	; (8006f8c <report_ngc_parameters+0xb4>)
 8006f54:	f7ff fd58 	bl	8006a08 <report_util_axis_values>
  report_util_feedback_line_feed();
 8006f58:	f7ff fd38 	bl	80069cc <report_util_feedback_line_feed>
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006f5c:	480c      	ldr	r0, [pc, #48]	; (8006f90 <report_ngc_parameters+0xb8>)
 8006f5e:	f7fe fe27 	bl	8005bb0 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <report_ngc_parameters+0xbc>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe ff1e 	bl	8005da8 <printFloat_CoordValue>
  report_util_feedback_line_feed();
 8006f6c:	f7ff fd2e 	bl	80069cc <report_util_feedback_line_feed>
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
 8006f70:	f7ff ff8e 	bl	8006e90 <report_probe_parameters>
}
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	0800b8d0 	.word	0x0800b8d0
 8006f80:	0800b8d4 	.word	0x0800b8d4
 8006f84:	0800b8d8 	.word	0x0800b8d8
 8006f88:	0800b8dc 	.word	0x0800b8dc
 8006f8c:	20000ea8 	.word	0x20000ea8
 8006f90:	0800b8e4 	.word	0x0800b8e4
 8006f94:	20000e74 	.word	0x20000e74

08006f98 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  printPgmString(PSTR("[GC:G"));
 8006f9c:	4859      	ldr	r0, [pc, #356]	; (8007104 <report_gcode_modes+0x16c>)
 8006f9e:	f7fe fe07 	bl	8005bb0 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006fa2:	4b59      	ldr	r3, [pc, #356]	; (8007108 <report_gcode_modes+0x170>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b8b      	cmp	r3, #139	; 0x8b
 8006fa8:	d90a      	bls.n	8006fc0 <report_gcode_modes+0x28>
    printPgmString(PSTR("38."));
 8006faa:	4858      	ldr	r0, [pc, #352]	; (800710c <report_gcode_modes+0x174>)
 8006fac:	f7fe fe00 	bl	8005bb0 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006fb0:	4b55      	ldr	r3, [pc, #340]	; (8007108 <report_gcode_modes+0x170>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	3376      	adds	r3, #118	; 0x76
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe fe0d 	bl	8005bd8 <print_uint8_base10>
 8006fbe:	e004      	b.n	8006fca <report_gcode_modes+0x32>
  } else {
    print_uint8_base10(gc_state.modal.motion);
 8006fc0:	4b51      	ldr	r3, [pc, #324]	; (8007108 <report_gcode_modes+0x170>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fe07 	bl	8005bd8 <print_uint8_base10>
  }

  report_util_gcode_modes_G();
 8006fca:	f7ff fd09 	bl	80069e0 <report_util_gcode_modes_G>
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006fce:	4b4e      	ldr	r3, [pc, #312]	; (8007108 <report_gcode_modes+0x170>)
 8006fd0:	799b      	ldrb	r3, [r3, #6]
 8006fd2:	3336      	adds	r3, #54	; 0x36
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fdfe 	bl	8005bd8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8006fdc:	f7ff fd00 	bl	80069e0 <report_util_gcode_modes_G>
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006fe0:	4b49      	ldr	r3, [pc, #292]	; (8007108 <report_gcode_modes+0x170>)
 8006fe2:	791b      	ldrb	r3, [r3, #4]
 8006fe4:	3311      	adds	r3, #17
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fdf5 	bl	8005bd8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8006fee:	f7ff fcf7 	bl	80069e0 <report_util_gcode_modes_G>
  print_uint8_base10(21-gc_state.modal.units);
 8006ff2:	4b45      	ldr	r3, [pc, #276]	; (8007108 <report_gcode_modes+0x170>)
 8006ff4:	789b      	ldrb	r3, [r3, #2]
 8006ff6:	f1c3 0315 	rsb	r3, r3, #21
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fdeb 	bl	8005bd8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8007002:	f7ff fced 	bl	80069e0 <report_util_gcode_modes_G>
  print_uint8_base10(gc_state.modal.distance+90);
 8007006:	4b40      	ldr	r3, [pc, #256]	; (8007108 <report_gcode_modes+0x170>)
 8007008:	78db      	ldrb	r3, [r3, #3]
 800700a:	335a      	adds	r3, #90	; 0x5a
 800700c:	b2db      	uxtb	r3, r3
 800700e:	4618      	mov	r0, r3
 8007010:	f7fe fde2 	bl	8005bd8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8007014:	f7ff fce4 	bl	80069e0 <report_util_gcode_modes_G>
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8007018:	4b3b      	ldr	r3, [pc, #236]	; (8007108 <report_gcode_modes+0x170>)
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8007020:	b2db      	uxtb	r3, r3
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fdd8 	bl	8005bd8 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8007028:	4b37      	ldr	r3, [pc, #220]	; (8007108 <report_gcode_modes+0x170>)
 800702a:	79db      	ldrb	r3, [r3, #7]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d014      	beq.n	800705a <report_gcode_modes+0xc2>
    report_util_gcode_modes_M();
 8007030:	f7ff fce0 	bl	80069f4 <report_util_gcode_modes_M>
    switch (gc_state.modal.program_flow) {
 8007034:	4b34      	ldr	r3, [pc, #208]	; (8007108 <report_gcode_modes+0x170>)
 8007036:	79db      	ldrb	r3, [r3, #7]
 8007038:	2b03      	cmp	r3, #3
 800703a:	d004      	beq.n	8007046 <report_gcode_modes+0xae>
 800703c:	2b1e      	cmp	r3, #30
 800703e:	d006      	beq.n	800704e <report_gcode_modes+0xb6>
 8007040:	2b02      	cmp	r3, #2
 8007042:	d004      	beq.n	800704e <report_gcode_modes+0xb6>
 8007044:	e009      	b.n	800705a <report_gcode_modes+0xc2>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8007046:	2030      	movs	r0, #48	; 0x30
 8007048:	f000 fb5a 	bl	8007700 <serial_write>
 800704c:	e005      	b.n	800705a <report_gcode_modes+0xc2>
      // case PROGRAM_FLOW_OPTIONAL_STOP : serial_write('1'); break; // M1 is ignored and not supported.
      case PROGRAM_FLOW_COMPLETED_M2 : 
      case PROGRAM_FLOW_COMPLETED_M30 : 
        print_uint8_base10(gc_state.modal.program_flow);
 800704e:	4b2e      	ldr	r3, [pc, #184]	; (8007108 <report_gcode_modes+0x170>)
 8007050:	79db      	ldrb	r3, [r3, #7]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fdc0 	bl	8005bd8 <print_uint8_base10>
        break;
 8007058:	bf00      	nop
    }
  }

  report_util_gcode_modes_M();
 800705a:	f7ff fccb 	bl	80069f4 <report_util_gcode_modes_M>
  switch (gc_state.modal.spindle) {
 800705e:	4b2a      	ldr	r3, [pc, #168]	; (8007108 <report_gcode_modes+0x170>)
 8007060:	7a5b      	ldrb	r3, [r3, #9]
 8007062:	2b10      	cmp	r3, #16
 8007064:	d004      	beq.n	8007070 <report_gcode_modes+0xd8>
 8007066:	2b20      	cmp	r3, #32
 8007068:	d006      	beq.n	8007078 <report_gcode_modes+0xe0>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d008      	beq.n	8007080 <report_gcode_modes+0xe8>
 800706e:	e00b      	b.n	8007088 <report_gcode_modes+0xf0>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8007070:	2033      	movs	r0, #51	; 0x33
 8007072:	f000 fb45 	bl	8007700 <serial_write>
 8007076:	e007      	b.n	8007088 <report_gcode_modes+0xf0>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8007078:	2034      	movs	r0, #52	; 0x34
 800707a:	f000 fb41 	bl	8007700 <serial_write>
 800707e:	e003      	b.n	8007088 <report_gcode_modes+0xf0>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8007080:	2035      	movs	r0, #53	; 0x35
 8007082:	f000 fb3d 	bl	8007700 <serial_write>
 8007086:	bf00      	nop
  }

  report_util_gcode_modes_M();
 8007088:	f7ff fcb4 	bl	80069f4 <report_util_gcode_modes_M>
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 800708c:	4b1e      	ldr	r3, [pc, #120]	; (8007108 <report_gcode_modes+0x170>)
 800708e:	7a1b      	ldrb	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d015      	beq.n	80070c0 <report_gcode_modes+0x128>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8007094:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <report_gcode_modes+0x170>)
 8007096:	7a1b      	ldrb	r3, [r3, #8]
 8007098:	b25b      	sxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	da04      	bge.n	80070a8 <report_gcode_modes+0x110>
 800709e:	f7ff fca9 	bl	80069f4 <report_util_gcode_modes_M>
 80070a2:	2037      	movs	r0, #55	; 0x37
 80070a4:	f000 fb2c 	bl	8007700 <serial_write>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 80070a8:	4b17      	ldr	r3, [pc, #92]	; (8007108 <report_gcode_modes+0x170>)
 80070aa:	7a1b      	ldrb	r3, [r3, #8]
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <report_gcode_modes+0x132>
 80070b4:	f7ff fc9e 	bl	80069f4 <report_util_gcode_modes_M>
 80070b8:	2038      	movs	r0, #56	; 0x38
 80070ba:	f000 fb21 	bl	8007700 <serial_write>
 80070be:	e004      	b.n	80070ca <report_gcode_modes+0x132>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 80070c0:	f7ff fc98 	bl	80069f4 <report_util_gcode_modes_M>
 80070c4:	2039      	movs	r0, #57	; 0x39
 80070c6:	f000 fb1b 	bl	8007700 <serial_write>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 80070ca:	4811      	ldr	r0, [pc, #68]	; (8007110 <report_gcode_modes+0x178>)
 80070cc:	f7fe fd70 	bl	8005bb0 <printString>
  print_uint8_base10(gc_state.tool);
 80070d0:	4b0d      	ldr	r3, [pc, #52]	; (8007108 <report_gcode_modes+0x170>)
 80070d2:	7d1b      	ldrb	r3, [r3, #20]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe fd7f 	bl	8005bd8 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 80070da:	480e      	ldr	r0, [pc, #56]	; (8007114 <report_gcode_modes+0x17c>)
 80070dc:	f7fe fd68 	bl	8005bb0 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 80070e0:	4b09      	ldr	r3, [pc, #36]	; (8007108 <report_gcode_modes+0x170>)
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fe81 	bl	8005dec <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 80070ea:	480b      	ldr	r0, [pc, #44]	; (8007118 <report_gcode_modes+0x180>)
 80070ec:	f7fe fd60 	bl	8005bb0 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 80070f0:	4b05      	ldr	r3, [pc, #20]	; (8007108 <report_gcode_modes+0x170>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fdbe 	bl	8005c78 <printFloat>
  #endif

  report_util_feedback_line_feed();
 80070fc:	f7ff fc66 	bl	80069cc <report_util_feedback_line_feed>
}
 8007100:	bf00      	nop
 8007102:	bd80      	pop	{r7, pc}
 8007104:	0800b8ec 	.word	0x0800b8ec
 8007108:	20000e74 	.word	0x20000e74
 800710c:	0800b8f4 	.word	0x0800b8f4
 8007110:	0800b8f8 	.word	0x0800b8f8
 8007114:	0800b8fc 	.word	0x0800b8fc
 8007118:	0800b900 	.word	0x0800b900

0800711c <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  printPgmString(PSTR("$N"));
 8007128:	4809      	ldr	r0, [pc, #36]	; (8007150 <report_startup_line+0x34>)
 800712a:	f7fe fd41 	bl	8005bb0 <printString>
  print_uint8_base10(n);
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fd51 	bl	8005bd8 <print_uint8_base10>
  serial_write('=');
 8007136:	203d      	movs	r0, #61	; 0x3d
 8007138:	f000 fae2 	bl	8007700 <serial_write>
  printString(line);
 800713c:	6838      	ldr	r0, [r7, #0]
 800713e:	f7fe fd37 	bl	8005bb0 <printString>
  report_util_line_feed();
 8007142:	f7ff fc39 	bl	80069b8 <report_util_line_feed>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	0800b904 	.word	0x0800b904

08007154 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  serial_write('>');
 8007160:	203e      	movs	r0, #62	; 0x3e
 8007162:	f000 facd 	bl	8007700 <serial_write>
  printString(line);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fe fd22 	bl	8005bb0 <printString>
  serial_write(':');
 800716c:	203a      	movs	r0, #58	; 0x3a
 800716e:	f000 fac7 	bl	8007700 <serial_write>
  report_status_message(status_code);
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fc93 	bl	8006aa0 <report_status_message>
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 800718c:	4811      	ldr	r0, [pc, #68]	; (80071d4 <report_build_info+0x50>)
 800718e:	f7fe fd0f 	bl	8005bb0 <printString>
  printString(line);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fe fd0c 	bl	8005bb0 <printString>
  report_util_feedback_line_feed();
 8007198:	f7ff fc18 	bl	80069cc <report_util_feedback_line_feed>
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 800719c:	480e      	ldr	r0, [pc, #56]	; (80071d8 <report_build_info+0x54>)
 800719e:	f7fe fd07 	bl	8005bb0 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 80071a2:	2056      	movs	r0, #86	; 0x56
 80071a4:	f000 faac 	bl	8007700 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 80071a8:	204d      	movs	r0, #77	; 0x4d
 80071aa:	f000 faa9 	bl	8007700 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 80071ae:	202c      	movs	r0, #44	; 0x2c
 80071b0:	f000 faa6 	bl	8007700 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 80071b4:	2023      	movs	r0, #35	; 0x23
 80071b6:	f7fe fd0f 	bl	8005bd8 <print_uint8_base10>
	serial_write(',');
 80071ba:	202c      	movs	r0, #44	; 0x2c
 80071bc:	f000 faa0 	bl	8007700 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 80071c0:	20fe      	movs	r0, #254	; 0xfe
 80071c2:	f7fe fd09 	bl	8005bd8 <print_uint8_base10>

	report_util_feedback_line_feed();
 80071c6:	f7ff fc01 	bl	80069cc <report_util_feedback_line_feed>
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	0800b908 	.word	0x0800b908
 80071d8:	0800b91c 	.word	0x0800b91c

080071dc <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b08d      	sub	sp, #52	; 0x34
 80071e0:	af00      	add	r7, sp, #0
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 80071e2:	4a82      	ldr	r2, [pc, #520]	; (80073ec <report_realtime_status+0x210>)
 80071e4:	f107 031c 	add.w	r3, r7, #28
 80071e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80071ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);
 80071ee:	f107 021c 	add.w	r2, r7, #28
 80071f2:	f107 0310 	add.w	r3, r7, #16
 80071f6:	4611      	mov	r1, r2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f003 f823 	bl	800a244 <system_convert_array_steps_to_mpos>

  // Report current machine state and sub-states
  serial_write('<');
 80071fe:	203c      	movs	r0, #60	; 0x3c
 8007200:	f000 fa7e 	bl	8007700 <serial_write>
  switch (sys.state) {
 8007204:	4b7a      	ldr	r3, [pc, #488]	; (80073f0 <report_realtime_status+0x214>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d01d      	beq.n	8007248 <report_realtime_status+0x6c>
 800720c:	2b08      	cmp	r3, #8
 800720e:	dc0b      	bgt.n	8007228 <report_realtime_status+0x4c>
 8007210:	2b01      	cmp	r3, #1
 8007212:	d03b      	beq.n	800728c <report_realtime_status+0xb0>
 8007214:	2b01      	cmp	r3, #1
 8007216:	dc02      	bgt.n	800721e <report_realtime_status+0x42>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d011      	beq.n	8007240 <report_realtime_status+0x64>
 800721c:	e067      	b.n	80072ee <report_realtime_status+0x112>
 800721e:	2b02      	cmp	r3, #2
 8007220:	d038      	beq.n	8007294 <report_realtime_status+0xb8>
 8007222:	2b04      	cmp	r3, #4
 8007224:	d02e      	beq.n	8007284 <report_realtime_status+0xa8>
 8007226:	e062      	b.n	80072ee <report_realtime_status+0x112>
 8007228:	2b20      	cmp	r3, #32
 800722a:	d027      	beq.n	800727c <report_realtime_status+0xa0>
 800722c:	2b20      	cmp	r3, #32
 800722e:	dc02      	bgt.n	8007236 <report_realtime_status+0x5a>
 8007230:	2b10      	cmp	r3, #16
 8007232:	d00d      	beq.n	8007250 <report_realtime_status+0x74>
 8007234:	e05b      	b.n	80072ee <report_realtime_status+0x112>
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d030      	beq.n	800729c <report_realtime_status+0xc0>
 800723a:	2b80      	cmp	r3, #128	; 0x80
 800723c:	d053      	beq.n	80072e6 <report_realtime_status+0x10a>
 800723e:	e056      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8007240:	486c      	ldr	r0, [pc, #432]	; (80073f4 <report_realtime_status+0x218>)
 8007242:	f7fe fcb5 	bl	8005bb0 <printString>
 8007246:	e052      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8007248:	486b      	ldr	r0, [pc, #428]	; (80073f8 <report_realtime_status+0x21c>)
 800724a:	f7fe fcb1 	bl	8005bb0 <printString>
 800724e:	e04e      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_HOLD:
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8007250:	4b67      	ldr	r3, [pc, #412]	; (80073f0 <report_realtime_status+0x214>)
 8007252:	789b      	ldrb	r3, [r3, #2]
 8007254:	b25b      	sxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	db10      	blt.n	800727c <report_realtime_status+0xa0>
      printPgmString(PSTR("Hold:"));
 800725a:	4868      	ldr	r0, [pc, #416]	; (80073fc <report_realtime_status+0x220>)
 800725c:	f7fe fca8 	bl	8005bb0 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8007260:	4b63      	ldr	r3, [pc, #396]	; (80073f0 <report_realtime_status+0x214>)
 8007262:	789b      	ldrb	r3, [r3, #2]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <report_realtime_status+0x98>
 800726c:	2030      	movs	r0, #48	; 0x30
 800726e:	f000 fa47 	bl	8007700 <serial_write>
      else { serial_write('1'); } // Actively holding
      break;
 8007272:	e03c      	b.n	80072ee <report_realtime_status+0x112>
      else { serial_write('1'); } // Actively holding
 8007274:	2031      	movs	r0, #49	; 0x31
 8007276:	f000 fa43 	bl	8007700 <serial_write>
      break;
 800727a:	e038      	b.n	80072ee <report_realtime_status+0x112>
    } // Continues to print jog state during jog cancel.
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 800727c:	4860      	ldr	r0, [pc, #384]	; (8007400 <report_realtime_status+0x224>)
 800727e:	f7fe fc97 	bl	8005bb0 <printString>
 8007282:	e034      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8007284:	485f      	ldr	r0, [pc, #380]	; (8007404 <report_realtime_status+0x228>)
 8007286:	f7fe fc93 	bl	8005bb0 <printString>
 800728a:	e030      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 800728c:	485e      	ldr	r0, [pc, #376]	; (8007408 <report_realtime_status+0x22c>)
 800728e:	f7fe fc8f 	bl	8005bb0 <printString>
 8007292:	e02c      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 8007294:	485d      	ldr	r0, [pc, #372]	; (800740c <report_realtime_status+0x230>)
 8007296:	f7fe fc8b 	bl	8005bb0 <printString>
 800729a:	e028      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_SAFETY_DOOR:
    printPgmString(PSTR("Door:"));
 800729c:	485c      	ldr	r0, [pc, #368]	; (8007410 <report_realtime_status+0x234>)
 800729e:	f7fe fc87 	bl	8005bb0 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80072a2:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <report_realtime_status+0x214>)
 80072a4:	789b      	ldrb	r3, [r3, #2]
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <report_realtime_status+0xda>
      serial_write('3'); // Restoring
 80072ae:	2033      	movs	r0, #51	; 0x33
 80072b0:	f000 fa26 	bl	8007700 <serial_write>
      }
      else {
        serial_write('2'); // Retracting
      }
    }
    break;
 80072b4:	e01b      	b.n	80072ee <report_realtime_status+0x112>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80072b6:	4b4e      	ldr	r3, [pc, #312]	; (80073f0 <report_realtime_status+0x214>)
 80072b8:	789b      	ldrb	r3, [r3, #2]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00d      	beq.n	80072de <report_realtime_status+0x102>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 80072c2:	4b4b      	ldr	r3, [pc, #300]	; (80073f0 <report_realtime_status+0x214>)
 80072c4:	789b      	ldrb	r3, [r3, #2]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <report_realtime_status+0xfa>
          serial_write('1'); // Door ajar
 80072ce:	2031      	movs	r0, #49	; 0x31
 80072d0:	f000 fa16 	bl	8007700 <serial_write>
    break;
 80072d4:	e00b      	b.n	80072ee <report_realtime_status+0x112>
          serial_write('0');
 80072d6:	2030      	movs	r0, #48	; 0x30
 80072d8:	f000 fa12 	bl	8007700 <serial_write>
    break;
 80072dc:	e007      	b.n	80072ee <report_realtime_status+0x112>
        serial_write('2'); // Retracting
 80072de:	2032      	movs	r0, #50	; 0x32
 80072e0:	f000 fa0e 	bl	8007700 <serial_write>
    break;
 80072e4:	e003      	b.n	80072ee <report_realtime_status+0x112>
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 80072e6:	484b      	ldr	r0, [pc, #300]	; (8007414 <report_realtime_status+0x238>)
 80072e8:	f7fe fc62 	bl	8005bb0 <printString>
 80072ec:	bf00      	nop
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 80072ee:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <report_realtime_status+0x23c>)
 80072f0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <report_realtime_status+0x128>
    (sys.report_wco_counter == 0)) {
 80072fc:	4b3c      	ldr	r3, [pc, #240]	; (80073f0 <report_realtime_status+0x214>)
 80072fe:	7b5b      	ldrb	r3, [r3, #13]
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007300:	2b00      	cmp	r3, #0
 8007302:	d167      	bne.n	80073d4 <report_realtime_status+0x1f8>
    for (idx = 0; idx< N_AXIS; idx++) {
 8007304:	2300      	movs	r3, #0
 8007306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800730a:	e05f      	b.n	80073cc <report_realtime_status+0x1f0>
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800730c:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8007310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007314:	4a41      	ldr	r2, [pc, #260]	; (800741c <report_realtime_status+0x240>)
 8007316:	330a      	adds	r3, #10
 8007318:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800731c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007320:	4a3e      	ldr	r2, [pc, #248]	; (800741c <report_realtime_status+0x240>)
 8007322:	330c      	adds	r3, #12
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	4619      	mov	r1, r3
 800732c:	f7f9 fbb8 	bl	8000aa0 <__addsf3>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	00a3      	lsls	r3, r4, #2
 8007336:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800733a:	440b      	add	r3, r1
 800733c:	f843 2c2c 	str.w	r2, [r3, #-44]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007344:	2b02      	cmp	r3, #2
 8007346:	d117      	bne.n	8007378 <report_realtime_status+0x19c>
 8007348:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800734c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007356:	4413      	add	r3, r2
 8007358:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800735c:	4b2f      	ldr	r3, [pc, #188]	; (800741c <report_realtime_status+0x240>)
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7f9 fb9c 	bl	8000aa0 <__addsf3>
 8007368:	4603      	mov	r3, r0
 800736a:	461a      	mov	r2, r3
 800736c:	00a3      	lsls	r3, r4, #2
 800736e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007372:	440b      	add	r3, r1
 8007374:	f843 2c2c 	str.w	r2, [r3, #-44]
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8007378:	4b27      	ldr	r3, [pc, #156]	; (8007418 <report_realtime_status+0x23c>)
 800737a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d11d      	bne.n	80073c2 <report_realtime_status+0x1e6>
        print_position[idx] -= wco[idx];
 8007386:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800738a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007394:	4413      	add	r3, r2
 8007396:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800739a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073a4:	440b      	add	r3, r1
 80073a6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7f9 fb75 	bl	8000a9c <__aeabi_fsub>
 80073b2:	4603      	mov	r3, r0
 80073b4:	461a      	mov	r2, r3
 80073b6:	00a3      	lsls	r3, r4, #2
 80073b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073bc:	440b      	add	r3, r1
 80073be:	f843 2c20 	str.w	r2, [r3, #-32]
    for (idx = 0; idx< N_AXIS; idx++) {
 80073c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073c6:	3301      	adds	r3, #1
 80073c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80073cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d99b      	bls.n	800730c <report_realtime_status+0x130>
      }
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 80073d4:	4b10      	ldr	r3, [pc, #64]	; (8007418 <report_realtime_status+0x23c>)
 80073d6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d020      	beq.n	8007424 <report_realtime_status+0x248>
    printPgmString(PSTR("|MPos:"));
 80073e2:	480f      	ldr	r0, [pc, #60]	; (8007420 <report_realtime_status+0x244>)
 80073e4:	f7fe fbe4 	bl	8005bb0 <printString>
 80073e8:	e01f      	b.n	800742a <report_realtime_status+0x24e>
 80073ea:	bf00      	nop
 80073ec:	20000f20 	.word	0x20000f20
 80073f0:	20000efc 	.word	0x20000efc
 80073f4:	0800b92c 	.word	0x0800b92c
 80073f8:	0800b934 	.word	0x0800b934
 80073fc:	0800b938 	.word	0x0800b938
 8007400:	0800b940 	.word	0x0800b940
 8007404:	0800b944 	.word	0x0800b944
 8007408:	0800b94c 	.word	0x0800b94c
 800740c:	0800b954 	.word	0x0800b954
 8007410:	0800b95c 	.word	0x0800b95c
 8007414:	0800b964 	.word	0x0800b964
 8007418:	20001048 	.word	0x20001048
 800741c:	20000e74 	.word	0x20000e74
 8007420:	0800b96c 	.word	0x0800b96c
  }
  else {
    printPgmString(PSTR("|WPos:"));
 8007424:	4899      	ldr	r0, [pc, #612]	; (800768c <report_realtime_status+0x4b0>)
 8007426:	f7fe fbc3 	bl	8005bb0 <printString>
  }
  report_util_axis_values(print_position);
 800742a:	f107 0310 	add.w	r3, r7, #16
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff faea 	bl	8006a08 <report_util_axis_values>

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8007434:	4b96      	ldr	r3, [pc, #600]	; (8007690 <report_realtime_status+0x4b4>)
 8007436:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d011      	beq.n	8007466 <report_realtime_status+0x28a>
    printPgmString(PSTR("|Bf:"));
 8007442:	4894      	ldr	r0, [pc, #592]	; (8007694 <report_realtime_status+0x4b8>)
 8007444:	f7fe fbb4 	bl	8005bb0 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 8007448:	f7fe fb80 	bl	8005b4c <plan_get_block_buffer_available>
 800744c:	4603      	mov	r3, r0
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fbc2 	bl	8005bd8 <print_uint8_base10>
    serial_write(',');
 8007454:	202c      	movs	r0, #44	; 0x2c
 8007456:	f000 f953 	bl	8007700 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 800745a:	f000 f929 	bl	80076b0 <serial_get_rx_buffer_available>
 800745e:	4603      	mov	r3, r0
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe fbb9 	bl	8005bd8 <print_uint8_base10>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 8007466:	488c      	ldr	r0, [pc, #560]	; (8007698 <report_realtime_status+0x4bc>)
 8007468:	f7fe fba2 	bl	8005bb0 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 800746c:	f002 face 	bl	8009a0c <st_get_realtime_rate>
 8007470:	4603      	mov	r3, r0
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fcba 	bl	8005dec <printFloat_RateValue>
  serial_write(',');
 8007478:	202c      	movs	r0, #44	; 0x2c
 800747a:	f000 f941 	bl	8007700 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 800747e:	4b87      	ldr	r3, [pc, #540]	; (800769c <report_realtime_status+0x4c0>)
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fbf7 	bl	8005c78 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 800748a:	f7fc fccf 	bl	8003e2c <limits_get_state>
 800748e:	4603      	mov	r3, r0
 8007490:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t ctrl_pin_state = system_control_get_state();
 8007494:	f002 fb8c 	bl	8009bb0 <system_control_get_state>
 8007498:	4603      	mov	r3, r0
 800749a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t prb_pin_state = probe_get_state();
 800749e:	f7fe fd0b 	bl	8005eb8 <probe_get_state>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80074a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80074ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074b8:	4313      	orrs	r3, r2
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d050      	beq.n	8007562 <report_realtime_status+0x386>
    printPgmString(PSTR("|Pn:"));
 80074c0:	4877      	ldr	r0, [pc, #476]	; (80076a0 <report_realtime_status+0x4c4>)
 80074c2:	f7fe fb75 	bl	8005bb0 <printString>
    if (prb_pin_state) { serial_write('P'); }
 80074c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <report_realtime_status+0x2f8>
 80074ce:	2050      	movs	r0, #80	; 0x50
 80074d0:	f000 f916 	bl	8007700 <serial_write>
    if (lim_pin_state) {
 80074d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01a      	beq.n	8007512 <report_realtime_status+0x336>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80074dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <report_realtime_status+0x312>
 80074e8:	2058      	movs	r0, #88	; 0x58
 80074ea:	f000 f909 	bl	8007700 <serial_write>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80074ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <report_realtime_status+0x324>
 80074fa:	2059      	movs	r0, #89	; 0x59
 80074fc:	f000 f900 	bl	8007700 <serial_write>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8007500:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <report_realtime_status+0x336>
 800750c:	205a      	movs	r0, #90	; 0x5a
 800750e:	f000 f8f7 	bl	8007700 <serial_write>
	  #ifdef ABC_AXIS
	  if (bit_istrue(lim_pin_state, bit(C_AXIS))) { serial_write('C'); }
	  #endif
// ---
    }
    if (ctrl_pin_state) {
 8007512:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007516:	2b00      	cmp	r3, #0
 8007518:	d023      	beq.n	8007562 <report_realtime_status+0x386>
#ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_SAFETY_DOOR)) { serial_write('D'); }
 800751a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <report_realtime_status+0x350>
 8007526:	2044      	movs	r0, #68	; 0x44
 8007528:	f000 f8ea 	bl	8007700 <serial_write>
#endif
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 800752c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <report_realtime_status+0x362>
 8007538:	2052      	movs	r0, #82	; 0x52
 800753a:	f000 f8e1 	bl	8007700 <serial_write>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 800753e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <report_realtime_status+0x374>
 800754a:	2048      	movs	r0, #72	; 0x48
 800754c:	f000 f8d8 	bl	8007700 <serial_write>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8007550:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <report_realtime_status+0x386>
 800755c:	2053      	movs	r0, #83	; 0x53
 800755e:	f000 f8cf 	bl	8007700 <serial_write>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8007562:	4b4e      	ldr	r3, [pc, #312]	; (800769c <report_realtime_status+0x4c0>)
 8007564:	7b5b      	ldrb	r3, [r3, #13]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d006      	beq.n	8007578 <report_realtime_status+0x39c>
 800756a:	4b4c      	ldr	r3, [pc, #304]	; (800769c <report_realtime_status+0x4c0>)
 800756c:	7b5b      	ldrb	r3, [r3, #13]
 800756e:	3b01      	subs	r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	4b4a      	ldr	r3, [pc, #296]	; (800769c <report_realtime_status+0x4c0>)
 8007574:	735a      	strb	r2, [r3, #13]
 8007576:	e01a      	b.n	80075ae <report_realtime_status+0x3d2>
  else {
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007578:	4b48      	ldr	r3, [pc, #288]	; (800769c <report_realtime_status+0x4c0>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <report_realtime_status+0x3b0>
      sys.report_wco_counter = (REPORT_WCO_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
 8007584:	4b45      	ldr	r3, [pc, #276]	; (800769c <report_realtime_status+0x4c0>)
 8007586:	221d      	movs	r2, #29
 8007588:	735a      	strb	r2, [r3, #13]
 800758a:	e002      	b.n	8007592 <report_realtime_status+0x3b6>
    }
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 800758c:	4b43      	ldr	r3, [pc, #268]	; (800769c <report_realtime_status+0x4c0>)
 800758e:	2209      	movs	r2, #9
 8007590:	735a      	strb	r2, [r3, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007592:	4b42      	ldr	r3, [pc, #264]	; (800769c <report_realtime_status+0x4c0>)
 8007594:	7b1b      	ldrb	r3, [r3, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d102      	bne.n	80075a0 <report_realtime_status+0x3c4>
 800759a:	4b40      	ldr	r3, [pc, #256]	; (800769c <report_realtime_status+0x4c0>)
 800759c:	2201      	movs	r2, #1
 800759e:	731a      	strb	r2, [r3, #12]
    printPgmString(PSTR("|WCO:"));
 80075a0:	4840      	ldr	r0, [pc, #256]	; (80076a4 <report_realtime_status+0x4c8>)
 80075a2:	f7fe fb05 	bl	8005bb0 <printString>
    report_util_axis_values(wco);
 80075a6:	1d3b      	adds	r3, r7, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fa2d 	bl	8006a08 <report_util_axis_values>
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80075ae:	4b3b      	ldr	r3, [pc, #236]	; (800769c <report_realtime_status+0x4c0>)
 80075b0:	7b1b      	ldrb	r3, [r3, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d006      	beq.n	80075c4 <report_realtime_status+0x3e8>
 80075b6:	4b39      	ldr	r3, [pc, #228]	; (800769c <report_realtime_status+0x4c0>)
 80075b8:	7b1b      	ldrb	r3, [r3, #12]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	4b37      	ldr	r3, [pc, #220]	; (800769c <report_realtime_status+0x4c0>)
 80075c0:	731a      	strb	r2, [r3, #12]
 80075c2:	e05a      	b.n	800767a <report_realtime_status+0x49e>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80075c4:	4b35      	ldr	r3, [pc, #212]	; (800769c <report_realtime_status+0x4c0>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <report_realtime_status+0x3fc>
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
 80075d0:	4b32      	ldr	r3, [pc, #200]	; (800769c <report_realtime_status+0x4c0>)
 80075d2:	2213      	movs	r2, #19
 80075d4:	731a      	strb	r2, [r3, #12]
 80075d6:	e002      	b.n	80075de <report_realtime_status+0x402>
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 80075d8:	4b30      	ldr	r3, [pc, #192]	; (800769c <report_realtime_status+0x4c0>)
 80075da:	2209      	movs	r2, #9
 80075dc:	731a      	strb	r2, [r3, #12]
      printPgmString(PSTR("|Ov:"));
 80075de:	4832      	ldr	r0, [pc, #200]	; (80076a8 <report_realtime_status+0x4cc>)
 80075e0:	f7fe fae6 	bl	8005bb0 <printString>
      print_uint8_base10(sys.f_override);
 80075e4:	4b2d      	ldr	r3, [pc, #180]	; (800769c <report_realtime_status+0x4c0>)
 80075e6:	7a1b      	ldrb	r3, [r3, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe faf5 	bl	8005bd8 <print_uint8_base10>
      serial_write(',');
 80075ee:	202c      	movs	r0, #44	; 0x2c
 80075f0:	f000 f886 	bl	8007700 <serial_write>
      print_uint8_base10(sys.r_override);
 80075f4:	4b29      	ldr	r3, [pc, #164]	; (800769c <report_realtime_status+0x4c0>)
 80075f6:	7a5b      	ldrb	r3, [r3, #9]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe faed 	bl	8005bd8 <print_uint8_base10>
      serial_write(',');
 80075fe:	202c      	movs	r0, #44	; 0x2c
 8007600:	f000 f87e 	bl	8007700 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <report_realtime_status+0x4c0>)
 8007606:	7a9b      	ldrb	r3, [r3, #10]
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe fae5 	bl	8005bd8 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 800760e:	f000 fe77 	bl	8008300 <spindle_get_state>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      uint8_t cl_state = coolant_get_state();
 8007618:	f7fa fcc8 	bl	8001fac <coolant_get_state>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      if (sp_state || cl_state) {
 8007622:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <report_realtime_status+0x456>
 800762a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800762e:	2b00      	cmp	r3, #0
 8007630:	d023      	beq.n	800767a <report_realtime_status+0x49e>
        printPgmString(PSTR("|A:"));
 8007632:	481e      	ldr	r0, [pc, #120]	; (80076ac <report_realtime_status+0x4d0>)
 8007634:	f7fe fabc 	bl	8005bb0 <printString>
        if (sp_state) { // != SPINDLE_STATE_DISABLE
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <report_realtime_status+0x47a>
          #ifdef VARIABLE_SPINDLE 
            #ifdef USE_SPINDLE_DIR_AS_ENABLE_PIN
              serial_write('S'); // CW
            #else
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007644:	2b01      	cmp	r3, #1
 8007646:	d103      	bne.n	8007650 <report_realtime_status+0x474>
 8007648:	2053      	movs	r0, #83	; 0x53
 800764a:	f000 f859 	bl	8007700 <serial_write>
 800764e:	e002      	b.n	8007656 <report_realtime_status+0x47a>
              else { serial_write('C'); } // CCW
 8007650:	2043      	movs	r0, #67	; 0x43
 8007652:	f000 f855 	bl	8007700 <serial_write>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8007656:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <report_realtime_status+0x48c>
 8007662:	2046      	movs	r0, #70	; 0x46
 8007664:	f000 f84c 	bl	8007700 <serial_write>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8007668:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <report_realtime_status+0x49e>
 8007674:	204d      	movs	r0, #77	; 0x4d
 8007676:	f000 f843 	bl	8007700 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 800767a:	203e      	movs	r0, #62	; 0x3e
 800767c:	f000 f840 	bl	8007700 <serial_write>
  report_util_line_feed();
 8007680:	f7ff f99a 	bl	80069b8 <report_util_line_feed>
}
 8007684:	bf00      	nop
 8007686:	3734      	adds	r7, #52	; 0x34
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}
 800768c:	0800b974 	.word	0x0800b974
 8007690:	20001048 	.word	0x20001048
 8007694:	0800b97c 	.word	0x0800b97c
 8007698:	0800b984 	.word	0x0800b984
 800769c:	20000efc 	.word	0x20000efc
 80076a0:	0800b98c 	.word	0x0800b98c
 80076a4:	0800b994 	.word	0x0800b994
 80076a8:	0800b99c 	.word	0x0800b99c
 80076ac:	0800b9a4 	.word	0x0800b9a4

080076b0 <serial_get_rx_buffer_available>:



// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
  //if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
  //return((rtail-serial_rx_buffer_head-1));
// modified by MS
	//uint8_t rtail = serial_rx_buffer_tail ; // Copy to limit multiple calls to volatile
	int16_t freeSpace ;
	freeSpace = ((int16_t) serial_rx_buffer_tail) -  ( ( int16_t) serial_rx_buffer_head )  ;
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <serial_get_rx_buffer_available+0x3c>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	b29a      	uxth	r2, r3
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <serial_get_rx_buffer_available+0x40>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	80fb      	strh	r3, [r7, #6]
	if (freeSpace <= 0)  { freeSpace += RX_RING_BUFFER; }
 80076ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dc03      	bgt.n	80076da <serial_get_rx_buffer_available+0x2a>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	33ff      	adds	r3, #255	; 0xff
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	80fb      	strh	r3, [r7, #6]
	return( (uint8_t) freeSpace - 1);
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	b2db      	uxtb	r3, r3
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr
 80076ec:	200008f1 	.word	0x200008f1
 80076f0:	200008f0 	.word	0x200008f0

080076f4 <serial_init>:
//}
// MS : noot sure that this is correct.


void serial_init()
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	71fb      	strb	r3, [r7, #7]
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 800770a:	4b17      	ldr	r3, [pc, #92]	; (8007768 <serial_write+0x68>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
//	USART_SendData(USART1, data);                // remove by MS because we try to use interrupt
//	while (!(USART1->SR & USART_FLAG_TXE));      // remove by MS because we try to use interrupt
//    return;                                    // remove by MS because we try to use interrupt
#endif
#endif
  if (next_head >= TX_RING_BUFFER) { next_head = 0; }
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b14      	cmp	r3, #20
 8007716:	d909      	bls.n	800772c <serial_write+0x2c>
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
 800771c:	e006      	b.n	800772c <serial_write+0x2c>
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <serial_write+0x6c>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b00      	cmp	r3, #0
 800772a:	d117      	bne.n	800775c <serial_write+0x5c>
  while (next_head == serial_tx_buffer_tail) {
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <serial_write+0x70>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	7bfa      	ldrb	r2, [r7, #15]
 8007734:	429a      	cmp	r2, r3
 8007736:	d0f2      	beq.n	800771e <serial_write+0x1e>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <serial_write+0x68>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	4619      	mov	r1, r3
 800773e:	4a0d      	ldr	r2, [pc, #52]	; (8007774 <serial_write+0x74>)
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	5453      	strb	r3, [r2, r1]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
  }
#endif
  serial_tx_buffer_head = next_head;
 8007744:	4a08      	ldr	r2, [pc, #32]	; (8007768 <serial_write+0x68>)
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	7013      	strb	r3, [r2, #0]
#ifndef USEUSB                       // added by MS
  //if (tx_restart) {                 // added by MS              // If transmit interrupt is disabled, enable it
  //    tx_restart = 0;                // added by MS
  //	USART1->CR1 |= USART_FLAG_TXE;   // added by MS		          // enable TX interrupt// added by MS
  //  }
  USART1->CR1 |= USART_FLAG_TXE;   // added by MS		          // enable TX interrupt// it seems it is safier to do it in all cases
 800774a:	4a0b      	ldr	r2, [pc, #44]	; (8007778 <serial_write+0x78>)
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <serial_write+0x78>)
 800774e:	899b      	ldrh	r3, [r3, #12]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007756:	b29b      	uxth	r3, r3
 8007758:	8193      	strh	r3, [r2, #12]
 800775a:	e000      	b.n	800775e <serial_write+0x5e>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 800775c:	bf00      	nop
#endif                               // added by MS
#endif                               // added by MS
}
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	200008f2 	.word	0x200008f2
 800776c:	20000f11 	.word	0x20000f11
 8007770:	200008f3 	.word	0x200008f3
 8007774:	20000f30 	.word	0x20000f30
 8007778:	40013800 	.word	0x40013800

0800777c <serial_read>:
}
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007782:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <serial_read+0x44>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  if (serial_rx_buffer_head == tail) {
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <serial_read+0x48>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	79fa      	ldrb	r2, [r7, #7]
 800778e:	429a      	cmp	r2, r3
 8007790:	d101      	bne.n	8007796 <serial_read+0x1a>
    return SERIAL_NO_DATA;
 8007792:	23ff      	movs	r3, #255	; 0xff
 8007794:	e00f      	b.n	80077b6 <serial_read+0x3a>
  } else {
    uint8_t data = serial_rx_buffer[tail];
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <serial_read+0x4c>)
 800779a:	5cd3      	ldrb	r3, [r2, r3]
 800779c:	71bb      	strb	r3, [r7, #6]

    tail++;
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	3301      	adds	r3, #1
 80077a2:	71fb      	strb	r3, [r7, #7]
    //if (tail == RX_RING_BUFFER) { tail = 0; }   // removed by MS it was
    if (tail >= RX_RING_BUFFER) { tail = 0; } // added by MS
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	2bff      	cmp	r3, #255	; 0xff
 80077a8:	d101      	bne.n	80077ae <serial_read+0x32>
 80077aa:	2300      	movs	r3, #0
 80077ac:	71fb      	strb	r3, [r7, #7]
    serial_rx_buffer_tail = tail;
 80077ae:	4a04      	ldr	r2, [pc, #16]	; (80077c0 <serial_read+0x44>)
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	7013      	strb	r3, [r2, #0]

    return data;
 80077b4:	79bb      	ldrb	r3, [r7, #6]
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	200008f1 	.word	0x200008f1
 80077c4:	200008f0 	.word	0x200008f0
 80077c8:	20000f48 	.word	0x20000f48

080077cc <storeHandleDataIn>:


// store one received byte into Rx buffer or handle if it is a realtime command
void storeHandleDataIn(uint8_t data){
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4603      	mov	r3, r0
 80077d4:	71fb      	strb	r3, [r7, #7]

  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
	uint8_t next_head;
	switch (data) {
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b21      	cmp	r3, #33	; 0x21
 80077da:	d014      	beq.n	8007806 <storeHandleDataIn+0x3a>
 80077dc:	2b21      	cmp	r3, #33	; 0x21
 80077de:	dc02      	bgt.n	80077e6 <storeHandleDataIn+0x1a>
 80077e0:	2b18      	cmp	r3, #24
 80077e2:	d005      	beq.n	80077f0 <storeHandleDataIn+0x24>
 80077e4:	e013      	b.n	800780e <storeHandleDataIn+0x42>
 80077e6:	2b3f      	cmp	r3, #63	; 0x3f
 80077e8:	d005      	beq.n	80077f6 <storeHandleDataIn+0x2a>
 80077ea:	2b7e      	cmp	r3, #126	; 0x7e
 80077ec:	d007      	beq.n	80077fe <storeHandleDataIn+0x32>
 80077ee:	e00e      	b.n	800780e <storeHandleDataIn+0x42>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 80077f0:	f7fd faac 	bl	8004d4c <mc_reset>
 80077f4:	e0c4      	b.n	8007980 <storeHandleDataIn+0x1b4>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80077f6:	2001      	movs	r0, #1
 80077f8:	f002 fd76 	bl	800a2e8 <system_set_exec_state_flag>
 80077fc:	e0c0      	b.n	8007980 <storeHandleDataIn+0x1b4>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 80077fe:	2002      	movs	r0, #2
 8007800:	f002 fd72 	bl	800a2e8 <system_set_exec_state_flag>
 8007804:	e0bc      	b.n	8007980 <storeHandleDataIn+0x1b4>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8007806:	2008      	movs	r0, #8
 8007808:	f002 fd6e 	bl	800a2e8 <system_set_exec_state_flag>
 800780c:	e0b8      	b.n	8007980 <storeHandleDataIn+0x1b4>
    default :
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 800780e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f280 8093 	bge.w	800793e <storeHandleDataIn+0x172>
        switch(data) {
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	3b84      	subs	r3, #132	; 0x84
 800781c:	2b1d      	cmp	r3, #29
 800781e:	f200 80af 	bhi.w	8007980 <storeHandleDataIn+0x1b4>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <storeHandleDataIn+0x5c>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	080078a1 	.word	0x080078a1
 800782c:	080078a9 	.word	0x080078a9
 8007830:	08007981 	.word	0x08007981
 8007834:	08007981 	.word	0x08007981
 8007838:	08007981 	.word	0x08007981
 800783c:	08007981 	.word	0x08007981
 8007840:	08007981 	.word	0x08007981
 8007844:	08007981 	.word	0x08007981
 8007848:	08007981 	.word	0x08007981
 800784c:	08007981 	.word	0x08007981
 8007850:	08007981 	.word	0x08007981
 8007854:	08007981 	.word	0x08007981
 8007858:	080078bd 	.word	0x080078bd
 800785c:	080078c5 	.word	0x080078c5
 8007860:	080078cd 	.word	0x080078cd
 8007864:	080078d5 	.word	0x080078d5
 8007868:	080078dd 	.word	0x080078dd
 800786c:	080078e5 	.word	0x080078e5
 8007870:	080078ed 	.word	0x080078ed
 8007874:	080078f5 	.word	0x080078f5
 8007878:	08007981 	.word	0x08007981
 800787c:	080078fd 	.word	0x080078fd
 8007880:	08007905 	.word	0x08007905
 8007884:	0800790d 	.word	0x0800790d
 8007888:	08007915 	.word	0x08007915
 800788c:	0800791d 	.word	0x0800791d
 8007890:	08007925 	.word	0x08007925
 8007894:	08007981 	.word	0x08007981
 8007898:	0800792d 	.word	0x0800792d
 800789c:	08007935 	.word	0x08007935
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 80078a0:	2020      	movs	r0, #32
 80078a2:	f002 fd21 	bl	800a2e8 <system_set_exec_state_flag>
 80078a6:	e06b      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_JOG_CANCEL:
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80078a8:	4b37      	ldr	r3, [pc, #220]	; (8007988 <storeHandleDataIn+0x1bc>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d064      	beq.n	800797e <storeHandleDataIn+0x1b2>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 80078b4:	2040      	movs	r0, #64	; 0x40
 80078b6:	f002 fd17 	bl	800a2e8 <system_set_exec_state_flag>
              //printString("set EMC\n");                      // added by MS to debug
            }
            break;
 80078ba:	e060      	b.n	800797e <storeHandleDataIn+0x1b2>
          #ifdef DEBUG
            case CMD_DEBUG_REPORT: {uint8_t sreg = SREG; cli(); bit_true(sys_rt_exec_debug,EXEC_DEBUG_REPORT); SREG = sreg;} break;
          #endif
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80078bc:	2001      	movs	r0, #1
 80078be:	f002 fd65 	bl	800a38c <system_set_exec_motion_override_flag>
 80078c2:	e05d      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80078c4:	2002      	movs	r0, #2
 80078c6:	f002 fd61 	bl	800a38c <system_set_exec_motion_override_flag>
 80078ca:	e059      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 80078cc:	2004      	movs	r0, #4
 80078ce:	f002 fd5d 	bl	800a38c <system_set_exec_motion_override_flag>
 80078d2:	e055      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80078d4:	2008      	movs	r0, #8
 80078d6:	f002 fd59 	bl	800a38c <system_set_exec_motion_override_flag>
 80078da:	e051      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80078dc:	2010      	movs	r0, #16
 80078de:	f002 fd55 	bl	800a38c <system_set_exec_motion_override_flag>
 80078e2:	e04d      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80078e4:	2020      	movs	r0, #32
 80078e6:	f002 fd51 	bl	800a38c <system_set_exec_motion_override_flag>
 80078ea:	e049      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80078ec:	2040      	movs	r0, #64	; 0x40
 80078ee:	f002 fd4d 	bl	800a38c <system_set_exec_motion_override_flag>
 80078f2:	e045      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80078f4:	2080      	movs	r0, #128	; 0x80
 80078f6:	f002 fd49 	bl	800a38c <system_set_exec_motion_override_flag>
 80078fa:	e041      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 80078fc:	2001      	movs	r0, #1
 80078fe:	f002 fd5b 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 8007902:	e03d      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8007904:	2002      	movs	r0, #2
 8007906:	f002 fd57 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 800790a:	e039      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 800790c:	2004      	movs	r0, #4
 800790e:	f002 fd53 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 8007912:	e035      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8007914:	2008      	movs	r0, #8
 8007916:	f002 fd4f 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 800791a:	e031      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 800791c:	2010      	movs	r0, #16
 800791e:	f002 fd4b 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 8007922:	e02d      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8007924:	2020      	movs	r0, #32
 8007926:	f002 fd47 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 800792a:	e029      	b.n	8007980 <storeHandleDataIn+0x1b4>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 800792c:	2040      	movs	r0, #64	; 0x40
 800792e:	f002 fd43 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 8007932:	e025      	b.n	8007980 <storeHandleDataIn+0x1b4>
          #ifdef ENABLE_M7
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8007934:	2080      	movs	r0, #128	; 0x80
 8007936:	f002 fd3f 	bl	800a3b8 <system_set_exec_accessory_override_flag>
 800793a:	bf00      	nop
 800793c:	e020      	b.n	8007980 <storeHandleDataIn+0x1b4>
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <storeHandleDataIn+0x1c0>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	73fb      	strb	r3, [r7, #15]
        //if (next_head == RX_RING_BUFFER) { next_head = 0; }
        if (next_head >= RX_RING_BUFFER) { next_head = 0; }
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	d101      	bne.n	8007950 <storeHandleDataIn+0x184>
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]


        // Write data to buffer unless it is full. Take care: if buffer is full, then car is lost
        if (next_head != serial_rx_buffer_tail) {
 8007950:	4b0f      	ldr	r3, [pc, #60]	; (8007990 <storeHandleDataIn+0x1c4>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	7bfa      	ldrb	r2, [r7, #15]
 8007958:	429a      	cmp	r2, r3
 800795a:	d009      	beq.n	8007970 <storeHandleDataIn+0x1a4>
          serial_rx_buffer[serial_rx_buffer_head] = data;
 800795c:	4b0b      	ldr	r3, [pc, #44]	; (800798c <storeHandleDataIn+0x1c0>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	4619      	mov	r1, r3
 8007962:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <storeHandleDataIn+0x1c8>)
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	5453      	strb	r3, [r2, r1]
          serial_rx_buffer_head = next_head;
 8007968:	4a08      	ldr	r2, [pc, #32]	; (800798c <storeHandleDataIn+0x1c0>)
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	7013      	strb	r3, [r2, #0]
        	next_head++;     //just do nothing but allow a break punt
        	next_head--;
        }
      }
  }
}
 800796e:	e007      	b.n	8007980 <storeHandleDataIn+0x1b4>
        	next_head++;     //just do nothing but allow a break punt
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	3301      	adds	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]
        	next_head--;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	3b01      	subs	r3, #1
 800797a:	73fb      	strb	r3, [r7, #15]
}
 800797c:	e000      	b.n	8007980 <storeHandleDataIn+0x1b4>
            break;
 800797e:	bf00      	nop
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000efc 	.word	0x20000efc
 800798c:	200008f0 	.word	0x200008f0
 8007990:	200008f1 	.word	0x200008f1
 8007994:	20000f48 	.word	0x20000f48

08007998 <USART1_IRQHandler>:
/*----------------------------------------------------------------------------
  USART1_IRQHandler
  Handles USART1 global interrupt request.
 *----------------------------------------------------------------------------*/
void USART1_IRQHandler (void) 
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
    //volatile unsigned int IIR;
    uint8_t data;
    uint8_t tail;

    //IIR = USART1->SR;
    if (USART1->SR & USART_FLAG_RXNE) // changed by MS : it was IIR & USART_FLAG_RXNE
 800799e:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <USART1_IRQHandler+0x88>)
 80079a0:	881b      	ldrh	r3, [r3, #0]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <USART1_IRQHandler+0x24>
    {                  // read interrupt
        data = USART1->DR & 0x1FF;
 80079ac:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <USART1_IRQHandler+0x88>)
 80079ae:	889b      	ldrh	r3, [r3, #4]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	71bb      	strb	r3, [r7, #6]
        storeHandleDataIn(data);
 80079b4:	79bb      	ldrb	r3, [r7, #6]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff ff08 	bl	80077cc <storeHandleDataIn>
        //USART1->SR = ~USART_FLAG_RXNE;	          // clear interrupt ; changed by MS, it is normally cleared automatically by reading the DR register
    }

    if (USART1->SR  & USART_FLAG_TXE) {  // changed by MS : it was IIR & USART_FLAG_TXE
 80079bc:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <USART1_IRQHandler+0x88>)
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d025      	beq.n	8007a16 <USART1_IRQHandler+0x7e>
          tail = serial_tx_buffer_tail;
 80079ca:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <USART1_IRQHandler+0x8c>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	71fb      	strb	r3, [r7, #7]
          if (tail != serial_tx_buffer_head) {  // if there is at least one byte to send; take it from the buffer and
 80079d0:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <USART1_IRQHandler+0x90>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	79fa      	ldrb	r2, [r7, #7]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d011      	beq.n	80079fe <USART1_IRQHandler+0x66>
        	  USART1->DR = serial_tx_buffer[tail];  // this clear the interrupt.
 80079da:	4a11      	ldr	r2, [pc, #68]	; (8007a20 <USART1_IRQHandler+0x88>)
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	4913      	ldr	r1, [pc, #76]	; (8007a2c <USART1_IRQHandler+0x94>)
 80079e0:	5ccb      	ldrb	r3, [r1, r3]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8093      	strh	r3, [r2, #4]
        	  tail++;
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	3301      	adds	r3, #1
 80079ea:	71fb      	strb	r3, [r7, #7]
        	  if ( tail >= TX_RING_BUFFER) { tail = 0;  }
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b14      	cmp	r3, #20
 80079f0:	d901      	bls.n	80079f6 <USART1_IRQHandler+0x5e>
 80079f2:	2300      	movs	r3, #0
 80079f4:	71fb      	strb	r3, [r7, #7]
        	  serial_tx_buffer_tail = tail;
 80079f6:	4a0b      	ldr	r2, [pc, #44]	; (8007a24 <USART1_IRQHandler+0x8c>)
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	7013      	strb	r3, [r2, #0]




    } // end of sending
}     // end of interrupt
 80079fc:	e00b      	b.n	8007a16 <USART1_IRQHandler+0x7e>
        	  USART1->CR1 &= ~USART_FLAG_TXE;		      // disable TX interrupt if nothing to send
 80079fe:	4a08      	ldr	r2, [pc, #32]	; (8007a20 <USART1_IRQHandler+0x88>)
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <USART1_IRQHandler+0x88>)
 8007a02:	899b      	ldrh	r3, [r3, #12]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8193      	strh	r3, [r2, #12]
        	  USART1->SR = ~USART_FLAG_TXE;	          // clear interrupt
 8007a0e:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <USART1_IRQHandler+0x88>)
 8007a10:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8007a14:	801a      	strh	r2, [r3, #0]
}     // end of interrupt
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40013800 	.word	0x40013800
 8007a24:	200008f3 	.word	0x200008f3
 8007a28:	200008f2 	.word	0x200008f2
 8007a2c:	20000f30 	.word	0x20000f30

08007a30 <serial_reset_read_buffer>:
#endif  // end of else of USEUSB
#endif  // end of STM32STM32F103C8

void serial_reset_read_buffer()
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <serial_reset_read_buffer+0x14>)
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <serial_reset_read_buffer+0x18>)
 8007a3a:	701a      	strb	r2, [r3, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr
 8007a44:	200008f0 	.word	0x200008f0
 8007a48:	200008f1 	.word	0x200008f1

08007a4c <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8007a58:	f7fe fb4c 	bl	80060f4 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007a5c:	79fa      	ldrb	r2, [r7, #7]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	4413      	add	r3, r2
 8007a64:	00da      	lsls	r2, r3, #3
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007a6c:	60fb      	str	r3, [r7, #12]
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007a6e:	2250      	movs	r2, #80	; 0x50
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7fa fbb4 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <settings_store_build_info>:


// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007a88:	2250      	movs	r2, #80	; 0x50
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007a90:	f7fa fba6 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <settings_write_coord_data>:


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 8007aa8:	f7fe fb24 	bl	80060f4 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007aac:	79fa      	ldrb	r2, [r7, #7]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007abc:	60fb      	str	r3, [r7, #12]
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007abe:	220c      	movs	r2, #12
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7fa fb8c 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007ac8:	bf00      	nop
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <write_global_settings>:


// Method to store Grbl global settings struct and version number into EEPROM
// NOTE: This function can only be called in IDLE state.
void write_global_settings()
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  eeprom_put_char(0, SETTINGS_VERSION);
 8007ad4:	210a      	movs	r1, #10
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f7fa fb70 	bl	80021bc <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007adc:	225c      	movs	r2, #92	; 0x5c
 8007ade:	4903      	ldr	r1, [pc, #12]	; (8007aec <write_global_settings+0x1c>)
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	f7fa fb7d 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007ae6:	bf00      	nop
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20001048 	.word	0x20001048

08007af0 <settings_restore>:


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d075      	beq.n	8007bf0 <settings_restore+0x100>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007b04:	4b5e      	ldr	r3, [pc, #376]	; (8007c80 <settings_restore+0x190>)
 8007b06:	2206      	movs	r2, #6
 8007b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007b0c:	4b5c      	ldr	r3, [pc, #368]	; (8007c80 <settings_restore+0x190>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007b14:	4b5a      	ldr	r3, [pc, #360]	; (8007c80 <settings_restore+0x190>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	865a      	strh	r2, [r3, #50]	; 0x32
    settings.dir_invert_mask = DEFAULT_DIRECTION_INVERT_MASK;
 8007b1a:	4b59      	ldr	r3, [pc, #356]	; (8007c80 <settings_restore+0x190>)
 8007b1c:	221f      	movs	r2, #31
 8007b1e:	869a      	strh	r2, [r3, #52]	; 0x34
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007b20:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <settings_restore+0x190>)
 8007b22:	2203      	movs	r2, #3
 8007b24:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007b28:	4b55      	ldr	r3, [pc, #340]	; (8007c80 <settings_restore+0x190>)
 8007b2a:	4a56      	ldr	r2, [pc, #344]	; (8007c84 <settings_restore+0x194>)
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007b2e:	4b54      	ldr	r3, [pc, #336]	; (8007c80 <settings_restore+0x190>)
 8007b30:	4a55      	ldr	r2, [pc, #340]	; (8007c88 <settings_restore+0x198>)
 8007b32:	63da      	str	r2, [r3, #60]	; 0x3c

    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007b34:	4b52      	ldr	r3, [pc, #328]	; (8007c80 <settings_restore+0x190>)
 8007b36:	4a55      	ldr	r2, [pc, #340]	; (8007c8c <settings_restore+0x19c>)
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007b3a:	4b51      	ldr	r3, [pc, #324]	; (8007c80 <settings_restore+0x190>)
 8007b3c:	f04f 0200 	mov.w	r2, #0
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44

    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007b42:	4b4f      	ldr	r3, [pc, #316]	; (8007c80 <settings_restore+0x190>)
 8007b44:	2203      	movs	r2, #3
 8007b46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007b4a:	4b4d      	ldr	r3, [pc, #308]	; (8007c80 <settings_restore+0x190>)
 8007b4c:	4a50      	ldr	r2, [pc, #320]	; (8007c90 <settings_restore+0x1a0>)
 8007b4e:	64da      	str	r2, [r3, #76]	; 0x4c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007b50:	4b4b      	ldr	r3, [pc, #300]	; (8007c80 <settings_restore+0x190>)
 8007b52:	4a50      	ldr	r2, [pc, #320]	; (8007c94 <settings_restore+0x1a4>)
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007b56:	4b4a      	ldr	r3, [pc, #296]	; (8007c80 <settings_restore+0x190>)
 8007b58:	22fa      	movs	r2, #250	; 0xfa
 8007b5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007b5e:	4b48      	ldr	r3, [pc, #288]	; (8007c80 <settings_restore+0x190>)
 8007b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007b64:	659a      	str	r2, [r3, #88]	; 0x58

    settings.flags = 0;
 8007b66:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <settings_restore+0x190>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_REPORT_INCHES) { settings.flags |= BITFLAG_REPORT_INCHES; }
    if (DEFAULT_LASER_MODE) { settings.flags |= BITFLAG_LASER_MODE; }
    if (DEFAULT_INVERT_ST_ENABLE) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
    if (DEFAULT_HARD_LIMIT_ENABLE) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007b6e:	4b44      	ldr	r3, [pc, #272]	; (8007c80 <settings_restore+0x190>)
 8007b70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <settings_restore+0x190>)
 8007b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_HOMING_ENABLE) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8007b80:	4b3f      	ldr	r3, [pc, #252]	; (8007c80 <settings_restore+0x190>)
 8007b82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007b86:	f043 0310 	orr.w	r3, r3, #16
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	4b3c      	ldr	r3, [pc, #240]	; (8007c80 <settings_restore+0x190>)
 8007b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_SOFT_LIMIT_ENABLE) { settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE; }
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007b92:	4b3b      	ldr	r3, [pc, #236]	; (8007c80 <settings_restore+0x190>)
 8007b94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	4b38      	ldr	r3, [pc, #224]	; (8007c80 <settings_restore+0x190>)
 8007ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }

    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007ba4:	4b36      	ldr	r3, [pc, #216]	; (8007c80 <settings_restore+0x190>)
 8007ba6:	4a3c      	ldr	r2, [pc, #240]	; (8007c98 <settings_restore+0x1a8>)
 8007ba8:	601a      	str	r2, [r3, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007baa:	4b35      	ldr	r3, [pc, #212]	; (8007c80 <settings_restore+0x190>)
 8007bac:	4a3a      	ldr	r2, [pc, #232]	; (8007c98 <settings_restore+0x1a8>)
 8007bae:	605a      	str	r2, [r3, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007bb0:	4b33      	ldr	r3, [pc, #204]	; (8007c80 <settings_restore+0x190>)
 8007bb2:	4a3a      	ldr	r2, [pc, #232]	; (8007c9c <settings_restore+0x1ac>)
 8007bb4:	609a      	str	r2, [r3, #8]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007bb6:	4b32      	ldr	r3, [pc, #200]	; (8007c80 <settings_restore+0x190>)
 8007bb8:	4a39      	ldr	r2, [pc, #228]	; (8007ca0 <settings_restore+0x1b0>)
 8007bba:	60da      	str	r2, [r3, #12]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007bbc:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <settings_restore+0x190>)
 8007bbe:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <settings_restore+0x1b0>)
 8007bc0:	611a      	str	r2, [r3, #16]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007bc2:	4b2f      	ldr	r3, [pc, #188]	; (8007c80 <settings_restore+0x190>)
 8007bc4:	4a33      	ldr	r2, [pc, #204]	; (8007c94 <settings_restore+0x1a4>)
 8007bc6:	615a      	str	r2, [r3, #20]
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <settings_restore+0x190>)
 8007bca:	4a36      	ldr	r2, [pc, #216]	; (8007ca4 <settings_restore+0x1b4>)
 8007bcc:	619a      	str	r2, [r3, #24]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007bce:	4b2c      	ldr	r3, [pc, #176]	; (8007c80 <settings_restore+0x190>)
 8007bd0:	4a34      	ldr	r2, [pc, #208]	; (8007ca4 <settings_restore+0x1b4>)
 8007bd2:	61da      	str	r2, [r3, #28]
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007bd4:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <settings_restore+0x190>)
 8007bd6:	4a34      	ldr	r2, [pc, #208]	; (8007ca8 <settings_restore+0x1b8>)
 8007bd8:	621a      	str	r2, [r3, #32]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007bda:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <settings_restore+0x190>)
 8007bdc:	4a33      	ldr	r2, [pc, #204]	; (8007cac <settings_restore+0x1bc>)
 8007bde:	625a      	str	r2, [r3, #36]	; 0x24
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007be0:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <settings_restore+0x190>)
 8007be2:	4a33      	ldr	r2, [pc, #204]	; (8007cb0 <settings_restore+0x1c0>)
 8007be4:	629a      	str	r2, [r3, #40]	; 0x28
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007be6:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <settings_restore+0x190>)
 8007be8:	4a32      	ldr	r2, [pc, #200]	; (8007cb4 <settings_restore+0x1c4>)
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c
    settings.max_rate[C_AXIS] = DEFAULT_C_MAX_RATE;
    settings.acceleration[C_AXIS] = DEFAULT_C_ACCELERATION;
    settings.max_travel[C_AXIS] = (-DEFAULT_C_MAX_TRAVEL);
	#endif
// ---
    write_global_settings();
 8007bec:	f7ff ff70 	bl	8007ad0 <write_global_settings>
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d016      	beq.n	8007c28 <settings_restore+0x138>
    uint8_t idx;
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
 8007bfa:	f107 0308 	add.w	r3, r7, #8
 8007bfe:	220c      	movs	r2, #12
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 fcf7 	bl	800a5f6 <memset>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007c08:	2300      	movs	r3, #0
 8007c0a:	75fb      	strb	r3, [r7, #23]
 8007c0c:	e009      	b.n	8007c22 <settings_restore+0x132>
 8007c0e:	f107 0208 	add.w	r2, r7, #8
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff ff40 	bl	8007a9c <settings_write_coord_data>
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	d9f2      	bls.n	8007c0e <settings_restore+0x11e>
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d013      	beq.n	8007c5a <settings_restore+0x16a>
    #if N_STARTUP_LINE > 0
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007c32:	2100      	movs	r1, #0
 8007c34:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007c38:	f7fa fac0 	bl	80021bc <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	f240 3001 	movw	r0, #769	; 0x301
 8007c42:	f7fa fabb 	bl	80021bc <eeprom_put_char>
    #endif
    #if N_STARTUP_LINE > 1
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007c46:	2100      	movs	r1, #0
 8007c48:	f240 3051 	movw	r0, #849	; 0x351
 8007c4c:	f7fa fab6 	bl	80021bc <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007c50:	2100      	movs	r1, #0
 8007c52:	f240 3052 	movw	r0, #850	; 0x352
 8007c56:	f7fa fab1 	bl	80021bc <eeprom_put_char>
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d009      	beq.n	8007c78 <settings_restore+0x188>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007c64:	2100      	movs	r1, #0
 8007c66:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007c6a:	f7fa faa7 	bl	80021bc <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007c74:	f7fa faa2 	bl	80021bc <eeprom_put_char>
  }
}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20001048 	.word	0x20001048
 8007c84:	3c23d70a 	.word	0x3c23d70a
 8007c88:	3b03126f 	.word	0x3b03126f
 8007c8c:	447a0000 	.word	0x447a0000
 8007c90:	42c80000 	.word	0x42c80000
 8007c94:	43fa0000 	.word	0x43fa0000
 8007c98:	42700000 	.word	0x42700000
 8007c9c:	43c80000 	.word	0x43c80000
 8007ca0:	451c4000 	.word	0x451c4000
 8007ca4:	488ca000 	.word	0x488ca000
 8007ca8:	482fc800 	.word	0x482fc800
 8007cac:	c4070000 	.word	0xc4070000
 8007cb0:	c40e8000 	.word	0xc40e8000
 8007cb4:	c2a00000 	.word	0xc2a00000

08007cb8 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007cc4:	79fa      	ldrb	r2, [r7, #7]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	4413      	add	r3, r2
 8007ccc:	00da      	lsls	r2, r3, #3
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007cd4:	60fb      	str	r3, [r7, #12]
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007cd6:	2250      	movs	r2, #80	; 0x50
 8007cd8:	68f9      	ldr	r1, [r7, #12]
 8007cda:	6838      	ldr	r0, [r7, #0]
 8007cdc:	f7fa fab6 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <settings_read_startup_line+0x42>
    // Reset line with default value
    line[0] = 0; // Empty line
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
    settings_store_startup_line(n, line);
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff feab 	bl	8007a4c <settings_store_startup_line>
    return(false);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e000      	b.n	8007cfc <settings_read_startup_line+0x44>
  }
  return(true);
 8007cfa:	2301      	movs	r3, #1
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007d0c:	2250      	movs	r2, #80	; 0x50
 8007d0e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fa fa9a 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <settings_read_build_info+0x2a>
    // Reset line with default value
    line[0] = 0; // Empty line
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
    settings_store_build_info(line);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff feab 	bl	8007a80 <settings_store_build_info>
    return(false);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e000      	b.n	8007d30 <settings_read_build_info+0x2c>
  }
  return(true);
 8007d2e:	2301      	movs	r3, #1
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	6039      	str	r1, [r7, #0]
 8007d42:	71fb      	strb	r3, [r7, #7]
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007d44:	79fa      	ldrb	r2, [r7, #7]
 8007d46:	4613      	mov	r3, r2
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007d54:	60fb      	str	r3, [r7, #12]
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007d56:	220c      	movs	r2, #12
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	6838      	ldr	r0, [r7, #0]
 8007d5c:	f7fa fa76 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d114      	bne.n	8007d90 <settings_read_coord_data+0x58>
    // Reset with default zero vector
		coord_data[X_AXIS] = 0.0f;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
		coord_data[Y_AXIS] = 0.0f;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
		coord_data[Z_AXIS] = 0.0f;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef ABC_AXIS
		coord_data[C_AXIS] = 0.0f;
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fe88 	bl	8007a9c <settings_write_coord_data>
    return(false);
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <settings_read_coord_data+0x5a>
  }
  return(true);
 8007d90:	2301      	movs	r3, #1
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <read_global_settings>:


// Reads Grbl global settings struct from EEPROM.
uint8_t read_global_settings() {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
 8007da2:	2000      	movs	r0, #0
 8007da4:	f7fa f9fa 	bl	800219c <eeprom_get_char>
 8007da8:	4603      	mov	r3, r0
 8007daa:	71fb      	strb	r3, [r7, #7]
  if (version == SETTINGS_VERSION) {
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	2b0a      	cmp	r3, #10
 8007db0:	d109      	bne.n	8007dc6 <read_global_settings+0x2a>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007db2:	225c      	movs	r2, #92	; 0x5c
 8007db4:	2101      	movs	r1, #1
 8007db6:	4807      	ldr	r0, [pc, #28]	; (8007dd4 <read_global_settings+0x38>)
 8007db8:	f7fa fa48 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <read_global_settings+0x2e>
      return(false);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e002      	b.n	8007dcc <read_global_settings+0x30>
    }
  } else {
    return(false);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e000      	b.n	8007dcc <read_global_settings+0x30>
  }
  return(true);
 8007dca:	2301      	movs	r3, #1
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20001048 	.word	0x20001048

08007dd8 <settings_store_global_setting>:


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8007dd8:	b590      	push	{r4, r7, lr}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007de4:	f04f 0100 	mov.w	r1, #0
 8007de8:	6838      	ldr	r0, [r7, #0]
 8007dea:	f7f9 f8ff 	bl	8000fec <__aeabi_fcmplt>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <settings_store_global_setting+0x20>
 8007df4:	2304      	movs	r3, #4
 8007df6:	e1d3      	b.n	80081a0 <settings_store_global_setting+0x3c8>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	2b63      	cmp	r3, #99	; 0x63
 8007dfc:	d954      	bls.n	8007ea8 <settings_store_global_setting+0xd0>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	3b64      	subs	r3, #100	; 0x64
 8007e02:	71fb      	strb	r3, [r7, #7]
    uint8_t set_idx = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
    while (set_idx < AXIS_N_SETTINGS) {
 8007e08:	e04a      	b.n	8007ea0 <settings_store_global_setting+0xc8>
      if (parameter < N_AXIS) {
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d839      	bhi.n	8007e84 <settings_store_global_setting+0xac>
        // Valid axis setting found.
        switch (set_idx) {
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	f200 81c0 	bhi.w	8008198 <settings_store_global_setting+0x3c0>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <settings_store_global_setting+0x48>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e31 	.word	0x08007e31
 8007e24:	08007e3d 	.word	0x08007e3d
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e6f 	.word	0x08007e6f
          case 0:
            #ifdef MAX_STEP_RATE_HZ
            if (value*settings.max_rate[parameter] >(MAX_STEP_RATE_HZ*60.0f)) { return(STATUS_MAX_STEP_RATE_EXCEEDED); }
            #endif
            settings.steps_per_mm[parameter] = value;
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	49af      	ldr	r1, [pc, #700]	; (80080f0 <settings_store_global_setting+0x318>)
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            break;
 8007e3a:	e022      	b.n	8007e82 <settings_store_global_setting+0xaa>
          case 1:
            #ifdef MAX_STEP_RATE_HZ
            if (value*settings.steps_per_mm[parameter] > (MAX_STEP_RATE_HZ*60.0f)) { return(STATUS_MAX_STEP_RATE_EXCEEDED); }
            #endif
            settings.max_rate[parameter] = value;
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	4aac      	ldr	r2, [pc, #688]	; (80080f0 <settings_store_global_setting+0x318>)
 8007e40:	3302      	adds	r3, #2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	605a      	str	r2, [r3, #4]
            break;
 8007e4a:	e01a      	b.n	8007e82 <settings_store_global_setting+0xaa>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007e4c:	79fc      	ldrb	r4, [r7, #7]
 8007e4e:	49a9      	ldr	r1, [pc, #676]	; (80080f4 <settings_store_global_setting+0x31c>)
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f7f8 ff2d 	bl	8000cb0 <__aeabi_fmul>
 8007e56:	4603      	mov	r3, r0
 8007e58:	49a6      	ldr	r1, [pc, #664]	; (80080f4 <settings_store_global_setting+0x31c>)
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7f8 ff28 	bl	8000cb0 <__aeabi_fmul>
 8007e60:	4603      	mov	r3, r0
 8007e62:	4619      	mov	r1, r3
 8007e64:	4aa2      	ldr	r2, [pc, #648]	; (80080f0 <settings_store_global_setting+0x318>)
 8007e66:	1da3      	adds	r3, r4, #6
 8007e68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007e6c:	e009      	b.n	8007e82 <settings_store_global_setting+0xaa>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8007e76:	499e      	ldr	r1, [pc, #632]	; (80080f0 <settings_store_global_setting+0x318>)
 8007e78:	3308      	adds	r3, #8
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	605a      	str	r2, [r3, #4]
 8007e80:	bf00      	nop
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
 8007e82:	e189      	b.n	8008198 <settings_store_global_setting+0x3c0>
      } else {
        set_idx++;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	3301      	adds	r3, #1
 8007e88:	73fb      	strb	r3, [r7, #15]
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d902      	bls.n	8007e96 <settings_store_global_setting+0xbe>
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d101      	bne.n	8007e9a <settings_store_global_setting+0xc2>
 8007e96:	2303      	movs	r3, #3
 8007e98:	e182      	b.n	80081a0 <settings_store_global_setting+0x3c8>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	3b0a      	subs	r3, #10
 8007e9e:	71fb      	strb	r3, [r7, #7]
    while (set_idx < AXIS_N_SETTINGS) {
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d9b1      	bls.n	8007e0a <settings_store_global_setting+0x32>
 8007ea6:	e178      	b.n	800819a <settings_store_global_setting+0x3c2>
      }
    }
  } else {
    // Store non-axis Grbl settings
    uint8_t int_value = truncf(value);
 8007ea8:	6838      	ldr	r0, [r7, #0]
 8007eaa:	f002 fcc3 	bl	800a834 <truncf>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7f9 f8ff 	bl	80010b4 <__aeabi_f2uiz>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73bb      	strb	r3, [r7, #14]
    switch(parameter) {
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	f200 8169 	bhi.w	8008194 <settings_store_global_setting+0x3bc>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <settings_store_global_setting+0xf0>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007f4d 	.word	0x08007f4d
 8007ecc:	08007f61 	.word	0x08007f61
 8007ed0:	08007f6b 	.word	0x08007f6b
 8007ed4:	08007f79 	.word	0x08007f79
 8007ed8:	08007f87 	.word	0x08007f87
 8007edc:	08007fb5 	.word	0x08007fb5
 8007ee0:	08007fe3 	.word	0x08007fe3
 8007ee4:	08008195 	.word	0x08008195
 8007ee8:	08008195 	.word	0x08008195
 8007eec:	08008195 	.word	0x08008195
 8007ef0:	08008017 	.word	0x08008017
 8007ef4:	08008021 	.word	0x08008021
 8007ef8:	08008029 	.word	0x08008029
 8007efc:	08008031 	.word	0x08008031
 8007f00:	08008195 	.word	0x08008195
 8007f04:	08008195 	.word	0x08008195
 8007f08:	08008195 	.word	0x08008195
 8007f0c:	08008195 	.word	0x08008195
 8007f10:	08008195 	.word	0x08008195
 8007f14:	08008195 	.word	0x08008195
 8007f18:	08008063 	.word	0x08008063
 8007f1c:	080080a3 	.word	0x080080a3
 8007f20:	080080d5 	.word	0x080080d5
 8007f24:	0800811f 	.word	0x0800811f
 8007f28:	0800812b 	.word	0x0800812b
 8007f2c:	08008133 	.word	0x08008133
 8007f30:	0800813b 	.word	0x0800813b
 8007f34:	08008147 	.word	0x08008147
 8007f38:	08008195 	.word	0x08008195
 8007f3c:	08008195 	.word	0x08008195
 8007f40:	0800814f 	.word	0x0800814f
 8007f44:	0800815b 	.word	0x0800815b
 8007f48:	08008167 	.word	0x08008167
      case 0:
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d801      	bhi.n	8007f56 <settings_store_global_setting+0x17e>
 8007f52:	2306      	movs	r3, #6
 8007f54:	e124      	b.n	80081a0 <settings_store_global_setting+0x3c8>
        settings.pulse_microseconds = int_value; break;
 8007f56:	4a66      	ldr	r2, [pc, #408]	; (80080f0 <settings_store_global_setting+0x318>)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 8007f5e:	e11c      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007f60:	4a63      	ldr	r2, [pc, #396]	; (80080f0 <settings_store_global_setting+0x318>)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
 8007f68:	e117      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 2:
        settings.step_invert_mask = int_value;
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	4b60      	ldr	r3, [pc, #384]	; (80080f0 <settings_store_global_setting+0x318>)
 8007f70:	865a      	strh	r2, [r3, #50]	; 0x32
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007f72:	f000 fde9 	bl	8008b48 <st_generate_step_dir_invert_masks>
        break;
 8007f76:	e110      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 3:
        settings.dir_invert_mask = int_value;
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	4b5c      	ldr	r3, [pc, #368]	; (80080f0 <settings_store_global_setting+0x318>)
 8007f7e:	869a      	strh	r2, [r3, #52]	; 0x34
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007f80:	f000 fde2 	bl	8008b48 <st_generate_step_dir_invert_masks>
        break;
 8007f84:	e109      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 4: // Reset to ensure change. Immediate re-init may cause problems.
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d009      	beq.n	8007fa0 <settings_store_global_setting+0x1c8>
 8007f8c:	4b58      	ldr	r3, [pc, #352]	; (80080f0 <settings_store_global_setting+0x318>)
 8007f8e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007f92:	f043 0304 	orr.w	r3, r3, #4
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	4b55      	ldr	r3, [pc, #340]	; (80080f0 <settings_store_global_setting+0x318>)
 8007f9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
        break;
 8007f9e:	e0fc      	b.n	800819a <settings_store_global_setting+0x3c2>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007fa0:	4b53      	ldr	r3, [pc, #332]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fa2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007fa6:	f023 0304 	bic.w	r3, r3, #4
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	4b50      	ldr	r3, [pc, #320]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 8007fb2:	e0f2      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 5: // Reset to ensure change. Immediate re-init may cause problems.
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <settings_store_global_setting+0x1f6>
 8007fba:	4b4d      	ldr	r3, [pc, #308]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	4b4a      	ldr	r3, [pc, #296]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
        break;
 8007fcc:	e0e5      	b.n	800819a <settings_store_global_setting+0x3c2>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8007fce:	4b48      	ldr	r3, [pc, #288]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fd0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	4b45      	ldr	r3, [pc, #276]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 8007fe0:	e0db      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 6: // Reset to ensure change. Immediate re-init may cause problems.
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <settings_store_global_setting+0x224>
 8007fe8:	4b41      	ldr	r3, [pc, #260]	; (80080f0 <settings_store_global_setting+0x318>)
 8007fea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	4b3e      	ldr	r3, [pc, #248]	; (80080f0 <settings_store_global_setting+0x318>)
 8007ff6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8007ffa:	e008      	b.n	800800e <settings_store_global_setting+0x236>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007ffc:	4b3c      	ldr	r3, [pc, #240]	; (80080f0 <settings_store_global_setting+0x318>)
 8007ffe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008006:	b2da      	uxtb	r2, r3
 8008008:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <settings_store_global_setting+0x318>)
 800800a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        probe_configure_invert_mask(false);
 800800e:	2000      	movs	r0, #0
 8008010:	f7fd ff2a 	bl	8005e68 <probe_configure_invert_mask>
        break;
 8008014:	e0c1      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 10: settings.status_report_mask = int_value; break;
 8008016:	4a36      	ldr	r2, [pc, #216]	; (80080f0 <settings_store_global_setting+0x318>)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
 800801e:	e0bc      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 11: settings.junction_deviation = value; break;
 8008020:	4a33      	ldr	r2, [pc, #204]	; (80080f0 <settings_store_global_setting+0x318>)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6393      	str	r3, [r2, #56]	; 0x38
 8008026:	e0b8      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 12: settings.arc_tolerance = value; break;
 8008028:	4a31      	ldr	r2, [pc, #196]	; (80080f0 <settings_store_global_setting+0x318>)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800802e:	e0b4      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 13:
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <settings_store_global_setting+0x272>
 8008036:	4b2e      	ldr	r3, [pc, #184]	; (80080f0 <settings_store_global_setting+0x318>)
 8008038:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	b2da      	uxtb	r2, r3
 8008042:	4b2b      	ldr	r3, [pc, #172]	; (80080f0 <settings_store_global_setting+0x318>)
 8008044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8008048:	e008      	b.n	800805c <settings_store_global_setting+0x284>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 800804a:	4b29      	ldr	r3, [pc, #164]	; (80080f0 <settings_store_global_setting+0x318>)
 800804c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008050:	f023 0301 	bic.w	r3, r3, #1
 8008054:	b2da      	uxtb	r2, r3
 8008056:	4b26      	ldr	r3, [pc, #152]	; (80080f0 <settings_store_global_setting+0x318>)
 8008058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 800805c:	f002 f8c8 	bl	800a1f0 <system_flag_wco_change>
        break;
 8008060:	e09b      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 20:
        if (int_value) {
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d012      	beq.n	800808e <settings_store_global_setting+0x2b6>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8008068:	4b21      	ldr	r3, [pc, #132]	; (80080f0 <settings_store_global_setting+0x318>)
 800806a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <settings_store_global_setting+0x2a2>
 8008076:	230a      	movs	r3, #10
 8008078:	e092      	b.n	80081a0 <settings_store_global_setting+0x3c8>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 800807a:	4b1d      	ldr	r3, [pc, #116]	; (80080f0 <settings_store_global_setting+0x318>)
 800807c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008080:	f043 0320 	orr.w	r3, r3, #32
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <settings_store_global_setting+0x318>)
 8008088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
        break;
 800808c:	e085      	b.n	800819a <settings_store_global_setting+0x3c2>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 800808e:	4b18      	ldr	r3, [pc, #96]	; (80080f0 <settings_store_global_setting+0x318>)
 8008090:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008094:	f023 0320 	bic.w	r3, r3, #32
 8008098:	b2da      	uxtb	r2, r3
 800809a:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <settings_store_global_setting+0x318>)
 800809c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 80080a0:	e07b      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 21:
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d009      	beq.n	80080bc <settings_store_global_setting+0x2e4>
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <settings_store_global_setting+0x318>)
 80080aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080ae:	f043 0308 	orr.w	r3, r3, #8
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	4b0e      	ldr	r3, [pc, #56]	; (80080f0 <settings_store_global_setting+0x318>)
 80080b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80080ba:	e008      	b.n	80080ce <settings_store_global_setting+0x2f6>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 80080bc:	4b0c      	ldr	r3, [pc, #48]	; (80080f0 <settings_store_global_setting+0x318>)
 80080be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080c2:	f023 0308 	bic.w	r3, r3, #8
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <settings_store_global_setting+0x318>)
 80080ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 80080ce:	f7fb fe4f 	bl	8003d70 <limits_init>
        break;
 80080d2:	e062      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 22:
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <settings_store_global_setting+0x320>
 80080da:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <settings_store_global_setting+0x318>)
 80080dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080e0:	f043 0310 	orr.w	r3, r3, #16
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <settings_store_global_setting+0x318>)
 80080e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        else {
          settings.flags &= ~BITFLAG_HOMING_ENABLE;
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
        }
        break;
 80080ec:	e055      	b.n	800819a <settings_store_global_setting+0x3c2>
 80080ee:	bf00      	nop
 80080f0:	20001048 	.word	0x20001048
 80080f4:	42700000 	.word	0x42700000
          settings.flags &= ~BITFLAG_HOMING_ENABLE;
 80080f8:	4b2b      	ldr	r3, [pc, #172]	; (80081a8 <settings_store_global_setting+0x3d0>)
 80080fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080fe:	f023 0310 	bic.w	r3, r3, #16
 8008102:	b2da      	uxtb	r2, r3
 8008104:	4b28      	ldr	r3, [pc, #160]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 800810a:	4b27      	ldr	r3, [pc, #156]	; (80081a8 <settings_store_global_setting+0x3d0>)
 800810c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008110:	f023 0320 	bic.w	r3, r3, #32
 8008114:	b2da      	uxtb	r2, r3
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 800811c:	e03d      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 23: settings.homing_dir_mask = int_value; break;
 800811e:	7bbb      	ldrb	r3, [r7, #14]
 8008120:	b29a      	uxth	r2, r3
 8008122:	4b21      	ldr	r3, [pc, #132]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008124:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8008128:	e037      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 24: settings.homing_feed_rate = value; break;
 800812a:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <settings_store_global_setting+0x3d0>)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008130:	e033      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 25: settings.homing_seek_rate = value; break;
 8008132:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	6513      	str	r3, [r2, #80]	; 0x50
 8008138:	e02f      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 26: settings.homing_debounce_delay = int_value; break;
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	b29a      	uxth	r2, r3
 800813e:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008140:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8008144:	e029      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 27: settings.homing_pulloff = value; break;
 8008146:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6593      	str	r3, [r2, #88]	; 0x58
 800814c:	e025      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 800814e:	4a16      	ldr	r2, [pc, #88]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6413      	str	r3, [r2, #64]	; 0x40
 8008154:	f000 f83c 	bl	80081d0 <spindle_init>
 8008158:	e01f      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 800815a:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <settings_store_global_setting+0x3d0>)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6453      	str	r3, [r2, #68]	; 0x44
 8008160:	f000 f836 	bl	80081d0 <spindle_init>
 8008164:	e019      	b.n	800819a <settings_store_global_setting+0x3c2>
      case 32:
        #ifdef VARIABLE_SPINDLE
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <settings_store_global_setting+0x3a8>
 800816c:	4b0e      	ldr	r3, [pc, #56]	; (80081a8 <settings_store_global_setting+0x3d0>)
 800816e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008172:	f043 0302 	orr.w	r3, r3, #2
 8008176:	b2da      	uxtb	r2, r3
 8008178:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <settings_store_global_setting+0x3d0>)
 800817a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
 800817e:	e00c      	b.n	800819a <settings_store_global_setting+0x3c2>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <settings_store_global_setting+0x3d0>)
 8008182:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008186:	f023 0302 	bic.w	r3, r3, #2
 800818a:	b2da      	uxtb	r2, r3
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <settings_store_global_setting+0x3d0>)
 800818e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 8008192:	e002      	b.n	800819a <settings_store_global_setting+0x3c2>
      default:
        return(STATUS_INVALID_STATEMENT);
 8008194:	2303      	movs	r3, #3
 8008196:	e003      	b.n	80081a0 <settings_store_global_setting+0x3c8>
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
 8008198:	bf00      	nop
    }
  }
  write_global_settings();
 800819a:	f7ff fc99 	bl	8007ad0 <write_global_settings>
  return(STATUS_OK);
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd90      	pop	{r4, r7, pc}
 80081a8:	20001048 	.word	0x20001048

080081ac <settings_init>:


// Initialize the config subsystem
void settings_init() {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  if(!read_global_settings()) {
 80081b0:	f7ff fdf4 	bl	8007d9c <read_global_settings>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d107      	bne.n	80081ca <settings_init+0x1e>
    report_status_message(STATUS_SETTING_READ_FAIL);
 80081ba:	2007      	movs	r0, #7
 80081bc:	f7fe fc70 	bl	8006aa0 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 80081c0:	20ff      	movs	r0, #255	; 0xff
 80081c2:	f7ff fc95 	bl	8007af0 <settings_restore>
    report_grbl_settings();
 80081c6:	f7fe fd25 	bl	8006c14 <report_grbl_settings>
  }
}
 80081ca:	bf00      	nop
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 80081d6:	4b42      	ldr	r3, [pc, #264]	; (80082e0 <spindle_init+0x110>)
 80081d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081da:	4b41      	ldr	r3, [pc, #260]	; (80082e0 <spindle_init+0x110>)
 80081dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7f8 fc5b 	bl	8000a9c <__aeabi_fsub>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4619      	mov	r1, r3
 80081ea:	483e      	ldr	r0, [pc, #248]	; (80082e4 <spindle_init+0x114>)
 80081ec:	f7f8 fe14 	bl	8000e18 <__aeabi_fdiv>
 80081f0:	4603      	mov	r3, r0
 80081f2:	461a      	mov	r2, r3
 80081f4:	4b3c      	ldr	r3, [pc, #240]	; (80082e8 <spindle_init+0x118>)
 80081f6:	601a      	str	r2, [r3, #0]
  #endif
#endif

#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 80081f8:	2101      	movs	r1, #1
 80081fa:	2008      	movs	r0, #8
 80081fc:	f7f9 fbba 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008200:	2303      	movs	r3, #3
 8008202:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8008204:	2310      	movs	r3, #16
 8008206:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8008208:	2301      	movs	r3, #1
 800820a:	83bb      	strh	r3, [r7, #28]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 800820c:	f107 031c 	add.w	r3, r7, #28
 8008210:	4619      	mov	r1, r3
 8008212:	4836      	ldr	r0, [pc, #216]	; (80082ec <spindle_init+0x11c>)
 8008214:	f7f9 f944 	bl	80014a0 <GPIO_Init>

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008218:	2303      	movs	r3, #3
 800821a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800821c:	2310      	movs	r3, #16
 800821e:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8008220:	2302      	movs	r3, #2
 8008222:	83bb      	strh	r3, [r7, #28]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8008224:	f107 031c 	add.w	r3, r7, #28
 8008228:	4619      	mov	r1, r3
 800822a:	4830      	ldr	r0, [pc, #192]	; (80082ec <spindle_init+0x11c>)
 800822c:	f7f9 f938 	bl	80014a0 <GPIO_Init>
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8008230:	2101      	movs	r1, #1
 8008232:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008236:	f7f9 fb9d 	bl	8001974 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 800823a:	463b      	mov	r3, r7
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	609a      	str	r2, [r3, #8]
 8008244:	60da      	str	r2, [r3, #12]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8008246:	f107 0310 	add.w	r3, r7, #16
 800824a:	4618      	mov	r0, r3
 800824c:	f7f9 fcb8 	bl	8001bc0 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 8008250:	4b27      	ldr	r3, [pc, #156]	; (80082f0 <spindle_init+0x120>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a27      	ldr	r2, [pc, #156]	; (80082f4 <spindle_init+0x124>)
 8008256:	fba2 2303 	umull	r2, r3, r2, r3
 800825a:	0c9b      	lsrs	r3, r3, #18
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29b      	uxth	r3, r3
 8008262:	823b      	strh	r3, [r7, #16]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008264:	2300      	movs	r3, #0
 8008266:	827b      	strh	r3, [r7, #18]
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 8008268:	2363      	movs	r3, #99	; 0x63
 800826a:	82bb      	strh	r3, [r7, #20]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800826c:	2300      	movs	r3, #0
 800826e:	82fb      	strh	r3, [r7, #22]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	763b      	strb	r3, [r7, #24]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8008274:	f107 0310 	add.w	r3, r7, #16
 8008278:	4619      	mov	r1, r3
 800827a:	481f      	ldr	r0, [pc, #124]	; (80082f8 <spindle_init+0x128>)
 800827c:	f7f9 fb98 	bl	80019b0 <TIM_TimeBaseInit>


  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8008280:	2360      	movs	r3, #96	; 0x60
 8008282:	803b      	strh	r3, [r7, #0]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8008284:	2300      	movs	r3, #0
 8008286:	80fb      	strh	r3, [r7, #6]
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 8008288:	2301      	movs	r3, #1
 800828a:	807b      	strh	r3, [r7, #2]
#ifdef INVERT_SPINDLE_PWM
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_Low;
 800828c:	2302      	movs	r3, #2
 800828e:	813b      	strh	r3, [r7, #8]
#else
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
#endif
  TIM_OC1Init(TIM1, &outputChannelInit);
 8008290:	463b      	mov	r3, r7
 8008292:	4619      	mov	r1, r3
 8008294:	4818      	ldr	r0, [pc, #96]	; (80082f8 <spindle_init+0x128>)
 8008296:	f7f9 fc07 	bl	8001aa8 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 800829a:	2108      	movs	r1, #8
 800829c:	4816      	ldr	r0, [pc, #88]	; (80082f8 <spindle_init+0x128>)
 800829e:	f7f9 fd0f 	bl	8001cc0 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE); // MS in fact with my modification to support INVERT PWM, it will be ENABLE in spindle_stop()
 80082a2:	2100      	movs	r1, #0
 80082a4:	4814      	ldr	r0, [pc, #80]	; (80082f8 <spindle_init+0x128>)
 80082a6:	f7f9 fcc3 	bl	8001c30 <TIM_CtrlPWMOutputs>
                                     // perhaps it could be always enabled but I expect this should work too.
  TIM_Cmd(TIM1, ENABLE);
 80082aa:	2101      	movs	r1, #1
 80082ac:	4812      	ldr	r0, [pc, #72]	; (80082f8 <spindle_init+0x128>)
 80082ae:	f7f9 fca0 	bl	8001bf2 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 80082b2:	2101      	movs	r1, #1
 80082b4:	2004      	movs	r0, #4
 80082b6:	f7f9 fb5d 	bl	8001974 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80082ba:	2303      	movs	r3, #3
 80082bc:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80082be:	2318      	movs	r3, #24
 80082c0:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 80082c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c6:	83bb      	strh	r3, [r7, #28]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 80082c8:	f107 031c 	add.w	r3, r7, #28
 80082cc:	4619      	mov	r1, r3
 80082ce:	480b      	ldr	r0, [pc, #44]	; (80082fc <spindle_init+0x12c>)
 80082d0:	f7f9 f8e6 	bl	80014a0 <GPIO_Init>
  // perhaps the level has to be forced with also disabling the output on channel 1 of timer 1??
//#endif
#endif
#endif

  spindle_stop();
 80082d4:	f000 f834 	bl	8008340 <spindle_stop>
}
 80082d8:	bf00      	nop
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20001048 	.word	0x20001048
 80082e4:	42c60000 	.word	0x42c60000
 80082e8:	200008f4 	.word	0x200008f4
 80082ec:	40010c00 	.word	0x40010c00
 80082f0:	20000018 	.word	0x20000018
 80082f4:	431bde83 	.word	0x431bde83
 80082f8:	40012c00 	.word	0x40012c00
 80082fc:	40010800 	.word	0x40010800

08008300 <spindle_get_state>:


uint8_t spindle_get_state()
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
  uint8_t pin = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	71fb      	strb	r3, [r7, #7]
		}
	#endif
#endif

#if defined (STM32F103C8)
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 800830a:	480c      	ldr	r0, [pc, #48]	; (800833c <spindle_get_state+0x3c>)
 800830c:	f7f9 f984 	bl	8001618 <GPIO_ReadInputData>
 8008310:	4603      	mov	r3, r0
 8008312:	71fb      	strb	r3, [r7, #7]
	#ifdef USE_SPINDLE_ENABLE_PIN
		#ifdef INVERT_SPINDLE_ENABLE_PIN
		  if (bit_isfalse(pin,(1<<SPINDLE_ENABLE_BIT)))
		#else
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	f003 0302 	and.w	r3, r3, #2
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <spindle_get_state+0x30>
		#endif
		{
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <spindle_get_state+0x2c>
 8008328:	2302      	movs	r3, #2
 800832a:	e002      	b.n	8008332 <spindle_get_state+0x32>
		  else { return(SPINDLE_STATE_CW); }
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <spindle_get_state+0x32>
		} else { return(SPINDLE_STATE_DISABLE); }
 8008330:	2300      	movs	r3, #0
		  if (spindle_compute_pwm_value(gc_state.spindle_speed) == SPINDLE_PWM_OFF_VALUE){return(SPINDLE_STATE_DISABLE);}
	#endif
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
		  else { return(SPINDLE_STATE_CW); }
#endif
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	40010c00 	.word	0x40010c00

08008340 <spindle_stop>:

// Disables the spindle and sets PWM output to zero when PWM variable spindle speed is enabled.
// Called by various main program and ISR routines. Keep routine small, fast, and efficient.
// Called by spindle_init(), spindle_set_speed(), spindle_set_state(), and mc_reset().
void spindle_stop()
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    //TIM_CtrlPWMOutputs(TIM1, DISABLE);  // removed by MS
      TIM1->CCR1 = 0; // added by MS
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <spindle_stop+0x20>)
 8008346:	2200      	movs	r2, #0
 8008348:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE); // better to ENABLE with a CCR1 value of 0, so the signal is OK even when INVERT_PWM
 800834a:	2101      	movs	r1, #1
 800834c:	4804      	ldr	r0, [pc, #16]	; (8008360 <spindle_stop+0x20>)
 800834e:	f7f9 fc6f 	bl	8001c30 <TIM_CtrlPWMOutputs>
    #endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8008352:	2200      	movs	r2, #0
 8008354:	2102      	movs	r1, #2
 8008356:	4803      	ldr	r0, [pc, #12]	; (8008364 <spindle_stop+0x24>)
 8008358:	f7f9 f992 	bl	8001680 <GPIO_WriteBit>
      #endif
    #endif
#endif
}
 800835c:	bf00      	nop
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40012c00 	.word	0x40012c00
 8008364:	40010c00 	.word	0x40010c00

08008368 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	80fb      	strh	r3, [r7, #6]
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8008372:	4a09      	ldr	r2, [pc, #36]	; (8008398 <spindle_set_speed+0x30>)
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	8693      	strh	r3, [r2, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8008378:	88fb      	ldrh	r3, [r7, #6]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d103      	bne.n	8008386 <spindle_set_speed+0x1e>
				SPINDLE_TCCRA_REGISTER &= ~(1 << SPINDLE_COMB_BIT); // Disable PWM. Output voltage is zero.
			#endif
			#if defined (STM32F103C8)
				//TIM_CtrlPWMOutputs(TIM1, DISABLE); // removed by MS
				// MS : keep PWM Enable, so even the INVERT_PWM level is good
				TIM1->CCR1 = 0; // added by MS So even in INVERT PWM mode, level is good
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <spindle_set_speed+0x30>)
 8008380:	2200      	movs	r2, #0
 8008382:	869a      	strh	r2, [r3, #52]	; 0x34
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
			#endif
			}
		#endif
	}
 8008384:	e003      	b.n	800838e <spindle_set_speed+0x26>
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8008386:	2101      	movs	r1, #1
 8008388:	4803      	ldr	r0, [pc, #12]	; (8008398 <spindle_set_speed+0x30>)
 800838a:	f7f9 fc51 	bl	8001c30 <TIM_CtrlPWMOutputs>
	}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40012c00 	.word	0x40012c00

0800839c <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80083a4:	4b36      	ldr	r3, [pc, #216]	; (8008480 <spindle_compute_pwm_value+0xe4>)
 80083a6:	7a9b      	ldrb	r3, [r3, #10]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f8 fc2d 	bl	8000c08 <__aeabi_i2f>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4934      	ldr	r1, [pc, #208]	; (8008484 <spindle_compute_pwm_value+0xe8>)
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7f8 fc7c 	bl	8000cb0 <__aeabi_fmul>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7f8 fc77 	bl	8000cb0 <__aeabi_fmul>
 80083c2:	4603      	mov	r3, r0
 80083c4:	607b      	str	r3, [r7, #4]
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80083c6:	4b30      	ldr	r3, [pc, #192]	; (8008488 <spindle_compute_pwm_value+0xec>)
 80083c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ca:	4b2f      	ldr	r3, [pc, #188]	; (8008488 <spindle_compute_pwm_value+0xec>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7f8 fe1f 	bl	8001014 <__aeabi_fcmpge>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d108      	bne.n	80083ee <spindle_compute_pwm_value+0x52>
 80083dc:	4b2a      	ldr	r3, [pc, #168]	; (8008488 <spindle_compute_pwm_value+0xec>)
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7f8 fe0c 	bl	8001000 <__aeabi_fcmple>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d006      	beq.n	80083fc <spindle_compute_pwm_value+0x60>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 80083ee:	4b26      	ldr	r3, [pc, #152]	; (8008488 <spindle_compute_pwm_value+0xec>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	4a23      	ldr	r2, [pc, #140]	; (8008480 <spindle_compute_pwm_value+0xe4>)
 80083f4:	6113      	str	r3, [r2, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 80083f6:	2364      	movs	r3, #100	; 0x64
 80083f8:	81fb      	strh	r3, [r7, #14]
 80083fa:	e03b      	b.n	8008474 <spindle_compute_pwm_value+0xd8>
		}
		else if (rpm <= settings.rpm_min) {
 80083fc:	4b22      	ldr	r3, [pc, #136]	; (8008488 <spindle_compute_pwm_value+0xec>)
 80083fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4618      	mov	r0, r3
 8008404:	f7f8 fe06 	bl	8001014 <__aeabi_fcmpge>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d015      	beq.n	800843a <spindle_compute_pwm_value+0x9e>
			if (rpm == 0.0f) { // S0 disables spindle
 800840e:	f04f 0100 	mov.w	r1, #0
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7f8 fde0 	bl	8000fd8 <__aeabi_fcmpeq>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d006      	beq.n	800842c <spindle_compute_pwm_value+0x90>
				sys.spindle_speed = 0.0f;
 800841e:	4b18      	ldr	r3, [pc, #96]	; (8008480 <spindle_compute_pwm_value+0xe4>)
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8008426:	2300      	movs	r3, #0
 8008428:	81fb      	strh	r3, [r7, #14]
 800842a:	e023      	b.n	8008474 <spindle_compute_pwm_value+0xd8>
			}
			else { // Set minimum PWM output
				sys.spindle_speed = settings.rpm_min;
 800842c:	4b16      	ldr	r3, [pc, #88]	; (8008488 <spindle_compute_pwm_value+0xec>)
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	4a13      	ldr	r2, [pc, #76]	; (8008480 <spindle_compute_pwm_value+0xe4>)
 8008432:	6113      	str	r3, [r2, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8008434:	2301      	movs	r3, #1
 8008436:	81fb      	strh	r3, [r7, #14]
 8008438:	e01c      	b.n	8008474 <spindle_compute_pwm_value+0xd8>
			}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
 800843a:	4a11      	ldr	r2, [pc, #68]	; (8008480 <spindle_compute_pwm_value+0xe4>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6113      	str	r3, [r2, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <spindle_compute_pwm_value+0xec>)
 8008442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7f8 fb28 	bl	8000a9c <__aeabi_fsub>
 800844c:	4603      	mov	r3, r0
 800844e:	461a      	mov	r2, r3
 8008450:	4b0e      	ldr	r3, [pc, #56]	; (800848c <spindle_compute_pwm_value+0xf0>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f7f8 fc2a 	bl	8000cb0 <__aeabi_fmul>
 800845c:	4603      	mov	r3, r0
 800845e:	4618      	mov	r0, r3
 8008460:	f002 f946 	bl	800a6f0 <floorf>
 8008464:	4603      	mov	r3, r0
 8008466:	4618      	mov	r0, r3
 8008468:	f7f8 fe24 	bl	80010b4 <__aeabi_f2uiz>
 800846c:	4603      	mov	r3, r0
 800846e:	b29b      	uxth	r3, r3
 8008470:	3301      	adds	r3, #1
 8008472:	81fb      	strh	r3, [r7, #14]
		}
		return(pwm_value);
 8008474:	89fb      	ldrh	r3, [r7, #14]
	}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000efc 	.word	0x20000efc
 8008484:	3c23d70a 	.word	0x3c23d70a
 8008488:	20001048 	.word	0x20001048
 800848c:	200008f4 	.word	0x200008f4

08008490 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	6039      	str	r1, [r7, #0]
 800849a:	71fb      	strb	r3, [r7, #7]
  if (sys.abort) { return; } // Block during abort.
 800849c:	4b1e      	ldr	r3, [pc, #120]	; (8008518 <spindle_set_state+0x88>)
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d134      	bne.n	800850e <spindle_set_state+0x7e>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <spindle_set_state+0x28>
  
    #ifdef VARIABLE_SPINDLE
      sys.spindle_speed = 0.0f;
 80084aa:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <spindle_set_state+0x88>)
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	611a      	str	r2, [r3, #16]
    #endif
    spindle_stop();
 80084b2:	f7ff ff45 	bl	8008340 <spindle_stop>
 80084b6:	e026      	b.n	8008506 <spindle_set_state+0x76>
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	2b10      	cmp	r3, #16
 80084bc:	d105      	bne.n	80084ca <spindle_set_state+0x3a>
        ResetSpindleDirectionBit();
 80084be:	2200      	movs	r2, #0
 80084c0:	2101      	movs	r1, #1
 80084c2:	4816      	ldr	r0, [pc, #88]	; (800851c <spindle_set_state+0x8c>)
 80084c4:	f7f9 f8dc 	bl	8001680 <GPIO_WriteBit>
 80084c8:	e004      	b.n	80084d4 <spindle_set_state+0x44>
	  }
	  else {
      SetSpindleDirectionBit();
 80084ca:	2201      	movs	r2, #1
 80084cc:	2101      	movs	r1, #1
 80084ce:	4813      	ldr	r0, [pc, #76]	; (800851c <spindle_set_state+0x8c>)
 80084d0:	f7f9 f8d6 	bl	8001680 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 80084d4:	4b12      	ldr	r3, [pc, #72]	; (8008520 <spindle_set_state+0x90>)
 80084d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <spindle_set_state+0x5e>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d102      	bne.n	80084ee <spindle_set_state+0x5e>
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	603b      	str	r3, [r7, #0]
      }
    spindle_set_speed(spindle_compute_pwm_value(rpm));
 80084ee:	6838      	ldr	r0, [r7, #0]
 80084f0:	f7ff ff54 	bl	800839c <spindle_compute_pwm_value>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ff36 	bl	8008368 <spindle_set_speed>
#if (defined(USE_SPINDLE_ENABLE_PIN) && \
        !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || !defined(VARIABLE_SPINDLE)
	  #ifdef INVERT_SPINDLE_ENABLE_PIN
		ResetSpindleEnablebit();
	  #else
		SetSpindleEnablebit();
 80084fc:	2201      	movs	r2, #1
 80084fe:	2102      	movs	r1, #2
 8008500:	4806      	ldr	r0, [pc, #24]	; (800851c <spindle_set_state+0x8c>)
 8008502:	f7f9 f8bd 	bl	8001680 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8008506:	4b04      	ldr	r3, [pc, #16]	; (8008518 <spindle_set_state+0x88>)
 8008508:	2200      	movs	r2, #0
 800850a:	731a      	strb	r2, [r3, #12]
 800850c:	e000      	b.n	8008510 <spindle_set_state+0x80>
  if (sys.abort) { return; } // Block during abort.
 800850e:	bf00      	nop
}
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000efc 	.word	0x20000efc
 800851c:	40010c00 	.word	0x40010c00
 8008520:	20001048 	.word	0x20001048

08008524 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
    if (sys.state == STATE_CHECK_MODE) { return; }
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <spindle_sync+0x2c>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d007      	beq.n	8008548 <spindle_sync+0x24>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8008538:	f7fd fddc 	bl	80060f4 <protocol_buffer_synchronize>
    spindle_set_state(state,rpm);
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff ffa5 	bl	8008490 <spindle_set_state>
 8008546:	e000      	b.n	800854a <spindle_sync+0x26>
    if (sys.state == STATE_CHECK_MODE) { return; }
 8008548:	bf00      	nop
  }
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20000efc 	.word	0x20000efc

08008554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800858c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008558:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800855a:	e003      	b.n	8008564 <LoopCopyDataInit>

0800855c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800855c:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800855e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008560:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008562:	3104      	adds	r1, #4

08008564 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008564:	480b      	ldr	r0, [pc, #44]	; (8008594 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8008568:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800856a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800856c:	d3f6      	bcc.n	800855c <CopyDataInit>
	ldr	r2, =_sbss
 800856e:	4a0b      	ldr	r2, [pc, #44]	; (800859c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8008570:	e002      	b.n	8008578 <LoopFillZerobss>

08008572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008572:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008574:	f842 3b04 	str.w	r3, [r2], #4

08008578 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008578:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800857a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800857c:	d3f9      	bcc.n	8008572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800857e:	f001 ff4d 	bl	800a41c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008582:	f002 f805 	bl	800a590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008586:	f7fb ff81 	bl	800448c <main>
	bx	lr
 800858a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800858c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8008590:	0800bdbc 	.word	0x0800bdbc
	ldr	r0, =_sdata
 8008594:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008598:	20000114 	.word	0x20000114
	ldr	r2, =_sbss
 800859c:	20000114 	.word	0x20000114
	ldr	r3, = _ebss
 80085a0:	200010a4 	.word	0x200010a4

080085a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80085a4:	e7fe      	b.n	80085a4 <ADC1_2_IRQHandler>
	...

080085a8 <NVIC_EnableIRQ>:
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80085b2:	4908      	ldr	r1, [pc, #32]	; (80085d4 <NVIC_EnableIRQ+0x2c>)
 80085b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	79fa      	ldrb	r2, [r7, #7]
 80085bc:	f002 021f 	and.w	r2, r2, #31
 80085c0:	2001      	movs	r0, #1
 80085c2:	fa00 f202 	lsl.w	r2, r0, r2
 80085c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	e000e100 	.word	0xe000e100

080085d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	6039      	str	r1, [r7, #0]
 80085e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80085e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da0b      	bge.n	8008604 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80085ec:	490d      	ldr	r1, [pc, #52]	; (8008624 <NVIC_SetPriority+0x4c>)
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	3b04      	subs	r3, #4
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	0112      	lsls	r2, r2, #4
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	440b      	add	r3, r1
 8008600:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8008602:	e009      	b.n	8008618 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008604:	4908      	ldr	r1, [pc, #32]	; (8008628 <NVIC_SetPriority+0x50>)
 8008606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	0112      	lsls	r2, r2, #4
 8008610:	b2d2      	uxtb	r2, r2
 8008612:	440b      	add	r3, r1
 8008614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	e000ed00 	.word	0xe000ed00
 8008628:	e000e100 	.word	0xe000e100

0800862c <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 8008630:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <st_wake_up+0x98>)
 8008632:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <st_wake_up+0x1e>
  {
	  SetStepperDisableBit();
 800863e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008642:	4821      	ldr	r0, [pc, #132]	; (80086c8 <st_wake_up+0x9c>)
 8008644:	f7f9 f800 	bl	8001648 <GPIO_SetBits>
 8008648:	e004      	b.n	8008654 <st_wake_up+0x28>
  }
  else 
  { 
	  ResetStepperDisableBit();
 800864a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800864e:	481e      	ldr	r0, [pc, #120]	; (80086c8 <st_wake_up+0x9c>)
 8008650:	f7f9 f808 	bl	8001664 <GPIO_ResetBits>
  #ifdef STP_DRIVERS_ENABLE_DELAY
  delay_ms(STP_DRIVERS_ENABLE_DELAY);
  #endif

  // Initialize stepper output bits to ensure first ISR call does not step.
  st.step_outbits = step_port_invert_mask;
 8008654:	4b1d      	ldr	r3, [pc, #116]	; (80086cc <st_wake_up+0xa0>)
 8008656:	881a      	ldrh	r2, [r3, #0]
 8008658:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <st_wake_up+0xa4>)
 800865a:	821a      	strh	r2, [r3, #16]
	#ifdef STEP_PULSE_DELAY
    TIM3->SR = ~TIM_SR_CC1IF; // clear CC1IF flag
	TIM3->CCR1 = (STEP_PULSE_DELAY - 1) * TICKS_PER_MICROSECOND + 1; //+1 for STEP_PULSE_DELAY=1, -1 to be closer to exact delay
    st.step_pulse_time = (settings.pulse_microseconds + (STEP_PULSE_DELAY - 1)) * TICKS_PER_MICROSECOND + 1;
	#else // Normal operation
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 800865c:	4b19      	ldr	r3, [pc, #100]	; (80086c4 <st_wake_up+0x98>)
 800865e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008662:	b29b      	uxth	r3, r3
 8008664:	4a1b      	ldr	r2, [pc, #108]	; (80086d4 <st_wake_up+0xa8>)
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	491b      	ldr	r1, [pc, #108]	; (80086d8 <st_wake_up+0xac>)
 800866a:	fba1 1202 	umull	r1, r2, r1, r2
 800866e:	0c92      	lsrs	r2, r2, #18
 8008670:	b292      	uxth	r2, r2
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	b29a      	uxth	r2, r3
 8008678:	4b15      	ldr	r3, [pc, #84]	; (80086d0 <st_wake_up+0xa4>)
 800867a:	81da      	strh	r2, [r3, #14]
#endif
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 800867c:	4b17      	ldr	r3, [pc, #92]	; (80086dc <st_wake_up+0xb0>)
 800867e:	4a14      	ldr	r2, [pc, #80]	; (80086d0 <st_wake_up+0xa4>)
 8008680:	89d2      	ldrh	r2, [r2, #14]
 8008682:	859a      	strh	r2, [r3, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8008684:	4b15      	ldr	r3, [pc, #84]	; (80086dc <st_wake_up+0xb0>)
 8008686:	2201      	movs	r2, #1
 8008688:	829a      	strh	r2, [r3, #20]
  TIM3->SR = ~TIM_SR_UIF;
 800868a:	4b14      	ldr	r3, [pc, #80]	; (80086dc <st_wake_up+0xb0>)
 800868c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008690:	821a      	strh	r2, [r3, #16]

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <st_wake_up+0xa4>)
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	3b01      	subs	r3, #1
 800869e:	b29b      	uxth	r3, r3
 80086a0:	8593      	strh	r3, [r2, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 80086a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086a6:	2201      	movs	r2, #1
 80086a8:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 80086aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80086ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]
#endif
}
 80086be:	bf00      	nop
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20001048 	.word	0x20001048
 80086c8:	40010800 	.word	0x40010800
 80086cc:	20000a2c 	.word	0x20000a2c
 80086d0:	200009fc 	.word	0x200009fc
 80086d4:	20000018 	.word	0x20000018
 80086d8:	431bde83 	.word	0x431bde83
 80086dc:	40000400 	.word	0x40000400

080086e0 <st_go_idle>:


// Stepper shutdown
void st_go_idle()
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80086e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80086ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 80086fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086fe:	2200      	movs	r2, #0
 8008700:	849a      	strh	r2, [r3, #36]	; 0x24
#endif

  busy = false;
 8008702:	4b20      	ldr	r3, [pc, #128]	; (8008784 <st_go_idle+0xa4>)
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
 8008708:	2300      	movs	r3, #0
 800870a:	607b      	str	r3, [r7, #4]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800870c:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <st_go_idle+0xa8>)
 800870e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d108      	bne.n	8008728 <st_go_idle+0x48>
 8008716:	4b1d      	ldr	r3, [pc, #116]	; (800878c <st_go_idle+0xac>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <st_go_idle+0x48>
 8008720:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <st_go_idle+0xb0>)
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b80      	cmp	r3, #128	; 0x80
 8008726:	d10c      	bne.n	8008742 <st_go_idle+0x62>
 8008728:	4b19      	ldr	r3, [pc, #100]	; (8008790 <st_go_idle+0xb0>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b04      	cmp	r3, #4
 800872e:	d008      	beq.n	8008742 <st_go_idle+0x62>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
 8008730:	4b15      	ldr	r3, [pc, #84]	; (8008788 <st_go_idle+0xa8>)
 8008732:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008736:	b29b      	uxth	r3, r3
 8008738:	4618      	mov	r0, r3
 800873a:	f7fc fc45 	bl	8004fc8 <delay_ms>
    pin_state = true; // Override. Disable steppers.
 800873e:	2301      	movs	r3, #1
 8008740:	607b      	str	r3, [r7, #4]
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008742:	4b11      	ldr	r3, [pc, #68]	; (8008788 <st_go_idle+0xa8>)
 8008744:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d006      	beq.n	800875e <st_go_idle+0x7e>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	bf0c      	ite	eq
 8008756:	2301      	moveq	r3, #1
 8008758:	2300      	movne	r3, #0
 800875a:	b2db      	uxtb	r3, r3
 800875c:	607b      	str	r3, [r7, #4]
  if (pin_state) 
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <st_go_idle+0x90>
  { 
	  SetStepperDisableBit();
 8008764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008768:	480a      	ldr	r0, [pc, #40]	; (8008794 <st_go_idle+0xb4>)
 800876a:	f7f8 ff6d 	bl	8001648 <GPIO_SetBits>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 800876e:	e004      	b.n	800877a <st_go_idle+0x9a>
	  ResetStepperDisableBit();
 8008770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008774:	4807      	ldr	r0, [pc, #28]	; (8008794 <st_go_idle+0xb4>)
 8008776:	f7f8 ff75 	bl	8001664 <GPIO_ResetBits>
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20000a30 	.word	0x20000a30
 8008788:	20001048 	.word	0x20001048
 800878c:	20000f2c 	.word	0x20000f2c
 8008790:	20000efc 	.word	0x20000efc
 8008794:	40010800 	.word	0x40010800

08008798 <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 800879e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087a2:	8a1b      	ldrh	r3, [r3, #16]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 8194 	beq.w	8008ad8 <TIM2_IRQHandler+0x340>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80087b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087b8:	821a      	strh	r2, [r3, #16]
		TIM2->CNT = 0;
 80087ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087be:	2200      	movs	r2, #0
 80087c0:	849a      	strh	r2, [r3, #36]	; 0x24
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80087c2:	4b87      	ldr	r3, [pc, #540]	; (80089e0 <TIM2_IRQHandler+0x248>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 8187 	bne.w	8008adc <TIM2_IRQHandler+0x344>
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80087ce:	4985      	ldr	r1, [pc, #532]	; (80089e4 <TIM2_IRQHandler+0x24c>)
 80087d0:	4b84      	ldr	r3, [pc, #528]	; (80089e4 <TIM2_IRQHandler+0x24c>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80087d8:	4b83      	ldr	r3, [pc, #524]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80087da:	8a5b      	ldrh	r3, [r3, #18]
 80087dc:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60cb      	str	r3, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80087e4:	4b81      	ldr	r3, [pc, #516]	; (80089ec <TIM2_IRQHandler+0x254>)
 80087e6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80087ea:	821a      	strh	r2, [r3, #16]
        if (st.step_outbits && (1<< X_STEP_BIT) ) {
        	GPIO_ResetBits(COOLANT_MIST_PORT,1 << COOLANT_MIST_BIT); // added by MS for debug
		}
        #endif

      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 80087ec:	4a7d      	ldr	r2, [pc, #500]	; (80089e4 <TIM2_IRQHandler+0x24c>)
 80087ee:	4b7d      	ldr	r3, [pc, #500]	; (80089e4 <TIM2_IRQHandler+0x24c>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f023 0315 	bic.w	r3, r3, #21
 80087f6:	497c      	ldr	r1, [pc, #496]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80087f8:	8a09      	ldrh	r1, [r1, #16]
 80087fa:	430b      	orrs	r3, r1
 80087fc:	60d3      	str	r3, [r2, #12]
#endif
#ifdef WIN32
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
 80087fe:	4a7b      	ldr	r2, [pc, #492]	; (80089ec <TIM2_IRQHandler+0x254>)
 8008800:	4b7a      	ldr	r3, [pc, #488]	; (80089ec <TIM2_IRQHandler+0x254>)
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	b29b      	uxth	r3, r3
 800880c:	8013      	strh	r3, [r2, #0]
#endif
  busy = true;
 800880e:	4b74      	ldr	r3, [pc, #464]	; (80089e0 <TIM2_IRQHandler+0x248>)
 8008810:	2201      	movs	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8008814:	4b74      	ldr	r3, [pc, #464]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	2b00      	cmp	r3, #0
 800881a:	d17d      	bne.n	8008918 <TIM2_IRQHandler+0x180>
    // Anything in the buffer? If so, load and initialize next step segment.
    if (segment_buffer_head != segment_buffer_tail) {
 800881c:	4b74      	ldr	r3, [pc, #464]	; (80089f0 <TIM2_IRQHandler+0x258>)
 800881e:	781a      	ldrb	r2, [r3, #0]
 8008820:	4b74      	ldr	r3, [pc, #464]	; (80089f4 <TIM2_IRQHandler+0x25c>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	429a      	cmp	r2, r3
 8008828:	d068      	beq.n	80088fc <TIM2_IRQHandler+0x164>
      // Initialize new step segment and load number of steps to execute
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800882a:	4b72      	ldr	r3, [pc, #456]	; (80089f4 <TIM2_IRQHandler+0x25c>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	4a71      	ldr	r2, [pc, #452]	; (80089f8 <TIM2_IRQHandler+0x260>)
 8008834:	4413      	add	r3, r2
 8008836:	4a6c      	ldr	r2, [pc, #432]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008838:	6293      	str	r3, [r2, #40]	; 0x28
#else
	  nTimer1Out = st.exec_segment->cycles_per_tick;
#endif
#endif
#ifdef STM32F103C8
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800883a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800883e:	4b6a      	ldr	r3, [pc, #424]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	885b      	ldrh	r3, [r3, #2]
 8008844:	3b01      	subs	r3, #1
 8008846:	b29b      	uxth	r3, r3
 8008848:	8593      	strh	r3, [r2, #44]	; 0x2c
	  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
	  TIM2->PSC = st.exec_segment->prescaler;
#endif
#endif
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800884a:	4b67      	ldr	r3, [pc, #412]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	881a      	ldrh	r2, [r3, #0]
 8008850:	4b65      	ldr	r3, [pc, #404]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008852:	841a      	strh	r2, [r3, #32]
      // If the new segment starts a new planner block, initialize stepper variables and counters.
      // NOTE: When the segment data index changes, this indicates a new planner block.
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8008854:	4b64      	ldr	r3, [pc, #400]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008856:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800885a:	4b63      	ldr	r3, [pc, #396]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	791b      	ldrb	r3, [r3, #4]
 8008860:	429a      	cmp	r2, r3
 8008862:	d01f      	beq.n	80088a4 <TIM2_IRQHandler+0x10c>
        st.exec_block_index = st.exec_segment->st_block_index;
 8008864:	4b60      	ldr	r3, [pc, #384]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	791a      	ldrb	r2, [r3, #4]
 800886a:	4b5f      	ldr	r3, [pc, #380]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800886c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8008870:	4b5d      	ldr	r3, [pc, #372]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008872:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008876:	461a      	mov	r2, r3
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4a5e      	ldr	r2, [pc, #376]	; (80089fc <TIM2_IRQHandler+0x264>)
 8008882:	4413      	add	r3, r2
 8008884:	4a58      	ldr	r2, [pc, #352]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008886:	6253      	str	r3, [r2, #36]	; 0x24
		#elif defined AB_AXIS
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
		#elif defined ABC_AXIS
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = st.counter_c = (st.exec_block->step_event_count >> 1);
		#else
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 8008888:	4b57      	ldr	r3, [pc, #348]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	4a55      	ldr	r2, [pc, #340]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008892:	6093      	str	r3, [r2, #8]
 8008894:	4b54      	ldr	r3, [pc, #336]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	4a53      	ldr	r2, [pc, #332]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800889a:	6053      	str	r3, [r2, #4]
 800889c:	4b52      	ldr	r3, [pc, #328]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	4a51      	ldr	r2, [pc, #324]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088a2:	6013      	str	r3, [r2, #0]
		#endif
// ---
      }
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80088a4:	4b50      	ldr	r3, [pc, #320]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	8a1a      	ldrh	r2, [r3, #16]
 80088aa:	4b55      	ldr	r3, [pc, #340]	; (8008a00 <TIM2_IRQHandler+0x268>)
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	4053      	eors	r3, r2
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	4b4d      	ldr	r3, [pc, #308]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088b4:	825a      	strh	r2, [r3, #18]

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80088b6:	4b4c      	ldr	r3, [pc, #304]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a4a      	ldr	r2, [pc, #296]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088be:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80088c0:	7952      	ldrb	r2, [r2, #5]
 80088c2:	40d3      	lsrs	r3, r2
 80088c4:	4a48      	ldr	r2, [pc, #288]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088c6:	6153      	str	r3, [r2, #20]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80088c8:	4b47      	ldr	r3, [pc, #284]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	4a46      	ldr	r2, [pc, #280]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80088d2:	7952      	ldrb	r2, [r2, #5]
 80088d4:	40d3      	lsrs	r3, r2
 80088d6:	4a44      	ldr	r2, [pc, #272]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088d8:	6193      	str	r3, [r2, #24]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80088da:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4a41      	ldr	r2, [pc, #260]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80088e4:	7952      	ldrb	r2, [r2, #5]
 80088e6:	40d3      	lsrs	r3, r2
 80088e8:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088ea:	61d3      	str	r3, [r2, #28]
// ---
      #endif

      #ifdef VARIABLE_SPINDLE
        // Set real-time spindle output as segment is loaded, just prior to the first step.
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80088ec:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	799b      	ldrb	r3, [r3, #6]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff fd37 	bl	8008368 <spindle_set_speed>
 80088fa:	e00d      	b.n	8008918 <TIM2_IRQHandler+0x180>
      #endif

    } else {
      // Segment buffer empty. Shutdown.
      st_go_idle();
 80088fc:	f7ff fef0 	bl	80086e0 <st_go_idle>
      // Ensure pwm is set properly upon completion of rate-controlled motion.
      #ifdef VARIABLE_SPINDLE
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8008900:	4b39      	ldr	r3, [pc, #228]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	7c9b      	ldrb	r3, [r3, #18]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <TIM2_IRQHandler+0x178>
 800890a:	2000      	movs	r0, #0
 800890c:	f7ff fd2c 	bl	8008368 <spindle_set_speed>
      #endif
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8008910:	2004      	movs	r0, #4
 8008912:	f001 fce9 	bl	800a2e8 <system_set_exec_state_flag>
      return; // Nothing to do but exit.
 8008916:	e0e2      	b.n	8008ade <TIM2_IRQHandler+0x346>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8008918:	4b3a      	ldr	r3, [pc, #232]	; (8008a04 <TIM2_IRQHandler+0x26c>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <TIM2_IRQHandler+0x18e>
 8008922:	f7fd fadf 	bl	8005ee4 <probe_state_monitor>

  // Reset step out bits.
  st.step_outbits = 0;
 8008926:	4b30      	ldr	r3, [pc, #192]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008928:	2200      	movs	r2, #0
 800892a:	821a      	strh	r2, [r3, #16]

  // Execute step displacement profile by Bresenham line algorithm
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
 800892c:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	4b2d      	ldr	r3, [pc, #180]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	4413      	add	r3, r2
 8008936:	4a2c      	ldr	r2, [pc, #176]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008938:	6013      	str	r3, [r2, #0]
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 800893a:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d920      	bls.n	800898a <TIM2_IRQHandler+0x1f2>
    st.step_outbits |= (1<<X_STEP_BIT);
 8008948:	4b27      	ldr	r3, [pc, #156]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800894a:	8a1b      	ldrh	r3, [r3, #16]
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008954:	821a      	strh	r2, [r3, #16]
    st.counter_x -= st.exec_block->step_event_count;
 8008956:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	4a21      	ldr	r2, [pc, #132]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008964:	6013      	str	r3, [r2, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008966:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	8a1b      	ldrh	r3, [r3, #16]
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <TIM2_IRQHandler+0x1e8>
 8008974:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <TIM2_IRQHandler+0x270>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3b01      	subs	r3, #1
 800897a:	4a23      	ldr	r2, [pc, #140]	; (8008a08 <TIM2_IRQHandler+0x270>)
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	e004      	b.n	800898a <TIM2_IRQHandler+0x1f2>
    else { sys_position[X_AXIS]++; }
 8008980:	4b21      	ldr	r3, [pc, #132]	; (8008a08 <TIM2_IRQHandler+0x270>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	4a20      	ldr	r2, [pc, #128]	; (8008a08 <TIM2_IRQHandler+0x270>)
 8008988:	6013      	str	r3, [r2, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 800898a:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	4413      	add	r3, r2
 8008994:	4a14      	ldr	r2, [pc, #80]	; (80089e8 <TIM2_IRQHandler+0x250>)
 8008996:	6053      	str	r3, [r2, #4]
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8008998:	4b13      	ldr	r3, [pc, #76]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <TIM2_IRQHandler+0x250>)
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d937      	bls.n	8008a16 <TIM2_IRQHandler+0x27e>
    st.step_outbits |= (1<<Y_STEP_BIT);
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80089a8:	8a1b      	ldrh	r3, [r3, #16]
 80089aa:	f043 0304 	orr.w	r3, r3, #4
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80089b2:	821a      	strh	r2, [r3, #16]
    st.counter_y -= st.exec_block->step_event_count;
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80089c2:	6053      	str	r3, [r2, #4]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <TIM2_IRQHandler+0x250>)
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	8a1b      	ldrh	r3, [r3, #16]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01c      	beq.n	8008a0c <TIM2_IRQHandler+0x274>
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <TIM2_IRQHandler+0x270>)
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4a0b      	ldr	r2, [pc, #44]	; (8008a08 <TIM2_IRQHandler+0x270>)
 80089da:	6053      	str	r3, [r2, #4]
 80089dc:	e01b      	b.n	8008a16 <TIM2_IRQHandler+0x27e>
 80089de:	bf00      	nop
 80089e0:	20000a30 	.word	0x20000a30
 80089e4:	40010800 	.word	0x40010800
 80089e8:	200009fc 	.word	0x200009fc
 80089ec:	40000400 	.word	0x40000400
 80089f0:	20000a29 	.word	0x20000a29
 80089f4:	20000a28 	.word	0x20000a28
 80089f8:	200009ac 	.word	0x200009ac
 80089fc:	200008f8 	.word	0x200008f8
 8008a00:	20000a2e 	.word	0x20000a2e
 8008a04:	20000f12 	.word	0x20000f12
 8008a08:	20000f20 	.word	0x20000f20
    else { sys_position[Y_AXIS]++; }
 8008a0c:	4b35      	ldr	r3, [pc, #212]	; (8008ae4 <TIM2_IRQHandler+0x34c>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	3301      	adds	r3, #1
 8008a12:	4a34      	ldr	r2, [pc, #208]	; (8008ae4 <TIM2_IRQHandler+0x34c>)
 8008a14:	6053      	str	r3, [r2, #4]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8008a16:	4b34      	ldr	r3, [pc, #208]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	4b33      	ldr	r3, [pc, #204]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	4a31      	ldr	r2, [pc, #196]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a22:	6093      	str	r3, [r2, #8]
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8008a24:	4b30      	ldr	r3, [pc, #192]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	4b2f      	ldr	r3, [pc, #188]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d920      	bls.n	8008a74 <TIM2_IRQHandler+0x2dc>
    st.step_outbits |= (1<<Z_STEP_BIT);
 8008a32:	4b2d      	ldr	r3, [pc, #180]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a34:	8a1b      	ldrh	r3, [r3, #16]
 8008a36:	f043 0310 	orr.w	r3, r3, #16
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	4b2a      	ldr	r3, [pc, #168]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a3e:	821a      	strh	r2, [r3, #16]
    st.counter_z -= st.exec_block->step_event_count;
 8008a40:	4b29      	ldr	r3, [pc, #164]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a4e:	6093      	str	r3, [r2, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008a50:	4b25      	ldr	r3, [pc, #148]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	8a1b      	ldrh	r3, [r3, #16]
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <TIM2_IRQHandler+0x2d2>
 8008a5e:	4b21      	ldr	r3, [pc, #132]	; (8008ae4 <TIM2_IRQHandler+0x34c>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4a1f      	ldr	r2, [pc, #124]	; (8008ae4 <TIM2_IRQHandler+0x34c>)
 8008a66:	6093      	str	r3, [r2, #8]
 8008a68:	e004      	b.n	8008a74 <TIM2_IRQHandler+0x2dc>
    else { sys_position[Z_AXIS]++; }
 8008a6a:	4b1e      	ldr	r3, [pc, #120]	; (8008ae4 <TIM2_IRQHandler+0x34c>)
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	4a1c      	ldr	r2, [pc, #112]	; (8008ae4 <TIM2_IRQHandler+0x34c>)
 8008a72:	6093      	str	r3, [r2, #8]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008a74:	4b1d      	ldr	r3, [pc, #116]	; (8008aec <TIM2_IRQHandler+0x354>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d107      	bne.n	8008a8c <TIM2_IRQHandler+0x2f4>
 8008a7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a7e:	8a1a      	ldrh	r2, [r3, #16]
 8008a80:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <TIM2_IRQHandler+0x354>)
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	4013      	ands	r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	4b17      	ldr	r3, [pc, #92]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a8a:	821a      	strh	r2, [r3, #16]

  st.step_count--; // Decrement step events count
 8008a8c:	4b16      	ldr	r3, [pc, #88]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a8e:	8c1b      	ldrh	r3, [r3, #32]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	4b14      	ldr	r3, [pc, #80]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a96:	841a      	strh	r2, [r3, #32]
  if (st.step_count == 0) {
 8008a98:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008a9a:	8c1b      	ldrh	r3, [r3, #32]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10f      	bne.n	8008ac0 <TIM2_IRQHandler+0x328>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
 8008aa0:	4b11      	ldr	r3, [pc, #68]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	629a      	str	r2, [r3, #40]	; 0x28
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008aa6:	4b12      	ldr	r3, [pc, #72]	; (8008af0 <TIM2_IRQHandler+0x358>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	3301      	adds	r3, #1
 8008aae:	71fb      	strb	r3, [r7, #7]
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	2b0a      	cmp	r3, #10
 8008ab4:	d101      	bne.n	8008aba <TIM2_IRQHandler+0x322>
		segment_tail_next = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	71fb      	strb	r3, [r7, #7]
	segment_buffer_tail = segment_tail_next;
 8008aba:	4a0d      	ldr	r2, [pc, #52]	; (8008af0 <TIM2_IRQHandler+0x358>)
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	7013      	strb	r3, [r2, #0]
		segment_buffer_tail = 0; 
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008ac0:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008ac2:	8a1a      	ldrh	r2, [r3, #16]
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <TIM2_IRQHandler+0x35c>)
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	4053      	eors	r3, r2
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <TIM2_IRQHandler+0x350>)
 8008ace:	821a      	strh	r2, [r3, #16]
  busy = false;
 8008ad0:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <TIM2_IRQHandler+0x360>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e002      	b.n	8008ade <TIM2_IRQHandler+0x346>
		return;
 8008ad8:	bf00      	nop
 8008ada:	e000      	b.n	8008ade <TIM2_IRQHandler+0x346>
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8008adc:	bf00      	nop
}
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20000f20 	.word	0x20000f20
 8008ae8:	200009fc 	.word	0x200009fc
 8008aec:	20000efc 	.word	0x20000efc
 8008af0:	20000a28 	.word	0x20000a28
 8008af4:	20000a2c 	.word	0x20000a2c
 8008af8:	20000a30 	.word	0x20000a30

08008afc <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_bits); // Begin step pulse.
		TIM3->SR = ~TIM_SR_CC1IF; // clear CC1IF flag
	} else
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008b00:	490e      	ldr	r1, [pc, #56]	; (8008b3c <TIM3_IRQHandler+0x40>)
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <TIM3_IRQHandler+0x40>)
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f023 0215 	bic.w	r2, r3, #21
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <TIM3_IRQHandler+0x44>)
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	f003 0315 	and.w	r3, r3, #21
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8008b16:	4a0b      	ldr	r2, [pc, #44]	; (8008b44 <TIM3_IRQHandler+0x48>)
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <TIM3_IRQHandler+0x48>)
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8008b26:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <TIM3_IRQHandler+0x48>)
 8008b28:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008b2c:	821a      	strh	r2, [r3, #16]
		TIM3->CNT = 0;
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <TIM3_IRQHandler+0x48>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	849a      	strh	r2, [r3, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 8008b34:	bf00      	nop
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bc80      	pop	{r7}
 8008b3a:	4770      	bx	lr
 8008b3c:	40010800 	.word	0x40010800
 8008b40:	20000a2c 	.word	0x20000a2c
 8008b44:	40000400 	.word	0x40000400

08008b48 <st_generate_step_dir_invert_masks>:



// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
  uint8_t idx;
  step_port_invert_mask = 0;
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <st_generate_step_dir_invert_masks+0x80>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	801a      	strh	r2, [r3, #0]
  dir_port_invert_mask = 0;
 8008b54:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <st_generate_step_dir_invert_masks+0x84>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	801a      	strh	r2, [r3, #0]
  for (idx=0; idx<N_AXIS; idx++) {
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	71fb      	strb	r3, [r7, #7]
 8008b5e:	e02a      	b.n	8008bb6 <st_generate_step_dir_invert_masks+0x6e>
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008b60:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <st_generate_step_dir_invert_masks+0x88>)
 8008b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b64:	461a      	mov	r2, r3
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	fa42 f303 	asr.w	r3, r2, r3
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <st_generate_step_dir_invert_masks+0x40>
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	4a17      	ldr	r2, [pc, #92]	; (8008bd4 <st_generate_step_dir_invert_masks+0x8c>)
 8008b78:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <st_generate_step_dir_invert_masks+0x80>)
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <st_generate_step_dir_invert_masks+0x80>)
 8008b86:	801a      	strh	r2, [r3, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <st_generate_step_dir_invert_masks+0x88>)
 8008b8a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	79fb      	ldrb	r3, [r7, #7]
 8008b90:	fa42 f303 	asr.w	r3, r2, r3
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d009      	beq.n	8008bb0 <st_generate_step_dir_invert_masks+0x68>
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	4a0e      	ldr	r2, [pc, #56]	; (8008bd8 <st_generate_step_dir_invert_masks+0x90>)
 8008ba0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008ba4:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <st_generate_step_dir_invert_masks+0x84>)
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <st_generate_step_dir_invert_masks+0x84>)
 8008bae:	801a      	strh	r2, [r3, #0]
  for (idx=0; idx<N_AXIS; idx++) {
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	71fb      	strb	r3, [r7, #7]
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d9d1      	bls.n	8008b60 <st_generate_step_dir_invert_masks+0x18>
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000a2c 	.word	0x20000a2c
 8008bcc:	20000a2e 	.word	0x20000a2e
 8008bd0:	20001048 	.word	0x20001048
 8008bd4:	0800b9a8 	.word	0x0800b9a8
 8008bd8:	0800b9b0 	.word	0x0800b9b0

08008bdc <st_reset>:


// Reset and clear stepper subsystem variables
void st_reset()
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  // Initialize stepper driver idle state.
  st_go_idle();
 8008be0:	f7ff fd7e 	bl	80086e0 <st_go_idle>
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 8008be4:	2238      	movs	r2, #56	; 0x38
 8008be6:	2100      	movs	r1, #0
 8008be8:	4821      	ldr	r0, [pc, #132]	; (8008c70 <st_reset+0x94>)
 8008bea:	f001 fd04 	bl	800a5f6 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8008bee:	222c      	movs	r2, #44	; 0x2c
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4820      	ldr	r0, [pc, #128]	; (8008c74 <st_reset+0x98>)
 8008bf4:	f001 fcff 	bl	800a5f6 <memset>
  st.exec_segment = NULL;
 8008bf8:	4b1e      	ldr	r3, [pc, #120]	; (8008c74 <st_reset+0x98>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	629a      	str	r2, [r3, #40]	; 0x28
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8008bfe:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <st_reset+0x9c>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
  segment_buffer_tail = 0;
 8008c04:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <st_reset+0xa0>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
  segment_buffer_head = 0; // empty = tail
 8008c0a:	4b1d      	ldr	r3, [pc, #116]	; (8008c80 <st_reset+0xa4>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
  segment_next_head = 1;
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <st_reset+0xa8>)
 8008c12:	2201      	movs	r2, #1
 8008c14:	701a      	strb	r2, [r3, #0]
  busy = false;
 8008c16:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <st_reset+0xac>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	701a      	strb	r2, [r3, #0]

  st_generate_step_dir_invert_masks();
 8008c1c:	f7ff ff94 	bl	8008b48 <st_generate_step_dir_invert_masks>
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8008c20:	4b1a      	ldr	r3, [pc, #104]	; (8008c8c <st_reset+0xb0>)
 8008c22:	881a      	ldrh	r2, [r3, #0]
 8008c24:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <st_reset+0x98>)
 8008c26:	825a      	strh	r2, [r3, #18]
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8008c28:	bf00      	nop
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <st_reset+0xb4>)
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1f8      	bne.n	8008c2a <st_reset+0x4e>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <st_reset+0xb4>)
 8008c3a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008c3e:	821a      	strh	r2, [r3, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008c40:	4914      	ldr	r1, [pc, #80]	; (8008c94 <st_reset+0xb8>)
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <st_reset+0xb8>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f023 0215 	bic.w	r2, r3, #21
 8008c4a:	4b13      	ldr	r3, [pc, #76]	; (8008c98 <st_reset+0xbc>)
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	f003 0315 	and.w	r3, r3, #21
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60cb      	str	r3, [r1, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8008c56:	490f      	ldr	r1, [pc, #60]	; (8008c94 <st_reset+0xb8>)
 8008c58:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <st_reset+0xb8>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8008c60:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <st_reset+0xb0>)
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60cb      	str	r3, [r1, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008c6c:	bf00      	nop
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000a3c 	.word	0x20000a3c
 8008c74:	200009fc 	.word	0x200009fc
 8008c78:	20000a34 	.word	0x20000a34
 8008c7c:	20000a28 	.word	0x20000a28
 8008c80:	20000a29 	.word	0x20000a29
 8008c84:	20000a2a 	.word	0x20000a2a
 8008c88:	20000a30 	.word	0x20000a30
 8008c8c:	20000a2e 	.word	0x20000a2e
 8008c90:	40000400 	.word	0x40000400
 8008c94:	40010800 	.word	0x40010800
 8008c98:	20000a2c 	.word	0x20000a2c

08008c9c <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	2004      	movs	r0, #4
 8008ca6:	f7f8 fe65 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008caa:	2303      	movs	r3, #3
 8008cac:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8008cae:	2310      	movs	r3, #16
 8008cb0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb6:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4837      	ldr	r0, [pc, #220]	; (8008d9c <stepper_init+0x100>)
 8008cbe:	f7f8 fbef 	bl	80014a0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	2004      	movs	r0, #4
 8008cc6:	f7f8 fe55 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 8008cca:	2315      	movs	r3, #21
 8008ccc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8008cce:	1d3b      	adds	r3, r7, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4832      	ldr	r0, [pc, #200]	; (8008d9c <stepper_init+0x100>)
 8008cd4:	f7f8 fbe4 	bl	80014a0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 8008cd8:	2101      	movs	r1, #1
 8008cda:	2004      	movs	r0, #4
 8008cdc:	f7f8 fe4a 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008ce0:	232a      	movs	r3, #42	; 0x2a
 8008ce2:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008ce4:	1d3b      	adds	r3, r7, #4
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	482c      	ldr	r0, [pc, #176]	; (8008d9c <stepper_init+0x100>)
 8008cea:	f7f8 fbd9 	bl	80014a0 <GPIO_Init>

	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008cee:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <stepper_init+0x104>)
 8008cf0:	4b2b      	ldr	r3, [pc, #172]	; (8008da0 <stepper_init+0x104>)
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f043 0301 	orr.w	r3, r3, #1
 8008cf8:	61d3      	str	r3, [r2, #28]
	TIM_Configuration(TIM2, 1, 1, 1);
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	2101      	movs	r1, #1
 8008d00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008d04:	f000 fe98 	bl	8009a38 <TIM_Configuration>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008d08:	4a25      	ldr	r2, [pc, #148]	; (8008da0 <stepper_init+0x104>)
 8008d0a:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <stepper_init+0x104>)
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	f043 0302 	orr.w	r3, r3, #2
 8008d12:	61d3      	str	r3, [r2, #28]
	TIM_Configuration(TIM3, 1, 1, 1);
 8008d14:	2301      	movs	r3, #1
 8008d16:	2201      	movs	r2, #1
 8008d18:	2101      	movs	r1, #1
 8008d1a:	4822      	ldr	r0, [pc, #136]	; (8008da4 <stepper_init+0x108>)
 8008d1c:	f000 fe8c 	bl	8009a38 <TIM_Configuration>

	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008d20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	8013      	strh	r3, [r2, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d3c:	8a1b      	ldrh	r3, [r3, #16]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8213      	strh	r3, [r2, #16]
	TIM2->CNT = 0;
 8008d48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	849a      	strh	r2, [r3, #36]	; 0x24

	TIM3->CR1 &= ~TIM_CR1_CEN;
 8008d50:	4a14      	ldr	r2, [pc, #80]	; (8008da4 <stepper_init+0x108>)
 8008d52:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <stepper_init+0x108>)
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f023 0301 	bic.w	r3, r3, #1
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	8013      	strh	r3, [r2, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008d60:	4a10      	ldr	r2, [pc, #64]	; (8008da4 <stepper_init+0x108>)
 8008d62:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <stepper_init+0x108>)
 8008d64:	8a1b      	ldrh	r3, [r3, #16]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	8213      	strh	r3, [r2, #16]
	TIM3->CNT = 0;
 8008d70:	4b0c      	ldr	r3, [pc, #48]	; (8008da4 <stepper_init+0x108>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	849a      	strh	r2, [r3, #36]	; 0x24
	//
#ifdef STEP_PULSE_DELAY
	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
#endif

	NVIC_SetPriority(TIM3_IRQn, 0);
 8008d76:	2100      	movs	r1, #0
 8008d78:	201d      	movs	r0, #29
 8008d7a:	f7ff fc2d 	bl	80085d8 <NVIC_SetPriority>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8008d7e:	2101      	movs	r1, #1
 8008d80:	201c      	movs	r0, #28
 8008d82:	f7ff fc29 	bl	80085d8 <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8008d86:	201d      	movs	r0, #29
 8008d88:	f7ff fc0e 	bl	80085a8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 8008d8c:	201c      	movs	r0, #28
 8008d8e:	f7ff fc0b 	bl	80085a8 <NVIC_EnableIRQ>
	QueryPerformanceFrequency(&Win32Frequency);

	_beginthread(Timer1Thread, 0, NULL);
	_beginthread(Timer0Thread, 0, NULL);
#endif
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	40010800 	.word	0x40010800
 8008da0:	40021000 	.word	0x40021000
 8008da4:	40000400 	.word	0x40000400

08008da8 <st_update_plan_block_parameters>:


// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters()
{
 8008da8:	b598      	push	{r3, r4, r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8008dac:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <st_update_plan_block_parameters+0x3c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d015      	beq.n	8008de0 <st_update_plan_block_parameters+0x38>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008db4:	4b0c      	ldr	r3, [pc, #48]	; (8008de8 <st_update_plan_block_parameters+0x40>)
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <st_update_plan_block_parameters+0x40>)
 8008dc0:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <st_update_plan_block_parameters+0x3c>)
 8008dc4:	681c      	ldr	r4, [r3, #0]
 8008dc6:	4b08      	ldr	r3, [pc, #32]	; (8008de8 <st_update_plan_block_parameters+0x40>)
 8008dc8:	69da      	ldr	r2, [r3, #28]
 8008dca:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <st_update_plan_block_parameters+0x40>)
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7f7 ff6d 	bl	8000cb0 <__aeabi_fmul>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6163      	str	r3, [r4, #20]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008dda:	4b02      	ldr	r3, [pc, #8]	; (8008de4 <st_update_plan_block_parameters+0x3c>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
  }
}
 8008de0:	bf00      	nop
 8008de2:	bd98      	pop	{r3, r4, r7, pc}
 8008de4:	20000a34 	.word	0x20000a34
 8008de8:	20000a3c 	.word	0x20000a3c

08008dec <st_next_block_index>:


// Increments the step segment buffer block data ring buffer.
static uint8_t st_next_block_index(uint8_t block_index)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	71fb      	strb	r3, [r7, #7]
  block_index++;
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	71fb      	strb	r3, [r7, #7]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b09      	cmp	r3, #9
 8008e00:	d101      	bne.n	8008e06 <st_next_block_index+0x1a>
 8008e02:	2300      	movs	r3, #0
 8008e04:	e000      	b.n	8008e08 <st_next_block_index+0x1c>
  return(block_index);
 8008e06:	79fb      	ldrb	r3, [r7, #7]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
	...

08008e14 <st_prep_buffer>:
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer()
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b097      	sub	sp, #92	; 0x5c
 8008e18:	af00      	add	r7, sp, #0
  // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008e1a:	4b9a      	ldr	r3, [pc, #616]	; (8009084 <st_prep_buffer+0x270>)
 8008e1c:	791b      	ldrb	r3, [r3, #4]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 85e6 	bne.w	80099f4 <st_prep_buffer+0xbe0>

  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008e28:	f000 bddb 	b.w	80099e2 <st_prep_buffer+0xbce>

    // Determine if we need to load a new planner block or if the block needs to be recomputed.
    if (pl_block == NULL) {
 8008e2c:	4b96      	ldr	r3, [pc, #600]	; (8009088 <st_prep_buffer+0x274>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f040 826e 	bne.w	8009312 <st_prep_buffer+0x4fe>

      // Query planner for a queued block
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8008e36:	4b93      	ldr	r3, [pc, #588]	; (8009084 <st_prep_buffer+0x270>)
 8008e38:	791b      	ldrb	r3, [r3, #4]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <st_prep_buffer+0x3a>
 8008e42:	f7fc fb21 	bl	8005488 <plan_get_system_motion_block>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b8f      	ldr	r3, [pc, #572]	; (8009088 <st_prep_buffer+0x274>)
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e004      	b.n	8008e58 <st_prep_buffer+0x44>
      else { pl_block = plan_get_current_block(); }
 8008e4e:	f7fc fb2d 	bl	80054ac <plan_get_current_block>
 8008e52:	4602      	mov	r2, r0
 8008e54:	4b8c      	ldr	r3, [pc, #560]	; (8009088 <st_prep_buffer+0x274>)
 8008e56:	601a      	str	r2, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8008e58:	4b8b      	ldr	r3, [pc, #556]	; (8009088 <st_prep_buffer+0x274>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 85cb 	beq.w	80099f8 <st_prep_buffer+0xbe4>

      // Check if we need to only recompute the velocity profile or load a new block.
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8008e62:	4b8a      	ldr	r3, [pc, #552]	; (800908c <st_prep_buffer+0x278>)
 8008e64:	785b      	ldrb	r3, [r3, #1]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <st_prep_buffer+0x62>

        #ifdef PARKING_ENABLE
          if (prep.recalculate_flag & PREP_FLAG_PARKING) { prep.recalculate_flag &= ~(PREP_FLAG_RECALCULATE); }
          else { prep.recalculate_flag = false; }
        #else
          prep.recalculate_flag = false;
 8008e6e:	4b87      	ldr	r3, [pc, #540]	; (800908c <st_prep_buffer+0x278>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	705a      	strb	r2, [r3, #1]
 8008e74:	e0ad      	b.n	8008fd2 <st_prep_buffer+0x1be>
        #endif

      } else {

        // Load the Bresenham stepping data for the block.
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8008e76:	4b85      	ldr	r3, [pc, #532]	; (800908c <st_prep_buffer+0x278>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff ffb6 	bl	8008dec <st_next_block_index>
 8008e80:	4603      	mov	r3, r0
 8008e82:	461a      	mov	r2, r3
 8008e84:	4b81      	ldr	r3, [pc, #516]	; (800908c <st_prep_buffer+0x278>)
 8008e86:	701a      	strb	r2, [r3, #0]

        // Prepare and copy Bresenham algorithm segment data from the new planner block, so that
        // when the segment buffer completes the planner block, it may be discarded when the
        // segment buffer finishes the prepped block, but the stepper ISR is still executing it.
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008e88:	4b80      	ldr	r3, [pc, #512]	; (800908c <st_prep_buffer+0x278>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4a7e      	ldr	r2, [pc, #504]	; (8009090 <st_prep_buffer+0x27c>)
 8008e98:	4413      	add	r3, r2
 8008e9a:	4a7e      	ldr	r2, [pc, #504]	; (8009094 <st_prep_buffer+0x280>)
 8008e9c:	6013      	str	r3, [r2, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008e9e:	4b7d      	ldr	r3, [pc, #500]	; (8009094 <st_prep_buffer+0x280>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a79      	ldr	r2, [pc, #484]	; (8009088 <st_prep_buffer+0x274>)
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	8a12      	ldrh	r2, [r2, #16]
 8008ea8:	821a      	strh	r2, [r3, #16]
          // With AMASS enabled, simply bit-shift multiply all Bresenham data by the max AMASS
          // level, such that we never divide beyond the original data anywhere in the algorithm.
          // If the original data is divided, we can lose a step from integer roundoff.
          //for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; } // changed by mstrens with next one
          //st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL; // changed by mstrens with next one
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << (MAX_AMASS_LEVEL+1); }
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008eb0:	e011      	b.n	8008ed6 <st_prep_buffer+0xc2>
 8008eb2:	4b78      	ldr	r3, [pc, #480]	; (8009094 <st_prep_buffer+0x280>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008eba:	4973      	ldr	r1, [pc, #460]	; (8009088 <st_prep_buffer+0x274>)
 8008ebc:	6809      	ldr	r1, [r1, #0]
 8008ebe:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8008ec2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008ec6:	0209      	lsls	r1, r1, #8
 8008ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d9e9      	bls.n	8008eb2 <st_prep_buffer+0x9e>
          st_prep_block->step_event_count = pl_block->step_event_count << (MAX_AMASS_LEVEL+1);
 8008ede:	4b6d      	ldr	r3, [pc, #436]	; (8009094 <st_prep_buffer+0x280>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a69      	ldr	r2, [pc, #420]	; (8009088 <st_prep_buffer+0x274>)
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	68d2      	ldr	r2, [r2, #12]
 8008ee8:	0212      	lsls	r2, r2, #8
 8008eea:	60da      	str	r2, [r3, #12]
        #endif

        // Initialize segment buffer data for generating the segments.
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008eec:	4b66      	ldr	r3, [pc, #408]	; (8009088 <st_prep_buffer+0x274>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f7 fe84 	bl	8000c00 <__aeabi_ui2f>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	4b64      	ldr	r3, [pc, #400]	; (800908c <st_prep_buffer+0x278>)
 8008efc:	609a      	str	r2, [r3, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008efe:	4b63      	ldr	r3, [pc, #396]	; (800908c <st_prep_buffer+0x278>)
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	4b61      	ldr	r3, [pc, #388]	; (8009088 <st_prep_buffer+0x274>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7f7 ff84 	bl	8000e18 <__aeabi_fdiv>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	4b5d      	ldr	r3, [pc, #372]	; (800908c <st_prep_buffer+0x278>)
 8008f16:	60da      	str	r2, [r3, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008f18:	4b5c      	ldr	r3, [pc, #368]	; (800908c <st_prep_buffer+0x278>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	485e      	ldr	r0, [pc, #376]	; (8009098 <st_prep_buffer+0x284>)
 8008f20:	f7f7 ff7a 	bl	8000e18 <__aeabi_fdiv>
 8008f24:	4603      	mov	r3, r0
 8008f26:	461a      	mov	r2, r3
 8008f28:	4b58      	ldr	r3, [pc, #352]	; (800908c <st_prep_buffer+0x278>)
 8008f2a:	611a      	str	r2, [r3, #16]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008f2c:	4b57      	ldr	r3, [pc, #348]	; (800908c <st_prep_buffer+0x278>)
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	605a      	str	r2, [r3, #4]

        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008f34:	4b53      	ldr	r3, [pc, #332]	; (8009084 <st_prep_buffer+0x270>)
 8008f36:	791b      	ldrb	r3, [r3, #4]
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d105      	bne.n	8008f4c <st_prep_buffer+0x138>
 8008f40:	4b52      	ldr	r3, [pc, #328]	; (800908c <st_prep_buffer+0x278>)
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	f003 0308 	and.w	r3, r3, #8
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <st_prep_buffer+0x168>
          // New block loaded mid-hold. Override planner block entry speed to enforce deceleration.
          prep.current_speed = prep.exit_speed;
 8008f4c:	4b4f      	ldr	r3, [pc, #316]	; (800908c <st_prep_buffer+0x278>)
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	4a4e      	ldr	r2, [pc, #312]	; (800908c <st_prep_buffer+0x278>)
 8008f52:	61d3      	str	r3, [r2, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8008f54:	4b4c      	ldr	r3, [pc, #304]	; (8009088 <st_prep_buffer+0x274>)
 8008f56:	681c      	ldr	r4, [r3, #0]
 8008f58:	4b4c      	ldr	r3, [pc, #304]	; (800908c <st_prep_buffer+0x278>)
 8008f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f5c:	4b4b      	ldr	r3, [pc, #300]	; (800908c <st_prep_buffer+0x278>)
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7f7 fea4 	bl	8000cb0 <__aeabi_fmul>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	6163      	str	r3, [r4, #20]
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8008f6c:	4b47      	ldr	r3, [pc, #284]	; (800908c <st_prep_buffer+0x278>)
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	f023 0308 	bic.w	r3, r3, #8
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4b45      	ldr	r3, [pc, #276]	; (800908c <st_prep_buffer+0x278>)
 8008f78:	705a      	strb	r2, [r3, #1]
 8008f7a:	e008      	b.n	8008f8e <st_prep_buffer+0x17a>
        } else {
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8008f7c:	4b42      	ldr	r3, [pc, #264]	; (8009088 <st_prep_buffer+0x274>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 fc6a 	bl	800a85c <sqrtf>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	4b40      	ldr	r3, [pc, #256]	; (800908c <st_prep_buffer+0x278>)
 8008f8c:	61da      	str	r2, [r3, #28]
        }
#ifdef VARIABLE_SPINDLE
        // Setup laser mode variables. PWM rate adjusted motions will always complete a motion with the
        // spindle off. 
        st_prep_block->is_pwm_rate_adjusted = false;
 8008f8e:	4b41      	ldr	r3, [pc, #260]	; (8009094 <st_prep_buffer+0x280>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2200      	movs	r2, #0
 8008f94:	749a      	strb	r2, [r3, #18]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8008f96:	4b41      	ldr	r3, [pc, #260]	; (800909c <st_prep_buffer+0x288>)
 8008f98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d016      	beq.n	8008fd2 <st_prep_buffer+0x1be>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8008fa4:	4b38      	ldr	r3, [pc, #224]	; (8009088 <st_prep_buffer+0x274>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	7c9b      	ldrb	r3, [r3, #18]
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00f      	beq.n	8008fd2 <st_prep_buffer+0x1be>
            // Pre-compute inverse programmed rate to speed up PWM updating per step segment.
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8008fb2:	4b35      	ldr	r3, [pc, #212]	; (8009088 <st_prep_buffer+0x274>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	4619      	mov	r1, r3
 8008fba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008fbe:	f7f7 ff2b 	bl	8000e18 <__aeabi_fdiv>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4b31      	ldr	r3, [pc, #196]	; (800908c <st_prep_buffer+0x278>)
 8008fc8:	631a      	str	r2, [r3, #48]	; 0x30
            st_prep_block->is_pwm_rate_adjusted = true;
 8008fca:	4b32      	ldr	r3, [pc, #200]	; (8009094 <st_prep_buffer+0x280>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	749a      	strb	r2, [r3, #18]
			 Compute the velocity profile of a new planner block based on its entry and exit
			 speeds, or recompute the profile of a partially-completed planner block if the
			 planner has updated it. For a commanded forced-deceleration, such as from a feed
			 hold, override the planner velocities and decelerate to the target exit speed.
			*/
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8008fd2:	4b2e      	ldr	r3, [pc, #184]	; (800908c <st_prep_buffer+0x278>)
 8008fd4:	f04f 0200 	mov.w	r2, #0
 8008fd8:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8008fda:	4b2b      	ldr	r3, [pc, #172]	; (8009088 <st_prep_buffer+0x274>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8008fe6:	f7f7 ff17 	bl	8000e18 <__aeabi_fdiv>
 8008fea:	4603      	mov	r3, r0
 8008fec:	617b      	str	r3, [r7, #20]
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8008fee:	4b25      	ldr	r3, [pc, #148]	; (8009084 <st_prep_buffer+0x270>)
 8008ff0:	791b      	ldrb	r3, [r3, #4]
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d052      	beq.n	80090a0 <st_prep_buffer+0x28c>
				// Compute velocity profile parameters for a feed hold in-progress. This profile overrides
				// the planner block profile, enforcing a deceleration to zero speed.
				prep.ramp_type = RAMP_DECEL;
 8008ffa:	4b24      	ldr	r3, [pc, #144]	; (800908c <st_prep_buffer+0x278>)
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	751a      	strb	r2, [r3, #20]
				// Compute decelerate distance relative to end of block.
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8009000:	4b21      	ldr	r3, [pc, #132]	; (8009088 <st_prep_buffer+0x274>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6a1c      	ldr	r4, [r3, #32]
 8009006:	4b20      	ldr	r3, [pc, #128]	; (8009088 <st_prep_buffer+0x274>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	6979      	ldr	r1, [r7, #20]
 800900e:	4618      	mov	r0, r3
 8009010:	f7f7 fe4e 	bl	8000cb0 <__aeabi_fmul>
 8009014:	4603      	mov	r3, r0
 8009016:	4619      	mov	r1, r3
 8009018:	4620      	mov	r0, r4
 800901a:	f7f7 fd3f 	bl	8000a9c <__aeabi_fsub>
 800901e:	4603      	mov	r3, r0
 8009020:	613b      	str	r3, [r7, #16]
				if (decel_dist < 0.0f) {
 8009022:	f04f 0100 	mov.w	r1, #0
 8009026:	6938      	ldr	r0, [r7, #16]
 8009028:	f7f7 ffe0 	bl	8000fec <__aeabi_fcmplt>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01f      	beq.n	8009072 <st_prep_buffer+0x25e>
					// Deceleration through entire planner block. End of feed hold is not in this block.
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8009032:	4b15      	ldr	r3, [pc, #84]	; (8009088 <st_prep_buffer+0x274>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	695c      	ldr	r4, [r3, #20]
 8009038:	4b13      	ldr	r3, [pc, #76]	; (8009088 <st_prep_buffer+0x274>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	4619      	mov	r1, r3
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 fd2d 	bl	8000aa0 <__addsf3>
 8009046:	4603      	mov	r3, r0
 8009048:	461a      	mov	r2, r3
 800904a:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <st_prep_buffer+0x274>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f7f7 fe2c 	bl	8000cb0 <__aeabi_fmul>
 8009058:	4603      	mov	r3, r0
 800905a:	4619      	mov	r1, r3
 800905c:	4620      	mov	r0, r4
 800905e:	f7f7 fd1d 	bl	8000a9c <__aeabi_fsub>
 8009062:	4603      	mov	r3, r0
 8009064:	4618      	mov	r0, r3
 8009066:	f001 fbf9 	bl	800a85c <sqrtf>
 800906a:	4602      	mov	r2, r0
 800906c:	4b07      	ldr	r3, [pc, #28]	; (800908c <st_prep_buffer+0x278>)
 800906e:	625a      	str	r2, [r3, #36]	; 0x24
 8009070:	e148      	b.n	8009304 <st_prep_buffer+0x4f0>
				} else {
					prep.mm_complete = decel_dist; // End of feed hold.
 8009072:	4a06      	ldr	r2, [pc, #24]	; (800908c <st_prep_buffer+0x278>)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6193      	str	r3, [r2, #24]
					prep.exit_speed = 0.0f;
 8009078:	4b04      	ldr	r3, [pc, #16]	; (800908c <st_prep_buffer+0x278>)
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	625a      	str	r2, [r3, #36]	; 0x24
 8009080:	e140      	b.n	8009304 <st_prep_buffer+0x4f0>
 8009082:	bf00      	nop
 8009084:	20000efc 	.word	0x20000efc
 8009088:	20000a34 	.word	0x20000a34
 800908c:	20000a3c 	.word	0x20000a3c
 8009090:	200008f8 	.word	0x200008f8
 8009094:	20000a38 	.word	0x20000a38
 8009098:	3fa00000 	.word	0x3fa00000
 800909c:	20001048 	.word	0x20001048
				}
			} else { // [Normal Operation]
				// Compute or recompute velocity profile parameters of the prepped planner block.
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 80090a0:	4b91      	ldr	r3, [pc, #580]	; (80092e8 <st_prep_buffer+0x4d4>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	751a      	strb	r2, [r3, #20]
				prep.accelerate_until = pl_block->millimeters;
 80090a6:	4b91      	ldr	r3, [pc, #580]	; (80092ec <st_prep_buffer+0x4d8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	4a8e      	ldr	r2, [pc, #568]	; (80092e8 <st_prep_buffer+0x4d4>)
 80090ae:	6293      	str	r3, [r2, #40]	; 0x28

				float exit_speed_sqr;
				float nominal_speed;
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80090b0:	4b8f      	ldr	r3, [pc, #572]	; (80092f0 <st_prep_buffer+0x4dc>)
 80090b2:	791b      	ldrb	r3, [r3, #4]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <st_prep_buffer+0x2b6>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	653b      	str	r3, [r7, #80]	; 0x50
 80090c2:	4a89      	ldr	r2, [pc, #548]	; (80092e8 <st_prep_buffer+0x4d4>)
 80090c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c6:	6253      	str	r3, [r2, #36]	; 0x24
 80090c8:	e008      	b.n	80090dc <st_prep_buffer+0x2c8>
        } else {
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 80090ca:	f7fc fa0b 	bl	80054e4 <plan_get_exec_block_exit_speed_sqr>
 80090ce:	6538      	str	r0, [r7, #80]	; 0x50
          prep.exit_speed = sqrtf(exit_speed_sqr);
 80090d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80090d2:	f001 fbc3 	bl	800a85c <sqrtf>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b83      	ldr	r3, [pc, #524]	; (80092e8 <st_prep_buffer+0x4d4>)
 80090da:	625a      	str	r2, [r3, #36]	; 0x24
        }

        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 80090dc:	4b83      	ldr	r3, [pc, #524]	; (80092ec <st_prep_buffer+0x4d8>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fc fa37 	bl	8005554 <plan_compute_profile_nominal_speed>
 80090e6:	60f8      	str	r0, [r7, #12]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 80090e8:	68f9      	ldr	r1, [r7, #12]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7f7 fde0 	bl	8000cb0 <__aeabi_fmul>
 80090f0:	4603      	mov	r3, r0
 80090f2:	60bb      	str	r3, [r7, #8]
				float intersect_distance =
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80090f4:	4b7d      	ldr	r3, [pc, #500]	; (80092ec <st_prep_buffer+0x4d8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6a1c      	ldr	r4, [r3, #32]
 80090fa:	4b7c      	ldr	r3, [pc, #496]	; (80092ec <st_prep_buffer+0x4d8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009102:	4618      	mov	r0, r3
 8009104:	f7f7 fcca 	bl	8000a9c <__aeabi_fsub>
 8009108:	4603      	mov	r3, r0
 800910a:	6979      	ldr	r1, [r7, #20]
 800910c:	4618      	mov	r0, r3
 800910e:	f7f7 fdcf 	bl	8000cb0 <__aeabi_fmul>
 8009112:	4603      	mov	r3, r0
 8009114:	4619      	mov	r1, r3
 8009116:	4620      	mov	r0, r4
 8009118:	f7f7 fcc2 	bl	8000aa0 <__addsf3>
 800911c:	4603      	mov	r3, r0
				float intersect_distance =
 800911e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009122:	4618      	mov	r0, r3
 8009124:	f7f7 fdc4 	bl	8000cb0 <__aeabi_fmul>
 8009128:	4603      	mov	r3, r0
 800912a:	607b      	str	r3, [r7, #4]

        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800912c:	4b6f      	ldr	r3, [pc, #444]	; (80092ec <st_prep_buffer+0x4d8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	4618      	mov	r0, r3
 8009136:	f7f7 ff77 	bl	8001028 <__aeabi_fcmpgt>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d05f      	beq.n	8009200 <st_prep_buffer+0x3ec>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 8009140:	4b6a      	ldr	r3, [pc, #424]	; (80092ec <st_prep_buffer+0x4d8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6a1c      	ldr	r4, [r3, #32]
 8009146:	4b69      	ldr	r3, [pc, #420]	; (80092ec <st_prep_buffer+0x4d8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 fca4 	bl	8000a9c <__aeabi_fsub>
 8009154:	4603      	mov	r3, r0
 8009156:	6979      	ldr	r1, [r7, #20]
 8009158:	4618      	mov	r0, r3
 800915a:	f7f7 fda9 	bl	8000cb0 <__aeabi_fmul>
 800915e:	4603      	mov	r3, r0
 8009160:	4619      	mov	r1, r3
 8009162:	4620      	mov	r0, r4
 8009164:	f7f7 fc9a 	bl	8000a9c <__aeabi_fsub>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	4b5e      	ldr	r3, [pc, #376]	; (80092e8 <st_prep_buffer+0x4d4>)
 800916e:	629a      	str	r2, [r3, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 8009170:	4b5d      	ldr	r3, [pc, #372]	; (80092e8 <st_prep_buffer+0x4d4>)
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	f04f 0100 	mov.w	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f7f7 ff41 	bl	8001000 <__aeabi_fcmple>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d029      	beq.n	80091d8 <st_prep_buffer+0x3c4>
            prep.ramp_type = RAMP_DECEL;
 8009184:	4b58      	ldr	r3, [pc, #352]	; (80092e8 <st_prep_buffer+0x4d4>)
 8009186:	2202      	movs	r2, #2
 8009188:	751a      	strb	r2, [r3, #20]
            // prep.decelerate_after = pl_block->millimeters;
            // prep.maximum_speed = prep.current_speed;

            // Compute override block exit speed since it doesn't match the planner exit speed.
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800918a:	4b58      	ldr	r3, [pc, #352]	; (80092ec <st_prep_buffer+0x4d8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695c      	ldr	r4, [r3, #20]
 8009190:	4b56      	ldr	r3, [pc, #344]	; (80092ec <st_prep_buffer+0x4d8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4619      	mov	r1, r3
 8009198:	4618      	mov	r0, r3
 800919a:	f7f7 fc81 	bl	8000aa0 <__addsf3>
 800919e:	4603      	mov	r3, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	4b52      	ldr	r3, [pc, #328]	; (80092ec <st_prep_buffer+0x4d8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a1b      	ldr	r3, [r3, #32]
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f7f7 fd80 	bl	8000cb0 <__aeabi_fmul>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4619      	mov	r1, r3
 80091b4:	4620      	mov	r0, r4
 80091b6:	f7f7 fc71 	bl	8000a9c <__aeabi_fsub>
 80091ba:	4603      	mov	r3, r0
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 fb4d 	bl	800a85c <sqrtf>
 80091c2:	4602      	mov	r2, r0
 80091c4:	4b48      	ldr	r3, [pc, #288]	; (80092e8 <st_prep_buffer+0x4d4>)
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 80091c8:	4b47      	ldr	r3, [pc, #284]	; (80092e8 <st_prep_buffer+0x4d4>)
 80091ca:	785b      	ldrb	r3, [r3, #1]
 80091cc:	f043 0308 	orr.w	r3, r3, #8
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	4b45      	ldr	r3, [pc, #276]	; (80092e8 <st_prep_buffer+0x4d4>)
 80091d4:	705a      	strb	r2, [r3, #1]
 80091d6:	e095      	b.n	8009304 <st_prep_buffer+0x4f0>
            // Can be tricky since entry speed will be current speed, as in feed holds.
            // Also, look into near-zero speed handling issues with this.

          } else {
            // Decelerate to cruise or cruise-decelerate types. Guaranteed to intersect updated plan.
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 80091d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091da:	68b8      	ldr	r0, [r7, #8]
 80091dc:	f7f7 fc5e 	bl	8000a9c <__aeabi_fsub>
 80091e0:	4603      	mov	r3, r0
 80091e2:	6979      	ldr	r1, [r7, #20]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7f7 fd63 	bl	8000cb0 <__aeabi_fmul>
 80091ea:	4603      	mov	r3, r0
 80091ec:	461a      	mov	r2, r3
 80091ee:	4b3e      	ldr	r3, [pc, #248]	; (80092e8 <st_prep_buffer+0x4d4>)
 80091f0:	62da      	str	r2, [r3, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 80091f2:	4a3d      	ldr	r2, [pc, #244]	; (80092e8 <st_prep_buffer+0x4d4>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6213      	str	r3, [r2, #32]
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 80091f8:	4b3b      	ldr	r3, [pc, #236]	; (80092e8 <st_prep_buffer+0x4d4>)
 80091fa:	2203      	movs	r2, #3
 80091fc:	751a      	strb	r2, [r3, #20]
 80091fe:	e081      	b.n	8009304 <st_prep_buffer+0x4f0>
          }
				} else if (intersect_distance > 0.0f) {
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7f7 ff0f 	bl	8001028 <__aeabi_fcmpgt>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d071      	beq.n	80092f4 <st_prep_buffer+0x4e0>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 8009210:	4b36      	ldr	r3, [pc, #216]	; (80092ec <st_prep_buffer+0x4d8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	4618      	mov	r0, r3
 800921a:	f7f7 ff05 	bl	8001028 <__aeabi_fcmpgt>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d05d      	beq.n	80092e0 <st_prep_buffer+0x4cc>
						// NOTE: For acceleration-cruise and cruise-only types, following calculation will be 0.0.
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 8009224:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009226:	68b8      	ldr	r0, [r7, #8]
 8009228:	f7f7 fc38 	bl	8000a9c <__aeabi_fsub>
 800922c:	4603      	mov	r3, r0
 800922e:	6979      	ldr	r1, [r7, #20]
 8009230:	4618      	mov	r0, r3
 8009232:	f7f7 fd3d 	bl	8000cb0 <__aeabi_fmul>
 8009236:	4603      	mov	r3, r0
 8009238:	461a      	mov	r2, r3
 800923a:	4b2b      	ldr	r3, [pc, #172]	; (80092e8 <st_prep_buffer+0x4d4>)
 800923c:	62da      	str	r2, [r3, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 800923e:	4b2a      	ldr	r3, [pc, #168]	; (80092e8 <st_prep_buffer+0x4d4>)
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	f7f7 fed1 	bl	8000fec <__aeabi_fcmplt>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d028      	beq.n	80092a2 <st_prep_buffer+0x48e>
							prep.maximum_speed = nominal_speed;
 8009250:	4a25      	ldr	r2, [pc, #148]	; (80092e8 <st_prep_buffer+0x4d4>)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6213      	str	r3, [r2, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8009256:	4b25      	ldr	r3, [pc, #148]	; (80092ec <st_prep_buffer+0x4d8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	4618      	mov	r0, r3
 8009260:	f7f7 feba 	bl	8000fd8 <__aeabi_fcmpeq>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <st_prep_buffer+0x45e>
								// Cruise-deceleration or cruise-only type.
								prep.ramp_type = RAMP_CRUISE;
 800926a:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <st_prep_buffer+0x4d4>)
 800926c:	2201      	movs	r2, #1
 800926e:	751a      	strb	r2, [r3, #20]
 8009270:	e048      	b.n	8009304 <st_prep_buffer+0x4f0>
							} else {
								// Full-trapezoid or acceleration-cruise types
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <st_prep_buffer+0x4d4>)
 8009274:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <st_prep_buffer+0x4d8>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	4619      	mov	r1, r3
 800927e:	68b8      	ldr	r0, [r7, #8]
 8009280:	f7f7 fc0c 	bl	8000a9c <__aeabi_fsub>
 8009284:	4603      	mov	r3, r0
 8009286:	6979      	ldr	r1, [r7, #20]
 8009288:	4618      	mov	r0, r3
 800928a:	f7f7 fd11 	bl	8000cb0 <__aeabi_fmul>
 800928e:	4603      	mov	r3, r0
 8009290:	4619      	mov	r1, r3
 8009292:	4620      	mov	r0, r4
 8009294:	f7f7 fc02 	bl	8000a9c <__aeabi_fsub>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <st_prep_buffer+0x4d4>)
 800929e:	629a      	str	r2, [r3, #40]	; 0x28
 80092a0:	e030      	b.n	8009304 <st_prep_buffer+0x4f0>
							}
						} else { // Triangle type
							prep.accelerate_until = intersect_distance;
 80092a2:	4a11      	ldr	r2, [pc, #68]	; (80092e8 <st_prep_buffer+0x4d4>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6293      	str	r3, [r2, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 80092a8:	4a0f      	ldr	r2, [pc, #60]	; (80092e8 <st_prep_buffer+0x4d4>)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	62d3      	str	r3, [r2, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80092ae:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <st_prep_buffer+0x4d8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	4619      	mov	r1, r3
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f7 fbf2 	bl	8000aa0 <__addsf3>
 80092bc:	4603      	mov	r3, r0
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7f7 fcf5 	bl	8000cb0 <__aeabi_fmul>
 80092c6:	4603      	mov	r3, r0
 80092c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f7 fbe8 	bl	8000aa0 <__addsf3>
 80092d0:	4603      	mov	r3, r0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 fac2 	bl	800a85c <sqrtf>
 80092d8:	4602      	mov	r2, r0
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <st_prep_buffer+0x4d4>)
 80092dc:	621a      	str	r2, [r3, #32]
 80092de:	e011      	b.n	8009304 <st_prep_buffer+0x4f0>
						}
					} else { // Deceleration-only type
            prep.ramp_type = RAMP_DECEL;
 80092e0:	4b01      	ldr	r3, [pc, #4]	; (80092e8 <st_prep_buffer+0x4d4>)
 80092e2:	2202      	movs	r2, #2
 80092e4:	751a      	strb	r2, [r3, #20]
 80092e6:	e00d      	b.n	8009304 <st_prep_buffer+0x4f0>
 80092e8:	20000a3c 	.word	0x20000a3c
 80092ec:	20000a34 	.word	0x20000a34
 80092f0:	20000efc 	.word	0x20000efc
            // prep.decelerate_after = pl_block->millimeters;
            // prep.maximum_speed = prep.current_speed;
					}
				} else { // Acceleration-only type
					prep.accelerate_until = 0.0f;
 80092f4:	4b87      	ldr	r3, [pc, #540]	; (8009514 <st_prep_buffer+0x700>)
 80092f6:	f04f 0200 	mov.w	r2, #0
 80092fa:	629a      	str	r2, [r3, #40]	; 0x28
					// prep.decelerate_after = 0.0f;
					prep.maximum_speed = prep.exit_speed;
 80092fc:	4b85      	ldr	r3, [pc, #532]	; (8009514 <st_prep_buffer+0x700>)
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	4a84      	ldr	r2, [pc, #528]	; (8009514 <st_prep_buffer+0x700>)
 8009302:	6213      	str	r3, [r2, #32]
				}
			}
      
      #ifdef VARIABLE_SPINDLE
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 8009304:	4b84      	ldr	r3, [pc, #528]	; (8009518 <st_prep_buffer+0x704>)
 8009306:	791b      	ldrb	r3, [r3, #4]
 8009308:	f043 0308 	orr.w	r3, r3, #8
 800930c:	b2da      	uxtb	r2, r3
 800930e:	4b82      	ldr	r3, [pc, #520]	; (8009518 <st_prep_buffer+0x704>)
 8009310:	711a      	strb	r2, [r3, #4]
      #endif
    }
    
    // Initialize new segment
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 8009312:	4b82      	ldr	r3, [pc, #520]	; (800951c <st_prep_buffer+0x708>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	4a81      	ldr	r2, [pc, #516]	; (8009520 <st_prep_buffer+0x70c>)
 800931a:	4413      	add	r3, r2
 800931c:	633b      	str	r3, [r7, #48]	; 0x30

    // Set new segment to point to the current segment data block.
    prep_segment->st_block_index = prep.st_block_index;
 800931e:	4b7d      	ldr	r3, [pc, #500]	; (8009514 <st_prep_buffer+0x700>)
 8009320:	781a      	ldrb	r2, [r3, #0]
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	711a      	strb	r2, [r3, #4]
      acceleration ramp, cruising state, and deceleration ramp. Each ramp's travel distance
      may range from zero to the length of the block. Velocity profiles can end either at
      the end of planner block (typical) or mid-block at the end of a forced deceleration,
      such as from a feed hold.
    */
    float dt_max = DT_SEGMENT; // Maximum segment time
 8009326:	4b7f      	ldr	r3, [pc, #508]	; (8009524 <st_prep_buffer+0x710>)
 8009328:	64fb      	str	r3, [r7, #76]	; 0x4c
    float dt = 0.0f; // Initialize segment time
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	64bb      	str	r3, [r7, #72]	; 0x48
    float time_var = dt_max; // Time worker variable
 8009330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009332:	647b      	str	r3, [r7, #68]	; 0x44
    float mm_var; // mm-Distance worker variable
    float speed_var; // Speed worker variable
    float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 8009334:	4b7c      	ldr	r3, [pc, #496]	; (8009528 <st_prep_buffer+0x714>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	643b      	str	r3, [r7, #64]	; 0x40
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 800933c:	4b75      	ldr	r3, [pc, #468]	; (8009514 <st_prep_buffer+0x700>)
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	4619      	mov	r1, r3
 8009342:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009344:	f7f7 fbaa 	bl	8000a9c <__aeabi_fsub>
 8009348:	4603      	mov	r3, r0
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 800934c:	f04f 0100 	mov.w	r1, #0
 8009350:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009352:	f7f7 fe4b 	bl	8000fec <__aeabi_fcmplt>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d100      	bne.n	800935e <st_prep_buffer+0x54a>
 800935c:	e002      	b.n	8009364 <st_prep_buffer+0x550>
 800935e:	f04f 0300 	mov.w	r3, #0
 8009362:	63fb      	str	r3, [r7, #60]	; 0x3c

    do {
      switch (prep.ramp_type) {
 8009364:	4b6b      	ldr	r3, [pc, #428]	; (8009514 <st_prep_buffer+0x700>)
 8009366:	7d1b      	ldrb	r3, [r3, #20]
 8009368:	2b01      	cmp	r3, #1
 800936a:	f000 80df 	beq.w	800952c <st_prep_buffer+0x718>
 800936e:	2b03      	cmp	r3, #3
 8009370:	d002      	beq.n	8009378 <st_prep_buffer+0x564>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d064      	beq.n	8009440 <st_prep_buffer+0x62c>
 8009376:	e109      	b.n	800958c <st_prep_buffer+0x778>
        case RAMP_DECEL_OVERRIDE:
          speed_var = pl_block->acceleration*time_var;
 8009378:	4b6b      	ldr	r3, [pc, #428]	; (8009528 <st_prep_buffer+0x714>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009380:	4618      	mov	r0, r3
 8009382:	f7f7 fc95 	bl	8000cb0 <__aeabi_fmul>
 8009386:	4603      	mov	r3, r0
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800938a:	4b62      	ldr	r3, [pc, #392]	; (8009514 <st_prep_buffer+0x700>)
 800938c:	69da      	ldr	r2, [r3, #28]
 800938e:	4b61      	ldr	r3, [pc, #388]	; (8009514 <st_prep_buffer+0x700>)
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7f7 fb81 	bl	8000a9c <__aeabi_fsub>
 800939a:	4603      	mov	r3, r0
 800939c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800939e:	4618      	mov	r0, r3
 80093a0:	f7f7 fe2e 	bl	8001000 <__aeabi_fcmple>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d027      	beq.n	80093fa <st_prep_buffer+0x5e6>
            // Cruise or cruise-deceleration types only for deceleration override.
						mm_remaining = prep.accelerate_until;
 80093aa:	4b5a      	ldr	r3, [pc, #360]	; (8009514 <st_prep_buffer+0x700>)
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	643b      	str	r3, [r7, #64]	; 0x40
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80093b0:	4b5d      	ldr	r3, [pc, #372]	; (8009528 <st_prep_buffer+0x714>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f7 fb6f 	bl	8000a9c <__aeabi_fsub>
 80093be:	4603      	mov	r3, r0
 80093c0:	4619      	mov	r1, r3
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f7 fb6c 	bl	8000aa0 <__addsf3>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461c      	mov	r4, r3
 80093cc:	4b51      	ldr	r3, [pc, #324]	; (8009514 <st_prep_buffer+0x700>)
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	4b50      	ldr	r3, [pc, #320]	; (8009514 <st_prep_buffer+0x700>)
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7f7 fb62 	bl	8000aa0 <__addsf3>
 80093dc:	4603      	mov	r3, r0
 80093de:	4619      	mov	r1, r3
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7f7 fd19 	bl	8000e18 <__aeabi_fdiv>
 80093e6:	4603      	mov	r3, r0
 80093e8:	647b      	str	r3, [r7, #68]	; 0x44
            prep.ramp_type = RAMP_CRUISE;
 80093ea:	4b4a      	ldr	r3, [pc, #296]	; (8009514 <st_prep_buffer+0x700>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	751a      	strb	r2, [r3, #20]
            prep.current_speed = prep.maximum_speed;
 80093f0:	4b48      	ldr	r3, [pc, #288]	; (8009514 <st_prep_buffer+0x700>)
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	4a47      	ldr	r2, [pc, #284]	; (8009514 <st_prep_buffer+0x700>)
 80093f6:	61d3      	str	r3, [r2, #28]
          } else { // Mid-deceleration override ramp.
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
            prep.current_speed -= speed_var;
          }
          break;
 80093f8:	e12b      	b.n	8009652 <st_prep_buffer+0x83e>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 80093fa:	4b46      	ldr	r3, [pc, #280]	; (8009514 <st_prep_buffer+0x700>)
 80093fc:	69dc      	ldr	r4, [r3, #28]
 80093fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009404:	f7f7 fc54 	bl	8000cb0 <__aeabi_fmul>
 8009408:	4603      	mov	r3, r0
 800940a:	4619      	mov	r1, r3
 800940c:	4620      	mov	r0, r4
 800940e:	f7f7 fb45 	bl	8000a9c <__aeabi_fsub>
 8009412:	4603      	mov	r3, r0
 8009414:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009416:	4618      	mov	r0, r3
 8009418:	f7f7 fc4a 	bl	8000cb0 <__aeabi_fmul>
 800941c:	4603      	mov	r3, r0
 800941e:	4619      	mov	r1, r3
 8009420:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009422:	f7f7 fb3b 	bl	8000a9c <__aeabi_fsub>
 8009426:	4603      	mov	r3, r0
 8009428:	643b      	str	r3, [r7, #64]	; 0x40
            prep.current_speed -= speed_var;
 800942a:	4b3a      	ldr	r3, [pc, #232]	; (8009514 <st_prep_buffer+0x700>)
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009430:	4618      	mov	r0, r3
 8009432:	f7f7 fb33 	bl	8000a9c <__aeabi_fsub>
 8009436:	4603      	mov	r3, r0
 8009438:	461a      	mov	r2, r3
 800943a:	4b36      	ldr	r3, [pc, #216]	; (8009514 <st_prep_buffer+0x700>)
 800943c:	61da      	str	r2, [r3, #28]
          break;
 800943e:	e108      	b.n	8009652 <st_prep_buffer+0x83e>
        case RAMP_ACCEL:
          // NOTE: Acceleration ramp only computes during first do-while loop.
          speed_var = pl_block->acceleration*time_var;
 8009440:	4b39      	ldr	r3, [pc, #228]	; (8009528 <st_prep_buffer+0x714>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009448:	4618      	mov	r0, r3
 800944a:	f7f7 fc31 	bl	8000cb0 <__aeabi_fmul>
 800944e:	4603      	mov	r3, r0
 8009450:	62fb      	str	r3, [r7, #44]	; 0x2c
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8009452:	4b30      	ldr	r3, [pc, #192]	; (8009514 <st_prep_buffer+0x700>)
 8009454:	69dc      	ldr	r4, [r3, #28]
 8009456:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800945a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800945c:	f7f7 fc28 	bl	8000cb0 <__aeabi_fmul>
 8009460:	4603      	mov	r3, r0
 8009462:	4619      	mov	r1, r3
 8009464:	4620      	mov	r0, r4
 8009466:	f7f7 fb1b 	bl	8000aa0 <__addsf3>
 800946a:	4603      	mov	r3, r0
 800946c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800946e:	4618      	mov	r0, r3
 8009470:	f7f7 fc1e 	bl	8000cb0 <__aeabi_fmul>
 8009474:	4603      	mov	r3, r0
 8009476:	4619      	mov	r1, r3
 8009478:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800947a:	f7f7 fb0f 	bl	8000a9c <__aeabi_fsub>
 800947e:	4603      	mov	r3, r0
 8009480:	643b      	str	r3, [r7, #64]	; 0x40
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8009482:	4b24      	ldr	r3, [pc, #144]	; (8009514 <st_prep_buffer+0x700>)
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009488:	4618      	mov	r0, r3
 800948a:	f7f7 fdcd 	bl	8001028 <__aeabi_fcmpgt>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d034      	beq.n	80094fe <st_prep_buffer+0x6ea>
            // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8009494:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <st_prep_buffer+0x700>)
 8009496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009498:	643b      	str	r3, [r7, #64]	; 0x40
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800949a:	4b23      	ldr	r3, [pc, #140]	; (8009528 <st_prep_buffer+0x714>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f7 fafa 	bl	8000a9c <__aeabi_fsub>
 80094a8:	4603      	mov	r3, r0
 80094aa:	4619      	mov	r1, r3
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f7 faf7 	bl	8000aa0 <__addsf3>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461c      	mov	r4, r3
 80094b6:	4b17      	ldr	r3, [pc, #92]	; (8009514 <st_prep_buffer+0x700>)
 80094b8:	69da      	ldr	r2, [r3, #28]
 80094ba:	4b16      	ldr	r3, [pc, #88]	; (8009514 <st_prep_buffer+0x700>)
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	4619      	mov	r1, r3
 80094c0:	4610      	mov	r0, r2
 80094c2:	f7f7 faed 	bl	8000aa0 <__addsf3>
 80094c6:	4603      	mov	r3, r0
 80094c8:	4619      	mov	r1, r3
 80094ca:	4620      	mov	r0, r4
 80094cc:	f7f7 fca4 	bl	8000e18 <__aeabi_fdiv>
 80094d0:	4603      	mov	r3, r0
 80094d2:	647b      	str	r3, [r7, #68]	; 0x44
            if (mm_remaining == prep.decelerate_after) { prep.ramp_type = RAMP_DECEL; }
 80094d4:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <st_prep_buffer+0x700>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f7 fd7c 	bl	8000fd8 <__aeabi_fcmpeq>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <st_prep_buffer+0x6da>
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <st_prep_buffer+0x700>)
 80094e8:	2202      	movs	r2, #2
 80094ea:	751a      	strb	r2, [r3, #20]
 80094ec:	e002      	b.n	80094f4 <st_prep_buffer+0x6e0>
            else { prep.ramp_type = RAMP_CRUISE; }
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <st_prep_buffer+0x700>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	751a      	strb	r2, [r3, #20]
            prep.current_speed = prep.maximum_speed;
 80094f4:	4b07      	ldr	r3, [pc, #28]	; (8009514 <st_prep_buffer+0x700>)
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	4a06      	ldr	r2, [pc, #24]	; (8009514 <st_prep_buffer+0x700>)
 80094fa:	61d3      	str	r3, [r2, #28]
          } else { // Acceleration only.
            prep.current_speed += speed_var;
          }
          break;
 80094fc:	e0a9      	b.n	8009652 <st_prep_buffer+0x83e>
            prep.current_speed += speed_var;
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <st_prep_buffer+0x700>)
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009504:	4618      	mov	r0, r3
 8009506:	f7f7 facb 	bl	8000aa0 <__addsf3>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	4b01      	ldr	r3, [pc, #4]	; (8009514 <st_prep_buffer+0x700>)
 8009510:	61da      	str	r2, [r3, #28]
          break;
 8009512:	e09e      	b.n	8009652 <st_prep_buffer+0x83e>
 8009514:	20000a3c 	.word	0x20000a3c
 8009518:	20000efc 	.word	0x20000efc
 800951c:	20000a29 	.word	0x20000a29
 8009520:	200009ac 	.word	0x200009ac
 8009524:	38aec33e 	.word	0x38aec33e
 8009528:	20000a34 	.word	0x20000a34
        case RAMP_CRUISE:
          // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
          // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
          //   prevent this, simply enforce a minimum speed threshold in the planner.
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 800952c:	4b7b      	ldr	r3, [pc, #492]	; (800971c <st_prep_buffer+0x908>)
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009532:	4618      	mov	r0, r3
 8009534:	f7f7 fbbc 	bl	8000cb0 <__aeabi_fmul>
 8009538:	4603      	mov	r3, r0
 800953a:	4619      	mov	r1, r3
 800953c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800953e:	f7f7 faad 	bl	8000a9c <__aeabi_fsub>
 8009542:	4603      	mov	r3, r0
 8009544:	62bb      	str	r3, [r7, #40]	; 0x28
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8009546:	4b75      	ldr	r3, [pc, #468]	; (800971c <st_prep_buffer+0x908>)
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800954c:	4618      	mov	r0, r3
 800954e:	f7f7 fd6b 	bl	8001028 <__aeabi_fcmpgt>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d016      	beq.n	8009586 <st_prep_buffer+0x772>
            // Cruise-deceleration junction or end of block.
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8009558:	4b70      	ldr	r3, [pc, #448]	; (800971c <st_prep_buffer+0x908>)
 800955a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955c:	4619      	mov	r1, r3
 800955e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009560:	f7f7 fa9c 	bl	8000a9c <__aeabi_fsub>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	4b6c      	ldr	r3, [pc, #432]	; (800971c <st_prep_buffer+0x908>)
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7f7 fc52 	bl	8000e18 <__aeabi_fdiv>
 8009574:	4603      	mov	r3, r0
 8009576:	647b      	str	r3, [r7, #68]	; 0x44
            mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 8009578:	4b68      	ldr	r3, [pc, #416]	; (800971c <st_prep_buffer+0x908>)
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	643b      	str	r3, [r7, #64]	; 0x40
            prep.ramp_type = RAMP_DECEL;
 800957e:	4b67      	ldr	r3, [pc, #412]	; (800971c <st_prep_buffer+0x908>)
 8009580:	2202      	movs	r2, #2
 8009582:	751a      	strb	r2, [r3, #20]
          } else { // Cruising only.
            mm_remaining = mm_var;
          }
          break;
 8009584:	e065      	b.n	8009652 <st_prep_buffer+0x83e>
            mm_remaining = mm_var;
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	643b      	str	r3, [r7, #64]	; 0x40
          break;
 800958a:	e062      	b.n	8009652 <st_prep_buffer+0x83e>
        default: // case RAMP_DECEL:
          // NOTE: mm_var used as a misc worker variable to prevent errors when near zero speed.
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 800958c:	4b64      	ldr	r3, [pc, #400]	; (8009720 <st_prep_buffer+0x90c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009594:	4618      	mov	r0, r3
 8009596:	f7f7 fb8b 	bl	8000cb0 <__aeabi_fmul>
 800959a:	4603      	mov	r3, r0
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800959e:	4b5f      	ldr	r3, [pc, #380]	; (800971c <st_prep_buffer+0x908>)
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7f7 fd3f 	bl	8001028 <__aeabi_fcmpgt>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d02d      	beq.n	800960c <st_prep_buffer+0x7f8>
            // Compute distance from end of segment to end of block.
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 80095b0:	4b5a      	ldr	r3, [pc, #360]	; (800971c <st_prep_buffer+0x908>)
 80095b2:	69dc      	ldr	r4, [r3, #28]
 80095b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80095b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095ba:	f7f7 fb79 	bl	8000cb0 <__aeabi_fmul>
 80095be:	4603      	mov	r3, r0
 80095c0:	4619      	mov	r1, r3
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7f7 fa6a 	bl	8000a9c <__aeabi_fsub>
 80095c8:	4603      	mov	r3, r0
 80095ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f7 fb6f 	bl	8000cb0 <__aeabi_fmul>
 80095d2:	4603      	mov	r3, r0
 80095d4:	4619      	mov	r1, r3
 80095d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80095d8:	f7f7 fa60 	bl	8000a9c <__aeabi_fsub>
 80095dc:	4603      	mov	r3, r0
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 80095e0:	4b4e      	ldr	r3, [pc, #312]	; (800971c <st_prep_buffer+0x908>)
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7f7 fd00 	bl	8000fec <__aeabi_fcmplt>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00c      	beq.n	800960c <st_prep_buffer+0x7f8>
              mm_remaining = mm_var;
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	643b      	str	r3, [r7, #64]	; 0x40
              prep.current_speed -= speed_var;
 80095f6:	4b49      	ldr	r3, [pc, #292]	; (800971c <st_prep_buffer+0x908>)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7f7 fa4d 	bl	8000a9c <__aeabi_fsub>
 8009602:	4603      	mov	r3, r0
 8009604:	461a      	mov	r2, r3
 8009606:	4b45      	ldr	r3, [pc, #276]	; (800971c <st_prep_buffer+0x908>)
 8009608:	61da      	str	r2, [r3, #28]
              break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 800960a:	e022      	b.n	8009652 <st_prep_buffer+0x83e>
            }
          }
          // Otherwise, at end of block or end of forced-deceleration.
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 800960c:	4b43      	ldr	r3, [pc, #268]	; (800971c <st_prep_buffer+0x908>)
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	4619      	mov	r1, r3
 8009612:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009614:	f7f7 fa42 	bl	8000a9c <__aeabi_fsub>
 8009618:	4603      	mov	r3, r0
 800961a:	4619      	mov	r1, r3
 800961c:	4618      	mov	r0, r3
 800961e:	f7f7 fa3f 	bl	8000aa0 <__addsf3>
 8009622:	4603      	mov	r3, r0
 8009624:	461c      	mov	r4, r3
 8009626:	4b3d      	ldr	r3, [pc, #244]	; (800971c <st_prep_buffer+0x908>)
 8009628:	69da      	ldr	r2, [r3, #28]
 800962a:	4b3c      	ldr	r3, [pc, #240]	; (800971c <st_prep_buffer+0x908>)
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	4619      	mov	r1, r3
 8009630:	4610      	mov	r0, r2
 8009632:	f7f7 fa35 	bl	8000aa0 <__addsf3>
 8009636:	4603      	mov	r3, r0
 8009638:	4619      	mov	r1, r3
 800963a:	4620      	mov	r0, r4
 800963c:	f7f7 fbec 	bl	8000e18 <__aeabi_fdiv>
 8009640:	4603      	mov	r3, r0
 8009642:	647b      	str	r3, [r7, #68]	; 0x44
          mm_remaining = prep.mm_complete;
 8009644:	4b35      	ldr	r3, [pc, #212]	; (800971c <st_prep_buffer+0x908>)
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	643b      	str	r3, [r7, #64]	; 0x40
          prep.current_speed = prep.exit_speed;
 800964a:	4b34      	ldr	r3, [pc, #208]	; (800971c <st_prep_buffer+0x908>)
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	4a33      	ldr	r2, [pc, #204]	; (800971c <st_prep_buffer+0x908>)
 8009650:	61d3      	str	r3, [r2, #28]
      }
      dt += time_var; // Add computed ramp time to total segment time.
 8009652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009654:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009656:	f7f7 fa23 	bl	8000aa0 <__addsf3>
 800965a:	4603      	mov	r3, r0
 800965c:	64bb      	str	r3, [r7, #72]	; 0x48
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800965e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009660:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009662:	f7f7 fcc3 	bl	8000fec <__aeabi_fcmplt>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d006      	beq.n	800967a <st_prep_buffer+0x866>
 800966c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800966e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009670:	f7f7 fa14 	bl	8000a9c <__aeabi_fsub>
 8009674:	4603      	mov	r3, r0
 8009676:	647b      	str	r3, [r7, #68]	; 0x44
 8009678:	e013      	b.n	80096a2 <st_prep_buffer+0x88e>
      else {
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800967a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800967c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800967e:	f7f7 fcd3 	bl	8001028 <__aeabi_fcmpgt>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d100      	bne.n	800968a <st_prep_buffer+0x876>
          // Increase segment time to ensure at least one step in segment. Override and loop
          // through distance calculations until minimum_mm or mm_complete.
          dt_max += DT_SEGMENT;
          time_var = dt_max - dt;
        } else {
          break; // **Complete** Exit loop. Segment execution time maxed.
 8009688:	e015      	b.n	80096b6 <st_prep_buffer+0x8a2>
          dt_max += DT_SEGMENT;
 800968a:	4926      	ldr	r1, [pc, #152]	; (8009724 <st_prep_buffer+0x910>)
 800968c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800968e:	f7f7 fa07 	bl	8000aa0 <__addsf3>
 8009692:	4603      	mov	r3, r0
 8009694:	64fb      	str	r3, [r7, #76]	; 0x4c
          time_var = dt_max - dt;
 8009696:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009698:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800969a:	f7f7 f9ff 	bl	8000a9c <__aeabi_fsub>
 800969e:	4603      	mov	r3, r0
 80096a0:	647b      	str	r3, [r7, #68]	; 0x44
        }
      }
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 80096a2:	4b1e      	ldr	r3, [pc, #120]	; (800971c <st_prep_buffer+0x908>)
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7f7 fc9f 	bl	8000fec <__aeabi_fcmplt>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f47f ae57 	bne.w	8009364 <st_prep_buffer+0x550>
    #ifdef VARIABLE_SPINDLE
      /* -----------------------------------------------------------------------------------
        Compute spindle speed PWM output for step segment
      */

      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80096b6:	4b1c      	ldr	r3, [pc, #112]	; (8009728 <st_prep_buffer+0x914>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	7c9b      	ldrb	r3, [r3, #18]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d105      	bne.n	80096cc <st_prep_buffer+0x8b8>
 80096c0:	4b1a      	ldr	r3, [pc, #104]	; (800972c <st_prep_buffer+0x918>)
 80096c2:	791b      	ldrb	r3, [r3, #4]
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d040      	beq.n	800974e <st_prep_buffer+0x93a>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 80096cc:	4b14      	ldr	r3, [pc, #80]	; (8009720 <st_prep_buffer+0x90c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	7c9b      	ldrb	r3, [r3, #18]
 80096d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d02a      	beq.n	8009730 <st_prep_buffer+0x91c>
          float rpm = pl_block->spindle_speed;
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <st_prep_buffer+0x90c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e0:	63bb      	str	r3, [r7, #56]	; 0x38
          // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.        
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 80096e2:	4b11      	ldr	r3, [pc, #68]	; (8009728 <st_prep_buffer+0x914>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	7c9b      	ldrb	r3, [r3, #18]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00e      	beq.n	800970a <st_prep_buffer+0x8f6>
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <st_prep_buffer+0x908>)
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <st_prep_buffer+0x908>)
 80096f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f7f7 fada 	bl	8000cb0 <__aeabi_fmul>
 80096fc:	4603      	mov	r3, r0
 80096fe:	4619      	mov	r1, r3
 8009700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009702:	f7f7 fad5 	bl	8000cb0 <__aeabi_fmul>
 8009706:	4603      	mov	r3, r0
 8009708:	63bb      	str	r3, [r7, #56]	; 0x38
          // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE)
          // but this would be instantaneous only and during a motion. May not matter at all.
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 800970a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800970c:	f7fe fe46 	bl	800839c <spindle_compute_pwm_value>
 8009710:	4603      	mov	r3, r0
 8009712:	b2da      	uxtb	r2, r3
 8009714:	4b01      	ldr	r3, [pc, #4]	; (800971c <st_prep_buffer+0x908>)
 8009716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800971a:	e011      	b.n	8009740 <st_prep_buffer+0x92c>
 800971c:	20000a3c 	.word	0x20000a3c
 8009720:	20000a34 	.word	0x20000a34
 8009724:	38aec33e 	.word	0x38aec33e
 8009728:	20000a38 	.word	0x20000a38
 800972c:	20000efc 	.word	0x20000efc
        }
        else {
          sys.spindle_speed = 0.0;
 8009730:	4b9f      	ldr	r3, [pc, #636]	; (80099b0 <st_prep_buffer+0xb9c>)
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	611a      	str	r2, [r3, #16]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8009738:	4b9e      	ldr	r3, [pc, #632]	; (80099b4 <st_prep_buffer+0xba0>)
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8009740:	4b9b      	ldr	r3, [pc, #620]	; (80099b0 <st_prep_buffer+0xb9c>)
 8009742:	791b      	ldrb	r3, [r3, #4]
 8009744:	f023 0308 	bic.w	r3, r3, #8
 8009748:	b2da      	uxtb	r2, r3
 800974a:	4b99      	ldr	r3, [pc, #612]	; (80099b0 <st_prep_buffer+0xb9c>)
 800974c:	711a      	strb	r2, [r3, #4]
      }
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 800974e:	4b99      	ldr	r3, [pc, #612]	; (80099b4 <st_prep_buffer+0xba0>)
 8009750:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	719a      	strb	r2, [r3, #6]
       However, since floats have only 7.2 significant digits, long moves with extremely
       high step counts can exceed the precision of floats, which can lead to lost steps.
       Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
       supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
    */
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8009758:	4b96      	ldr	r3, [pc, #600]	; (80099b4 <st_prep_buffer+0xba0>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800975e:	4618      	mov	r0, r3
 8009760:	f7f7 faa6 	bl	8000cb0 <__aeabi_fmul>
 8009764:	4603      	mov	r3, r0
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8009768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800976a:	f000 ff4d 	bl	800a608 <ceilf>
 800976e:	6238      	str	r0, [r7, #32]
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8009770:	4b90      	ldr	r3, [pc, #576]	; (80099b4 <st_prep_buffer+0xba0>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 ff47 	bl	800a608 <ceilf>
 800977a:	61f8      	str	r0, [r7, #28]
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 800977c:	6a39      	ldr	r1, [r7, #32]
 800977e:	69f8      	ldr	r0, [r7, #28]
 8009780:	f7f7 f98c 	bl	8000a9c <__aeabi_fsub>
 8009784:	4603      	mov	r3, r0
 8009786:	4618      	mov	r0, r3
 8009788:	f7f7 fc94 	bl	80010b4 <__aeabi_f2uiz>
 800978c:	4603      	mov	r3, r0
 800978e:	b29a      	uxth	r2, r3
 8009790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009792:	801a      	strh	r2, [r3, #0]

    // Bail if we are at the end of a feed hold and don't have a step to execute.
    if (prep_segment->n_step == 0) {
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10d      	bne.n	80097b8 <st_prep_buffer+0x9a4>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 800979c:	4b84      	ldr	r3, [pc, #528]	; (80099b0 <st_prep_buffer+0xb9c>)
 800979e:	791b      	ldrb	r3, [r3, #4]
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d007      	beq.n	80097b8 <st_prep_buffer+0x9a4>
        // Less than one step to decelerate to zero speed, but already very close. AMASS
        // requires full steps to execute. So, just bail.
        bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80097a8:	4b81      	ldr	r3, [pc, #516]	; (80099b0 <st_prep_buffer+0xb9c>)
 80097aa:	791b      	ldrb	r3, [r3, #4]
 80097ac:	f043 0301 	orr.w	r3, r3, #1
 80097b0:	b2da      	uxtb	r2, r3
 80097b2:	4b7f      	ldr	r3, [pc, #508]	; (80099b0 <st_prep_buffer+0xb9c>)
 80097b4:	711a      	strb	r2, [r3, #4]
        #ifdef PARKING_ENABLE
          if (!(prep.recalculate_flag & PREP_FLAG_PARKING)) { prep.recalculate_flag |= PREP_FLAG_HOLD_PARTIAL_BLOCK; }
        #endif
        return; // Segment not generated, but current step data still retained.
 80097b6:	e120      	b.n	80099fa <st_prep_buffer+0xbe6>
    // compensate, we track the time to execute the previous segment's partial step and simply
    // apply it with the partial step distance to the current segment, so that it minutely
    // adjusts the whole segment rate to keep step output exact. These rate adjustments are
    // typically very small and do not adversely effect performance, but ensures that Grbl
    // outputs the exact acceleration and velocity profiles as computed by the planner.
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 80097b8:	4b7e      	ldr	r3, [pc, #504]	; (80099b4 <st_prep_buffer+0xba0>)
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4619      	mov	r1, r3
 80097be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80097c0:	f7f7 f96e 	bl	8000aa0 <__addsf3>
 80097c4:	4603      	mov	r3, r0
 80097c6:	64bb      	str	r3, [r7, #72]	; 0x48
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 80097c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097ca:	69f8      	ldr	r0, [r7, #28]
 80097cc:	f7f7 f966 	bl	8000a9c <__aeabi_fsub>
 80097d0:	4603      	mov	r3, r0
 80097d2:	4619      	mov	r1, r3
 80097d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80097d6:	f7f7 fb1f 	bl	8000e18 <__aeabi_fdiv>
 80097da:	4603      	mov	r3, r0
 80097dc:	61bb      	str	r3, [r7, #24]

    // Compute CPU cycles per step for the prepped segment.
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 80097de:	4b76      	ldr	r3, [pc, #472]	; (80099b8 <st_prep_buffer+0xba4>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a76      	ldr	r2, [pc, #472]	; (80099bc <st_prep_buffer+0xba8>)
 80097e4:	fba2 2303 	umull	r2, r3, r2, r3
 80097e8:	0c9b      	lsrs	r3, r3, #18
 80097ea:	4a75      	ldr	r2, [pc, #468]	; (80099c0 <st_prep_buffer+0xbac>)
 80097ec:	fb02 f303 	mul.w	r3, r2, r3
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f7 fa05 	bl	8000c00 <__aeabi_ui2f>
 80097f6:	4603      	mov	r3, r0
 80097f8:	69b9      	ldr	r1, [r7, #24]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7f7 fa58 	bl	8000cb0 <__aeabi_fmul>
 8009800:	4603      	mov	r3, r0
 8009802:	4970      	ldr	r1, [pc, #448]	; (80099c4 <st_prep_buffer+0xbb0>)
 8009804:	4618      	mov	r0, r3
 8009806:	f7f7 fa53 	bl	8000cb0 <__aeabi_fmul>
 800980a:	4603      	mov	r3, r0
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fefb 	bl	800a608 <ceilf>
 8009812:	4603      	mov	r3, r0
 8009814:	4618      	mov	r0, r3
 8009816:	f7f7 fc4d 	bl	80010b4 <__aeabi_f2uiz>
 800981a:	4603      	mov	r3, r0
 800981c:	637b      	str	r3, [r7, #52]	; 0x34

    #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
      // Compute step timing and multi-axis smoothing level.
      // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 800981e:	4b66      	ldr	r3, [pc, #408]	; (80099b8 <st_prep_buffer+0xba4>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a69      	ldr	r2, [pc, #420]	; (80099c8 <st_prep_buffer+0xbb4>)
 8009824:	fba2 2303 	umull	r2, r3, r2, r3
 8009828:	0a5a      	lsrs	r2, r3, #9
 800982a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982c:	429a      	cmp	r2, r3
 800982e:	d903      	bls.n	8009838 <st_prep_buffer+0xa24>
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	2200      	movs	r2, #0
 8009834:	715a      	strb	r2, [r3, #5]
 8009836:	e060      	b.n	80098fa <st_prep_buffer+0xae6>
      else {
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8009838:	4b5f      	ldr	r3, [pc, #380]	; (80099b8 <st_prep_buffer+0xba4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a62      	ldr	r2, [pc, #392]	; (80099c8 <st_prep_buffer+0xbb4>)
 800983e:	fba2 2303 	umull	r2, r3, r2, r3
 8009842:	0a1a      	lsrs	r2, r3, #8
 8009844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009846:	429a      	cmp	r2, r3
 8009848:	d903      	bls.n	8009852 <st_prep_buffer+0xa3e>
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	2201      	movs	r2, #1
 800984e:	715a      	strb	r2, [r3, #5]
 8009850:	e043      	b.n	80098da <st_prep_buffer+0xac6>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8009852:	4b59      	ldr	r3, [pc, #356]	; (80099b8 <st_prep_buffer+0xba4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a5c      	ldr	r2, [pc, #368]	; (80099c8 <st_prep_buffer+0xbb4>)
 8009858:	fba2 2303 	umull	r2, r3, r2, r3
 800985c:	09da      	lsrs	r2, r3, #7
 800985e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009860:	429a      	cmp	r2, r3
 8009862:	d903      	bls.n	800986c <st_prep_buffer+0xa58>
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	2202      	movs	r2, #2
 8009868:	715a      	strb	r2, [r3, #5]
 800986a:	e036      	b.n	80098da <st_prep_buffer+0xac6>
        else if (cycles < AMASS_LEVEL4) { prep_segment->amass_level = 3; } // added by mstrens
 800986c:	4b52      	ldr	r3, [pc, #328]	; (80099b8 <st_prep_buffer+0xba4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a55      	ldr	r2, [pc, #340]	; (80099c8 <st_prep_buffer+0xbb4>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	099a      	lsrs	r2, r3, #6
 8009878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987a:	429a      	cmp	r2, r3
 800987c:	d903      	bls.n	8009886 <st_prep_buffer+0xa72>
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	2203      	movs	r2, #3
 8009882:	715a      	strb	r2, [r3, #5]
 8009884:	e029      	b.n	80098da <st_prep_buffer+0xac6>
        else if (cycles < AMASS_LEVEL5) { prep_segment->amass_level = 4; } // added by mstrens
 8009886:	4b4c      	ldr	r3, [pc, #304]	; (80099b8 <st_prep_buffer+0xba4>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a4f      	ldr	r2, [pc, #316]	; (80099c8 <st_prep_buffer+0xbb4>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	095a      	lsrs	r2, r3, #5
 8009892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009894:	429a      	cmp	r2, r3
 8009896:	d903      	bls.n	80098a0 <st_prep_buffer+0xa8c>
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	2204      	movs	r2, #4
 800989c:	715a      	strb	r2, [r3, #5]
 800989e:	e01c      	b.n	80098da <st_prep_buffer+0xac6>
        else if (cycles < AMASS_LEVEL6) { prep_segment->amass_level = 5; } // added by mstrens
 80098a0:	4b45      	ldr	r3, [pc, #276]	; (80099b8 <st_prep_buffer+0xba4>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a48      	ldr	r2, [pc, #288]	; (80099c8 <st_prep_buffer+0xbb4>)
 80098a6:	fba2 2303 	umull	r2, r3, r2, r3
 80098aa:	091a      	lsrs	r2, r3, #4
 80098ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d903      	bls.n	80098ba <st_prep_buffer+0xaa6>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	2205      	movs	r2, #5
 80098b6:	715a      	strb	r2, [r3, #5]
 80098b8:	e00f      	b.n	80098da <st_prep_buffer+0xac6>
        else if (cycles < AMASS_LEVEL7) { prep_segment->amass_level = 6; } // added by mstrens
 80098ba:	4b3f      	ldr	r3, [pc, #252]	; (80099b8 <st_prep_buffer+0xba4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a42      	ldr	r2, [pc, #264]	; (80099c8 <st_prep_buffer+0xbb4>)
 80098c0:	fba2 2303 	umull	r2, r3, r2, r3
 80098c4:	08da      	lsrs	r2, r3, #3
 80098c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d903      	bls.n	80098d4 <st_prep_buffer+0xac0>
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	2206      	movs	r2, #6
 80098d0:	715a      	strb	r2, [r3, #5]
 80098d2:	e002      	b.n	80098da <st_prep_buffer+0xac6>
        //else { prep_segment->amass_level = 3; }
        else { prep_segment->amass_level = 7; }                            // changed by mstrens
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	2207      	movs	r2, #7
 80098d8:	715a      	strb	r2, [r3, #5]
        cycles >>= prep_segment->amass_level;
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	795b      	ldrb	r3, [r3, #5]
 80098de:	461a      	mov	r2, r3
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	40d3      	lsrs	r3, r2
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
        prep_segment->n_step <<= prep_segment->amass_level;
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	795b      	ldrb	r3, [r3, #5]
 80098f0:	fa02 f303 	lsl.w	r3, r2, r3
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	801a      	strh	r2, [r3, #0]
      }
      if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 80098fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009900:	d204      	bcs.n	800990c <st_prep_buffer+0xaf8>
 8009902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009904:	b29a      	uxth	r2, r3
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	805a      	strh	r2, [r3, #2]
 800990a:	e003      	b.n	8009914 <st_prep_buffer+0xb00>
      else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009912:	805a      	strh	r2, [r3, #2]
        }
      }
    #endif

    // Segment complete! Increment segment buffer indices, so stepper ISR can immediately execute it.
    segment_buffer_head = segment_next_head;
 8009914:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <st_prep_buffer+0xbb8>)
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	4b2d      	ldr	r3, [pc, #180]	; (80099d0 <st_prep_buffer+0xbbc>)
 800991a:	701a      	strb	r2, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800991c:	4b2b      	ldr	r3, [pc, #172]	; (80099cc <st_prep_buffer+0xbb8>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	4b29      	ldr	r3, [pc, #164]	; (80099cc <st_prep_buffer+0xbb8>)
 8009926:	701a      	strb	r2, [r3, #0]
 8009928:	4b28      	ldr	r3, [pc, #160]	; (80099cc <st_prep_buffer+0xbb8>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b0a      	cmp	r3, #10
 800992e:	d102      	bne.n	8009936 <st_prep_buffer+0xb22>
 8009930:	4b26      	ldr	r3, [pc, #152]	; (80099cc <st_prep_buffer+0xbb8>)
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]

    // Update the appropriate planner and segment data.
    pl_block->millimeters = mm_remaining;
 8009936:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <st_prep_buffer+0xbc0>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800993c:	621a      	str	r2, [r3, #32]
    prep.steps_remaining = n_steps_remaining;
 800993e:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <st_prep_buffer+0xba0>)
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	6093      	str	r3, [r2, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009946:	6a38      	ldr	r0, [r7, #32]
 8009948:	f7f7 f8a8 	bl	8000a9c <__aeabi_fsub>
 800994c:	4603      	mov	r3, r0
 800994e:	69b9      	ldr	r1, [r7, #24]
 8009950:	4618      	mov	r0, r3
 8009952:	f7f7 f9ad 	bl	8000cb0 <__aeabi_fmul>
 8009956:	4603      	mov	r3, r0
 8009958:	461a      	mov	r2, r3
 800995a:	4b16      	ldr	r3, [pc, #88]	; (80099b4 <st_prep_buffer+0xba0>)
 800995c:	605a      	str	r2, [r3, #4]

    // Check for exit conditions and flag to load next planner block.
    if (mm_remaining == prep.mm_complete) {
 800995e:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <st_prep_buffer+0xba0>)
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009964:	4618      	mov	r0, r3
 8009966:	f7f7 fb37 	bl	8000fd8 <__aeabi_fcmpeq>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d100      	bne.n	8009972 <st_prep_buffer+0xb5e>
 8009970:	e037      	b.n	80099e2 <st_prep_buffer+0xbce>
      // End of planner block or forced-termination. No more distance to be executed.
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8009972:	f04f 0100 	mov.w	r1, #0
 8009976:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009978:	f7f7 fb56 	bl	8001028 <__aeabi_fcmpgt>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <st_prep_buffer+0xb7e>
        // Reset prep parameters for resuming and then bail. Allow the stepper ISR to complete
        // the segment queue, where realtime protocol will set new state upon receiving the
        // cycle stop flag from the ISR. Prep_segment is blocked until then.
        bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8009982:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <st_prep_buffer+0xb9c>)
 8009984:	791b      	ldrb	r3, [r3, #4]
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	b2da      	uxtb	r2, r3
 800998c:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <st_prep_buffer+0xb9c>)
 800998e:	711a      	strb	r2, [r3, #4]
        #ifdef PARKING_ENABLE
          if (!(prep.recalculate_flag & PREP_FLAG_PARKING)) { prep.recalculate_flag |= PREP_FLAG_HOLD_PARTIAL_BLOCK; }
        #endif
        return; // Bail!
 8009990:	e033      	b.n	80099fa <st_prep_buffer+0xbe6>
      } else { // End of planner block
        // The planner block is complete. All steps are set to be executed in the segment buffer.
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8009992:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <st_prep_buffer+0xb9c>)
 8009994:	791b      	ldrb	r3, [r3, #4]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01c      	beq.n	80099d8 <st_prep_buffer+0xbc4>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <st_prep_buffer+0xb9c>)
 80099a0:	791b      	ldrb	r3, [r3, #4]
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	4b01      	ldr	r3, [pc, #4]	; (80099b0 <st_prep_buffer+0xb9c>)
 80099aa:	711a      	strb	r2, [r3, #4]
          return;
 80099ac:	e025      	b.n	80099fa <st_prep_buffer+0xbe6>
 80099ae:	bf00      	nop
 80099b0:	20000efc 	.word	0x20000efc
 80099b4:	20000a3c 	.word	0x20000a3c
 80099b8:	20000018 	.word	0x20000018
 80099bc:	431bde83 	.word	0x431bde83
 80099c0:	000f4240 	.word	0x000f4240
 80099c4:	42700000 	.word	0x42700000
 80099c8:	10624dd3 	.word	0x10624dd3
 80099cc:	20000a2a 	.word	0x20000a2a
 80099d0:	20000a29 	.word	0x20000a29
 80099d4:	20000a34 	.word	0x20000a34
        }
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 80099d8:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <st_prep_buffer+0xbec>)
 80099da:	2200      	movs	r2, #0
 80099dc:	601a      	str	r2, [r3, #0]
        plan_discard_current_block();
 80099de:	f7fb fd2d 	bl	800543c <plan_discard_current_block>
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 80099e2:	4b08      	ldr	r3, [pc, #32]	; (8009a04 <st_prep_buffer+0xbf0>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <st_prep_buffer+0xbf4>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	f47f aa1d 	bne.w	8008e2c <st_prep_buffer+0x18>
 80099f2:	e002      	b.n	80099fa <st_prep_buffer+0xbe6>
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 80099f4:	bf00      	nop
 80099f6:	e000      	b.n	80099fa <st_prep_buffer+0xbe6>
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 80099f8:	bf00      	nop
      }
    }

  }
}
 80099fa:	375c      	adds	r7, #92	; 0x5c
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd90      	pop	{r4, r7, pc}
 8009a00:	20000a34 	.word	0x20000a34
 8009a04:	20000a28 	.word	0x20000a28
 8009a08:	20000a2a 	.word	0x20000a2a

08009a0c <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate()
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8009a10:	4b07      	ldr	r3, [pc, #28]	; (8009a30 <st_get_realtime_rate+0x24>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <st_get_realtime_rate+0x16>
    return prep.current_speed;
 8009a1c:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <st_get_realtime_rate+0x28>)
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	e001      	b.n	8009a26 <st_get_realtime_rate+0x1a>
  }
  return 0.0f;
 8009a22:	f04f 0300 	mov.w	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bc80      	pop	{r7}
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	20000efc 	.word	0x20000efc
 8009a34:	20000a3c 	.word	0x20000a3c

08009a38 <TIM_Configuration>:
#ifdef STM32F103C8
void TIM_Configuration(TIM_TypeDef* TIMER, u16 Period, u16 Prescaler, u8 PP)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	4608      	mov	r0, r1
 8009a42:	4611      	mov	r1, r2
 8009a44:	461a      	mov	r2, r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	817b      	strh	r3, [r7, #10]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	813b      	strh	r3, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	71fb      	strb	r3, [r7, #7]
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8009a52:	897b      	ldrh	r3, [r7, #10]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8009a5a:	893b      	ldrh	r3, [r7, #8]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8009a66:	2300      	movs	r3, #0
 8009a68:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8009a6a:	f107 0314 	add.w	r3, r7, #20
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7f7 ff9d 	bl	80019b0 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8009a76:	2101      	movs	r1, #1
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7f8 f93c 	bl	8001cf6 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8009a7e:	2201      	movs	r2, #1
 8009a80:	2101      	movs	r1, #1
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7f8 f8f9 	bl	8001c7a <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8009a88:	2101      	movs	r1, #1
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7f8 f8b1 	bl	8001bf2 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8009a90:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009a94:	f7f7 fb2e 	bl	80010f4 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a9e:	d102      	bne.n	8009aa6 <TIM_Configuration+0x6e>
 8009aa0:	231c      	movs	r3, #28
 8009aa2:	743b      	strb	r3, [r7, #16]
 8009aa4:	e00c      	b.n	8009ac0 <TIM_Configuration+0x88>
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4a0d      	ldr	r2, [pc, #52]	; (8009ae0 <TIM_Configuration+0xa8>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d102      	bne.n	8009ab4 <TIM_Configuration+0x7c>
 8009aae:	231d      	movs	r3, #29
 8009ab0:	743b      	strb	r3, [r7, #16]
 8009ab2:	e005      	b.n	8009ac0 <TIM_Configuration+0x88>
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4a0b      	ldr	r2, [pc, #44]	; (8009ae4 <TIM_Configuration+0xac>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d101      	bne.n	8009ac0 <TIM_Configuration+0x88>
 8009abc:	231e      	movs	r3, #30
 8009abe:	743b      	strb	r3, [r7, #16]

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	747b      	strb	r3, [r7, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	74bb      	strb	r3, [r7, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	74fb      	strb	r3, [r7, #19]
	NVIC_Init(&NVIC_InitStructure);
 8009acc:	f107 0310 	add.w	r3, r7, #16
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7f7 fb21 	bl	8001118 <NVIC_Init>
}
 8009ad6:	bf00      	nop
 8009ad8:	3720      	adds	r7, #32
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	40000400 	.word	0x40000400
 8009ae4:	40000800 	.word	0x40000800

08009ae8 <NVIC_ClearPendingIRQ>:
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8009af2:	4909      	ldr	r1, [pc, #36]	; (8009b18 <NVIC_ClearPendingIRQ+0x30>)
 8009af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af8:	095b      	lsrs	r3, r3, #5
 8009afa:	79fa      	ldrb	r2, [r7, #7]
 8009afc:	f002 021f 	and.w	r2, r2, #31
 8009b00:	2001      	movs	r0, #1
 8009b02:	fa00 f202 	lsl.w	r2, r0, r2
 8009b06:	3360      	adds	r3, #96	; 0x60
 8009b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bc80      	pop	{r7}
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	e000e100 	.word	0xe000e100

08009b1c <system_init>:

#include "grbl.h"


void system_init()
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8009b22:	2101      	movs	r1, #1
 8009b24:	2009      	movs	r0, #9
 8009b26:	f7f7 ff25 	bl	8001974 <RCC_APB2PeriphClockCmd>
#ifdef ABC_AXIS
  // Full SWJ Disabled (JTAG-DP + SW-DP)
  // SWD will work only with "flash under reset" option
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // to enable PA15, PB3, PB4, PA13, PA14 pins
#else
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	481e      	ldr	r0, [pc, #120]	; (8009ba8 <system_init+0x8c>)
 8009b2e:	f7f7 fdbf 	bl	80016b0 <GPIO_PinRemapConfig>
#endif
// ---
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009b32:	2303      	movs	r3, #3
 8009b34:	73bb      	strb	r3, [r7, #14]
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009b36:	2348      	movs	r3, #72	; 0x48
 8009b38:	73fb      	strb	r3, [r7, #15]
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009b3a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009b3e:	81bb      	strh	r3, [r7, #12]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	4619      	mov	r1, r3
 8009b46:	4819      	ldr	r0, [pc, #100]	; (8009bac <system_init+0x90>)
 8009b48:	f7f7 fcaa 	bl	80014a0 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8009b4c:	2105      	movs	r1, #5
 8009b4e:	2001      	movs	r0, #1
 8009b50:	f7f7 fe1e 	bl	8001790 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8009b54:	2106      	movs	r1, #6
 8009b56:	2001      	movs	r0, #1
 8009b58:	f7f7 fe1a 	bl	8001790 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8009b5c:	2107      	movs	r1, #7
 8009b5e:	2001      	movs	r0, #1
 8009b60:	f7f7 fe16 	bl	8001790 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 8009b64:	2108      	movs	r1, #8
 8009b66:	2001      	movs	r0, #1
 8009b68:	f7f7 fe12 	bl	8001790 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8009b6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009b70:	607b      	str	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009b72:	2300      	movs	r3, #0
 8009b74:	723b      	strb	r3, [r7, #8]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009b76:	2310      	movs	r3, #16
 8009b78:	727b      	strb	r3, [r7, #9]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	72bb      	strb	r3, [r7, #10]
  EXTI_Init(&EXTI_InitStructure);
 8009b7e:	1d3b      	adds	r3, r7, #4
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7f7 fb2b 	bl	80011dc <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8009b86:	2317      	movs	r3, #23
 8009b88:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	707b      	strb	r3, [r7, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
 8009b8e:	2302      	movs	r3, #2
 8009b90:	70bb      	strb	r3, [r7, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
 8009b92:	2301      	movs	r3, #1
 8009b94:	70fb      	strb	r3, [r7, #3]
  NVIC_Init(&NVIC_InitStructure);
 8009b96:	463b      	mov	r3, r7
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f7 fabd 	bl	8001118 <NVIC_Init>
#endif
}
 8009b9e:	bf00      	nop
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	00300200 	.word	0x00300200
 8009bac:	40010c00 	.word	0x40010c00

08009bb0 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
  uint8_t control_state = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8009bba:	481a      	ldr	r0, [pc, #104]	; (8009c24 <system_control_get_state+0x74>)
 8009bbc:	f7f7 fd2c 	bl	8001618 <GPIO_ReadInputData>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	80bb      	strh	r3, [r7, #4]
#endif

  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
 8009bc4:	88bb      	ldrh	r3, [r7, #4]
 8009bc6:	f483 73f0 	eor.w	r3, r3, #480	; 0x1e0
 8009bca:	80bb      	strh	r3, [r7, #4]
  #endif

  if (pin) {
 8009bcc:	88bb      	ldrh	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d023      	beq.n	8009c1a <system_control_get_state+0x6a>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) {
 8009bd2:	88bb      	ldrh	r3, [r7, #4]
 8009bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <system_control_get_state+0x34>
    	  control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR;
 8009bdc:	79fb      	ldrb	r3, [r7, #7]
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	71fb      	strb	r3, [r7, #7]
      }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8009be4:	88bb      	ldrh	r3, [r7, #4]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <system_control_get_state+0x46>
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	71fb      	strb	r3, [r7, #7]
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009bf6:	88bb      	ldrh	r3, [r7, #4]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d103      	bne.n	8009c08 <system_control_get_state+0x58>
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	f043 0304 	orr.w	r3, r3, #4
 8009c06:	71fb      	strb	r3, [r7, #7]
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009c08:	88bb      	ldrh	r3, [r7, #4]
 8009c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <system_control_get_state+0x6a>
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	f043 0308 	orr.w	r3, r3, #8
 8009c18:	71fb      	strb	r3, [r7, #7]
  }
  return(control_state);
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40010c00 	.word	0x40010c00

08009c28 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8009c2e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009c32:	f7f7 fb69 	bl	8001308 <EXTI_ClearITPendingBit>
    uint8_t pin = system_control_get_state();
 8009c36:	f7ff ffbb 	bl	8009bb0 <system_control_get_state>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	71fb      	strb	r3, [r7, #7]
	if (pin) 
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d025      	beq.n	8009c90 <EXTI9_5_IRQHandler+0x68>
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <EXTI9_5_IRQHandler+0x2c>
		{
			mc_reset();
 8009c4e:	f7fb f87d 	bl	8004d4c <mc_reset>
 8009c52:	e01a      	b.n	8009c8a <EXTI9_5_IRQHandler+0x62>
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d008      	beq.n	8009c70 <EXTI9_5_IRQHandler+0x48>
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8009c5e:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <EXTI9_5_IRQHandler+0x70>)
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f043 0302 	orr.w	r3, r3, #2
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <EXTI9_5_IRQHandler+0x70>)
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	e00c      	b.n	8009c8a <EXTI9_5_IRQHandler+0x62>
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_FEED_HOLD))
		{
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
		}
#else
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d007      	beq.n	8009c8a <EXTI9_5_IRQHandler+0x62>
		{
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <EXTI9_5_IRQHandler+0x70>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	f043 0320 	orr.w	r3, r3, #32
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <EXTI9_5_IRQHandler+0x70>)
 8009c88:	701a      	strb	r2, [r3, #0]
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8009c8a:	2017      	movs	r0, #23
 8009c8c:	f7ff ff2c 	bl	8009ae8 <NVIC_ClearPendingIRQ>
}
}
 8009c90:	bf00      	nop
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20000f11 	.word	0x20000f11

08009c9c <system_check_safety_door_ajar>:
#endif

// Returns if safety door is ajar(T) or closed(F), based on pin state.
uint8_t system_check_safety_door_ajar()
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	af00      	add	r7, sp, #0
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
 8009ca0:	f7ff ff86 	bl	8009bb0 <system_control_get_state>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	b2db      	uxtb	r3, r3
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
 8009cbc:	e020      	b.n	8009d00 <system_execute_startup+0x50>
    if (!(settings_read_startup_line(n, line))) {
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd fff8 	bl	8007cb8 <settings_read_startup_line>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d107      	bne.n	8009cde <system_execute_startup+0x2e>
      line[0] = 0;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	701a      	strb	r2, [r3, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009cd4:	2107      	movs	r1, #7
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fd fa3c 	bl	8007154 <report_execute_startup_message>
 8009cdc:	e00d      	b.n	8009cfa <system_execute_startup+0x4a>
    } else {
      if (line[0] != 0) {
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d009      	beq.n	8009cfa <system_execute_startup+0x4a>
        uint8_t status_code = gc_execute_line(line);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7f8 fb12 	bl	8002310 <gc_execute_line>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]
        report_execute_startup_message(line,status_code);
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fd fa2d 	bl	8007154 <report_execute_startup_message>
  for (n=0; n < N_STARTUP_LINE; n++) {
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	73fb      	strb	r3, [r7, #15]
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d9db      	bls.n	8009cbe <system_execute_startup+0xe>
      }
    }
  }
}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <system_execute_line>:
// next line during a cycle, so for switches like block delete, the switch only effects
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint8_t char_counter = 1;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	75bb      	strb	r3, [r7, #22]
  uint8_t helper_var = 0; // Helper variable
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	75fb      	strb	r3, [r7, #23]
  float parameter, value;
  switch( line[char_counter] ) {
 8009d20:	7dbb      	ldrb	r3, [r7, #22]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4413      	add	r3, r2
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b43      	cmp	r3, #67	; 0x43
 8009d2c:	d026      	beq.n	8009d7c <system_execute_line+0x6c>
 8009d2e:	2b43      	cmp	r3, #67	; 0x43
 8009d30:	dc04      	bgt.n	8009d3c <system_execute_line+0x2c>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d009      	beq.n	8009d4a <system_execute_line+0x3a>
 8009d36:	2b24      	cmp	r3, #36	; 0x24
 8009d38:	d020      	beq.n	8009d7c <system_execute_line+0x6c>
 8009d3a:	e06d      	b.n	8009e18 <system_execute_line+0x108>
 8009d3c:	2b4a      	cmp	r3, #74	; 0x4a
 8009d3e:	d007      	beq.n	8009d50 <system_execute_line+0x40>
 8009d40:	2b58      	cmp	r3, #88	; 0x58
 8009d42:	d01b      	beq.n	8009d7c <system_execute_line+0x6c>
 8009d44:	2b47      	cmp	r3, #71	; 0x47
 8009d46:	d019      	beq.n	8009d7c <system_execute_line+0x6c>
 8009d48:	e066      	b.n	8009e18 <system_execute_line+0x108>
    case 0 : report_grbl_help(); break;
 8009d4a:	f7fc ff59 	bl	8006c00 <report_grbl_help>
 8009d4e:	e246      	b.n	800a1de <system_execute_line+0x4ce>
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8009d50:	4bb2      	ldr	r3, [pc, #712]	; (800a01c <system_execute_line+0x30c>)
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d005      	beq.n	8009d64 <system_execute_line+0x54>
 8009d58:	4bb0      	ldr	r3, [pc, #704]	; (800a01c <system_execute_line+0x30c>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d001      	beq.n	8009d64 <system_execute_line+0x54>
 8009d60:	2308      	movs	r3, #8
 8009d62:	e23d      	b.n	800a1e0 <system_execute_line+0x4d0>
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3302      	adds	r3, #2
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b3d      	cmp	r3, #61	; 0x3d
 8009d6c:	d001      	beq.n	8009d72 <system_execute_line+0x62>
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e236      	b.n	800a1e0 <system_execute_line+0x4d0>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f7f8 facc 	bl	8002310 <gc_execute_line>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	e231      	b.n	800a1e0 <system_execute_line+0x4d0>
      break;
    case '$': case 'G': case 'C': case 'X':
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3302      	adds	r3, #2
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <system_execute_line+0x7a>
 8009d86:	2303      	movs	r3, #3
 8009d88:	e22a      	b.n	800a1e0 <system_execute_line+0x4d0>
      switch( line[1] ) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b43      	cmp	r3, #67	; 0x43
 8009d92:	d017      	beq.n	8009dc4 <system_execute_line+0xb4>
 8009d94:	2b43      	cmp	r3, #67	; 0x43
 8009d96:	dc02      	bgt.n	8009d9e <system_execute_line+0x8e>
 8009d98:	2b24      	cmp	r3, #36	; 0x24
 8009d9a:	d005      	beq.n	8009da8 <system_execute_line+0x98>
            sys.state = STATE_IDLE;
            // Don't run startup script. Prevents stored moves in startup from causing accidents.
          } // Otherwise, no effect.
          break;
      }
      break;
 8009d9c:	e21f      	b.n	800a1de <system_execute_line+0x4ce>
      switch( line[1] ) {
 8009d9e:	2b47      	cmp	r3, #71	; 0x47
 8009da0:	d00d      	beq.n	8009dbe <system_execute_line+0xae>
 8009da2:	2b58      	cmp	r3, #88	; 0x58
 8009da4:	d025      	beq.n	8009df2 <system_execute_line+0xe2>
      break;
 8009da6:	e21a      	b.n	800a1de <system_execute_line+0x4ce>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8009da8:	4b9c      	ldr	r3, [pc, #624]	; (800a01c <system_execute_line+0x30c>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	f003 0318 	and.w	r3, r3, #24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <system_execute_line+0xa8>
 8009db4:	2308      	movs	r3, #8
 8009db6:	e213      	b.n	800a1e0 <system_execute_line+0x4d0>
          else { report_grbl_settings(); }
 8009db8:	f7fc ff2c 	bl	8006c14 <report_grbl_settings>
          break;
 8009dbc:	e02b      	b.n	8009e16 <system_execute_line+0x106>
          report_gcode_modes();
 8009dbe:	f7fd f8eb 	bl	8006f98 <report_gcode_modes>
          break;
 8009dc2:	e028      	b.n	8009e16 <system_execute_line+0x106>
          if ( sys.state == STATE_CHECK_MODE ) {
 8009dc4:	4b95      	ldr	r3, [pc, #596]	; (800a01c <system_execute_line+0x30c>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d105      	bne.n	8009dd8 <system_execute_line+0xc8>
            mc_reset();
 8009dcc:	f7fa ffbe 	bl	8004d4c <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8009dd0:	2005      	movs	r0, #5
 8009dd2:	f7fc fe9b 	bl	8006b0c <report_feedback_message>
          break;
 8009dd6:	e01e      	b.n	8009e16 <system_execute_line+0x106>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009dd8:	4b90      	ldr	r3, [pc, #576]	; (800a01c <system_execute_line+0x30c>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <system_execute_line+0xd4>
 8009de0:	2308      	movs	r3, #8
 8009de2:	e1fd      	b.n	800a1e0 <system_execute_line+0x4d0>
            sys.state = STATE_CHECK_MODE;
 8009de4:	4b8d      	ldr	r3, [pc, #564]	; (800a01c <system_execute_line+0x30c>)
 8009de6:	2202      	movs	r2, #2
 8009de8:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8009dea:	2004      	movs	r0, #4
 8009dec:	f7fc fe8e 	bl	8006b0c <report_feedback_message>
          break;
 8009df0:	e011      	b.n	8009e16 <system_execute_line+0x106>
          if (sys.state == STATE_ALARM) {
 8009df2:	4b8a      	ldr	r3, [pc, #552]	; (800a01c <system_execute_line+0x30c>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10c      	bne.n	8009e14 <system_execute_line+0x104>
            if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); }
 8009dfa:	f7ff ff4f 	bl	8009c9c <system_check_safety_door_ajar>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <system_execute_line+0xf8>
 8009e04:	230d      	movs	r3, #13
 8009e06:	e1eb      	b.n	800a1e0 <system_execute_line+0x4d0>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 8009e08:	2003      	movs	r0, #3
 8009e0a:	f7fc fe7f 	bl	8006b0c <report_feedback_message>
            sys.state = STATE_IDLE;
 8009e0e:	4b83      	ldr	r3, [pc, #524]	; (800a01c <system_execute_line+0x30c>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	701a      	strb	r2, [r3, #0]
          break;
 8009e14:	bf00      	nop
      break;
 8009e16:	e1e2      	b.n	800a1de <system_execute_line+0x4ce>
    default :
      // Block any system command that requires the state as IDLE/ALARM. (i.e. EEPROM, homing)
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8009e18:	4b80      	ldr	r3, [pc, #512]	; (800a01c <system_execute_line+0x30c>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d005      	beq.n	8009e2c <system_execute_line+0x11c>
 8009e20:	4b7e      	ldr	r3, [pc, #504]	; (800a01c <system_execute_line+0x30c>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d001      	beq.n	8009e2c <system_execute_line+0x11c>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	e1d9      	b.n	800a1e0 <system_execute_line+0x4d0>
      switch( line[1] ) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	3b23      	subs	r3, #35	; 0x23
 8009e34:	2b30      	cmp	r3, #48	; 0x30
 8009e36:	f200 8157 	bhi.w	800a0e8 <system_execute_line+0x3d8>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <system_execute_line+0x130>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009f05 	.word	0x08009f05
 8009e44:	0800a0e9 	.word	0x0800a0e9
 8009e48:	0800a0e9 	.word	0x0800a0e9
 8009e4c:	0800a0e9 	.word	0x0800a0e9
 8009e50:	0800a0e9 	.word	0x0800a0e9
 8009e54:	0800a0e9 	.word	0x0800a0e9
 8009e58:	0800a0e9 	.word	0x0800a0e9
 8009e5c:	0800a0e9 	.word	0x0800a0e9
 8009e60:	0800a0e9 	.word	0x0800a0e9
 8009e64:	0800a0e9 	.word	0x0800a0e9
 8009e68:	0800a0e9 	.word	0x0800a0e9
 8009e6c:	0800a0e9 	.word	0x0800a0e9
 8009e70:	0800a0e9 	.word	0x0800a0e9
 8009e74:	0800a0e9 	.word	0x0800a0e9
 8009e78:	0800a0e9 	.word	0x0800a0e9
 8009e7c:	0800a0e9 	.word	0x0800a0e9
 8009e80:	0800a0e9 	.word	0x0800a0e9
 8009e84:	0800a0e9 	.word	0x0800a0e9
 8009e88:	0800a0e9 	.word	0x0800a0e9
 8009e8c:	0800a0e9 	.word	0x0800a0e9
 8009e90:	0800a0e9 	.word	0x0800a0e9
 8009e94:	0800a0e9 	.word	0x0800a0e9
 8009e98:	0800a0e9 	.word	0x0800a0e9
 8009e9c:	0800a0e9 	.word	0x0800a0e9
 8009ea0:	0800a0e9 	.word	0x0800a0e9
 8009ea4:	0800a0e9 	.word	0x0800a0e9
 8009ea8:	0800a0e9 	.word	0x0800a0e9
 8009eac:	0800a0e9 	.word	0x0800a0e9
 8009eb0:	0800a0e9 	.word	0x0800a0e9
 8009eb4:	0800a0e9 	.word	0x0800a0e9
 8009eb8:	0800a0e9 	.word	0x0800a0e9
 8009ebc:	0800a0e9 	.word	0x0800a0e9
 8009ec0:	0800a0e9 	.word	0x0800a0e9
 8009ec4:	0800a0e9 	.word	0x0800a0e9
 8009ec8:	0800a0e9 	.word	0x0800a0e9
 8009ecc:	0800a0e9 	.word	0x0800a0e9
 8009ed0:	0800a0e9 	.word	0x0800a0e9
 8009ed4:	08009f19 	.word	0x08009f19
 8009ed8:	08009fa7 	.word	0x08009fa7
 8009edc:	0800a0e9 	.word	0x0800a0e9
 8009ee0:	0800a0e9 	.word	0x0800a0e9
 8009ee4:	0800a0e9 	.word	0x0800a0e9
 8009ee8:	0800a0e9 	.word	0x0800a0e9
 8009eec:	0800a08d 	.word	0x0800a08d
 8009ef0:	0800a0e9 	.word	0x0800a0e9
 8009ef4:	0800a0e9 	.word	0x0800a0e9
 8009ef8:	0800a0e9 	.word	0x0800a0e9
 8009efc:	0800a025 	.word	0x0800a025
 8009f00:	08009f7d 	.word	0x08009f7d
        case '#' : // Print Grbl NGC parameters
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3302      	adds	r3, #2
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <system_execute_line+0x202>
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e166      	b.n	800a1e0 <system_execute_line+0x4d0>
          else { report_ngc_parameters(); }
 8009f12:	f7fc ffe1 	bl	8006ed8 <report_ngc_parameters>
          break;
 8009f16:	e162      	b.n	800a1de <system_execute_line+0x4ce>
        case 'H' : // Perform homing cycle [IDLE/ALARM]
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009f18:	4b41      	ldr	r3, [pc, #260]	; (800a020 <system_execute_line+0x310>)
 8009f1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <system_execute_line+0x21a>
 8009f26:	2305      	movs	r3, #5
 8009f28:	e15a      	b.n	800a1e0 <system_execute_line+0x4d0>
          if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); } // Block if safety door is ajar.
 8009f2a:	f7ff feb7 	bl	8009c9c <system_check_safety_door_ajar>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <system_execute_line+0x228>
 8009f34:	230d      	movs	r3, #13
 8009f36:	e153      	b.n	800a1e0 <system_execute_line+0x4d0>
          sys.state = STATE_HOMING; // Set system state variable
 8009f38:	4b38      	ldr	r3, [pc, #224]	; (800a01c <system_execute_line+0x30c>)
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	701a      	strb	r2, [r3, #0]
          if (line[2] == 0) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3302      	adds	r3, #2
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d108      	bne.n	8009f5a <system_execute_line+0x24a>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 8009f48:	2000      	movs	r0, #0
 8009f4a:	f7fa fe4b 	bl	8004be4 <mc_homing_cycle>
// ---
                default: return(STATUS_INVALID_STATEMENT);
              }
          #endif
          } else { return(STATUS_INVALID_STATEMENT); }
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8009f4e:	4b33      	ldr	r3, [pc, #204]	; (800a01c <system_execute_line+0x30c>)
 8009f50:	785b      	ldrb	r3, [r3, #1]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f040 8142 	bne.w	800a1dc <system_execute_line+0x4cc>
 8009f58:	e001      	b.n	8009f5e <system_execute_line+0x24e>
          } else { return(STATUS_INVALID_STATEMENT); }
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e140      	b.n	800a1e0 <system_execute_line+0x4d0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8009f5e:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <system_execute_line+0x30c>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	701a      	strb	r2, [r3, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8009f64:	f7fe fbbc 	bl	80086e0 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3302      	adds	r3, #2
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f040 8134 	bne.w	800a1dc <system_execute_line+0x4cc>
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff fe9b 	bl	8009cb0 <system_execute_startup>
          }
          break;
 8009f7a:	e12f      	b.n	800a1dc <system_execute_line+0x4cc>
        case 'S' : // Puts Grbl to sleep [IDLE/ALARM]
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3302      	adds	r3, #2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b4c      	cmp	r3, #76	; 0x4c
 8009f84:	d109      	bne.n	8009f9a <system_execute_line+0x28a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3303      	adds	r3, #3
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b50      	cmp	r3, #80	; 0x50
 8009f8e:	d104      	bne.n	8009f9a <system_execute_line+0x28a>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3304      	adds	r3, #4
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <system_execute_line+0x28e>
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e120      	b.n	800a1e0 <system_execute_line+0x4d0>
          system_set_exec_state_flag(EXEC_SLEEP); // Set to execute sleep mode immediately
 8009f9e:	2080      	movs	r0, #128	; 0x80
 8009fa0:	f000 f9a2 	bl	800a2e8 <system_set_exec_state_flag>
          break;
 8009fa4:	e11b      	b.n	800a1de <system_execute_line+0x4ce>
        case 'I' : // Print or store build info. [IDLE/ALARM]
          if ( line[++char_counter] == 0 ) {
 8009fa6:	7dbb      	ldrb	r3, [r7, #22]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	75bb      	strb	r3, [r7, #22]
 8009fae:	7dbb      	ldrb	r3, [r7, #22]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <system_execute_line+0x2ba>
            settings_read_build_info(line);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7fd fea1 	bl	8007d04 <settings_read_build_info>
            report_build_info(line);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7fd f8de 	bl	8007184 <report_build_info>
                line[char_counter-helper_var] = line[char_counter];
              } while (line[char_counter++] != 0);
              settings_store_build_info(line);
          #endif
          }
          break;
 8009fc8:	e109      	b.n	800a1de <system_execute_line+0x4ce>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009fca:	7dbb      	ldrb	r3, [r7, #22]
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	75ba      	strb	r2, [r7, #22]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b3d      	cmp	r3, #61	; 0x3d
 8009fdc:	d001      	beq.n	8009fe2 <system_execute_line+0x2d2>
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e0fe      	b.n	800a1e0 <system_execute_line+0x4d0>
              helper_var = char_counter; // Set helper variable as counter to start of user info line.
 8009fe2:	7dbb      	ldrb	r3, [r7, #22]
 8009fe4:	75fb      	strb	r3, [r7, #23]
                line[char_counter-helper_var] = line[char_counter];
 8009fe6:	7dbb      	ldrb	r3, [r7, #22]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	461a      	mov	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	7dba      	ldrb	r2, [r7, #22]
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	7812      	ldrb	r2, [r2, #0]
 8009ffe:	701a      	strb	r2, [r3, #0]
              } while (line[char_counter++] != 0);
 800a000:	7dbb      	ldrb	r3, [r7, #22]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	b2d2      	uxtb	r2, r2
 800a006:	75ba      	strb	r2, [r7, #22]
 800a008:	461a      	mov	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4413      	add	r3, r2
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e8      	bne.n	8009fe6 <system_execute_line+0x2d6>
              settings_store_build_info(line);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fd fd33 	bl	8007a80 <settings_store_build_info>
          break;
 800a01a:	e0e0      	b.n	800a1de <system_execute_line+0x4ce>
 800a01c:	20000efc 	.word	0x20000efc
 800a020:	20001048 	.word	0x20001048
        case 'R' : // Restore defaults [IDLE/ALARM]
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3302      	adds	r3, #2
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2b53      	cmp	r3, #83	; 0x53
 800a02c:	d10e      	bne.n	800a04c <system_execute_line+0x33c>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3303      	adds	r3, #3
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b54      	cmp	r3, #84	; 0x54
 800a036:	d109      	bne.n	800a04c <system_execute_line+0x33c>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3304      	adds	r3, #4
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b3d      	cmp	r3, #61	; 0x3d
 800a040:	d104      	bne.n	800a04c <system_execute_line+0x33c>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3306      	adds	r3, #6
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <system_execute_line+0x340>
 800a04c:	2303      	movs	r3, #3
 800a04e:	e0c7      	b.n	800a1e0 <system_execute_line+0x4d0>
          switch (line[5]) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3305      	adds	r3, #5
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b24      	cmp	r3, #36	; 0x24
 800a058:	d004      	beq.n	800a064 <system_execute_line+0x354>
 800a05a:	2b2a      	cmp	r3, #42	; 0x2a
 800a05c:	d00a      	beq.n	800a074 <system_execute_line+0x364>
 800a05e:	2b23      	cmp	r3, #35	; 0x23
 800a060:	d004      	beq.n	800a06c <system_execute_line+0x35c>
 800a062:	e00b      	b.n	800a07c <system_execute_line+0x36c>
            #ifdef ENABLE_RESTORE_EEPROM_DEFAULT_SETTINGS
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800a064:	2001      	movs	r0, #1
 800a066:	f7fd fd43 	bl	8007af0 <settings_restore>
 800a06a:	e009      	b.n	800a080 <system_execute_line+0x370>
            #endif
            #ifdef ENABLE_RESTORE_EEPROM_CLEAR_PARAMETERS
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800a06c:	2002      	movs	r0, #2
 800a06e:	f7fd fd3f 	bl	8007af0 <settings_restore>
 800a072:	e005      	b.n	800a080 <system_execute_line+0x370>
            #endif
            #ifdef ENABLE_RESTORE_EEPROM_WIPE_ALL
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800a074:	20ff      	movs	r0, #255	; 0xff
 800a076:	f7fd fd3b 	bl	8007af0 <settings_restore>
 800a07a:	e001      	b.n	800a080 <system_execute_line+0x370>
            #endif
            default: return(STATUS_INVALID_STATEMENT);
 800a07c:	2303      	movs	r3, #3
 800a07e:	e0af      	b.n	800a1e0 <system_execute_line+0x4d0>
          }
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 800a080:	2009      	movs	r0, #9
 800a082:	f7fc fd43 	bl	8006b0c <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 800a086:	f7fa fe61 	bl	8004d4c <mc_reset>
          break;
 800a08a:	e0a8      	b.n	800a1de <system_execute_line+0x4ce>
        case 'N' : // Startup lines. [IDLE/ALARM]
          if ( line[++char_counter] == 0 ) { // Print startup lines
 800a08c:	7dbb      	ldrb	r3, [r7, #22]
 800a08e:	3301      	adds	r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	75bb      	strb	r3, [r7, #22]
 800a094:	7dbb      	ldrb	r3, [r7, #22]
 800a096:	461a      	mov	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4413      	add	r3, r2
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11a      	bne.n	800a0d8 <system_execute_line+0x3c8>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	75fb      	strb	r3, [r7, #23]
 800a0a6:	e013      	b.n	800a0d0 <system_execute_line+0x3c0>
              if (!(settings_read_startup_line(helper_var, line))) {
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fd fe03 	bl	8007cb8 <settings_read_startup_line>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <system_execute_line+0x3b0>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800a0b8:	2007      	movs	r0, #7
 800a0ba:	f7fc fcf1 	bl	8006aa0 <report_status_message>
 800a0be:	e004      	b.n	800a0ca <system_execute_line+0x3ba>
              } else {
                report_startup_line(helper_var,line);
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	6879      	ldr	r1, [r7, #4]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fd f829 	bl	800711c <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	75fb      	strb	r3, [r7, #23]
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d9e8      	bls.n	800a0a8 <system_execute_line+0x398>
              }
            }
            break;
 800a0d6:	e082      	b.n	800a1de <system_execute_line+0x4ce>
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800a0d8:	4b43      	ldr	r3, [pc, #268]	; (800a1e8 <system_execute_line+0x4d8>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <system_execute_line+0x3d4>
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	e07d      	b.n	800a1e0 <system_execute_line+0x4d0>
            helper_var = true;  // Set helper_var to flag storing method.
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	75fb      	strb	r3, [r7, #23]
            // No break. Continues into default: to read remaining command characters.
          }
        default :  // Storing setting methods [IDLE/ALARM]
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800a0e8:	f107 0210 	add.w	r2, r7, #16
 800a0ec:	f107 0316 	add.w	r3, r7, #22
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7fa fe60 	bl	8004db8 <read_float>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <system_execute_line+0x3f2>
 800a0fe:	2302      	movs	r3, #2
 800a100:	e06e      	b.n	800a1e0 <system_execute_line+0x4d0>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800a102:	7dbb      	ldrb	r3, [r7, #22]
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	b2d2      	uxtb	r2, r2
 800a108:	75ba      	strb	r2, [r7, #22]
 800a10a:	461a      	mov	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4413      	add	r3, r2
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b3d      	cmp	r3, #61	; 0x3d
 800a114:	d001      	beq.n	800a11a <system_execute_line+0x40a>
 800a116:	2303      	movs	r3, #3
 800a118:	e062      	b.n	800a1e0 <system_execute_line+0x4d0>
          if (helper_var) { // Store startup line
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d032      	beq.n	800a186 <system_execute_line+0x476>
            // Prepare sending gcode block to gcode parser by shifting all characters
            helper_var = char_counter; // Set helper variable as counter to start of gcode block
 800a120:	7dbb      	ldrb	r3, [r7, #22]
 800a122:	75fb      	strb	r3, [r7, #23]
            do {
              line[char_counter-helper_var] = line[char_counter];
 800a124:	7dbb      	ldrb	r3, [r7, #22]
 800a126:	461a      	mov	r2, r3
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4413      	add	r3, r2
 800a132:	7dba      	ldrb	r2, [r7, #22]
 800a134:	4611      	mov	r1, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	440a      	add	r2, r1
 800a13a:	7812      	ldrb	r2, [r2, #0]
 800a13c:	701a      	strb	r2, [r3, #0]
            } while (line[char_counter++] != 0);
 800a13e:	7dbb      	ldrb	r3, [r7, #22]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	75ba      	strb	r2, [r7, #22]
 800a146:	461a      	mov	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4413      	add	r3, r2
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e8      	bne.n	800a124 <system_execute_line+0x414>
            // Execute gcode block to ensure block is valid.
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7f8 f8dc 	bl	8002310 <gc_execute_line>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]
            if (helper_var) { return(helper_var); }
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <system_execute_line+0x456>
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	e03c      	b.n	800a1e0 <system_execute_line+0x4d0>
            else {
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fb63 	bl	800a834 <truncf>
 800a16e:	4603      	mov	r3, r0
 800a170:	4618      	mov	r0, r3
 800a172:	f7f6 ff9f 	bl	80010b4 <__aeabi_f2uiz>
 800a176:	4603      	mov	r3, r0
 800a178:	75fb      	strb	r3, [r7, #23]
              settings_store_startup_line(helper_var,line);
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd fc64 	bl	8007a4c <settings_store_startup_line>
 800a184:	e02b      	b.n	800a1de <system_execute_line+0x4ce>
            }
          } else { // Store global setting.
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800a186:	f107 020c 	add.w	r2, r7, #12
 800a18a:	f107 0316 	add.w	r3, r7, #22
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fa fe11 	bl	8004db8 <read_float>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <system_execute_line+0x490>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e01f      	b.n	800a1e0 <system_execute_line+0x4d0>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800a1a0:	7dbb      	ldrb	r3, [r7, #22]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d107      	bne.n	800a1be <system_execute_line+0x4ae>
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	490e      	ldr	r1, [pc, #56]	; (800a1ec <system_execute_line+0x4dc>)
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f6 ff38 	bl	8001028 <__aeabi_fcmpgt>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <system_execute_line+0x4b2>
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e00e      	b.n	800a1e0 <system_execute_line+0x4d0>
            return(settings_store_global_setting((uint8_t)parameter, value));
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7f6 ff75 	bl	80010b4 <__aeabi_f2uiz>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fd fe00 	bl	8007dd8 <settings_store_global_setting>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	e001      	b.n	800a1e0 <system_execute_line+0x4d0>
          break;
 800a1dc:	bf00      	nop
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	20000efc 	.word	0x20000efc
 800a1ec:	437f0000 	.word	0x437f0000

0800a1f0 <system_flag_wco_change>:



void system_flag_wco_change()
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  #ifdef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE
    protocol_buffer_synchronize();
 800a1f4:	f7fb ff7e 	bl	80060f4 <protocol_buffer_synchronize>
  #endif
  sys.report_wco_counter = 0;
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <system_flag_wco_change+0x14>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	735a      	strb	r2, [r3, #13]
}
 800a1fe:	bf00      	nop
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000efc 	.word	0x20000efc

0800a208 <system_convert_axis_steps_to_mpos>:

// Returns machine position of axis 'idx'. Must be sent a 'step' array.
// NOTE: If motor steps and machine position are not in the same coordinate frame, this function
//   serves as a central place to compute the transformation.
float system_convert_axis_steps_to_mpos(int32_t *steps, uint8_t idx)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
      pos = (float)system_convert_corexy_to_y_axis_steps(steps) / settings.steps_per_mm[idx];
    } else {
      pos = steps[idx]/settings.steps_per_mm[idx];
    }
  #else
    pos = steps[idx]/settings.steps_per_mm[idx];
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	4413      	add	r3, r2
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4618      	mov	r0, r3
 800a220:	f7f6 fcf2 	bl	8000c08 <__aeabi_i2f>
 800a224:	78fb      	ldrb	r3, [r7, #3]
 800a226:	4a06      	ldr	r2, [pc, #24]	; (800a240 <system_convert_axis_steps_to_mpos+0x38>)
 800a228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a22c:	4619      	mov	r1, r3
 800a22e:	f7f6 fdf3 	bl	8000e18 <__aeabi_fdiv>
 800a232:	4603      	mov	r3, r0
 800a234:	60fb      	str	r3, [r7, #12]
  #endif
  return(pos);
 800a236:	68fb      	ldr	r3, [r7, #12]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20001048 	.word	0x20001048

0800a244 <system_convert_array_steps_to_mpos>:


void system_convert_array_steps_to_mpos(float *position, int32_t *steps)
{
 800a244:	b590      	push	{r4, r7, lr}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
 800a252:	e00d      	b.n	800a270 <system_convert_array_steps_to_mpos+0x2c>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	18d4      	adds	r4, r2, r3
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	4619      	mov	r1, r3
 800a260:	6838      	ldr	r0, [r7, #0]
 800a262:	f7ff ffd1 	bl	800a208 <system_convert_axis_steps_to_mpos>
 800a266:	4603      	mov	r3, r0
 800a268:	6023      	str	r3, [r4, #0]
  for (idx=0; idx<N_AXIS; idx++) {
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
 800a26c:	3301      	adds	r3, #1
 800a26e:	73fb      	strb	r3, [r7, #15]
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d9ee      	bls.n	800a254 <system_convert_array_steps_to_mpos+0x10>
  }
  return;
 800a276:	bf00      	nop
}
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}
	...

0800a280 <system_check_travel_limits>:
#endif


// Checks and reports if target array exceeds machine travel limits.
uint8_t system_check_travel_limits(float *target)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
 800a28c:	e022      	b.n	800a2d4 <system_check_travel_limits+0x54>
      } else {
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
      }
    #else
      // NOTE: max_travel is stored as negative
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4413      	add	r3, r2
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f04f 0100 	mov.w	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7f6 fec3 	bl	8001028 <__aeabi_fcmpgt>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d110      	bne.n	800a2ca <system_check_travel_limits+0x4a>
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	4a0b      	ldr	r2, [pc, #44]	; (800a2e4 <system_check_travel_limits+0x64>)
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	f7f6 fe94 	bl	8000fec <__aeabi_fcmplt>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <system_check_travel_limits+0x4e>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e006      	b.n	800a2dc <system_check_travel_limits+0x5c>
  for (idx=0; idx<N_AXIS; idx++) {
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	73fb      	strb	r3, [r7, #15]
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d9d9      	bls.n	800a28e <system_check_travel_limits+0xe>
    #endif
  }
  return(false);
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20001048 	.word	0x20001048

0800a2e8 <system_set_exec_state_flag>:
#ifdef WIN32
extern CRITICAL_SECTION CriticalSection;
#endif

// Special handlers for setting and clearing Grbl's real-time execution flags.
void system_set_exec_state_flag(uint8_t mask) {
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800a2f2:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 800a2f4:	4b06      	ldr	r3, [pc, #24]	; (800a310 <system_set_exec_state_flag+0x28>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	4b03      	ldr	r3, [pc, #12]	; (800a310 <system_set_exec_state_flag+0x28>)
 800a302:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a304:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr
 800a310:	20000f11 	.word	0x20000f11

0800a314 <system_clear_exec_state_flag>:

void system_clear_exec_state_flag(uint8_t mask) {
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	4603      	mov	r3, r0
 800a31c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a31e:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800a320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a324:	43db      	mvns	r3, r3
 800a326:	b25a      	sxtb	r2, r3
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <system_clear_exec_state_flag+0x34>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	4013      	ands	r3, r2
 800a332:	b25b      	sxtb	r3, r3
 800a334:	b2da      	uxtb	r2, r3
 800a336:	4b04      	ldr	r3, [pc, #16]	; (800a348 <system_clear_exec_state_flag+0x34>)
 800a338:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a33a:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	bc80      	pop	{r7}
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	20000f11 	.word	0x20000f11

0800a34c <system_set_exec_alarm>:

void system_set_exec_alarm(uint8_t code) {
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a356:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 800a358:	4a04      	ldr	r2, [pc, #16]	; (800a36c <system_set_exec_alarm+0x20>)
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 800a35e:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	20000f2c 	.word	0x20000f2c

0800a370 <system_clear_exec_alarm>:

void system_clear_exec_alarm() {
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 800a374:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 800a376:	4b04      	ldr	r3, [pc, #16]	; (800a388 <system_clear_exec_alarm+0x18>)
 800a378:	2200      	movs	r2, #0
 800a37a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a37c:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a37e:	bf00      	nop
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	20000f2c 	.word	0x20000f2c

0800a38c <system_set_exec_motion_override_flag>:

void system_set_exec_motion_override_flag(uint8_t mask) {
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a396:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <system_set_exec_motion_override_flag+0x28>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	4b03      	ldr	r3, [pc, #12]	; (800a3b4 <system_set_exec_motion_override_flag+0x28>)
 800a3a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a3a8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr
 800a3b4:	20000ef8 	.word	0x20000ef8

0800a3b8 <system_set_exec_accessory_override_flag>:

void system_set_exec_accessory_override_flag(uint8_t mask) {
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a3c2:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 800a3c4:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <system_set_exec_accessory_override_flag+0x28>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <system_set_exec_accessory_override_flag+0x28>)
 800a3d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a3d4:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr
 800a3e0:	20000f10 	.word	0x20000f10

0800a3e4 <system_clear_exec_motion_overrides>:

void system_clear_exec_motion_overrides() {
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 800a3e8:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 800a3ea:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <system_clear_exec_motion_overrides+0x18>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a3f0:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a3f2:	bf00      	nop
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bc80      	pop	{r7}
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000ef8 	.word	0x20000ef8

0800a400 <system_clear_exec_accessory_overrides>:

void system_clear_exec_accessory_overrides() {
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 800a404:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <system_clear_exec_accessory_overrides+0x18>)
 800a408:	2200      	movs	r2, #0
 800a40a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a40c:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a40e:	bf00      	nop
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20000f10 	.word	0x20000f10

0800a41c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a420:	4a15      	ldr	r2, [pc, #84]	; (800a478 <SystemInit+0x5c>)
 800a422:	4b15      	ldr	r3, [pc, #84]	; (800a478 <SystemInit+0x5c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f043 0301 	orr.w	r3, r3, #1
 800a42a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800a42c:	4912      	ldr	r1, [pc, #72]	; (800a478 <SystemInit+0x5c>)
 800a42e:	4b12      	ldr	r3, [pc, #72]	; (800a478 <SystemInit+0x5c>)
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <SystemInit+0x60>)
 800a434:	4013      	ands	r3, r2
 800a436:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a438:	4a0f      	ldr	r2, [pc, #60]	; (800a478 <SystemInit+0x5c>)
 800a43a:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <SystemInit+0x5c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a446:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a448:	4a0b      	ldr	r2, [pc, #44]	; (800a478 <SystemInit+0x5c>)
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <SystemInit+0x5c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a452:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <SystemInit+0x5c>)
 800a456:	4b08      	ldr	r3, [pc, #32]	; (800a478 <SystemInit+0x5c>)
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a45e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <SystemInit+0x5c>)
 800a462:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a466:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800a468:	f000 f80c 	bl	800a484 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a46c:	4b04      	ldr	r3, [pc, #16]	; (800a480 <SystemInit+0x64>)
 800a46e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a472:	609a      	str	r2, [r3, #8]
#endif 
}
 800a474:	bf00      	nop
 800a476:	bd80      	pop	{r7, pc}
 800a478:	40021000 	.word	0x40021000
 800a47c:	f8ff0000 	.word	0xf8ff0000
 800a480:	e000ed00 	.word	0xe000ed00

0800a484 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800a488:	f000 f802 	bl	800a490 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800a48c:	bf00      	nop
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	607b      	str	r3, [r7, #4]
 800a49a:	2300      	movs	r3, #0
 800a49c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800a49e:	4a3a      	ldr	r2, [pc, #232]	; (800a588 <SetSysClockTo72+0xf8>)
 800a4a0:	4b39      	ldr	r3, [pc, #228]	; (800a588 <SetSysClockTo72+0xf8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4a8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800a4aa:	4b37      	ldr	r3, [pc, #220]	; (800a588 <SetSysClockTo72+0xf8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d103      	bne.n	800a4c8 <SetSysClockTo72+0x38>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a4c6:	d1f0      	bne.n	800a4aa <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800a4c8:	4b2f      	ldr	r3, [pc, #188]	; (800a588 <SetSysClockTo72+0xf8>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	e001      	b.n	800a4de <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d14b      	bne.n	800a57c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800a4e4:	4a29      	ldr	r2, [pc, #164]	; (800a58c <SetSysClockTo72+0xfc>)
 800a4e6:	4b29      	ldr	r3, [pc, #164]	; (800a58c <SetSysClockTo72+0xfc>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f043 0310 	orr.w	r3, r3, #16
 800a4ee:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800a4f0:	4a26      	ldr	r2, [pc, #152]	; (800a58c <SetSysClockTo72+0xfc>)
 800a4f2:	4b26      	ldr	r3, [pc, #152]	; (800a58c <SetSysClockTo72+0xfc>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800a4fc:	4a23      	ldr	r2, [pc, #140]	; (800a58c <SetSysClockTo72+0xfc>)
 800a4fe:	4b23      	ldr	r3, [pc, #140]	; (800a58c <SetSysClockTo72+0xfc>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f043 0302 	orr.w	r3, r3, #2
 800a506:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800a508:	4a1f      	ldr	r2, [pc, #124]	; (800a588 <SetSysClockTo72+0xf8>)
 800a50a:	4b1f      	ldr	r3, [pc, #124]	; (800a588 <SetSysClockTo72+0xf8>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800a510:	4a1d      	ldr	r2, [pc, #116]	; (800a588 <SetSysClockTo72+0xf8>)
 800a512:	4b1d      	ldr	r3, [pc, #116]	; (800a588 <SetSysClockTo72+0xf8>)
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800a518:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <SetSysClockTo72+0xf8>)
 800a51a:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <SetSysClockTo72+0xf8>)
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a522:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800a524:	4a18      	ldr	r2, [pc, #96]	; (800a588 <SetSysClockTo72+0xf8>)
 800a526:	4b18      	ldr	r3, [pc, #96]	; (800a588 <SetSysClockTo72+0xf8>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a52e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800a530:	4a15      	ldr	r2, [pc, #84]	; (800a588 <SetSysClockTo72+0xf8>)
 800a532:	4b15      	ldr	r3, [pc, #84]	; (800a588 <SetSysClockTo72+0xf8>)
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800a53a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800a53c:	4a12      	ldr	r2, [pc, #72]	; (800a588 <SetSysClockTo72+0xf8>)
 800a53e:	4b12      	ldr	r3, [pc, #72]	; (800a588 <SetSysClockTo72+0xf8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a546:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800a548:	bf00      	nop
 800a54a:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <SetSysClockTo72+0xf8>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0f9      	beq.n	800a54a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800a556:	4a0c      	ldr	r2, [pc, #48]	; (800a588 <SetSysClockTo72+0xf8>)
 800a558:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <SetSysClockTo72+0xf8>)
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f023 0303 	bic.w	r3, r3, #3
 800a560:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800a562:	4a09      	ldr	r2, [pc, #36]	; (800a588 <SetSysClockTo72+0xf8>)
 800a564:	4b08      	ldr	r3, [pc, #32]	; (800a588 <SetSysClockTo72+0xf8>)
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f043 0302 	orr.w	r3, r3, #2
 800a56c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800a56e:	bf00      	nop
 800a570:	4b05      	ldr	r3, [pc, #20]	; (800a588 <SetSysClockTo72+0xf8>)
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f003 030c 	and.w	r3, r3, #12
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d1f9      	bne.n	800a570 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	bc80      	pop	{r7}
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40021000 	.word	0x40021000
 800a58c:	40022000 	.word	0x40022000

0800a590 <__libc_init_array>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	2500      	movs	r5, #0
 800a594:	4e0c      	ldr	r6, [pc, #48]	; (800a5c8 <__libc_init_array+0x38>)
 800a596:	4c0d      	ldr	r4, [pc, #52]	; (800a5cc <__libc_init_array+0x3c>)
 800a598:	1ba4      	subs	r4, r4, r6
 800a59a:	10a4      	asrs	r4, r4, #2
 800a59c:	42a5      	cmp	r5, r4
 800a59e:	d109      	bne.n	800a5b4 <__libc_init_array+0x24>
 800a5a0:	f001 f8e6 	bl	800b770 <_init>
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	4e0a      	ldr	r6, [pc, #40]	; (800a5d0 <__libc_init_array+0x40>)
 800a5a8:	4c0a      	ldr	r4, [pc, #40]	; (800a5d4 <__libc_init_array+0x44>)
 800a5aa:	1ba4      	subs	r4, r4, r6
 800a5ac:	10a4      	asrs	r4, r4, #2
 800a5ae:	42a5      	cmp	r5, r4
 800a5b0:	d105      	bne.n	800a5be <__libc_init_array+0x2e>
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5b8:	4798      	blx	r3
 800a5ba:	3501      	adds	r5, #1
 800a5bc:	e7ee      	b.n	800a59c <__libc_init_array+0xc>
 800a5be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5c2:	4798      	blx	r3
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	e7f2      	b.n	800a5ae <__libc_init_array+0x1e>
 800a5c8:	0800bdb4 	.word	0x0800bdb4
 800a5cc:	0800bdb4 	.word	0x0800bdb4
 800a5d0:	0800bdb4 	.word	0x0800bdb4
 800a5d4:	0800bdb8 	.word	0x0800bdb8

0800a5d8 <memcmp>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	3901      	subs	r1, #1
 800a5dc:	4402      	add	r2, r0
 800a5de:	4290      	cmp	r0, r2
 800a5e0:	d101      	bne.n	800a5e6 <memcmp+0xe>
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a5ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	d0f5      	beq.n	800a5de <memcmp+0x6>
 800a5f2:	1b18      	subs	r0, r3, r4
 800a5f4:	bd10      	pop	{r4, pc}

0800a5f6 <memset>:
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4402      	add	r2, r0
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d100      	bne.n	800a600 <memset+0xa>
 800a5fe:	4770      	bx	lr
 800a600:	f803 1b01 	strb.w	r1, [r3], #1
 800a604:	e7f9      	b.n	800a5fa <memset+0x4>
	...

0800a608 <ceilf>:
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a60e:	0df5      	lsrs	r5, r6, #23
 800a610:	3d7f      	subs	r5, #127	; 0x7f
 800a612:	2d16      	cmp	r5, #22
 800a614:	4601      	mov	r1, r0
 800a616:	4604      	mov	r4, r0
 800a618:	dc26      	bgt.n	800a668 <ceilf+0x60>
 800a61a:	2d00      	cmp	r5, #0
 800a61c:	da0e      	bge.n	800a63c <ceilf+0x34>
 800a61e:	4918      	ldr	r1, [pc, #96]	; (800a680 <ceilf+0x78>)
 800a620:	f7f6 fa3e 	bl	8000aa0 <__addsf3>
 800a624:	2100      	movs	r1, #0
 800a626:	f7f6 fcff 	bl	8001028 <__aeabi_fcmpgt>
 800a62a:	b128      	cbz	r0, 800a638 <ceilf+0x30>
 800a62c:	2c00      	cmp	r4, #0
 800a62e:	db23      	blt.n	800a678 <ceilf+0x70>
 800a630:	2e00      	cmp	r6, #0
 800a632:	bf18      	it	ne
 800a634:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800a638:	4621      	mov	r1, r4
 800a63a:	e01b      	b.n	800a674 <ceilf+0x6c>
 800a63c:	4e11      	ldr	r6, [pc, #68]	; (800a684 <ceilf+0x7c>)
 800a63e:	412e      	asrs	r6, r5
 800a640:	4230      	tst	r0, r6
 800a642:	d017      	beq.n	800a674 <ceilf+0x6c>
 800a644:	490e      	ldr	r1, [pc, #56]	; (800a680 <ceilf+0x78>)
 800a646:	f7f6 fa2b 	bl	8000aa0 <__addsf3>
 800a64a:	2100      	movs	r1, #0
 800a64c:	f7f6 fcec 	bl	8001028 <__aeabi_fcmpgt>
 800a650:	2800      	cmp	r0, #0
 800a652:	d0f1      	beq.n	800a638 <ceilf+0x30>
 800a654:	2c00      	cmp	r4, #0
 800a656:	bfc2      	ittt	gt
 800a658:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800a65c:	fa43 f505 	asrgt.w	r5, r3, r5
 800a660:	1964      	addgt	r4, r4, r5
 800a662:	ea24 0406 	bic.w	r4, r4, r6
 800a666:	e7e7      	b.n	800a638 <ceilf+0x30>
 800a668:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a66c:	d302      	bcc.n	800a674 <ceilf+0x6c>
 800a66e:	f7f6 fa17 	bl	8000aa0 <__addsf3>
 800a672:	4601      	mov	r1, r0
 800a674:	4608      	mov	r0, r1
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a67c:	e7dc      	b.n	800a638 <ceilf+0x30>
 800a67e:	bf00      	nop
 800a680:	7149f2ca 	.word	0x7149f2ca
 800a684:	007fffff 	.word	0x007fffff

0800a688 <cosf>:
 800a688:	b507      	push	{r0, r1, r2, lr}
 800a68a:	4a18      	ldr	r2, [pc, #96]	; (800a6ec <cosf+0x64>)
 800a68c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a690:	4293      	cmp	r3, r2
 800a692:	4601      	mov	r1, r0
 800a694:	dc03      	bgt.n	800a69e <cosf+0x16>
 800a696:	2100      	movs	r1, #0
 800a698:	f000 fb64 	bl	800ad64 <__kernel_cosf>
 800a69c:	e004      	b.n	800a6a8 <cosf+0x20>
 800a69e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6a2:	db04      	blt.n	800a6ae <cosf+0x26>
 800a6a4:	f7f6 f9fa 	bl	8000a9c <__aeabi_fsub>
 800a6a8:	b003      	add	sp, #12
 800a6aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6ae:	4669      	mov	r1, sp
 800a6b0:	f000 f9ae 	bl	800aa10 <__ieee754_rem_pio2f>
 800a6b4:	f000 0203 	and.w	r2, r0, #3
 800a6b8:	2a01      	cmp	r2, #1
 800a6ba:	d005      	beq.n	800a6c8 <cosf+0x40>
 800a6bc:	2a02      	cmp	r2, #2
 800a6be:	d00a      	beq.n	800a6d6 <cosf+0x4e>
 800a6c0:	b972      	cbnz	r2, 800a6e0 <cosf+0x58>
 800a6c2:	9901      	ldr	r1, [sp, #4]
 800a6c4:	9800      	ldr	r0, [sp, #0]
 800a6c6:	e7e7      	b.n	800a698 <cosf+0x10>
 800a6c8:	9901      	ldr	r1, [sp, #4]
 800a6ca:	9800      	ldr	r0, [sp, #0]
 800a6cc:	f000 fe6c 	bl	800b3a8 <__kernel_sinf>
 800a6d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a6d4:	e7e8      	b.n	800a6a8 <cosf+0x20>
 800a6d6:	9901      	ldr	r1, [sp, #4]
 800a6d8:	9800      	ldr	r0, [sp, #0]
 800a6da:	f000 fb43 	bl	800ad64 <__kernel_cosf>
 800a6de:	e7f7      	b.n	800a6d0 <cosf+0x48>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	9901      	ldr	r1, [sp, #4]
 800a6e4:	9800      	ldr	r0, [sp, #0]
 800a6e6:	f000 fe5f 	bl	800b3a8 <__kernel_sinf>
 800a6ea:	e7dd      	b.n	800a6a8 <cosf+0x20>
 800a6ec:	3f490fd8 	.word	0x3f490fd8

0800a6f0 <floorf>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a6f6:	0df5      	lsrs	r5, r6, #23
 800a6f8:	3d7f      	subs	r5, #127	; 0x7f
 800a6fa:	2d16      	cmp	r5, #22
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	4604      	mov	r4, r0
 800a700:	dc26      	bgt.n	800a750 <floorf+0x60>
 800a702:	2d00      	cmp	r5, #0
 800a704:	da0e      	bge.n	800a724 <floorf+0x34>
 800a706:	4917      	ldr	r1, [pc, #92]	; (800a764 <floorf+0x74>)
 800a708:	f7f6 f9ca 	bl	8000aa0 <__addsf3>
 800a70c:	2100      	movs	r1, #0
 800a70e:	f7f6 fc8b 	bl	8001028 <__aeabi_fcmpgt>
 800a712:	b128      	cbz	r0, 800a720 <floorf+0x30>
 800a714:	2c00      	cmp	r4, #0
 800a716:	da23      	bge.n	800a760 <floorf+0x70>
 800a718:	4b13      	ldr	r3, [pc, #76]	; (800a768 <floorf+0x78>)
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	bf18      	it	ne
 800a71e:	461c      	movne	r4, r3
 800a720:	4621      	mov	r1, r4
 800a722:	e01b      	b.n	800a75c <floorf+0x6c>
 800a724:	4e11      	ldr	r6, [pc, #68]	; (800a76c <floorf+0x7c>)
 800a726:	412e      	asrs	r6, r5
 800a728:	4230      	tst	r0, r6
 800a72a:	d017      	beq.n	800a75c <floorf+0x6c>
 800a72c:	490d      	ldr	r1, [pc, #52]	; (800a764 <floorf+0x74>)
 800a72e:	f7f6 f9b7 	bl	8000aa0 <__addsf3>
 800a732:	2100      	movs	r1, #0
 800a734:	f7f6 fc78 	bl	8001028 <__aeabi_fcmpgt>
 800a738:	2800      	cmp	r0, #0
 800a73a:	d0f1      	beq.n	800a720 <floorf+0x30>
 800a73c:	2c00      	cmp	r4, #0
 800a73e:	bfbe      	ittt	lt
 800a740:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800a744:	fa43 f505 	asrlt.w	r5, r3, r5
 800a748:	1964      	addlt	r4, r4, r5
 800a74a:	ea24 0406 	bic.w	r4, r4, r6
 800a74e:	e7e7      	b.n	800a720 <floorf+0x30>
 800a750:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a754:	d302      	bcc.n	800a75c <floorf+0x6c>
 800a756:	f7f6 f9a3 	bl	8000aa0 <__addsf3>
 800a75a:	4601      	mov	r1, r0
 800a75c:	4608      	mov	r0, r1
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	2400      	movs	r4, #0
 800a762:	e7dd      	b.n	800a720 <floorf+0x30>
 800a764:	7149f2ca 	.word	0x7149f2ca
 800a768:	bf800000 	.word	0xbf800000
 800a76c:	007fffff 	.word	0x007fffff

0800a770 <lroundf>:
 800a770:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a774:	2800      	cmp	r0, #0
 800a776:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800a77a:	b510      	push	{r4, lr}
 800a77c:	bfb4      	ite	lt
 800a77e:	f04f 34ff 	movlt.w	r4, #4294967295
 800a782:	2401      	movge	r4, #1
 800a784:	2a1e      	cmp	r2, #30
 800a786:	dc1b      	bgt.n	800a7c0 <lroundf+0x50>
 800a788:	2a00      	cmp	r2, #0
 800a78a:	da04      	bge.n	800a796 <lroundf+0x26>
 800a78c:	3201      	adds	r2, #1
 800a78e:	bf18      	it	ne
 800a790:	2400      	movne	r4, #0
 800a792:	4620      	mov	r0, r4
 800a794:	bd10      	pop	{r4, pc}
 800a796:	2a16      	cmp	r2, #22
 800a798:	bfd8      	it	le
 800a79a:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800a79e:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800a7a2:	bfd8      	it	le
 800a7a4:	4113      	asrle	r3, r2
 800a7a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a7aa:	bfcd      	iteet	gt
 800a7ac:	3b96      	subgt	r3, #150	; 0x96
 800a7ae:	185b      	addle	r3, r3, r1
 800a7b0:	f1c2 0217 	rsble	r2, r2, #23
 800a7b4:	fa01 f303 	lslgt.w	r3, r1, r3
 800a7b8:	bfd8      	it	le
 800a7ba:	40d3      	lsrle	r3, r2
 800a7bc:	435c      	muls	r4, r3
 800a7be:	e7e8      	b.n	800a792 <lroundf+0x22>
 800a7c0:	f7f6 fc52 	bl	8001068 <__aeabi_f2iz>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	e7e4      	b.n	800a792 <lroundf+0x22>

0800a7c8 <sinf>:
 800a7c8:	b507      	push	{r0, r1, r2, lr}
 800a7ca:	4a19      	ldr	r2, [pc, #100]	; (800a830 <sinf+0x68>)
 800a7cc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	4601      	mov	r1, r0
 800a7d4:	dc04      	bgt.n	800a7e0 <sinf+0x18>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2100      	movs	r1, #0
 800a7da:	f000 fde5 	bl	800b3a8 <__kernel_sinf>
 800a7de:	e004      	b.n	800a7ea <sinf+0x22>
 800a7e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7e4:	db04      	blt.n	800a7f0 <sinf+0x28>
 800a7e6:	f7f6 f959 	bl	8000a9c <__aeabi_fsub>
 800a7ea:	b003      	add	sp, #12
 800a7ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7f0:	4669      	mov	r1, sp
 800a7f2:	f000 f90d 	bl	800aa10 <__ieee754_rem_pio2f>
 800a7f6:	f000 0003 	and.w	r0, r0, #3
 800a7fa:	2801      	cmp	r0, #1
 800a7fc:	d006      	beq.n	800a80c <sinf+0x44>
 800a7fe:	2802      	cmp	r0, #2
 800a800:	d009      	beq.n	800a816 <sinf+0x4e>
 800a802:	b980      	cbnz	r0, 800a826 <sinf+0x5e>
 800a804:	2201      	movs	r2, #1
 800a806:	9901      	ldr	r1, [sp, #4]
 800a808:	9800      	ldr	r0, [sp, #0]
 800a80a:	e7e6      	b.n	800a7da <sinf+0x12>
 800a80c:	9901      	ldr	r1, [sp, #4]
 800a80e:	9800      	ldr	r0, [sp, #0]
 800a810:	f000 faa8 	bl	800ad64 <__kernel_cosf>
 800a814:	e7e9      	b.n	800a7ea <sinf+0x22>
 800a816:	2201      	movs	r2, #1
 800a818:	9901      	ldr	r1, [sp, #4]
 800a81a:	9800      	ldr	r0, [sp, #0]
 800a81c:	f000 fdc4 	bl	800b3a8 <__kernel_sinf>
 800a820:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a824:	e7e1      	b.n	800a7ea <sinf+0x22>
 800a826:	9901      	ldr	r1, [sp, #4]
 800a828:	9800      	ldr	r0, [sp, #0]
 800a82a:	f000 fa9b 	bl	800ad64 <__kernel_cosf>
 800a82e:	e7f7      	b.n	800a820 <sinf+0x58>
 800a830:	3f490fd8 	.word	0x3f490fd8

0800a834 <truncf>:
 800a834:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a838:	3b7f      	subs	r3, #127	; 0x7f
 800a83a:	2b16      	cmp	r3, #22
 800a83c:	4602      	mov	r2, r0
 800a83e:	dc08      	bgt.n	800a852 <truncf+0x1e>
 800a840:	2b00      	cmp	r3, #0
 800a842:	da02      	bge.n	800a84a <truncf+0x16>
 800a844:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a848:	4770      	bx	lr
 800a84a:	4802      	ldr	r0, [pc, #8]	; (800a854 <truncf+0x20>)
 800a84c:	4118      	asrs	r0, r3
 800a84e:	ea22 0000 	bic.w	r0, r2, r0
 800a852:	4770      	bx	lr
 800a854:	007fffff 	.word	0x007fffff

0800a858 <atan2f>:
 800a858:	f000 b84a 	b.w	800a8f0 <__ieee754_atan2f>

0800a85c <sqrtf>:
 800a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a85e:	b08b      	sub	sp, #44	; 0x2c
 800a860:	4604      	mov	r4, r0
 800a862:	f000 fa2d 	bl	800acc0 <__ieee754_sqrtf>
 800a866:	4b20      	ldr	r3, [pc, #128]	; (800a8e8 <sqrtf+0x8c>)
 800a868:	4606      	mov	r6, r0
 800a86a:	f993 5000 	ldrsb.w	r5, [r3]
 800a86e:	1c6b      	adds	r3, r5, #1
 800a870:	d02a      	beq.n	800a8c8 <sqrtf+0x6c>
 800a872:	4621      	mov	r1, r4
 800a874:	4620      	mov	r0, r4
 800a876:	f7f6 fbe1 	bl	800103c <__aeabi_fcmpun>
 800a87a:	4607      	mov	r7, r0
 800a87c:	bb20      	cbnz	r0, 800a8c8 <sqrtf+0x6c>
 800a87e:	2100      	movs	r1, #0
 800a880:	4620      	mov	r0, r4
 800a882:	f7f6 fbb3 	bl	8000fec <__aeabi_fcmplt>
 800a886:	b1f8      	cbz	r0, 800a8c8 <sqrtf+0x6c>
 800a888:	2301      	movs	r3, #1
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	4b17      	ldr	r3, [pc, #92]	; (800a8ec <sqrtf+0x90>)
 800a88e:	4620      	mov	r0, r4
 800a890:	9301      	str	r3, [sp, #4]
 800a892:	9708      	str	r7, [sp, #32]
 800a894:	f7f5 fdc0 	bl	8000418 <__aeabi_f2d>
 800a898:	2200      	movs	r2, #0
 800a89a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a89e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	b99d      	cbnz	r5, 800a8ce <sqrtf+0x72>
 800a8a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8aa:	4668      	mov	r0, sp
 800a8ac:	f000 fdf2 	bl	800b494 <matherr>
 800a8b0:	b1a8      	cbz	r0, 800a8de <sqrtf+0x82>
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	b11b      	cbz	r3, 800a8be <sqrtf+0x62>
 800a8b6:	f000 ff55 	bl	800b764 <__errno>
 800a8ba:	9b08      	ldr	r3, [sp, #32]
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8c2:	f7f6 f897 	bl	80009f4 <__aeabi_d2f>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	b00b      	add	sp, #44	; 0x2c
 800a8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f7f5 ff1f 	bl	8000714 <__aeabi_ddiv>
 800a8d6:	2d02      	cmp	r5, #2
 800a8d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8dc:	d1e5      	bne.n	800a8aa <sqrtf+0x4e>
 800a8de:	f000 ff41 	bl	800b764 <__errno>
 800a8e2:	2321      	movs	r3, #33	; 0x21
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	e7e4      	b.n	800a8b2 <sqrtf+0x56>
 800a8e8:	2000001c 	.word	0x2000001c
 800a8ec:	0800b9be 	.word	0x0800b9be

0800a8f0 <__ieee754_atan2f>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a8f6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	dc05      	bgt.n	800a90a <__ieee754_atan2f+0x1a>
 800a8fe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a902:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a906:	4607      	mov	r7, r0
 800a908:	dd04      	ble.n	800a914 <__ieee754_atan2f+0x24>
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7f6 f8c8 	bl	8000aa0 <__addsf3>
 800a910:	4603      	mov	r3, r0
 800a912:	e010      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a914:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a918:	d103      	bne.n	800a922 <__ieee754_atan2f+0x32>
 800a91a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a91e:	f000 bdbb 	b.w	800b498 <atanf>
 800a922:	178c      	asrs	r4, r1, #30
 800a924:	f004 0402 	and.w	r4, r4, #2
 800a928:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a92c:	b92a      	cbnz	r2, 800a93a <__ieee754_atan2f+0x4a>
 800a92e:	2c02      	cmp	r4, #2
 800a930:	d023      	beq.n	800a97a <__ieee754_atan2f+0x8a>
 800a932:	2c03      	cmp	r4, #3
 800a934:	d023      	beq.n	800a97e <__ieee754_atan2f+0x8e>
 800a936:	4618      	mov	r0, r3
 800a938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a93a:	b91e      	cbnz	r6, 800a944 <__ieee754_atan2f+0x54>
 800a93c:	2f00      	cmp	r7, #0
 800a93e:	da53      	bge.n	800a9e8 <__ieee754_atan2f+0xf8>
 800a940:	4b2a      	ldr	r3, [pc, #168]	; (800a9ec <__ieee754_atan2f+0xfc>)
 800a942:	e7f8      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a944:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a948:	d11b      	bne.n	800a982 <__ieee754_atan2f+0x92>
 800a94a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a94e:	d10b      	bne.n	800a968 <__ieee754_atan2f+0x78>
 800a950:	2c02      	cmp	r4, #2
 800a952:	d005      	beq.n	800a960 <__ieee754_atan2f+0x70>
 800a954:	2c03      	cmp	r4, #3
 800a956:	d005      	beq.n	800a964 <__ieee754_atan2f+0x74>
 800a958:	2c01      	cmp	r4, #1
 800a95a:	d141      	bne.n	800a9e0 <__ieee754_atan2f+0xf0>
 800a95c:	4b24      	ldr	r3, [pc, #144]	; (800a9f0 <__ieee754_atan2f+0x100>)
 800a95e:	e7ea      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a960:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <__ieee754_atan2f+0x104>)
 800a962:	e7e8      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a964:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <__ieee754_atan2f+0x108>)
 800a966:	e7e6      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a968:	2c02      	cmp	r4, #2
 800a96a:	d006      	beq.n	800a97a <__ieee754_atan2f+0x8a>
 800a96c:	2c03      	cmp	r4, #3
 800a96e:	d006      	beq.n	800a97e <__ieee754_atan2f+0x8e>
 800a970:	2c01      	cmp	r4, #1
 800a972:	d137      	bne.n	800a9e4 <__ieee754_atan2f+0xf4>
 800a974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a978:	e7dd      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a97a:	4b20      	ldr	r3, [pc, #128]	; (800a9fc <__ieee754_atan2f+0x10c>)
 800a97c:	e7db      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a97e:	4b20      	ldr	r3, [pc, #128]	; (800aa00 <__ieee754_atan2f+0x110>)
 800a980:	e7d9      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a982:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a986:	d0d9      	beq.n	800a93c <__ieee754_atan2f+0x4c>
 800a988:	1b92      	subs	r2, r2, r6
 800a98a:	15d2      	asrs	r2, r2, #23
 800a98c:	2a3c      	cmp	r2, #60	; 0x3c
 800a98e:	dc17      	bgt.n	800a9c0 <__ieee754_atan2f+0xd0>
 800a990:	2900      	cmp	r1, #0
 800a992:	da01      	bge.n	800a998 <__ieee754_atan2f+0xa8>
 800a994:	323c      	adds	r2, #60	; 0x3c
 800a996:	db15      	blt.n	800a9c4 <__ieee754_atan2f+0xd4>
 800a998:	4618      	mov	r0, r3
 800a99a:	f7f6 fa3d 	bl	8000e18 <__aeabi_fdiv>
 800a99e:	f000 fe8b 	bl	800b6b8 <fabsf>
 800a9a2:	f000 fd79 	bl	800b498 <atanf>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2c01      	cmp	r4, #1
 800a9aa:	d00d      	beq.n	800a9c8 <__ieee754_atan2f+0xd8>
 800a9ac:	2c02      	cmp	r4, #2
 800a9ae:	d00e      	beq.n	800a9ce <__ieee754_atan2f+0xde>
 800a9b0:	2c00      	cmp	r4, #0
 800a9b2:	d0c0      	beq.n	800a936 <__ieee754_atan2f+0x46>
 800a9b4:	4913      	ldr	r1, [pc, #76]	; (800aa04 <__ieee754_atan2f+0x114>)
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7f6 f872 	bl	8000aa0 <__addsf3>
 800a9bc:	490f      	ldr	r1, [pc, #60]	; (800a9fc <__ieee754_atan2f+0x10c>)
 800a9be:	e00c      	b.n	800a9da <__ieee754_atan2f+0xea>
 800a9c0:	4b11      	ldr	r3, [pc, #68]	; (800aa08 <__ieee754_atan2f+0x118>)
 800a9c2:	e7f1      	b.n	800a9a8 <__ieee754_atan2f+0xb8>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e7ef      	b.n	800a9a8 <__ieee754_atan2f+0xb8>
 800a9c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a9cc:	e7b3      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a9ce:	490d      	ldr	r1, [pc, #52]	; (800aa04 <__ieee754_atan2f+0x114>)
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f6 f865 	bl	8000aa0 <__addsf3>
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	4808      	ldr	r0, [pc, #32]	; (800a9fc <__ieee754_atan2f+0x10c>)
 800a9da:	f7f6 f85f 	bl	8000a9c <__aeabi_fsub>
 800a9de:	e797      	b.n	800a910 <__ieee754_atan2f+0x20>
 800a9e0:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <__ieee754_atan2f+0x11c>)
 800a9e2:	e7a8      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e7a6      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a9e8:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <__ieee754_atan2f+0x118>)
 800a9ea:	e7a4      	b.n	800a936 <__ieee754_atan2f+0x46>
 800a9ec:	bfc90fdb 	.word	0xbfc90fdb
 800a9f0:	bf490fdb 	.word	0xbf490fdb
 800a9f4:	4016cbe4 	.word	0x4016cbe4
 800a9f8:	c016cbe4 	.word	0xc016cbe4
 800a9fc:	40490fdb 	.word	0x40490fdb
 800aa00:	c0490fdb 	.word	0xc0490fdb
 800aa04:	33bbbd2e 	.word	0x33bbbd2e
 800aa08:	3fc90fdb 	.word	0x3fc90fdb
 800aa0c:	3f490fdb 	.word	0x3f490fdb

0800aa10 <__ieee754_rem_pio2f>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	4a9d      	ldr	r2, [pc, #628]	; (800ac8c <__ieee754_rem_pio2f+0x27c>)
 800aa16:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800aa1a:	4295      	cmp	r5, r2
 800aa1c:	b087      	sub	sp, #28
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4607      	mov	r7, r0
 800aa22:	dc04      	bgt.n	800aa2e <__ieee754_rem_pio2f+0x1e>
 800aa24:	2300      	movs	r3, #0
 800aa26:	6020      	str	r0, [r4, #0]
 800aa28:	604b      	str	r3, [r1, #4]
 800aa2a:	2600      	movs	r6, #0
 800aa2c:	e01a      	b.n	800aa64 <__ieee754_rem_pio2f+0x54>
 800aa2e:	4a98      	ldr	r2, [pc, #608]	; (800ac90 <__ieee754_rem_pio2f+0x280>)
 800aa30:	4295      	cmp	r5, r2
 800aa32:	dc4b      	bgt.n	800aacc <__ieee754_rem_pio2f+0xbc>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	4997      	ldr	r1, [pc, #604]	; (800ac94 <__ieee754_rem_pio2f+0x284>)
 800aa38:	f025 050f 	bic.w	r5, r5, #15
 800aa3c:	4e96      	ldr	r6, [pc, #600]	; (800ac98 <__ieee754_rem_pio2f+0x288>)
 800aa3e:	dd23      	ble.n	800aa88 <__ieee754_rem_pio2f+0x78>
 800aa40:	f7f6 f82c 	bl	8000a9c <__aeabi_fsub>
 800aa44:	42b5      	cmp	r5, r6
 800aa46:	4607      	mov	r7, r0
 800aa48:	d010      	beq.n	800aa6c <__ieee754_rem_pio2f+0x5c>
 800aa4a:	4994      	ldr	r1, [pc, #592]	; (800ac9c <__ieee754_rem_pio2f+0x28c>)
 800aa4c:	f7f6 f826 	bl	8000a9c <__aeabi_fsub>
 800aa50:	4601      	mov	r1, r0
 800aa52:	6020      	str	r0, [r4, #0]
 800aa54:	4638      	mov	r0, r7
 800aa56:	f7f6 f821 	bl	8000a9c <__aeabi_fsub>
 800aa5a:	4990      	ldr	r1, [pc, #576]	; (800ac9c <__ieee754_rem_pio2f+0x28c>)
 800aa5c:	f7f6 f81e 	bl	8000a9c <__aeabi_fsub>
 800aa60:	2601      	movs	r6, #1
 800aa62:	6060      	str	r0, [r4, #4]
 800aa64:	4630      	mov	r0, r6
 800aa66:	b007      	add	sp, #28
 800aa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6c:	498c      	ldr	r1, [pc, #560]	; (800aca0 <__ieee754_rem_pio2f+0x290>)
 800aa6e:	f7f6 f815 	bl	8000a9c <__aeabi_fsub>
 800aa72:	498c      	ldr	r1, [pc, #560]	; (800aca4 <__ieee754_rem_pio2f+0x294>)
 800aa74:	4605      	mov	r5, r0
 800aa76:	f7f6 f811 	bl	8000a9c <__aeabi_fsub>
 800aa7a:	4601      	mov	r1, r0
 800aa7c:	6020      	str	r0, [r4, #0]
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f7f6 f80c 	bl	8000a9c <__aeabi_fsub>
 800aa84:	4987      	ldr	r1, [pc, #540]	; (800aca4 <__ieee754_rem_pio2f+0x294>)
 800aa86:	e7e9      	b.n	800aa5c <__ieee754_rem_pio2f+0x4c>
 800aa88:	f7f6 f80a 	bl	8000aa0 <__addsf3>
 800aa8c:	42b5      	cmp	r5, r6
 800aa8e:	4607      	mov	r7, r0
 800aa90:	d00e      	beq.n	800aab0 <__ieee754_rem_pio2f+0xa0>
 800aa92:	4982      	ldr	r1, [pc, #520]	; (800ac9c <__ieee754_rem_pio2f+0x28c>)
 800aa94:	f7f6 f804 	bl	8000aa0 <__addsf3>
 800aa98:	4601      	mov	r1, r0
 800aa9a:	6020      	str	r0, [r4, #0]
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f7f5 fffd 	bl	8000a9c <__aeabi_fsub>
 800aaa2:	497e      	ldr	r1, [pc, #504]	; (800ac9c <__ieee754_rem_pio2f+0x28c>)
 800aaa4:	f7f5 fffc 	bl	8000aa0 <__addsf3>
 800aaa8:	f04f 36ff 	mov.w	r6, #4294967295
 800aaac:	6060      	str	r0, [r4, #4]
 800aaae:	e7d9      	b.n	800aa64 <__ieee754_rem_pio2f+0x54>
 800aab0:	497b      	ldr	r1, [pc, #492]	; (800aca0 <__ieee754_rem_pio2f+0x290>)
 800aab2:	f7f5 fff5 	bl	8000aa0 <__addsf3>
 800aab6:	497b      	ldr	r1, [pc, #492]	; (800aca4 <__ieee754_rem_pio2f+0x294>)
 800aab8:	4605      	mov	r5, r0
 800aaba:	f7f5 fff1 	bl	8000aa0 <__addsf3>
 800aabe:	4601      	mov	r1, r0
 800aac0:	6020      	str	r0, [r4, #0]
 800aac2:	4628      	mov	r0, r5
 800aac4:	f7f5 ffea 	bl	8000a9c <__aeabi_fsub>
 800aac8:	4976      	ldr	r1, [pc, #472]	; (800aca4 <__ieee754_rem_pio2f+0x294>)
 800aaca:	e7eb      	b.n	800aaa4 <__ieee754_rem_pio2f+0x94>
 800aacc:	4a76      	ldr	r2, [pc, #472]	; (800aca8 <__ieee754_rem_pio2f+0x298>)
 800aace:	4295      	cmp	r5, r2
 800aad0:	f300 808c 	bgt.w	800abec <__ieee754_rem_pio2f+0x1dc>
 800aad4:	f000 fdf0 	bl	800b6b8 <fabsf>
 800aad8:	4974      	ldr	r1, [pc, #464]	; (800acac <__ieee754_rem_pio2f+0x29c>)
 800aada:	4680      	mov	r8, r0
 800aadc:	f7f6 f8e8 	bl	8000cb0 <__aeabi_fmul>
 800aae0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800aae4:	f7f5 ffdc 	bl	8000aa0 <__addsf3>
 800aae8:	f7f6 fabe 	bl	8001068 <__aeabi_f2iz>
 800aaec:	4606      	mov	r6, r0
 800aaee:	f7f6 f88b 	bl	8000c08 <__aeabi_i2f>
 800aaf2:	4968      	ldr	r1, [pc, #416]	; (800ac94 <__ieee754_rem_pio2f+0x284>)
 800aaf4:	4682      	mov	sl, r0
 800aaf6:	f7f6 f8db 	bl	8000cb0 <__aeabi_fmul>
 800aafa:	4601      	mov	r1, r0
 800aafc:	4640      	mov	r0, r8
 800aafe:	f7f5 ffcd 	bl	8000a9c <__aeabi_fsub>
 800ab02:	4966      	ldr	r1, [pc, #408]	; (800ac9c <__ieee754_rem_pio2f+0x28c>)
 800ab04:	4680      	mov	r8, r0
 800ab06:	4650      	mov	r0, sl
 800ab08:	f7f6 f8d2 	bl	8000cb0 <__aeabi_fmul>
 800ab0c:	2e1f      	cmp	r6, #31
 800ab0e:	4681      	mov	r9, r0
 800ab10:	dc0c      	bgt.n	800ab2c <__ieee754_rem_pio2f+0x11c>
 800ab12:	4a67      	ldr	r2, [pc, #412]	; (800acb0 <__ieee754_rem_pio2f+0x2a0>)
 800ab14:	1e71      	subs	r1, r6, #1
 800ab16:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ab1a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d004      	beq.n	800ab2c <__ieee754_rem_pio2f+0x11c>
 800ab22:	4649      	mov	r1, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	f7f5 ffb9 	bl	8000a9c <__aeabi_fsub>
 800ab2a:	e009      	b.n	800ab40 <__ieee754_rem_pio2f+0x130>
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f7f5 ffb4 	bl	8000a9c <__aeabi_fsub>
 800ab34:	15ed      	asrs	r5, r5, #23
 800ab36:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab3a:	1aeb      	subs	r3, r5, r3
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	dc01      	bgt.n	800ab44 <__ieee754_rem_pio2f+0x134>
 800ab40:	6020      	str	r0, [r4, #0]
 800ab42:	e024      	b.n	800ab8e <__ieee754_rem_pio2f+0x17e>
 800ab44:	4956      	ldr	r1, [pc, #344]	; (800aca0 <__ieee754_rem_pio2f+0x290>)
 800ab46:	4650      	mov	r0, sl
 800ab48:	f7f6 f8b2 	bl	8000cb0 <__aeabi_fmul>
 800ab4c:	4681      	mov	r9, r0
 800ab4e:	4601      	mov	r1, r0
 800ab50:	4640      	mov	r0, r8
 800ab52:	f7f5 ffa3 	bl	8000a9c <__aeabi_fsub>
 800ab56:	4601      	mov	r1, r0
 800ab58:	4683      	mov	fp, r0
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	f7f5 ff9e 	bl	8000a9c <__aeabi_fsub>
 800ab60:	4649      	mov	r1, r9
 800ab62:	f7f5 ff9b 	bl	8000a9c <__aeabi_fsub>
 800ab66:	4680      	mov	r8, r0
 800ab68:	494e      	ldr	r1, [pc, #312]	; (800aca4 <__ieee754_rem_pio2f+0x294>)
 800ab6a:	4650      	mov	r0, sl
 800ab6c:	f7f6 f8a0 	bl	8000cb0 <__aeabi_fmul>
 800ab70:	4641      	mov	r1, r8
 800ab72:	f7f5 ff93 	bl	8000a9c <__aeabi_fsub>
 800ab76:	4601      	mov	r1, r0
 800ab78:	4681      	mov	r9, r0
 800ab7a:	4658      	mov	r0, fp
 800ab7c:	f7f5 ff8e 	bl	8000a9c <__aeabi_fsub>
 800ab80:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab84:	1aed      	subs	r5, r5, r3
 800ab86:	2d19      	cmp	r5, #25
 800ab88:	dc15      	bgt.n	800abb6 <__ieee754_rem_pio2f+0x1a6>
 800ab8a:	46d8      	mov	r8, fp
 800ab8c:	6020      	str	r0, [r4, #0]
 800ab8e:	6825      	ldr	r5, [r4, #0]
 800ab90:	4640      	mov	r0, r8
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 ff82 	bl	8000a9c <__aeabi_fsub>
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 ff7f 	bl	8000a9c <__aeabi_fsub>
 800ab9e:	2f00      	cmp	r7, #0
 800aba0:	6060      	str	r0, [r4, #4]
 800aba2:	f6bf af5f 	bge.w	800aa64 <__ieee754_rem_pio2f+0x54>
 800aba6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800abaa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800abae:	6025      	str	r5, [r4, #0]
 800abb0:	6060      	str	r0, [r4, #4]
 800abb2:	4276      	negs	r6, r6
 800abb4:	e756      	b.n	800aa64 <__ieee754_rem_pio2f+0x54>
 800abb6:	493f      	ldr	r1, [pc, #252]	; (800acb4 <__ieee754_rem_pio2f+0x2a4>)
 800abb8:	4650      	mov	r0, sl
 800abba:	f7f6 f879 	bl	8000cb0 <__aeabi_fmul>
 800abbe:	4605      	mov	r5, r0
 800abc0:	4601      	mov	r1, r0
 800abc2:	4658      	mov	r0, fp
 800abc4:	f7f5 ff6a 	bl	8000a9c <__aeabi_fsub>
 800abc8:	4601      	mov	r1, r0
 800abca:	4680      	mov	r8, r0
 800abcc:	4658      	mov	r0, fp
 800abce:	f7f5 ff65 	bl	8000a9c <__aeabi_fsub>
 800abd2:	4629      	mov	r1, r5
 800abd4:	f7f5 ff62 	bl	8000a9c <__aeabi_fsub>
 800abd8:	4605      	mov	r5, r0
 800abda:	4937      	ldr	r1, [pc, #220]	; (800acb8 <__ieee754_rem_pio2f+0x2a8>)
 800abdc:	4650      	mov	r0, sl
 800abde:	f7f6 f867 	bl	8000cb0 <__aeabi_fmul>
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 ff5a 	bl	8000a9c <__aeabi_fsub>
 800abe8:	4681      	mov	r9, r0
 800abea:	e79a      	b.n	800ab22 <__ieee754_rem_pio2f+0x112>
 800abec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800abf0:	db05      	blt.n	800abfe <__ieee754_rem_pio2f+0x1ee>
 800abf2:	4601      	mov	r1, r0
 800abf4:	f7f5 ff52 	bl	8000a9c <__aeabi_fsub>
 800abf8:	6060      	str	r0, [r4, #4]
 800abfa:	6020      	str	r0, [r4, #0]
 800abfc:	e715      	b.n	800aa2a <__ieee754_rem_pio2f+0x1a>
 800abfe:	15ee      	asrs	r6, r5, #23
 800ac00:	3e86      	subs	r6, #134	; 0x86
 800ac02:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800ac06:	4628      	mov	r0, r5
 800ac08:	f7f6 fa2e 	bl	8001068 <__aeabi_f2iz>
 800ac0c:	f7f5 fffc 	bl	8000c08 <__aeabi_i2f>
 800ac10:	4601      	mov	r1, r0
 800ac12:	9003      	str	r0, [sp, #12]
 800ac14:	4628      	mov	r0, r5
 800ac16:	f7f5 ff41 	bl	8000a9c <__aeabi_fsub>
 800ac1a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ac1e:	f7f6 f847 	bl	8000cb0 <__aeabi_fmul>
 800ac22:	4680      	mov	r8, r0
 800ac24:	f7f6 fa20 	bl	8001068 <__aeabi_f2iz>
 800ac28:	f7f5 ffee 	bl	8000c08 <__aeabi_i2f>
 800ac2c:	4601      	mov	r1, r0
 800ac2e:	9004      	str	r0, [sp, #16]
 800ac30:	4605      	mov	r5, r0
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7f5 ff32 	bl	8000a9c <__aeabi_fsub>
 800ac38:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ac3c:	f7f6 f838 	bl	8000cb0 <__aeabi_fmul>
 800ac40:	2100      	movs	r1, #0
 800ac42:	9005      	str	r0, [sp, #20]
 800ac44:	f7f6 f9c8 	bl	8000fd8 <__aeabi_fcmpeq>
 800ac48:	b1e8      	cbz	r0, 800ac86 <__ieee754_rem_pio2f+0x276>
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7f6 f9c3 	bl	8000fd8 <__aeabi_fcmpeq>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2302      	moveq	r3, #2
 800ac5a:	4a18      	ldr	r2, [pc, #96]	; (800acbc <__ieee754_rem_pio2f+0x2ac>)
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	9201      	str	r2, [sp, #4]
 800ac60:	2202      	movs	r2, #2
 800ac62:	a803      	add	r0, sp, #12
 800ac64:	9200      	str	r2, [sp, #0]
 800ac66:	4632      	mov	r2, r6
 800ac68:	f000 f910 	bl	800ae8c <__kernel_rem_pio2f>
 800ac6c:	2f00      	cmp	r7, #0
 800ac6e:	4606      	mov	r6, r0
 800ac70:	f6bf aef8 	bge.w	800aa64 <__ieee754_rem_pio2f+0x54>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	6863      	ldr	r3, [r4, #4]
 800ac7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac82:	6063      	str	r3, [r4, #4]
 800ac84:	e795      	b.n	800abb2 <__ieee754_rem_pio2f+0x1a2>
 800ac86:	2303      	movs	r3, #3
 800ac88:	e7e7      	b.n	800ac5a <__ieee754_rem_pio2f+0x24a>
 800ac8a:	bf00      	nop
 800ac8c:	3f490fd8 	.word	0x3f490fd8
 800ac90:	4016cbe3 	.word	0x4016cbe3
 800ac94:	3fc90f80 	.word	0x3fc90f80
 800ac98:	3fc90fd0 	.word	0x3fc90fd0
 800ac9c:	37354443 	.word	0x37354443
 800aca0:	37354400 	.word	0x37354400
 800aca4:	2e85a308 	.word	0x2e85a308
 800aca8:	43490f80 	.word	0x43490f80
 800acac:	3f22f984 	.word	0x3f22f984
 800acb0:	0800b9c4 	.word	0x0800b9c4
 800acb4:	2e85a300 	.word	0x2e85a300
 800acb8:	248d3132 	.word	0x248d3132
 800acbc:	0800ba44 	.word	0x0800ba44

0800acc0 <__ieee754_sqrtf>:
 800acc0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800acc4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	4603      	mov	r3, r0
 800accc:	4604      	mov	r4, r0
 800acce:	d309      	bcc.n	800ace4 <__ieee754_sqrtf+0x24>
 800acd0:	4601      	mov	r1, r0
 800acd2:	f7f5 ffed 	bl	8000cb0 <__aeabi_fmul>
 800acd6:	4601      	mov	r1, r0
 800acd8:	4620      	mov	r0, r4
 800acda:	f7f5 fee1 	bl	8000aa0 <__addsf3>
 800acde:	4604      	mov	r4, r0
 800ace0:	4620      	mov	r0, r4
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	d0fb      	beq.n	800ace0 <__ieee754_sqrtf+0x20>
 800ace8:	2800      	cmp	r0, #0
 800acea:	da06      	bge.n	800acfa <__ieee754_sqrtf+0x3a>
 800acec:	4601      	mov	r1, r0
 800acee:	f7f5 fed5 	bl	8000a9c <__aeabi_fsub>
 800acf2:	4601      	mov	r1, r0
 800acf4:	f7f6 f890 	bl	8000e18 <__aeabi_fdiv>
 800acf8:	e7f1      	b.n	800acde <__ieee754_sqrtf+0x1e>
 800acfa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800acfe:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800ad02:	d204      	bcs.n	800ad0e <__ieee754_sqrtf+0x4e>
 800ad04:	2200      	movs	r2, #0
 800ad06:	0219      	lsls	r1, r3, #8
 800ad08:	d529      	bpl.n	800ad5e <__ieee754_sqrtf+0x9e>
 800ad0a:	3a01      	subs	r2, #1
 800ad0c:	1aa4      	subs	r4, r4, r2
 800ad0e:	3c7f      	subs	r4, #127	; 0x7f
 800ad10:	07e2      	lsls	r2, r4, #31
 800ad12:	f04f 0200 	mov.w	r2, #0
 800ad16:	ea4f 0164 	mov.w	r1, r4, asr #1
 800ad1a:	4616      	mov	r6, r2
 800ad1c:	f04f 0419 	mov.w	r4, #25
 800ad20:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800ad24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad2c:	bf48      	it	mi
 800ad2e:	005b      	lslmi	r3, r3, #1
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	1835      	adds	r5, r6, r0
 800ad34:	429d      	cmp	r5, r3
 800ad36:	bfde      	ittt	le
 800ad38:	182e      	addle	r6, r5, r0
 800ad3a:	1b5b      	suble	r3, r3, r5
 800ad3c:	1812      	addle	r2, r2, r0
 800ad3e:	3c01      	subs	r4, #1
 800ad40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad44:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ad48:	d1f3      	bne.n	800ad32 <__ieee754_sqrtf+0x72>
 800ad4a:	b113      	cbz	r3, 800ad52 <__ieee754_sqrtf+0x92>
 800ad4c:	3201      	adds	r2, #1
 800ad4e:	f022 0201 	bic.w	r2, r2, #1
 800ad52:	1054      	asrs	r4, r2, #1
 800ad54:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ad58:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800ad5c:	e7c0      	b.n	800ace0 <__ieee754_sqrtf+0x20>
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	3201      	adds	r2, #1
 800ad62:	e7d0      	b.n	800ad06 <__ieee754_sqrtf+0x46>

0800ad64 <__kernel_cosf>:
 800ad64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad68:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800ad6c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ad70:	4606      	mov	r6, r0
 800ad72:	460f      	mov	r7, r1
 800ad74:	da03      	bge.n	800ad7e <__kernel_cosf+0x1a>
 800ad76:	f7f6 f977 	bl	8001068 <__aeabi_f2iz>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d070      	beq.n	800ae60 <__kernel_cosf+0xfc>
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7f5 ff95 	bl	8000cb0 <__aeabi_fmul>
 800ad86:	4605      	mov	r5, r0
 800ad88:	4937      	ldr	r1, [pc, #220]	; (800ae68 <__kernel_cosf+0x104>)
 800ad8a:	f7f5 ff91 	bl	8000cb0 <__aeabi_fmul>
 800ad8e:	4937      	ldr	r1, [pc, #220]	; (800ae6c <__kernel_cosf+0x108>)
 800ad90:	f7f5 fe86 	bl	8000aa0 <__addsf3>
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7f5 ff8b 	bl	8000cb0 <__aeabi_fmul>
 800ad9a:	4935      	ldr	r1, [pc, #212]	; (800ae70 <__kernel_cosf+0x10c>)
 800ad9c:	f7f5 fe7e 	bl	8000a9c <__aeabi_fsub>
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7f5 ff85 	bl	8000cb0 <__aeabi_fmul>
 800ada6:	4933      	ldr	r1, [pc, #204]	; (800ae74 <__kernel_cosf+0x110>)
 800ada8:	f7f5 fe7a 	bl	8000aa0 <__addsf3>
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 ff7f 	bl	8000cb0 <__aeabi_fmul>
 800adb2:	4931      	ldr	r1, [pc, #196]	; (800ae78 <__kernel_cosf+0x114>)
 800adb4:	f7f5 fe72 	bl	8000a9c <__aeabi_fsub>
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 ff79 	bl	8000cb0 <__aeabi_fmul>
 800adbe:	492f      	ldr	r1, [pc, #188]	; (800ae7c <__kernel_cosf+0x118>)
 800adc0:	f7f5 fe6e 	bl	8000aa0 <__addsf3>
 800adc4:	4629      	mov	r1, r5
 800adc6:	f7f5 ff73 	bl	8000cb0 <__aeabi_fmul>
 800adca:	4b2d      	ldr	r3, [pc, #180]	; (800ae80 <__kernel_cosf+0x11c>)
 800adcc:	4680      	mov	r8, r0
 800adce:	429c      	cmp	r4, r3
 800add0:	dc1d      	bgt.n	800ae0e <__kernel_cosf+0xaa>
 800add2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800add6:	4628      	mov	r0, r5
 800add8:	f7f5 ff6a 	bl	8000cb0 <__aeabi_fmul>
 800addc:	4641      	mov	r1, r8
 800adde:	4604      	mov	r4, r0
 800ade0:	4628      	mov	r0, r5
 800ade2:	f7f5 ff65 	bl	8000cb0 <__aeabi_fmul>
 800ade6:	4639      	mov	r1, r7
 800ade8:	4605      	mov	r5, r0
 800adea:	4630      	mov	r0, r6
 800adec:	f7f5 ff60 	bl	8000cb0 <__aeabi_fmul>
 800adf0:	4601      	mov	r1, r0
 800adf2:	4628      	mov	r0, r5
 800adf4:	f7f5 fe52 	bl	8000a9c <__aeabi_fsub>
 800adf8:	4601      	mov	r1, r0
 800adfa:	4620      	mov	r0, r4
 800adfc:	f7f5 fe4e 	bl	8000a9c <__aeabi_fsub>
 800ae00:	4601      	mov	r1, r0
 800ae02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ae06:	f7f5 fe49 	bl	8000a9c <__aeabi_fsub>
 800ae0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0e:	4b1d      	ldr	r3, [pc, #116]	; (800ae84 <__kernel_cosf+0x120>)
 800ae10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ae14:	429c      	cmp	r4, r3
 800ae16:	bfcc      	ite	gt
 800ae18:	4c1b      	ldrgt	r4, [pc, #108]	; (800ae88 <__kernel_cosf+0x124>)
 800ae1a:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f7f5 fe3c 	bl	8000a9c <__aeabi_fsub>
 800ae24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ae28:	4681      	mov	r9, r0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f7f5 ff40 	bl	8000cb0 <__aeabi_fmul>
 800ae30:	4621      	mov	r1, r4
 800ae32:	f7f5 fe33 	bl	8000a9c <__aeabi_fsub>
 800ae36:	4641      	mov	r1, r8
 800ae38:	4604      	mov	r4, r0
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f7f5 ff38 	bl	8000cb0 <__aeabi_fmul>
 800ae40:	4639      	mov	r1, r7
 800ae42:	4605      	mov	r5, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7f5 ff33 	bl	8000cb0 <__aeabi_fmul>
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7f5 fe25 	bl	8000a9c <__aeabi_fsub>
 800ae52:	4601      	mov	r1, r0
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7f5 fe21 	bl	8000a9c <__aeabi_fsub>
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	4648      	mov	r0, r9
 800ae5e:	e7d2      	b.n	800ae06 <__kernel_cosf+0xa2>
 800ae60:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ae64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae68:	ad47d74e 	.word	0xad47d74e
 800ae6c:	310f74f6 	.word	0x310f74f6
 800ae70:	3493f27c 	.word	0x3493f27c
 800ae74:	37d00d01 	.word	0x37d00d01
 800ae78:	3ab60b61 	.word	0x3ab60b61
 800ae7c:	3d2aaaab 	.word	0x3d2aaaab
 800ae80:	3e999999 	.word	0x3e999999
 800ae84:	3f480000 	.word	0x3f480000
 800ae88:	3e900000 	.word	0x3e900000

0800ae8c <__kernel_rem_pio2f>:
 800ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	b0d9      	sub	sp, #356	; 0x164
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	9101      	str	r1, [sp, #4]
 800ae96:	4bb4      	ldr	r3, [pc, #720]	; (800b168 <__kernel_rem_pio2f+0x2dc>)
 800ae98:	9962      	ldr	r1, [sp, #392]	; 0x188
 800ae9a:	1ed4      	subs	r4, r2, #3
 800ae9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aea0:	2500      	movs	r5, #0
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	f04f 0b00 	mov.w	fp, #0
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	9303      	str	r3, [sp, #12]
 800aeae:	2308      	movs	r3, #8
 800aeb0:	fb94 f4f3 	sdiv	r4, r4, r3
 800aeb4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800aeb8:	1c66      	adds	r6, r4, #1
 800aeba:	9b02      	ldr	r3, [sp, #8]
 800aebc:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800aec0:	9a03      	ldr	r2, [sp, #12]
 800aec2:	9005      	str	r0, [sp, #20]
 800aec4:	eb03 0802 	add.w	r8, r3, r2
 800aec8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800aeca:	1aa7      	subs	r7, r4, r2
 800aecc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aed0:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800aed4:	4545      	cmp	r5, r8
 800aed6:	dd10      	ble.n	800aefa <__kernel_rem_pio2f+0x6e>
 800aed8:	2500      	movs	r5, #0
 800aeda:	f04f 0b00 	mov.w	fp, #0
 800aede:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	429d      	cmp	r5, r3
 800aee6:	dc28      	bgt.n	800af3a <__kernel_rem_pio2f+0xae>
 800aee8:	9b04      	ldr	r3, [sp, #16]
 800aeea:	46d9      	mov	r9, fp
 800aeec:	eb03 0805 	add.w	r8, r3, r5
 800aef0:	ab1c      	add	r3, sp, #112	; 0x70
 800aef2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800aef6:	2700      	movs	r7, #0
 800aef8:	e018      	b.n	800af2c <__kernel_rem_pio2f+0xa0>
 800aefa:	42ef      	cmn	r7, r5
 800aefc:	d407      	bmi.n	800af0e <__kernel_rem_pio2f+0x82>
 800aefe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800af02:	f7f5 fe81 	bl	8000c08 <__aeabi_i2f>
 800af06:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800af0a:	3501      	adds	r5, #1
 800af0c:	e7e2      	b.n	800aed4 <__kernel_rem_pio2f+0x48>
 800af0e:	4658      	mov	r0, fp
 800af10:	e7f9      	b.n	800af06 <__kernel_rem_pio2f+0x7a>
 800af12:	9b05      	ldr	r3, [sp, #20]
 800af14:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800af18:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800af1c:	f7f5 fec8 	bl	8000cb0 <__aeabi_fmul>
 800af20:	4601      	mov	r1, r0
 800af22:	4648      	mov	r0, r9
 800af24:	f7f5 fdbc 	bl	8000aa0 <__addsf3>
 800af28:	4681      	mov	r9, r0
 800af2a:	3701      	adds	r7, #1
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	429f      	cmp	r7, r3
 800af30:	ddef      	ble.n	800af12 <__kernel_rem_pio2f+0x86>
 800af32:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800af36:	3501      	adds	r5, #1
 800af38:	e7d3      	b.n	800aee2 <__kernel_rem_pio2f+0x56>
 800af3a:	9b02      	ldr	r3, [sp, #8]
 800af3c:	aa08      	add	r2, sp, #32
 800af3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af42:	9307      	str	r3, [sp, #28]
 800af44:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800af46:	9f02      	ldr	r7, [sp, #8]
 800af48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af4c:	9306      	str	r3, [sp, #24]
 800af4e:	46ba      	mov	sl, r7
 800af50:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800af54:	ab58      	add	r3, sp, #352	; 0x160
 800af56:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800af5a:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800af5e:	ad07      	add	r5, sp, #28
 800af60:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800af64:	f1ba 0f00 	cmp.w	sl, #0
 800af68:	dc57      	bgt.n	800b01a <__kernel_rem_pio2f+0x18e>
 800af6a:	4631      	mov	r1, r6
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 fba7 	bl	800b6c0 <scalbnf>
 800af72:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800af76:	4604      	mov	r4, r0
 800af78:	f7f5 fe9a 	bl	8000cb0 <__aeabi_fmul>
 800af7c:	f7ff fbb8 	bl	800a6f0 <floorf>
 800af80:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800af84:	f7f5 fe94 	bl	8000cb0 <__aeabi_fmul>
 800af88:	4601      	mov	r1, r0
 800af8a:	4620      	mov	r0, r4
 800af8c:	f7f5 fd86 	bl	8000a9c <__aeabi_fsub>
 800af90:	4604      	mov	r4, r0
 800af92:	f7f6 f869 	bl	8001068 <__aeabi_f2iz>
 800af96:	4680      	mov	r8, r0
 800af98:	f7f5 fe36 	bl	8000c08 <__aeabi_i2f>
 800af9c:	4601      	mov	r1, r0
 800af9e:	4620      	mov	r0, r4
 800afa0:	f7f5 fd7c 	bl	8000a9c <__aeabi_fsub>
 800afa4:	2e00      	cmp	r6, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	dd55      	ble.n	800b056 <__kernel_rem_pio2f+0x1ca>
 800afaa:	1e7b      	subs	r3, r7, #1
 800afac:	aa08      	add	r2, sp, #32
 800afae:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800afb2:	f1c6 0208 	rsb	r2, r6, #8
 800afb6:	fa45 f002 	asr.w	r0, r5, r2
 800afba:	4480      	add	r8, r0
 800afbc:	4090      	lsls	r0, r2
 800afbe:	1a2d      	subs	r5, r5, r0
 800afc0:	aa08      	add	r2, sp, #32
 800afc2:	f1c6 0007 	rsb	r0, r6, #7
 800afc6:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800afca:	4105      	asrs	r5, r0
 800afcc:	2d00      	cmp	r5, #0
 800afce:	dd50      	ble.n	800b072 <__kernel_rem_pio2f+0x1e6>
 800afd0:	2200      	movs	r2, #0
 800afd2:	4691      	mov	r9, r2
 800afd4:	f108 0801 	add.w	r8, r8, #1
 800afd8:	4297      	cmp	r7, r2
 800afda:	f300 8085 	bgt.w	800b0e8 <__kernel_rem_pio2f+0x25c>
 800afde:	2e00      	cmp	r6, #0
 800afe0:	dd05      	ble.n	800afee <__kernel_rem_pio2f+0x162>
 800afe2:	2e01      	cmp	r6, #1
 800afe4:	f000 8097 	beq.w	800b116 <__kernel_rem_pio2f+0x28a>
 800afe8:	2e02      	cmp	r6, #2
 800afea:	f000 809e 	beq.w	800b12a <__kernel_rem_pio2f+0x29e>
 800afee:	2d02      	cmp	r5, #2
 800aff0:	d13f      	bne.n	800b072 <__kernel_rem_pio2f+0x1e6>
 800aff2:	4621      	mov	r1, r4
 800aff4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aff8:	f7f5 fd50 	bl	8000a9c <__aeabi_fsub>
 800affc:	4604      	mov	r4, r0
 800affe:	f1b9 0f00 	cmp.w	r9, #0
 800b002:	d036      	beq.n	800b072 <__kernel_rem_pio2f+0x1e6>
 800b004:	4631      	mov	r1, r6
 800b006:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b00a:	f000 fb59 	bl	800b6c0 <scalbnf>
 800b00e:	4601      	mov	r1, r0
 800b010:	4620      	mov	r0, r4
 800b012:	f7f5 fd43 	bl	8000a9c <__aeabi_fsub>
 800b016:	4604      	mov	r4, r0
 800b018:	e02b      	b.n	800b072 <__kernel_rem_pio2f+0x1e6>
 800b01a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b01e:	4620      	mov	r0, r4
 800b020:	f7f5 fe46 	bl	8000cb0 <__aeabi_fmul>
 800b024:	f7f6 f820 	bl	8001068 <__aeabi_f2iz>
 800b028:	f7f5 fdee 	bl	8000c08 <__aeabi_i2f>
 800b02c:	4641      	mov	r1, r8
 800b02e:	4683      	mov	fp, r0
 800b030:	f7f5 fe3e 	bl	8000cb0 <__aeabi_fmul>
 800b034:	4601      	mov	r1, r0
 800b036:	4620      	mov	r0, r4
 800b038:	f7f5 fd30 	bl	8000a9c <__aeabi_fsub>
 800b03c:	f7f6 f814 	bl	8001068 <__aeabi_f2iz>
 800b040:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b044:	f845 0f04 	str.w	r0, [r5, #4]!
 800b048:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b04c:	4658      	mov	r0, fp
 800b04e:	f7f5 fd27 	bl	8000aa0 <__addsf3>
 800b052:	4604      	mov	r4, r0
 800b054:	e786      	b.n	800af64 <__kernel_rem_pio2f+0xd8>
 800b056:	d105      	bne.n	800b064 <__kernel_rem_pio2f+0x1d8>
 800b058:	1e7b      	subs	r3, r7, #1
 800b05a:	aa08      	add	r2, sp, #32
 800b05c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b060:	122d      	asrs	r5, r5, #8
 800b062:	e7b3      	b.n	800afcc <__kernel_rem_pio2f+0x140>
 800b064:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b068:	f7f5 ffd4 	bl	8001014 <__aeabi_fcmpge>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d139      	bne.n	800b0e4 <__kernel_rem_pio2f+0x258>
 800b070:	4605      	mov	r5, r0
 800b072:	2100      	movs	r1, #0
 800b074:	4620      	mov	r0, r4
 800b076:	f7f5 ffaf 	bl	8000fd8 <__aeabi_fcmpeq>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f000 8098 	beq.w	800b1b0 <__kernel_rem_pio2f+0x324>
 800b080:	1e7c      	subs	r4, r7, #1
 800b082:	4623      	mov	r3, r4
 800b084:	2200      	movs	r2, #0
 800b086:	9902      	ldr	r1, [sp, #8]
 800b088:	428b      	cmp	r3, r1
 800b08a:	da55      	bge.n	800b138 <__kernel_rem_pio2f+0x2ac>
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d16e      	bne.n	800b16e <__kernel_rem_pio2f+0x2e2>
 800b090:	2301      	movs	r3, #1
 800b092:	f06f 0103 	mvn.w	r1, #3
 800b096:	fb01 f203 	mul.w	r2, r1, r3
 800b09a:	9807      	ldr	r0, [sp, #28]
 800b09c:	5882      	ldr	r2, [r0, r2]
 800b09e:	2a00      	cmp	r2, #0
 800b0a0:	d050      	beq.n	800b144 <__kernel_rem_pio2f+0x2b8>
 800b0a2:	f06f 0803 	mvn.w	r8, #3
 800b0a6:	9a04      	ldr	r2, [sp, #16]
 800b0a8:	1c7d      	adds	r5, r7, #1
 800b0aa:	19d4      	adds	r4, r2, r7
 800b0ac:	aa58      	add	r2, sp, #352	; 0x160
 800b0ae:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b0b2:	3cf4      	subs	r4, #244	; 0xf4
 800b0b4:	441f      	add	r7, r3
 800b0b6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b0ba:	42bd      	cmp	r5, r7
 800b0bc:	f73f af47 	bgt.w	800af4e <__kernel_rem_pio2f+0xc2>
 800b0c0:	9b06      	ldr	r3, [sp, #24]
 800b0c2:	f04f 0a00 	mov.w	sl, #0
 800b0c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0ca:	f7f5 fd9d 	bl	8000c08 <__aeabi_i2f>
 800b0ce:	f04f 0b00 	mov.w	fp, #0
 800b0d2:	f844 0f04 	str.w	r0, [r4, #4]!
 800b0d6:	9b03      	ldr	r3, [sp, #12]
 800b0d8:	459a      	cmp	sl, r3
 800b0da:	dd35      	ble.n	800b148 <__kernel_rem_pio2f+0x2bc>
 800b0dc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	e7ea      	b.n	800b0ba <__kernel_rem_pio2f+0x22e>
 800b0e4:	2502      	movs	r5, #2
 800b0e6:	e773      	b.n	800afd0 <__kernel_rem_pio2f+0x144>
 800b0e8:	ab08      	add	r3, sp, #32
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	f1b9 0f00 	cmp.w	r9, #0
 800b0f2:	d109      	bne.n	800b108 <__kernel_rem_pio2f+0x27c>
 800b0f4:	b12b      	cbz	r3, 800b102 <__kernel_rem_pio2f+0x276>
 800b0f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b0fa:	a908      	add	r1, sp, #32
 800b0fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b100:	2301      	movs	r3, #1
 800b102:	3201      	adds	r2, #1
 800b104:	4699      	mov	r9, r3
 800b106:	e767      	b.n	800afd8 <__kernel_rem_pio2f+0x14c>
 800b108:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b10c:	a908      	add	r1, sp, #32
 800b10e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b112:	464b      	mov	r3, r9
 800b114:	e7f5      	b.n	800b102 <__kernel_rem_pio2f+0x276>
 800b116:	1e7a      	subs	r2, r7, #1
 800b118:	ab08      	add	r3, sp, #32
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b122:	a908      	add	r1, sp, #32
 800b124:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b128:	e761      	b.n	800afee <__kernel_rem_pio2f+0x162>
 800b12a:	1e7a      	subs	r2, r7, #1
 800b12c:	ab08      	add	r3, sp, #32
 800b12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b136:	e7f4      	b.n	800b122 <__kernel_rem_pio2f+0x296>
 800b138:	a908      	add	r1, sp, #32
 800b13a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b13e:	3b01      	subs	r3, #1
 800b140:	430a      	orrs	r2, r1
 800b142:	e7a0      	b.n	800b086 <__kernel_rem_pio2f+0x1fa>
 800b144:	3301      	adds	r3, #1
 800b146:	e7a6      	b.n	800b096 <__kernel_rem_pio2f+0x20a>
 800b148:	fb08 f30a 	mul.w	r3, r8, sl
 800b14c:	9a05      	ldr	r2, [sp, #20]
 800b14e:	58e0      	ldr	r0, [r4, r3]
 800b150:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800b154:	f7f5 fdac 	bl	8000cb0 <__aeabi_fmul>
 800b158:	4601      	mov	r1, r0
 800b15a:	4658      	mov	r0, fp
 800b15c:	f7f5 fca0 	bl	8000aa0 <__addsf3>
 800b160:	f10a 0a01 	add.w	sl, sl, #1
 800b164:	4683      	mov	fp, r0
 800b166:	e7b6      	b.n	800b0d6 <__kernel_rem_pio2f+0x24a>
 800b168:	0800bd88 	.word	0x0800bd88
 800b16c:	3c01      	subs	r4, #1
 800b16e:	ab08      	add	r3, sp, #32
 800b170:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b174:	3e08      	subs	r6, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0f8      	beq.n	800b16c <__kernel_rem_pio2f+0x2e0>
 800b17a:	4631      	mov	r1, r6
 800b17c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b180:	f000 fa9e 	bl	800b6c0 <scalbnf>
 800b184:	46a1      	mov	r9, r4
 800b186:	4682      	mov	sl, r0
 800b188:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800b18c:	ae44      	add	r6, sp, #272	; 0x110
 800b18e:	f1b9 0f00 	cmp.w	r9, #0
 800b192:	da3f      	bge.n	800b214 <__kernel_rem_pio2f+0x388>
 800b194:	2700      	movs	r7, #0
 800b196:	f04f 0b00 	mov.w	fp, #0
 800b19a:	4b82      	ldr	r3, [pc, #520]	; (800b3a4 <__kernel_rem_pio2f+0x518>)
 800b19c:	aa30      	add	r2, sp, #192	; 0xc0
 800b19e:	ebb4 0a07 	subs.w	sl, r4, r7
 800b1a2:	d462      	bmi.n	800b26a <__kernel_rem_pio2f+0x3de>
 800b1a4:	a944      	add	r1, sp, #272	; 0x110
 800b1a6:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800b1aa:	46d9      	mov	r9, fp
 800b1ac:	2600      	movs	r6, #0
 800b1ae:	e053      	b.n	800b258 <__kernel_rem_pio2f+0x3cc>
 800b1b0:	4271      	negs	r1, r6
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fa84 	bl	800b6c0 <scalbnf>
 800b1b8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b1bc:	4604      	mov	r4, r0
 800b1be:	f7f5 ff29 	bl	8001014 <__aeabi_fcmpge>
 800b1c2:	b1f8      	cbz	r0, 800b204 <__kernel_rem_pio2f+0x378>
 800b1c4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7f5 fd71 	bl	8000cb0 <__aeabi_fmul>
 800b1ce:	f7f5 ff4b 	bl	8001068 <__aeabi_f2iz>
 800b1d2:	f7f5 fd19 	bl	8000c08 <__aeabi_i2f>
 800b1d6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b1da:	4681      	mov	r9, r0
 800b1dc:	f7f5 fd68 	bl	8000cb0 <__aeabi_fmul>
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f7f5 fc5a 	bl	8000a9c <__aeabi_fsub>
 800b1e8:	f7f5 ff3e 	bl	8001068 <__aeabi_f2iz>
 800b1ec:	ab08      	add	r3, sp, #32
 800b1ee:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b1f2:	4648      	mov	r0, r9
 800b1f4:	f7f5 ff38 	bl	8001068 <__aeabi_f2iz>
 800b1f8:	1c7c      	adds	r4, r7, #1
 800b1fa:	ab08      	add	r3, sp, #32
 800b1fc:	3608      	adds	r6, #8
 800b1fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b202:	e7ba      	b.n	800b17a <__kernel_rem_pio2f+0x2ee>
 800b204:	4620      	mov	r0, r4
 800b206:	f7f5 ff2f 	bl	8001068 <__aeabi_f2iz>
 800b20a:	ab08      	add	r3, sp, #32
 800b20c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b210:	463c      	mov	r4, r7
 800b212:	e7b2      	b.n	800b17a <__kernel_rem_pio2f+0x2ee>
 800b214:	ab08      	add	r3, sp, #32
 800b216:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b21a:	f7f5 fcf5 	bl	8000c08 <__aeabi_i2f>
 800b21e:	4651      	mov	r1, sl
 800b220:	f7f5 fd46 	bl	8000cb0 <__aeabi_fmul>
 800b224:	4639      	mov	r1, r7
 800b226:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800b22a:	4650      	mov	r0, sl
 800b22c:	f7f5 fd40 	bl	8000cb0 <__aeabi_fmul>
 800b230:	f109 39ff 	add.w	r9, r9, #4294967295
 800b234:	4682      	mov	sl, r0
 800b236:	e7aa      	b.n	800b18e <__kernel_rem_pio2f+0x302>
 800b238:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b23c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800b240:	9204      	str	r2, [sp, #16]
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	f7f5 fd34 	bl	8000cb0 <__aeabi_fmul>
 800b248:	4601      	mov	r1, r0
 800b24a:	4648      	mov	r0, r9
 800b24c:	f7f5 fc28 	bl	8000aa0 <__addsf3>
 800b250:	4681      	mov	r9, r0
 800b252:	9a04      	ldr	r2, [sp, #16]
 800b254:	9b03      	ldr	r3, [sp, #12]
 800b256:	3601      	adds	r6, #1
 800b258:	9902      	ldr	r1, [sp, #8]
 800b25a:	428e      	cmp	r6, r1
 800b25c:	dc01      	bgt.n	800b262 <__kernel_rem_pio2f+0x3d6>
 800b25e:	42be      	cmp	r6, r7
 800b260:	ddea      	ble.n	800b238 <__kernel_rem_pio2f+0x3ac>
 800b262:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800b266:	3701      	adds	r7, #1
 800b268:	e799      	b.n	800b19e <__kernel_rem_pio2f+0x312>
 800b26a:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d826      	bhi.n	800b2be <__kernel_rem_pio2f+0x432>
 800b270:	e8df f003 	tbb	[pc, r3]
 800b274:	2a02021c 	.word	0x2a02021c
 800b278:	4626      	mov	r6, r4
 800b27a:	2000      	movs	r0, #0
 800b27c:	af30      	add	r7, sp, #192	; 0xc0
 800b27e:	2e00      	cmp	r6, #0
 800b280:	da40      	bge.n	800b304 <__kernel_rem_pio2f+0x478>
 800b282:	2d00      	cmp	r5, #0
 800b284:	d044      	beq.n	800b310 <__kernel_rem_pio2f+0x484>
 800b286:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b28a:	9a01      	ldr	r2, [sp, #4]
 800b28c:	af58      	add	r7, sp, #352	; 0x160
 800b28e:	4601      	mov	r1, r0
 800b290:	6013      	str	r3, [r2, #0]
 800b292:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800b296:	f7f5 fc01 	bl	8000a9c <__aeabi_fsub>
 800b29a:	2601      	movs	r6, #1
 800b29c:	42b4      	cmp	r4, r6
 800b29e:	da39      	bge.n	800b314 <__kernel_rem_pio2f+0x488>
 800b2a0:	b10d      	cbz	r5, 800b2a6 <__kernel_rem_pio2f+0x41a>
 800b2a2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	6058      	str	r0, [r3, #4]
 800b2aa:	e008      	b.n	800b2be <__kernel_rem_pio2f+0x432>
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	ae30      	add	r6, sp, #192	; 0xc0
 800b2b0:	2c00      	cmp	r4, #0
 800b2b2:	da21      	bge.n	800b2f8 <__kernel_rem_pio2f+0x46c>
 800b2b4:	b10d      	cbz	r5, 800b2ba <__kernel_rem_pio2f+0x42e>
 800b2b6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	6018      	str	r0, [r3, #0]
 800b2be:	f008 0007 	and.w	r0, r8, #7
 800b2c2:	b059      	add	sp, #356	; 0x164
 800b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c8:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800b2cc:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800b2d0:	4637      	mov	r7, r6
 800b2d2:	46a1      	mov	r9, r4
 800b2d4:	f1b9 0f00 	cmp.w	r9, #0
 800b2d8:	dc22      	bgt.n	800b320 <__kernel_rem_pio2f+0x494>
 800b2da:	4627      	mov	r7, r4
 800b2dc:	2f01      	cmp	r7, #1
 800b2de:	dc38      	bgt.n	800b352 <__kernel_rem_pio2f+0x4c6>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	2c01      	cmp	r4, #1
 800b2e4:	dc4c      	bgt.n	800b380 <__kernel_rem_pio2f+0x4f4>
 800b2e6:	2d00      	cmp	r5, #0
 800b2e8:	d150      	bne.n	800b38c <__kernel_rem_pio2f+0x500>
 800b2ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b2ec:	9a01      	ldr	r2, [sp, #4]
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b2f2:	6053      	str	r3, [r2, #4]
 800b2f4:	6090      	str	r0, [r2, #8]
 800b2f6:	e7e2      	b.n	800b2be <__kernel_rem_pio2f+0x432>
 800b2f8:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800b2fc:	f7f5 fbd0 	bl	8000aa0 <__addsf3>
 800b300:	3c01      	subs	r4, #1
 800b302:	e7d5      	b.n	800b2b0 <__kernel_rem_pio2f+0x424>
 800b304:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800b308:	f7f5 fbca 	bl	8000aa0 <__addsf3>
 800b30c:	3e01      	subs	r6, #1
 800b30e:	e7b6      	b.n	800b27e <__kernel_rem_pio2f+0x3f2>
 800b310:	4603      	mov	r3, r0
 800b312:	e7ba      	b.n	800b28a <__kernel_rem_pio2f+0x3fe>
 800b314:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800b318:	f7f5 fbc2 	bl	8000aa0 <__addsf3>
 800b31c:	3601      	adds	r6, #1
 800b31e:	e7bd      	b.n	800b29c <__kernel_rem_pio2f+0x410>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b326:	4619      	mov	r1, r3
 800b328:	4610      	mov	r0, r2
 800b32a:	9303      	str	r3, [sp, #12]
 800b32c:	9202      	str	r2, [sp, #8]
 800b32e:	f7f5 fbb7 	bl	8000aa0 <__addsf3>
 800b332:	9a02      	ldr	r2, [sp, #8]
 800b334:	4601      	mov	r1, r0
 800b336:	4683      	mov	fp, r0
 800b338:	4610      	mov	r0, r2
 800b33a:	f7f5 fbaf 	bl	8000a9c <__aeabi_fsub>
 800b33e:	9b03      	ldr	r3, [sp, #12]
 800b340:	f109 39ff 	add.w	r9, r9, #4294967295
 800b344:	4619      	mov	r1, r3
 800b346:	f7f5 fbab 	bl	8000aa0 <__addsf3>
 800b34a:	6038      	str	r0, [r7, #0]
 800b34c:	f847 bd04 	str.w	fp, [r7, #-4]!
 800b350:	e7c0      	b.n	800b2d4 <__kernel_rem_pio2f+0x448>
 800b352:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b356:	f8d6 b000 	ldr.w	fp, [r6]
 800b35a:	4618      	mov	r0, r3
 800b35c:	4659      	mov	r1, fp
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	f7f5 fb9e 	bl	8000aa0 <__addsf3>
 800b364:	9b02      	ldr	r3, [sp, #8]
 800b366:	4601      	mov	r1, r0
 800b368:	4681      	mov	r9, r0
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f5 fb96 	bl	8000a9c <__aeabi_fsub>
 800b370:	4659      	mov	r1, fp
 800b372:	f7f5 fb95 	bl	8000aa0 <__addsf3>
 800b376:	3f01      	subs	r7, #1
 800b378:	6030      	str	r0, [r6, #0]
 800b37a:	f846 9d04 	str.w	r9, [r6, #-4]!
 800b37e:	e7ad      	b.n	800b2dc <__kernel_rem_pio2f+0x450>
 800b380:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800b384:	f7f5 fb8c 	bl	8000aa0 <__addsf3>
 800b388:	3c01      	subs	r4, #1
 800b38a:	e7aa      	b.n	800b2e2 <__kernel_rem_pio2f+0x456>
 800b38c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b38e:	9a01      	ldr	r2, [sp, #4]
 800b390:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b398:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b39c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3a0:	6053      	str	r3, [r2, #4]
 800b3a2:	e7a7      	b.n	800b2f4 <__kernel_rem_pio2f+0x468>
 800b3a4:	0800bd5c 	.word	0x0800bd5c

0800b3a8 <__kernel_sinf>:
 800b3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b3b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	4691      	mov	r9, r2
 800b3ba:	da03      	bge.n	800b3c4 <__kernel_sinf+0x1c>
 800b3bc:	f7f5 fe54 	bl	8001068 <__aeabi_f2iz>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d035      	beq.n	800b430 <__kernel_sinf+0x88>
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f7f5 fc72 	bl	8000cb0 <__aeabi_fmul>
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7f5 fc6d 	bl	8000cb0 <__aeabi_fmul>
 800b3d6:	4929      	ldr	r1, [pc, #164]	; (800b47c <__kernel_sinf+0xd4>)
 800b3d8:	4606      	mov	r6, r0
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f7f5 fc68 	bl	8000cb0 <__aeabi_fmul>
 800b3e0:	4927      	ldr	r1, [pc, #156]	; (800b480 <__kernel_sinf+0xd8>)
 800b3e2:	f7f5 fb5b 	bl	8000a9c <__aeabi_fsub>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f5 fc62 	bl	8000cb0 <__aeabi_fmul>
 800b3ec:	4925      	ldr	r1, [pc, #148]	; (800b484 <__kernel_sinf+0xdc>)
 800b3ee:	f7f5 fb57 	bl	8000aa0 <__addsf3>
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f5 fc5c 	bl	8000cb0 <__aeabi_fmul>
 800b3f8:	4923      	ldr	r1, [pc, #140]	; (800b488 <__kernel_sinf+0xe0>)
 800b3fa:	f7f5 fb4f 	bl	8000a9c <__aeabi_fsub>
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 fc56 	bl	8000cb0 <__aeabi_fmul>
 800b404:	4921      	ldr	r1, [pc, #132]	; (800b48c <__kernel_sinf+0xe4>)
 800b406:	f7f5 fb4b 	bl	8000aa0 <__addsf3>
 800b40a:	4680      	mov	r8, r0
 800b40c:	f1b9 0f00 	cmp.w	r9, #0
 800b410:	d111      	bne.n	800b436 <__kernel_sinf+0x8e>
 800b412:	4601      	mov	r1, r0
 800b414:	4628      	mov	r0, r5
 800b416:	f7f5 fc4b 	bl	8000cb0 <__aeabi_fmul>
 800b41a:	491d      	ldr	r1, [pc, #116]	; (800b490 <__kernel_sinf+0xe8>)
 800b41c:	f7f5 fb3e 	bl	8000a9c <__aeabi_fsub>
 800b420:	4631      	mov	r1, r6
 800b422:	f7f5 fc45 	bl	8000cb0 <__aeabi_fmul>
 800b426:	4601      	mov	r1, r0
 800b428:	4620      	mov	r0, r4
 800b42a:	f7f5 fb39 	bl	8000aa0 <__addsf3>
 800b42e:	4604      	mov	r4, r0
 800b430:	4620      	mov	r0, r4
 800b432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b43a:	4638      	mov	r0, r7
 800b43c:	f7f5 fc38 	bl	8000cb0 <__aeabi_fmul>
 800b440:	4641      	mov	r1, r8
 800b442:	4681      	mov	r9, r0
 800b444:	4630      	mov	r0, r6
 800b446:	f7f5 fc33 	bl	8000cb0 <__aeabi_fmul>
 800b44a:	4601      	mov	r1, r0
 800b44c:	4648      	mov	r0, r9
 800b44e:	f7f5 fb25 	bl	8000a9c <__aeabi_fsub>
 800b452:	4629      	mov	r1, r5
 800b454:	f7f5 fc2c 	bl	8000cb0 <__aeabi_fmul>
 800b458:	4639      	mov	r1, r7
 800b45a:	f7f5 fb1f 	bl	8000a9c <__aeabi_fsub>
 800b45e:	490c      	ldr	r1, [pc, #48]	; (800b490 <__kernel_sinf+0xe8>)
 800b460:	4605      	mov	r5, r0
 800b462:	4630      	mov	r0, r6
 800b464:	f7f5 fc24 	bl	8000cb0 <__aeabi_fmul>
 800b468:	4601      	mov	r1, r0
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7f5 fb18 	bl	8000aa0 <__addsf3>
 800b470:	4601      	mov	r1, r0
 800b472:	4620      	mov	r0, r4
 800b474:	f7f5 fb12 	bl	8000a9c <__aeabi_fsub>
 800b478:	e7d9      	b.n	800b42e <__kernel_sinf+0x86>
 800b47a:	bf00      	nop
 800b47c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b480:	32d72f34 	.word	0x32d72f34
 800b484:	3638ef1b 	.word	0x3638ef1b
 800b488:	39500d01 	.word	0x39500d01
 800b48c:	3c088889 	.word	0x3c088889
 800b490:	3e2aaaab 	.word	0x3e2aaaab

0800b494 <matherr>:
 800b494:	2000      	movs	r0, #0
 800b496:	4770      	bx	lr

0800b498 <atanf>:
 800b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b49c:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b4a0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	db0e      	blt.n	800b4c8 <atanf+0x30>
 800b4aa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b4ae:	dd04      	ble.n	800b4ba <atanf+0x22>
 800b4b0:	4601      	mov	r1, r0
 800b4b2:	f7f5 faf5 	bl	8000aa0 <__addsf3>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	e003      	b.n	800b4c2 <atanf+0x2a>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f300 80d2 	bgt.w	800b664 <atanf+0x1cc>
 800b4c0:	4c69      	ldr	r4, [pc, #420]	; (800b668 <atanf+0x1d0>)
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c8:	4b68      	ldr	r3, [pc, #416]	; (800b66c <atanf+0x1d4>)
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	dc0e      	bgt.n	800b4ec <atanf+0x54>
 800b4ce:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b4d2:	da08      	bge.n	800b4e6 <atanf+0x4e>
 800b4d4:	4966      	ldr	r1, [pc, #408]	; (800b670 <atanf+0x1d8>)
 800b4d6:	f7f5 fae3 	bl	8000aa0 <__addsf3>
 800b4da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b4de:	f7f5 fda3 	bl	8001028 <__aeabi_fcmpgt>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d1ed      	bne.n	800b4c2 <atanf+0x2a>
 800b4e6:	f04f 36ff 	mov.w	r6, #4294967295
 800b4ea:	e01c      	b.n	800b526 <atanf+0x8e>
 800b4ec:	f000 f8e4 	bl	800b6b8 <fabsf>
 800b4f0:	4b60      	ldr	r3, [pc, #384]	; (800b674 <atanf+0x1dc>)
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	429d      	cmp	r5, r3
 800b4f6:	dc7c      	bgt.n	800b5f2 <atanf+0x15a>
 800b4f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b4fc:	429d      	cmp	r5, r3
 800b4fe:	dc67      	bgt.n	800b5d0 <atanf+0x138>
 800b500:	4601      	mov	r1, r0
 800b502:	f7f5 facd 	bl	8000aa0 <__addsf3>
 800b506:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b50a:	f7f5 fac7 	bl	8000a9c <__aeabi_fsub>
 800b50e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b512:	4605      	mov	r5, r0
 800b514:	4620      	mov	r0, r4
 800b516:	f7f5 fac3 	bl	8000aa0 <__addsf3>
 800b51a:	4601      	mov	r1, r0
 800b51c:	4628      	mov	r0, r5
 800b51e:	f7f5 fc7b 	bl	8000e18 <__aeabi_fdiv>
 800b522:	2600      	movs	r6, #0
 800b524:	4604      	mov	r4, r0
 800b526:	4621      	mov	r1, r4
 800b528:	4620      	mov	r0, r4
 800b52a:	f7f5 fbc1 	bl	8000cb0 <__aeabi_fmul>
 800b52e:	4601      	mov	r1, r0
 800b530:	4680      	mov	r8, r0
 800b532:	f7f5 fbbd 	bl	8000cb0 <__aeabi_fmul>
 800b536:	4605      	mov	r5, r0
 800b538:	494f      	ldr	r1, [pc, #316]	; (800b678 <atanf+0x1e0>)
 800b53a:	f7f5 fbb9 	bl	8000cb0 <__aeabi_fmul>
 800b53e:	494f      	ldr	r1, [pc, #316]	; (800b67c <atanf+0x1e4>)
 800b540:	f7f5 faae 	bl	8000aa0 <__addsf3>
 800b544:	4629      	mov	r1, r5
 800b546:	f7f5 fbb3 	bl	8000cb0 <__aeabi_fmul>
 800b54a:	494d      	ldr	r1, [pc, #308]	; (800b680 <atanf+0x1e8>)
 800b54c:	f7f5 faa8 	bl	8000aa0 <__addsf3>
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 fbad 	bl	8000cb0 <__aeabi_fmul>
 800b556:	494b      	ldr	r1, [pc, #300]	; (800b684 <atanf+0x1ec>)
 800b558:	f7f5 faa2 	bl	8000aa0 <__addsf3>
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7f5 fba7 	bl	8000cb0 <__aeabi_fmul>
 800b562:	4949      	ldr	r1, [pc, #292]	; (800b688 <atanf+0x1f0>)
 800b564:	f7f5 fa9c 	bl	8000aa0 <__addsf3>
 800b568:	4629      	mov	r1, r5
 800b56a:	f7f5 fba1 	bl	8000cb0 <__aeabi_fmul>
 800b56e:	4947      	ldr	r1, [pc, #284]	; (800b68c <atanf+0x1f4>)
 800b570:	f7f5 fa96 	bl	8000aa0 <__addsf3>
 800b574:	4641      	mov	r1, r8
 800b576:	f7f5 fb9b 	bl	8000cb0 <__aeabi_fmul>
 800b57a:	4945      	ldr	r1, [pc, #276]	; (800b690 <atanf+0x1f8>)
 800b57c:	4680      	mov	r8, r0
 800b57e:	4628      	mov	r0, r5
 800b580:	f7f5 fb96 	bl	8000cb0 <__aeabi_fmul>
 800b584:	4943      	ldr	r1, [pc, #268]	; (800b694 <atanf+0x1fc>)
 800b586:	f7f5 fa89 	bl	8000a9c <__aeabi_fsub>
 800b58a:	4629      	mov	r1, r5
 800b58c:	f7f5 fb90 	bl	8000cb0 <__aeabi_fmul>
 800b590:	4941      	ldr	r1, [pc, #260]	; (800b698 <atanf+0x200>)
 800b592:	f7f5 fa83 	bl	8000a9c <__aeabi_fsub>
 800b596:	4629      	mov	r1, r5
 800b598:	f7f5 fb8a 	bl	8000cb0 <__aeabi_fmul>
 800b59c:	493f      	ldr	r1, [pc, #252]	; (800b69c <atanf+0x204>)
 800b59e:	f7f5 fa7d 	bl	8000a9c <__aeabi_fsub>
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	f7f5 fb84 	bl	8000cb0 <__aeabi_fmul>
 800b5a8:	493d      	ldr	r1, [pc, #244]	; (800b6a0 <atanf+0x208>)
 800b5aa:	f7f5 fa77 	bl	8000a9c <__aeabi_fsub>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f5 fb7e 	bl	8000cb0 <__aeabi_fmul>
 800b5b4:	1c73      	adds	r3, r6, #1
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	d139      	bne.n	800b630 <atanf+0x198>
 800b5bc:	f7f5 fa70 	bl	8000aa0 <__addsf3>
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	f7f5 fb75 	bl	8000cb0 <__aeabi_fmul>
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7f5 fa67 	bl	8000a9c <__aeabi_fsub>
 800b5ce:	e772      	b.n	800b4b6 <atanf+0x1e>
 800b5d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b5d4:	f7f5 fa62 	bl	8000a9c <__aeabi_fsub>
 800b5d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b5dc:	4605      	mov	r5, r0
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7f5 fa5e 	bl	8000aa0 <__addsf3>
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f7f5 fc16 	bl	8000e18 <__aeabi_fdiv>
 800b5ec:	2601      	movs	r6, #1
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	e799      	b.n	800b526 <atanf+0x8e>
 800b5f2:	4b2c      	ldr	r3, [pc, #176]	; (800b6a4 <atanf+0x20c>)
 800b5f4:	429d      	cmp	r5, r3
 800b5f6:	dc14      	bgt.n	800b622 <atanf+0x18a>
 800b5f8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b5fc:	f7f5 fa4e 	bl	8000a9c <__aeabi_fsub>
 800b600:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b604:	4605      	mov	r5, r0
 800b606:	4620      	mov	r0, r4
 800b608:	f7f5 fb52 	bl	8000cb0 <__aeabi_fmul>
 800b60c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b610:	f7f5 fa46 	bl	8000aa0 <__addsf3>
 800b614:	4601      	mov	r1, r0
 800b616:	4628      	mov	r0, r5
 800b618:	f7f5 fbfe 	bl	8000e18 <__aeabi_fdiv>
 800b61c:	2602      	movs	r6, #2
 800b61e:	4604      	mov	r4, r0
 800b620:	e781      	b.n	800b526 <atanf+0x8e>
 800b622:	4601      	mov	r1, r0
 800b624:	4820      	ldr	r0, [pc, #128]	; (800b6a8 <atanf+0x210>)
 800b626:	f7f5 fbf7 	bl	8000e18 <__aeabi_fdiv>
 800b62a:	2603      	movs	r6, #3
 800b62c:	4604      	mov	r4, r0
 800b62e:	e77a      	b.n	800b526 <atanf+0x8e>
 800b630:	f7f5 fa36 	bl	8000aa0 <__addsf3>
 800b634:	4621      	mov	r1, r4
 800b636:	f7f5 fb3b 	bl	8000cb0 <__aeabi_fmul>
 800b63a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <atanf+0x214>)
 800b63c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b640:	f7f5 fa2c 	bl	8000a9c <__aeabi_fsub>
 800b644:	4621      	mov	r1, r4
 800b646:	f7f5 fa29 	bl	8000a9c <__aeabi_fsub>
 800b64a:	4b19      	ldr	r3, [pc, #100]	; (800b6b0 <atanf+0x218>)
 800b64c:	4601      	mov	r1, r0
 800b64e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b652:	f7f5 fa23 	bl	8000a9c <__aeabi_fsub>
 800b656:	2f00      	cmp	r7, #0
 800b658:	4604      	mov	r4, r0
 800b65a:	f6bf af32 	bge.w	800b4c2 <atanf+0x2a>
 800b65e:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b662:	e72e      	b.n	800b4c2 <atanf+0x2a>
 800b664:	4c13      	ldr	r4, [pc, #76]	; (800b6b4 <atanf+0x21c>)
 800b666:	e72c      	b.n	800b4c2 <atanf+0x2a>
 800b668:	bfc90fdb 	.word	0xbfc90fdb
 800b66c:	3edfffff 	.word	0x3edfffff
 800b670:	7149f2ca 	.word	0x7149f2ca
 800b674:	3f97ffff 	.word	0x3f97ffff
 800b678:	3c8569d7 	.word	0x3c8569d7
 800b67c:	3d4bda59 	.word	0x3d4bda59
 800b680:	3d886b35 	.word	0x3d886b35
 800b684:	3dba2e6e 	.word	0x3dba2e6e
 800b688:	3e124925 	.word	0x3e124925
 800b68c:	3eaaaaab 	.word	0x3eaaaaab
 800b690:	bd15a221 	.word	0xbd15a221
 800b694:	3d6ef16b 	.word	0x3d6ef16b
 800b698:	3d9d8795 	.word	0x3d9d8795
 800b69c:	3de38e38 	.word	0x3de38e38
 800b6a0:	3e4ccccd 	.word	0x3e4ccccd
 800b6a4:	401bffff 	.word	0x401bffff
 800b6a8:	bf800000 	.word	0xbf800000
 800b6ac:	0800bda4 	.word	0x0800bda4
 800b6b0:	0800bd94 	.word	0x0800bd94
 800b6b4:	3fc90fdb 	.word	0x3fc90fdb

0800b6b8 <fabsf>:
 800b6b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b6bc:	4770      	bx	lr
	...

0800b6c0 <scalbnf>:
 800b6c0:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	d028      	beq.n	800b71e <scalbnf+0x5e>
 800b6cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b6d0:	d304      	bcc.n	800b6dc <scalbnf+0x1c>
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	f7f5 f9e4 	bl	8000aa0 <__addsf3>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	e020      	b.n	800b71e <scalbnf+0x5e>
 800b6dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6e0:	d215      	bcs.n	800b70e <scalbnf+0x4e>
 800b6e2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b6e6:	f7f5 fae3 	bl	8000cb0 <__aeabi_fmul>
 800b6ea:	4b18      	ldr	r3, [pc, #96]	; (800b74c <scalbnf+0x8c>)
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	429c      	cmp	r4, r3
 800b6f0:	db22      	blt.n	800b738 <scalbnf+0x78>
 800b6f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b6f6:	3b19      	subs	r3, #25
 800b6f8:	4423      	add	r3, r4
 800b6fa:	2bfe      	cmp	r3, #254	; 0xfe
 800b6fc:	dd09      	ble.n	800b712 <scalbnf+0x52>
 800b6fe:	4611      	mov	r1, r2
 800b700:	4813      	ldr	r0, [pc, #76]	; (800b750 <scalbnf+0x90>)
 800b702:	f000 f829 	bl	800b758 <copysignf>
 800b706:	4912      	ldr	r1, [pc, #72]	; (800b750 <scalbnf+0x90>)
 800b708:	f7f5 fad2 	bl	8000cb0 <__aeabi_fmul>
 800b70c:	e7e4      	b.n	800b6d8 <scalbnf+0x18>
 800b70e:	0ddb      	lsrs	r3, r3, #23
 800b710:	e7f2      	b.n	800b6f8 <scalbnf+0x38>
 800b712:	2b00      	cmp	r3, #0
 800b714:	dd05      	ble.n	800b722 <scalbnf+0x62>
 800b716:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b71a:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800b71e:	4610      	mov	r0, r2
 800b720:	bd10      	pop	{r4, pc}
 800b722:	f113 0f16 	cmn.w	r3, #22
 800b726:	da09      	bge.n	800b73c <scalbnf+0x7c>
 800b728:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b72c:	429c      	cmp	r4, r3
 800b72e:	4611      	mov	r1, r2
 800b730:	dce6      	bgt.n	800b700 <scalbnf+0x40>
 800b732:	4808      	ldr	r0, [pc, #32]	; (800b754 <scalbnf+0x94>)
 800b734:	f000 f810 	bl	800b758 <copysignf>
 800b738:	4906      	ldr	r1, [pc, #24]	; (800b754 <scalbnf+0x94>)
 800b73a:	e7e5      	b.n	800b708 <scalbnf+0x48>
 800b73c:	3319      	adds	r3, #25
 800b73e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b742:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800b746:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b74a:	e7dd      	b.n	800b708 <scalbnf+0x48>
 800b74c:	ffff3cb0 	.word	0xffff3cb0
 800b750:	7149f2ca 	.word	0x7149f2ca
 800b754:	0da24260 	.word	0x0da24260

0800b758 <copysignf>:
 800b758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b75c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b760:	4308      	orrs	r0, r1
 800b762:	4770      	bx	lr

0800b764 <__errno>:
 800b764:	4b01      	ldr	r3, [pc, #4]	; (800b76c <__errno+0x8>)
 800b766:	6818      	ldr	r0, [r3, #0]
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	20000020 	.word	0x20000020

0800b770 <_init>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr

0800b77c <_fini>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	bf00      	nop
 800b780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b782:	bc08      	pop	{r3}
 800b784:	469e      	mov	lr, r3
 800b786:	4770      	bx	lr
