
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800b7c4  0800b7c4  0001b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000114  20000000  0800bdf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ffc  20000114  0800bf0c  00020114  2**2
                  ALLOC
  7 ._user_heap_stack 00000280  20001110  0800bf0c  00021110  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019142  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003e0c  00000000  00000000  0003927f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e88  00000000  00000000  0003d090  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d50  00000000  00000000  0003df18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00014607  00000000  00000000  0003ec68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e611  00000000  00000000  0005326f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0005caaf  00000000  00000000  00061880  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000be32f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004098  00000000  00000000  000be3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000114 	.word	0x20000114
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7ac 	.word	0x0800b7ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000118 	.word	0x20000118
 800014c:	0800b7ac 	.word	0x0800b7ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <NVIC_PriorityGroupConfig+0x20>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60d3      	str	r3, [r2, #12]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	230f      	movs	r3, #15
 800112a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d03a      	beq.n	80011aa <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <NVIC_Init+0xbc>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f1c3 0304 	rsb	r3, r3, #4
 8001148:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	461a      	mov	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	789b      	ldrb	r3, [r3, #2]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4313      	orrs	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <NVIC_Init+0xc0>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	6979      	ldr	r1, [r7, #20]
 8001180:	b2c9      	uxtb	r1, r1
 8001182:	4413      	add	r3, r2
 8001184:	460a      	mov	r2, r1
 8001186:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <NVIC_Init+0xc0>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	095b      	lsrs	r3, r3, #5
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80011a8:	e00f      	b.n	80011ca <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011aa:	490b      	ldr	r1, [pc, #44]	; (80011d8 <NVIC_Init+0xc0>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2201      	movs	r2, #1
 80011c0:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011c2:	f100 0320 	add.w	r3, r0, #32
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	e000e100 	.word	0xe000e100

080011dc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80011e8:	4b34      	ldr	r3, [pc, #208]	; (80012bc <EXTI_Init+0xe0>)
 80011ea:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d04f      	beq.n	8001294 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80011f4:	4931      	ldr	r1, [pc, #196]	; (80012bc <EXTI_Init+0xe0>)
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <EXTI_Init+0xe0>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	43db      	mvns	r3, r3
 8001200:	4013      	ands	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001204:	492d      	ldr	r1, [pc, #180]	; (80012bc <EXTI_Init+0xe0>)
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <EXTI_Init+0xe0>)
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	43db      	mvns	r3, r3
 8001210:	4013      	ands	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	791b      	ldrb	r3, [r3, #4]
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800122e:	4923      	ldr	r1, [pc, #140]	; (80012bc <EXTI_Init+0xe0>)
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <EXTI_Init+0xe0>)
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	43db      	mvns	r3, r3
 800123a:	4013      	ands	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800123e:	491f      	ldr	r1, [pc, #124]	; (80012bc <EXTI_Init+0xe0>)
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <EXTI_Init+0xe0>)
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	43db      	mvns	r3, r3
 800124a:	4013      	ands	r3, r2
 800124c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	2b10      	cmp	r3, #16
 8001254:	d10e      	bne.n	8001274 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001256:	4919      	ldr	r1, [pc, #100]	; (80012bc <EXTI_Init+0xe0>)
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <EXTI_Init+0xe0>)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001264:	4915      	ldr	r1, [pc, #84]	; (80012bc <EXTI_Init+0xe0>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <EXTI_Init+0xe0>)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001272:	e01d      	b.n	80012b0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <EXTI_Init+0xe0>)
 8001276:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	795b      	ldrb	r3, [r3, #5]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	6811      	ldr	r1, [r2, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	e00d      	b.n	80012b0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	43d2      	mvns	r2, r2
 80012ac:	400a      	ands	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40010400 	.word	0x40010400

080012c0 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <EXTI_GetITStatus+0x44>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <EXTI_GetITStatus+0x44>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <EXTI_GetITStatus+0x32>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e001      	b.n	80012f6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40010400 	.word	0x40010400

08001308 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <EXTI_ClearITPendingBit+0x18>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6153      	str	r3, [r2, #20]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40010400 	.word	0x40010400

08001324 <FLASH_Unlock>:
  *           to FLASH_UnlockBank1 function.. 
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <FLASH_Unlock+0x18>)
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <FLASH_Unlock+0x1c>)
 800132c:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800132e:	4b03      	ldr	r3, [pc, #12]	; (800133c <FLASH_Unlock+0x18>)
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <FLASH_Unlock+0x20>)
 8001332:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40022000 	.word	0x40022000
 8001340:	45670123 	.word	0x45670123
 8001344:	cdef89ab 	.word	0xcdef89ab

08001348 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001350:	2304      	movs	r3, #4
 8001352:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001354:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001358:	f000 f880 	bl	800145c <FLASH_WaitForLastOperation>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b04      	cmp	r3, #4
 8001364:	d11b      	bne.n	800139e <FLASH_ErasePage+0x56>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <FLASH_ErasePage+0x60>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6153      	str	r3, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <FLASH_ErasePage+0x60>)
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <FLASH_ErasePage+0x60>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001382:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001384:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001388:	f000 f868 	bl	800145c <FLASH_WaitForLastOperation>
 800138c:	4603      	mov	r3, r0
 800138e:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001390:	4905      	ldr	r1, [pc, #20]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <FLASH_ErasePage+0x60>)
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800139a:	4013      	ands	r3, r2
 800139c:	610b      	str	r3, [r1, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40022000 	.word	0x40022000

080013ac <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80013b8:	2304      	movs	r3, #4
 80013ba:	73fb      	strb	r3, [r7, #15]
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80013bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c0:	f000 f84c 	bl	800145c <FLASH_WaitForLastOperation>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d115      	bne.n	80013fa <FLASH_ProgramHalfWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 80013ce:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	801a      	strh	r2, [r3, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80013e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013e4:	f000 f83a 	bl	800145c <FLASH_WaitForLastOperation>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 80013ec:	4905      	ldr	r1, [pc, #20]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <FLASH_ProgramHalfWord+0x58>)
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80013f6:	4013      	ands	r3, r2
 80013f8:	610b      	str	r3, [r1, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40022000 	.word	0x40022000

08001408 <FLASH_GetBank1Status>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP or FLASH_COMPLETE
  */
FLASH_Status FLASH_GetBank1Status(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800140e:	2304      	movs	r3, #4
 8001410:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <FLASH_GetBank1Status+0x50>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b01      	cmp	r3, #1
 800141c:	d102      	bne.n	8001424 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800141e:	2301      	movs	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e013      	b.n	800144c <FLASH_GetBank1Status+0x44>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <FLASH_GetBank1Status+0x50>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <FLASH_GetBank1Status+0x2e>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001430:	2302      	movs	r3, #2
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	e00a      	b.n	800144c <FLASH_GetBank1Status+0x44>
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <FLASH_GetBank1Status+0x50>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <FLASH_GetBank1Status+0x40>
      {
        flashstatus = FLASH_ERROR_WRP;
 8001442:	2303      	movs	r3, #3
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e001      	b.n	800144c <FLASH_GetBank1Status+0x44>
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001448:	2304      	movs	r3, #4
 800144a:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
 800144c:	79fb      	ldrb	r3, [r7, #7]
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40022000 	.word	0x40022000

0800145c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  FLASH_Status status = FLASH_COMPLETE;
 8001464:	2304      	movs	r3, #4
 8001466:	73fb      	strb	r3, [r7, #15]
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8001468:	f7ff ffce 	bl	8001408 <FLASH_GetBank1Status>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001470:	e006      	b.n	8001480 <FLASH_WaitForLastOperation+0x24>
  {
    status = FLASH_GetBank1Status();
 8001472:	f7ff ffc9 	bl	8001408 <FLASH_GetBank1Status>
 8001476:	4603      	mov	r3, r0
 8001478:	73fb      	strb	r3, [r7, #15]
    Timeout--;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3b01      	subs	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <FLASH_WaitForLastOperation+0x30>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f2      	bne.n	8001472 <FLASH_WaitForLastOperation+0x16>
  }
  if(Timeout == 0x00 )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <FLASH_WaitForLastOperation+0x3a>
  {
    status = FLASH_TIMEOUT;
 8001492:	2305      	movs	r3, #5
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the operation status */
  return status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	78db      	ldrb	r3, [r3, #3]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	461a      	mov	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d044      	beq.n	8001578 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	e038      	b.n	800156c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80014fa:	2201      	movs	r2, #1
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d126      	bne.n	8001566 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800151e:	220f      	movs	r2, #15
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	43db      	mvns	r3, r3
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4013      	ands	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	78db      	ldrb	r3, [r3, #3]
 8001544:	2b28      	cmp	r3, #40	; 0x28
 8001546:	d105      	bne.n	8001554 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001548:	2201      	movs	r2, #1
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	409a      	lsls	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	e008      	b.n	8001566 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	2b48      	cmp	r3, #72	; 0x48
 800155a:	d104      	bne.n	8001566 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800155c:	2201      	movs	r2, #1
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	3301      	adds	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2b07      	cmp	r3, #7
 8001570:	d9c3      	bls.n	80014fa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	2bff      	cmp	r3, #255	; 0xff
 800157e:	d946      	bls.n	800160e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	e03a      	b.n	8001602 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3308      	adds	r3, #8
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d127      	bne.n	80015fc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80015b2:	220f      	movs	r2, #15
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	43db      	mvns	r3, r3
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4013      	ands	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	2b28      	cmp	r3, #40	; 0x28
 80015da:	d105      	bne.n	80015e8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3308      	adds	r3, #8
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	2b48      	cmp	r3, #72	; 0x48
 80015ee:	d105      	bne.n	80015fc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	3308      	adds	r3, #8
 80015f4:	2201      	movs	r2, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b07      	cmp	r3, #7
 8001606:	d9c1      	bls.n	800158c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	605a      	str	r2, [r3, #4]
  }
}
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	b29b      	uxth	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	b29b      	uxth	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	611a      	str	r2, [r3, #16]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	615a      	str	r2, [r3, #20]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 800169c:	e002      	b.n	80016a4 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	615a      	str	r2, [r3, #20]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da03      	bge.n	80016da <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e002      	b.n	80016e0 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80016da:	4b2c      	ldr	r3, [pc, #176]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80016f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80016fa:	d10a      	bne.n	8001712 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001702:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001704:	4a21      	ldr	r2, [pc, #132]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800170e:	6053      	str	r3, [r2, #4]
 8001710:	e021      	b.n	8001756 <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00e      	beq.n	800173a <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 800171c:	2203      	movs	r2, #3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e00d      	b.n	8001756 <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0d5b      	lsrs	r3, r3, #21
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4013      	ands	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001754:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0d5b      	lsrs	r3, r3, #21
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	da03      	bge.n	800177c <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 800177a:	e002      	b.n	8001782 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <GPIO_PinRemapConfig+0xdc>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6053      	str	r3, [r2, #4]
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40010000 	.word	0x40010000

08001790 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8001790:	b490      	push	{r4, r7}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	401a      	ands	r2, r3
 80017d2:	1c83      	adds	r3, r0, #2
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461c      	mov	r4, r3
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <GPIO_EXTILineConfig+0x80>)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017f0:	79f9      	ldrb	r1, [r7, #7]
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	431a      	orrs	r2, r3
 8001800:	1ca3      	adds	r3, r4, #2
 8001802:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bc90      	pop	{r4, r7}
 800180e:	4770      	bx	lr
 8001810:	40010000 	.word	0x40010000

08001814 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d007      	beq.n	800184c <RCC_GetClocksFreq+0x38>
 800183c:	2b08      	cmp	r3, #8
 800183e:	d009      	beq.n	8001854 <RCC_GetClocksFreq+0x40>
 8001840:	2b00      	cmp	r3, #0
 8001842:	d133      	bne.n	80018ac <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <RCC_GetClocksFreq+0x150>)
 8001848:	601a      	str	r2, [r3, #0]
      break;
 800184a:	e033      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a45      	ldr	r2, [pc, #276]	; (8001964 <RCC_GetClocksFreq+0x150>)
 8001850:	601a      	str	r2, [r3, #0]
      break;
 8001852:	e02f      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800185c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	3302      	adds	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a3b      	ldr	r2, [pc, #236]	; (8001968 <RCC_GetClocksFreq+0x154>)
 800187a:	fb02 f203 	mul.w	r2, r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001882:	e017      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4a35      	ldr	r2, [pc, #212]	; (8001968 <RCC_GetClocksFreq+0x154>)
 8001894:	fb02 f203 	mul.w	r2, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
      break;
 800189c:	e00a      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4a30      	ldr	r2, [pc, #192]	; (8001964 <RCC_GetClocksFreq+0x150>)
 80018a2:	fb02 f203 	mul.w	r2, r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
      break;
 80018aa:	e003      	b.n	80018b4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <RCC_GetClocksFreq+0x150>)
 80018b0:	601a      	str	r2, [r3, #0]
      break;
 80018b2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018bc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <RCC_GetClocksFreq+0x158>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018e4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <RCC_GetClocksFreq+0x158>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	40da      	lsrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800190c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	0adb      	lsrs	r3, r3, #11
 8001912:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <RCC_GetClocksFreq+0x158>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	40da      	lsrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <RCC_GetClocksFreq+0x14c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001934:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	0b9b      	lsrs	r3, r3, #14
 800193a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <RCC_GetClocksFreq+0x15c>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	007a1200 	.word	0x007a1200
 8001968:	003d0900 	.word	0x003d0900
 800196c:	20000000 	.word	0x20000000
 8001970:	20000010 	.word	0x20000010

08001974 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001986:	4909      	ldr	r1, [pc, #36]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4313      	orrs	r3, r2
 8001990:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001992:	e006      	b.n	80019a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001994:	4905      	ldr	r1, [pc, #20]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <RCC_APB2PeriphClockCmd+0x38>)
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	43db      	mvns	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	618b      	str	r3, [r1, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000

080019b0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <TIM_TimeBaseInit+0xd0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a2d      	ldr	r2, [pc, #180]	; (8001a84 <TIM_TimeBaseInit+0xd4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00f      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019da:	d00b      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <TIM_TimeBaseInit+0xd8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <TIM_TimeBaseInit+0xdc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d003      	beq.n	80019f4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <TIM_TimeBaseInit+0xe0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	885a      	ldrh	r2, [r3, #2]
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <TIM_TimeBaseInit+0xe4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00c      	beq.n	8001a28 <TIM_TimeBaseInit+0x78>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <TIM_TimeBaseInit+0xe8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d008      	beq.n	8001a28 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a1c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	88da      	ldrh	r2, [r3, #6]
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	89fa      	ldrh	r2, [r7, #14]
 8001a2c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	889a      	ldrh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <TIM_TimeBaseInit+0xd0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00f      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <TIM_TimeBaseInit+0xd4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00b      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <TIM_TimeBaseInit+0xec>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <TIM_TimeBaseInit+0xf0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <TIM_TimeBaseInit+0xb6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <TIM_TimeBaseInit+0xf4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d104      	bne.n	8001a70 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	7a1b      	ldrb	r3, [r3, #8]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	829a      	strh	r2, [r3, #20]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40013400 	.word	0x40013400
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40000800 	.word	0x40000800
 8001a90:	40000c00 	.word	0x40000c00
 8001a94:	40001000 	.word	0x40001000
 8001a98:	40001400 	.word	0x40001400
 8001a9c:	40014000 	.word	0x40014000
 8001aa0:	40014400 	.word	0x40014400
 8001aa4:	40014800 	.word	0x40014800

08001aa8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	81fb      	strh	r3, [r7, #14]
 8001aba:	2300      	movs	r3, #0
 8001abc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	8c1b      	ldrh	r3, [r3, #32]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8c1b      	ldrh	r3, [r3, #32]
 8001ad2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	889b      	ldrh	r3, [r3, #4]
 8001ad8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	8b1b      	ldrh	r3, [r3, #24]
 8001ade:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8001ae0:	897b      	ldrh	r3, [r7, #10]
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8001ae8:	897b      	ldrh	r3, [r7, #10]
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	881a      	ldrh	r2, [r3, #0]
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	f023 0302 	bic.w	r3, r3, #2
 8001b00:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	891a      	ldrh	r2, [r3, #8]
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	885a      	ldrh	r2, [r3, #2]
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a24      	ldr	r2, [pc, #144]	; (8001bac <TIM_OC1Init+0x104>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00f      	beq.n	8001b3e <TIM_OC1Init+0x96>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <TIM_OC1Init+0x108>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <TIM_OC1Init+0x96>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <TIM_OC1Init+0x10c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_OC1Init+0x96>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <TIM_OC1Init+0x110>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <TIM_OC1Init+0x114>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d123      	bne.n	8001b86 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	f023 0308 	bic.w	r3, r3, #8
 8001b44:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	895a      	ldrh	r2, [r3, #10]
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001b50:	89fb      	ldrh	r3, [r7, #14]
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	889a      	ldrh	r2, [r3, #4]
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8001b62:	89bb      	ldrh	r3, [r7, #12]
 8001b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b68:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b70:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	899a      	ldrh	r2, [r3, #12]
 8001b76:	89bb      	ldrh	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	89da      	ldrh	r2, [r3, #14]
 8001b80:	89bb      	ldrh	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	89ba      	ldrh	r2, [r7, #12]
 8001b8a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	897a      	ldrh	r2, [r7, #10]
 8001b90:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	88da      	ldrh	r2, [r3, #6]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	841a      	strh	r2, [r3, #32]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40012c00 	.word	0x40012c00
 8001bb0:	40013400 	.word	0x40013400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800

08001bc0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bce:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	721a      	strb	r2, [r3, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001c14:	e007      	b.n	8001c26 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	801a      	strh	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8001c5a:	e009      	b.n	8001c70 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	807b      	strh	r3, [r7, #2]
 8001c86:	4613      	mov	r3, r2
 8001c88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c8a:	787b      	ldrb	r3, [r7, #1]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	899b      	ldrh	r3, [r3, #12]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001ca0:	e009      	b.n	8001cb6 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	899b      	ldrh	r3, [r3, #12]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	819a      	strh	r2, [r3, #12]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	8b1b      	ldrh	r3, [r3, #24]
 8001cd4:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	f023 0308 	bic.w	r3, r3, #8
 8001cdc:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001cde:	89fa      	ldrh	r2, [r7, #14]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	89fa      	ldrh	r2, [r7, #14]
 8001cea:	831a      	strh	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	821a      	strh	r2, [r3, #16]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
	...

08001d18 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8a1b      	ldrh	r3, [r3, #16]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d44:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	88db      	ldrh	r3, [r3, #6]
 8001d50:	461a      	mov	r2, r3
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	4313      	orrs	r3, r2
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	899b      	ldrh	r3, [r3, #12]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001d6e:	4013      	ands	r3, r2
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	889a      	ldrh	r2, [r3, #4]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	891b      	ldrh	r3, [r3, #8]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	8a9b      	ldrh	r3, [r3, #20]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001da4:	4013      	ands	r3, r2
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	899b      	ldrh	r3, [r3, #12]
 8001dac:	461a      	mov	r2, r3
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	4313      	orrs	r3, r2
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001dbc:	f107 0308 	add.w	r3, r7, #8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd27 	bl	8001814 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4a2e      	ldr	r2, [pc, #184]	; (8001e84 <USART_Init+0x16c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d102      	bne.n	8001dd4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dd2:	e001      	b.n	8001dd8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	899b      	ldrh	r3, [r3, #12]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da0c      	bge.n	8001dfe <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	441a      	add	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfc:	e00b      	b.n	8001e16 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <USART_Init+0x170>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	2264      	movs	r2, #100	; 0x64
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	b21b      	sxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0c      	bge.n	8001e5a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	3332      	adds	r3, #50	; 0x32
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <USART_Init+0x170>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e54:	4313      	orrs	r3, r2
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e58:	e00b      	b.n	8001e72 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <USART_Init+0x170>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	811a      	strh	r2, [r3, #8]
}
 8001e7a:	bf00      	nop
 8001e7c:	3730      	adds	r7, #48	; 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40013800 	.word	0x40013800
 8001e88:	51eb851f 	.word	0x51eb851f

08001e8c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	899b      	ldrh	r3, [r3, #12]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001eae:	e007      	b.n	8001ec0 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	899b      	ldrh	r3, [r3, #12]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	819a      	strh	r2, [r3, #12]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001f00:	2201      	movs	r2, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d103      	bne.n	8001f18 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	330c      	adds	r3, #12
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e009      	b.n	8001f2c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d103      	bne.n	8001f26 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3310      	adds	r3, #16
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e002      	b.n	8001f2c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	6811      	ldr	r1, [r2, #0]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001f3e:	e006      	b.n	8001f4e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	6811      	ldr	r1, [r2, #0]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	43d2      	mvns	r2, r2
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
    COOLANT_MIST_DDR |= (1 << COOLANT_MIST_BIT);
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2008      	movs	r0, #8
 8001f62:	f7ff fd07 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f66:	2303      	movs	r3, #3
 8001f68:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001f6e:	2310      	movs	r3, #16
 8001f70:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <coolant_init+0x50>)
 8001f78:	f7ff fa92 	bl	80014a0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f7ff fcf8 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f84:	2303      	movs	r3, #3
 8001f86:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001f88:	2310      	movs	r3, #16
 8001f8a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <coolant_init+0x50>)
 8001f96:	f7ff fa83 	bl	80014a0 <GPIO_Init>
#endif
  coolant_stop();
 8001f9a:	f000 f82b 	bl	8001ff4 <coolant_stop>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40010c00 	.word	0x40010c00

08001fac <coolant_get_state>:


// Returns current coolant output state. Overrides may alter it from programmed state.
uint8_t coolant_get_state()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	71fb      	strb	r3, [r7, #7]
#else
		GPIO_ReadOutputData(COOLANT_FLOOD_PORT)
#endif
		,(1 << COOLANT_FLOOD_BIT))) {
  #else
    if (bit_istrue(
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <coolant_get_state+0x44>)
 8001fb8:	f7ff fb3a 	bl	8001630 <GPIO_ReadOutputData>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <coolant_get_state+0x22>
#else
		GPIO_ReadOutputData(COOLANT_FLOOD_PORT)
#endif
		,(1 << COOLANT_FLOOD_BIT))) {
  #endif
    cl_state |= COOLANT_STATE_FLOOD;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
#else
		  GPIO_ReadOutputData(COOLANT_MIST_PORT)
#endif
		  ,(1 << COOLANT_MIST_BIT))) {
    #else
      if (bit_istrue(
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <coolant_get_state+0x44>)
 8001fd0:	f7ff fb2e 	bl	8001630 <GPIO_ReadOutputData>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <coolant_get_state+0x3a>
#else
		  GPIO_ReadOutputData(COOLANT_MIST_PORT)
#endif
		  ,(1 << COOLANT_MIST_BIT))) {
    #endif
      cl_state |= COOLANT_STATE_MIST;
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	71fb      	strb	r3, [r7, #7]
    }
  #endif
#endif
  return(cl_state);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010c00 	.word	0x40010c00

08001ff4 <coolant_stop>:


// Directly called by coolant_init(), coolant_set_state(), and mc_reset(), which can be at
// an interrupt-level. No report flag set, but only called by routines that don't need it.
void coolant_stop()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001ff8:	2110      	movs	r1, #16
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <coolant_stop+0x18>)
 8001ffc:	f7ff fb32 	bl	8001664 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8002000:	2108      	movs	r1, #8
 8002002:	4802      	ldr	r0, [pc, #8]	; (800200c <coolant_stop+0x18>)
 8002004:	f7ff fb2e 	bl	8001664 <GPIO_ResetBits>
#endif
    #endif
  #endif
#endif
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010c00 	.word	0x40010c00

08002010 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if (sys.abort) { return; } // Block during abort.  
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <coolant_set_state+0x50>)
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d11a      	bne.n	8002058 <coolant_set_state+0x48>
  
  if (mode == COOLANT_DISABLE) {
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <coolant_set_state+0x1e>
  
    coolant_stop(); 
 8002028:	f7ff ffe4 	bl	8001ff4 <coolant_stop>
 800202c:	e010      	b.n	8002050 <coolant_set_state+0x40>
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <coolant_set_state+0x30>
#endif
      #else
#ifdef AVRTARGET
		COOLANT_FLOOD_PORT |= (1 << COOLANT_FLOOD_BIT);
#else
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8002038:	2110      	movs	r1, #16
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <coolant_set_state+0x54>)
 800203c:	f7ff fb04 	bl	8001648 <GPIO_SetBits>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da03      	bge.n	8002050 <coolant_set_state+0x40>
#endif
        #else
#ifdef AVRTARGET
		  COOLANT_MIST_PORT |= (1 << COOLANT_MIST_BIT);
#else
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8002048:	2108      	movs	r1, #8
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <coolant_set_state+0x54>)
 800204c:	f7ff fafc 	bl	8001648 <GPIO_SetBits>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <coolant_set_state+0x50>)
 8002052:	2200      	movs	r2, #0
 8002054:	731a      	strb	r2, [r3, #12]
 8002056:	e000      	b.n	800205a <coolant_set_state+0x4a>
  if (sys.abort) { return; } // Block during abort.  
 8002058:	bf00      	nop
}
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000f00 	.word	0x20000f00
 8002064:	40010c00 	.word	0x40010c00

08002068 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <coolant_sync+0x28>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d006      	beq.n	8002088 <coolant_sync+0x20>
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 800207a:	f004 f845 	bl	8006108 <protocol_buffer_synchronize>
  coolant_set_state(mode);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ffc5 	bl	8002010 <coolant_set_state>
 8002086:	e000      	b.n	800208a <coolant_sync+0x22>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8002088:	bf00      	nop
}
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000f00 	.word	0x20000f00

08002094 <eeprom_flush>:
#endif

#ifdef STM32F103C8
#ifndef NOEEPROMSUPPORT
void eeprom_flush()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
	uint32_t nAddress = EEPROM_START_ADDRESS;
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <eeprom_flush+0x90>)
 800209c:	60fb      	str	r3, [r7, #12]
	uint16_t *pBuffer = (uint16_t *)EE_Buffer;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <eeprom_flush+0x94>)
 80020a0:	60bb      	str	r3, [r7, #8]
	uint16_t nSize = PAGE_SIZE;
 80020a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a6:	80fb      	strh	r3, [r7, #6]

	FLASH_Status FlashStatus = FLASH_COMPLETE;
 80020a8:	2304      	movs	r3, #4
 80020aa:	717b      	strb	r3, [r7, #5]

	/* Erase Page0 */
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 80020ac:	481d      	ldr	r0, [pc, #116]	; (8002124 <eeprom_flush+0x90>)
 80020ae:	f7ff f94b 	bl	8001348 <FLASH_ErasePage>
 80020b2:	4603      	mov	r3, r0
 80020b4:	717b      	strb	r3, [r7, #5]

	/* If erase operation was failed, a Flash error code is returned */
	if (FlashStatus != FLASH_COMPLETE)
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d12f      	bne.n	800211c <eeprom_flush+0x88>
	{
		return;
	}

	while (nSize > 0)
 80020bc:	e02a      	b.n	8002114 <eeprom_flush+0x80>
	{
		if (*pBuffer != 0xffff)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d008      	beq.n	80020dc <eeprom_flush+0x48>
		{
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1c9a      	adds	r2, r3, #2
 80020ce:	60ba      	str	r2, [r7, #8]
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff f969 	bl	80013ac <FLASH_ProgramHalfWord>
 80020da:	e002      	b.n	80020e2 <eeprom_flush+0x4e>
		}
		else
		{
			pBuffer++;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	3302      	adds	r3, #2
 80020e0:	60bb      	str	r3, [r7, #8]
		}
		if (*pBuffer != 0xffff)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d009      	beq.n	8002102 <eeprom_flush+0x6e>
		{
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1c98      	adds	r0, r3, #2
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c9a      	adds	r2, r3, #2
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7ff f956 	bl	80013ac <FLASH_ProgramHalfWord>
 8002100:	e002      	b.n	8002108 <eeprom_flush+0x74>
		}
		else
		{
			pBuffer++;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3302      	adds	r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
		}
		nSize -= 4;
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	3b04      	subs	r3, #4
 800210c:	80fb      	strh	r3, [r7, #6]
		nAddress += 4;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
	while (nSize > 0)
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1d1      	bne.n	80020be <eeprom_flush+0x2a>
 800211a:	e000      	b.n	800211e <eeprom_flush+0x8a>
		return;
 800211c:	bf00      	nop
	}
}
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0801fc00 	.word	0x0801fc00
 8002128:	20000a78 	.word	0x20000a78

0800212c <eeprom_init>:
void eeprom_init()
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
	uint16_t VarIdx = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	80fb      	strh	r3, [r7, #6]
	uint8_t *pTmp = EE_Buffer;
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <eeprom_init+0x6c>)
 8002138:	603b      	str	r3, [r7, #0]

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	80fb      	strh	r3, [r7, #6]
 800213e:	e00d      	b.n	800215c <eeprom_init+0x30>
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	1c53      	adds	r3, r2, #1
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	88fb      	ldrh	r3, [r7, #6]
 8002148:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800214c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	7013      	strb	r3, [r2, #0]
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	3301      	adds	r3, #1
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d3ed      	bcc.n	8002140 <eeprom_init+0x14>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <eeprom_init+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b0a      	cmp	r3, #10
 800216a:	d010      	beq.n	800218e <eeprom_init+0x62>
	{
		pTmp = EE_Buffer;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <eeprom_init+0x6c>)
 800216e:	603b      	str	r3, [r7, #0]

		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002170:	2300      	movs	r3, #0
 8002172:	80fb      	strh	r3, [r7, #6]
 8002174:	e007      	b.n	8002186 <eeprom_init+0x5a>
		{
			*pTmp++ = 0xFF;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	603a      	str	r2, [r7, #0]
 800217c:	22ff      	movs	r2, #255	; 0xff
 800217e:	701a      	strb	r2, [r3, #0]
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	3301      	adds	r3, #1
 8002184:	80fb      	strh	r3, [r7, #6]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218c:	d3f3      	bcc.n	8002176 <eeprom_init+0x4a>
		}
	}
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000a78 	.word	0x20000a78

0800219c <eeprom_get_char>:
 *
 *  \param  addr  EEPROM address to read from.
 *  \return  The byte read from the EEPROM address.
 */
unsigned char eeprom_get_char( unsigned int addr )
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <eeprom_get_char+0x1c>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
#endif
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000a78 	.word	0x20000a78

080021bc <eeprom_put_char>:
 *
 *  \param  addr  EEPROM address to write to.
 *  \param  new_value  New EEPROM value.
 */
void eeprom_put_char( unsigned int addr, unsigned char new_value )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <eeprom_put_char+0x20>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	701a      	strb	r2, [r3, #0]
#endif
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	20000a78 	.word	0x20000a78

080021e0 <memcpy_to_eeprom_with_checksum>:

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  unsigned char checksum = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	75fb      	strb	r3, [r7, #23]
  for(; size > 0; size--) { 
 80021f0:	e01e      	b.n	8002230 <memcpy_to_eeprom_with_checksum+0x50>
    checksum = (checksum << 1) || (checksum >> 7);
 80021f2:	7dfb      	ldrb	r3, [r7, #23]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <memcpy_to_eeprom_with_checksum+0x22>
 80021fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da01      	bge.n	8002206 <memcpy_to_eeprom_with_checksum+0x26>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <memcpy_to_eeprom_with_checksum+0x28>
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    checksum += *source;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	4413      	add	r3, r2
 8002212:	75fb      	strb	r3, [r7, #23]
    eeprom_put_char(destination++, *(source++)); 
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	1c53      	adds	r3, r2, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f7ff ffc9 	bl	80021bc <eeprom_put_char>
  for(; size > 0; size--) { 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3b01      	subs	r3, #1
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1dd      	bne.n	80021f2 <memcpy_to_eeprom_with_checksum+0x12>
  }
  eeprom_put_char(destination, checksum);
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	4619      	mov	r1, r3
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f7ff ffbe 	bl	80021bc <eeprom_put_char>
#if defined(WIN32) || defined(STM32F103C8)
#ifndef NOEEPROMSUPPORT
  eeprom_flush();
 8002240:	f7ff ff28 	bl	8002094 <eeprom_flush>
#endif
#endif
}
 8002244:	bf00      	nop
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  unsigned char data, checksum = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]
  for(; size > 0; size--) { 
 800225c:	e01f      	b.n	800229e <memcpy_from_eeprom_with_checksum+0x52>
    data = eeprom_get_char(source++);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	60ba      	str	r2, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff99 	bl	800219c <eeprom_get_char>
 800226a:	4603      	mov	r3, r0
 800226c:	75bb      	strb	r3, [r7, #22]
    checksum = (checksum << 1) || (checksum >> 7);
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d103      	bne.n	800227e <memcpy_from_eeprom_with_checksum+0x32>
 8002276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da01      	bge.n	8002282 <memcpy_from_eeprom_with_checksum+0x36>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <memcpy_from_eeprom_with_checksum+0x38>
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    checksum += data;    
 8002286:	7dfa      	ldrb	r2, [r7, #23]
 8002288:	7dbb      	ldrb	r3, [r7, #22]
 800228a:	4413      	add	r3, r2
 800228c:	75fb      	strb	r3, [r7, #23]
    *(destination++) = data; 
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60fa      	str	r2, [r7, #12]
 8002294:	7dba      	ldrb	r2, [r7, #22]
 8002296:	701a      	strb	r2, [r3, #0]
  for(; size > 0; size--) { 
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1dc      	bne.n	800225e <memcpy_from_eeprom_with_checksum+0x12>
  }
  return(checksum == eeprom_get_char(source));
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f7ff ff79 	bl	800219c <eeprom_get_char>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  memset(&gc_state, 0, sizeof(parser_state_t));
 80022c8:	2244      	movs	r2, #68	; 0x44
 80022ca:	2100      	movs	r1, #0
 80022cc:	4808      	ldr	r0, [pc, #32]	; (80022f0 <gc_init+0x2c>)
 80022ce:	f008 f9b0 	bl	800a632 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <gc_init+0x2c>)
 80022d4:	799b      	ldrb	r3, [r3, #6]
 80022d6:	4907      	ldr	r1, [pc, #28]	; (80022f4 <gc_init+0x30>)
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 fd71 	bl	8007dc0 <settings_read_coord_data>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <gc_init+0x26>
    report_status_message(STATUS_SETTING_READ_FAIL);
 80022e4:	2007      	movs	r0, #7
 80022e6:	f004 fbfd 	bl	8006ae4 <report_status_message>
  }
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000e78 	.word	0x20000e78
 80022f4:	20000ea0 	.word	0x20000ea0

080022f8 <gc_sync_position>:


// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 80022fc:	4902      	ldr	r1, [pc, #8]	; (8002308 <gc_sync_position+0x10>)
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <gc_sync_position+0x14>)
 8002300:	f007 ffbe 	bl	800a280 <system_convert_array_steps_to_mpos>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000f24 	.word	0x20000f24
 800230c:	20000e94 	.word	0x20000e94

08002310 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b09c      	sub	sp, #112	; 0x70
 8002314:	af06      	add	r7, sp, #24
 8002316:	6078      	str	r0, [r7, #4]
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	2100      	movs	r1, #0
 800231c:	48e0      	ldr	r0, [pc, #896]	; (80026a0 <gc_execute_line+0x390>)
 800231e:	f008 f988 	bl	800a632 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8002322:	4bdf      	ldr	r3, [pc, #892]	; (80026a0 <gc_execute_line+0x390>)
 8002324:	49df      	ldr	r1, [pc, #892]	; (80026a4 <gc_execute_line+0x394>)
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	460b      	mov	r3, r1
 800232a:	cb03      	ldmia	r3!, {r0, r1}
 800232c:	6010      	str	r0, [r2, #0]
 800232e:	6051      	str	r1, [r2, #4]
 8002330:	8819      	ldrh	r1, [r3, #0]
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	8111      	strh	r1, [r2, #8]
 8002336:	7293      	strb	r3, [r2, #10]

  uint8_t axis_command = AXIS_COMMAND_NONE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t axis_0, axis_1, axis_linear;
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

  // Initialize bitflag tracking variables for axis indices compatible operations.
  uint8_t axis_words = 0; // XYZ tracking
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  uint8_t ijk_words = 0; // IJK tracking
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

  // Initialize command and value words and parser flags variables.
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
 8002350:	2300      	movs	r3, #0
 8002352:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t value_words = 0; // Tracks value words.
 8002356:	2300      	movs	r3, #0
 8002358:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b24      	cmp	r3, #36	; 0x24
 8002368:	d10b      	bne.n	8002382 <gc_execute_line+0x72>
						// Set G1 and G94 enforced modes to ensure accurate error checks.
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 800236a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 8002376:	4bca      	ldr	r3, [pc, #808]	; (80026a0 <gc_execute_line+0x390>)
 8002378:	2201      	movs	r2, #1
 800237a:	705a      	strb	r2, [r3, #1]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 800237c:	4bc8      	ldr	r3, [pc, #800]	; (80026a0 <gc_execute_line+0x390>)
 800237e:	2200      	movs	r2, #0
 8002380:	709a      	strb	r2, [r3, #2]

  uint8_t word_bit; // Bit-value for assigning tracking variables
  uint8_t char_counter;
  char letter;
  float value;
  uint8_t int_value = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  uint16_t mantissa = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 800238e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <gc_execute_line+0x92>
 800239a:	2303      	movs	r3, #3
 800239c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80023a0:	e3ee      	b.n	8002b80 <gc_execute_line+0x870>
  else { char_counter = 0; }
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 80023a8:	e3ea      	b.n	8002b80 <gc_execute_line+0x870>

    // Import the next g-code word, expecting a letter followed by a value. Otherwise, error out.
    letter = line[char_counter];
 80023aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023ae:	461a      	mov	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 80023ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d903      	bls.n	80023ca <gc_execute_line+0xba>
 80023c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80023c6:	2b5a      	cmp	r3, #90	; 0x5a
 80023c8:	d902      	bls.n	80023d0 <gc_execute_line+0xc0>
 80023ca:	2301      	movs	r3, #1
 80023cc:	f001 bc47 	b.w	8003c5e <gc_execute_line+0x194e>
    char_counter++;
 80023d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 80023dc:	f107 0220 	add.w	r2, r7, #32
 80023e0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f002 fcee 	bl	8004dc8 <read_float>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <gc_execute_line+0xe8>
 80023f2:	2302      	movs	r3, #2
 80023f4:	f001 bc33 	b.w	8003c5e <gc_execute_line+0x194e>
    // accurate than the NIST gcode requirement of x10 when used for commands, but not quite
    // accurate enough for value words that require integers to within 0.0001. This should be
    // a good enough comprimise and catch most all non-integer errors. To make it compliant,
    // we would simply need to change the mantissa to int16, but this add compiled flash space.
    // Maybe update this later.
    int_value = truncf(value);
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f008 fa38 	bl	800a870 <truncf>
 8002400:	4603      	mov	r3, r0
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fe56 	bl	80010b4 <__aeabi_f2uiz>
 8002408:	4603      	mov	r3, r0
 800240a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 800240e:	6a3c      	ldr	r4, [r7, #32]
 8002410:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fbf7 	bl	8000c08 <__aeabi_i2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4619      	mov	r1, r3
 800241e:	4620      	mov	r0, r4
 8002420:	f7fe fb3c 	bl	8000a9c <__aeabi_fsub>
 8002424:	4603      	mov	r3, r0
 8002426:	49a0      	ldr	r1, [pc, #640]	; (80026a8 <gc_execute_line+0x398>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc41 	bl	8000cb0 <__aeabi_fmul>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	f008 f9bb 	bl	800a7ac <lroundf>
 8002436:	4603      	mov	r3, r0
 8002438:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    // NOTE: Rounding must be used to catch small floating point errors.

    // Check if the g-code word is supported or errors due to modal group violations or has
    // been repeated in the g-code block. If ok, update the command or record its value.
    switch(letter) {
 800243c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002440:	2b47      	cmp	r3, #71	; 0x47
 8002442:	d003      	beq.n	800244c <gc_execute_line+0x13c>
 8002444:	2b4d      	cmp	r3, #77	; 0x4d
 8002446:	f000 81ea 	beq.w	800281e <gc_execute_line+0x50e>
 800244a:	e299      	b.n	8002980 <gc_execute_line+0x670>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'G' command and its modal group
        switch(int_value) {
 800244c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002450:	2b5e      	cmp	r3, #94	; 0x5e
 8002452:	f200 81bb 	bhi.w	80027cc <gc_execute_line+0x4bc>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <gc_execute_line+0x14c>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800264d 	.word	0x0800264d
 8002460:	0800264d 	.word	0x0800264d
 8002464:	0800264d 	.word	0x0800264d
 8002468:	0800264d 	.word	0x0800264d
 800246c:	080025f5 	.word	0x080025f5
 8002470:	080027cd 	.word	0x080027cd
 8002474:	080027cd 	.word	0x080027cd
 8002478:	080027cd 	.word	0x080027cd
 800247c:	080027cd 	.word	0x080027cd
 8002480:	080027cd 	.word	0x080027cd
 8002484:	080025d9 	.word	0x080025d9
 8002488:	080027cd 	.word	0x080027cd
 800248c:	080027cd 	.word	0x080027cd
 8002490:	080027cd 	.word	0x080027cd
 8002494:	080027cd 	.word	0x080027cd
 8002498:	080027cd 	.word	0x080027cd
 800249c:	080027cd 	.word	0x080027cd
 80024a0:	080026d5 	.word	0x080026d5
 80024a4:	080026d5 	.word	0x080026d5
 80024a8:	080026d5 	.word	0x080026d5
 80024ac:	0800273f 	.word	0x0800273f
 80024b0:	0800273f 	.word	0x0800273f
 80024b4:	080027cd 	.word	0x080027cd
 80024b8:	080027cd 	.word	0x080027cd
 80024bc:	080027cd 	.word	0x080027cd
 80024c0:	080027cd 	.word	0x080027cd
 80024c4:	080027cd 	.word	0x080027cd
 80024c8:	080027cd 	.word	0x080027cd
 80024cc:	080025d9 	.word	0x080025d9
 80024d0:	080027cd 	.word	0x080027cd
 80024d4:	080025d9 	.word	0x080025d9
 80024d8:	080027cd 	.word	0x080027cd
 80024dc:	080027cd 	.word	0x080027cd
 80024e0:	080027cd 	.word	0x080027cd
 80024e4:	080027cd 	.word	0x080027cd
 80024e8:	080027cd 	.word	0x080027cd
 80024ec:	080027cd 	.word	0x080027cd
 80024f0:	080027cd 	.word	0x080027cd
 80024f4:	0800264d 	.word	0x0800264d
 80024f8:	080027cd 	.word	0x080027cd
 80024fc:	08002755 	.word	0x08002755
 8002500:	080027cd 	.word	0x080027cd
 8002504:	080027cd 	.word	0x080027cd
 8002508:	0800275d 	.word	0x0800275d
 800250c:	080027cd 	.word	0x080027cd
 8002510:	080027cd 	.word	0x080027cd
 8002514:	080027cd 	.word	0x080027cd
 8002518:	080027cd 	.word	0x080027cd
 800251c:	080027cd 	.word	0x080027cd
 8002520:	0800275d 	.word	0x0800275d
 8002524:	080027cd 	.word	0x080027cd
 8002528:	080027cd 	.word	0x080027cd
 800252c:	080027cd 	.word	0x080027cd
 8002530:	080025f5 	.word	0x080025f5
 8002534:	080027a5 	.word	0x080027a5
 8002538:	080027a5 	.word	0x080027a5
 800253c:	080027a5 	.word	0x080027a5
 8002540:	080027a5 	.word	0x080027a5
 8002544:	080027a5 	.word	0x080027a5
 8002548:	080027a5 	.word	0x080027a5
 800254c:	080027cd 	.word	0x080027cd
 8002550:	080027b9 	.word	0x080027b9
 8002554:	080027cd 	.word	0x080027cd
 8002558:	080027cd 	.word	0x080027cd
 800255c:	080027cd 	.word	0x080027cd
 8002560:	080027cd 	.word	0x080027cd
 8002564:	080027cd 	.word	0x080027cd
 8002568:	080027cd 	.word	0x080027cd
 800256c:	080027cd 	.word	0x080027cd
 8002570:	080027cd 	.word	0x080027cd
 8002574:	080027cd 	.word	0x080027cd
 8002578:	080027cd 	.word	0x080027cd
 800257c:	080027cd 	.word	0x080027cd
 8002580:	080027cd 	.word	0x080027cd
 8002584:	080027cd 	.word	0x080027cd
 8002588:	080027cd 	.word	0x080027cd
 800258c:	080027cd 	.word	0x080027cd
 8002590:	080027cd 	.word	0x080027cd
 8002594:	080027cd 	.word	0x080027cd
 8002598:	080027cd 	.word	0x080027cd
 800259c:	08002661 	.word	0x08002661
 80025a0:	080027cd 	.word	0x080027cd
 80025a4:	080027cd 	.word	0x080027cd
 80025a8:	080027cd 	.word	0x080027cd
 80025ac:	080027cd 	.word	0x080027cd
 80025b0:	080027cd 	.word	0x080027cd
 80025b4:	080027cd 	.word	0x080027cd
 80025b8:	080027cd 	.word	0x080027cd
 80025bc:	080027cd 	.word	0x080027cd
 80025c0:	080027cd 	.word	0x080027cd
 80025c4:	080026e9 	.word	0x080026e9
 80025c8:	080026e9 	.word	0x080026e9
 80025cc:	080025d9 	.word	0x080025d9
 80025d0:	08002729 	.word	0x08002729
 80025d4:	08002729 	.word	0x08002729
          case 10: case 28: case 30: case 92:
            // Check for G10/28/30/92 being called with G0/1/2/3/38 on same block.
            // * G43.1 is also an axis command but is not explicitly defined this way.
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 80025d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <gc_execute_line+0x2e4>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80025e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <gc_execute_line+0x2de>
 80025e8:	2318      	movs	r3, #24
 80025ea:	f001 bb38 	b.w	8003c5e <gc_execute_line+0x194e>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            }
            // No break. Continues to next line.
          case 4: case 53:
            word_bit = MODAL_GROUP_G0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.non_modal_command = int_value;
 80025fa:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <gc_execute_line+0x390>)
 80025fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002600:	7013      	strb	r3, [r2, #0]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002602:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002606:	2b1c      	cmp	r3, #28
 8002608:	d008      	beq.n	800261c <gc_execute_line+0x30c>
 800260a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800260e:	2b1e      	cmp	r3, #30
 8002610:	d004      	beq.n	800261c <gc_execute_line+0x30c>
 8002612:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002616:	2b5c      	cmp	r3, #92	; 0x5c
 8002618:	f040 80db 	bne.w	80027d2 <gc_execute_line+0x4c2>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 800261c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <gc_execute_line+0x322>
 8002624:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d002      	beq.n	8002632 <gc_execute_line+0x322>
 800262c:	2314      	movs	r3, #20
 800262e:	f001 bb16 	b.w	8003c5e <gc_execute_line+0x194e>
              gc_block.non_modal_command += mantissa;
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <gc_execute_line+0x390>)
 8002634:	781a      	ldrb	r2, [r3, #0]
 8002636:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <gc_execute_line+0x390>)
 8002642:	701a      	strb	r2, [r3, #0]
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
 8002644:	2300      	movs	r3, #0
 8002646:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }                
            break;
 800264a:	e0c2      	b.n	80027d2 <gc_execute_line+0x4c2>
          case 0: case 1: case 2: case 3: case 38:
            // Check for G0/1/2/3/38 being called with G10/28/30/92 on same block.
            // * G43.1 is also an axis command but is not explicitly defined this way.
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800264c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <gc_execute_line+0x34a>
 8002654:	2318      	movs	r3, #24
 8002656:	f001 bb02 	b.w	8003c5e <gc_execute_line+0x194e>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 800265a:	2302      	movs	r3, #2
 800265c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            // No break. Continues to next line.
          case 80:
            word_bit = MODAL_GROUP_G1;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.motion = int_value;
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <gc_execute_line+0x390>)
 8002668:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800266c:	7053      	strb	r3, [r2, #1]
            if (int_value == 38){
 800266e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002672:	2b26      	cmp	r3, #38	; 0x26
 8002674:	f040 80af 	bne.w	80027d6 <gc_execute_line+0x4c6>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002678:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800267c:	2b14      	cmp	r3, #20
 800267e:	d015      	beq.n	80026ac <gc_execute_line+0x39c>
 8002680:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002684:	2b1e      	cmp	r3, #30
 8002686:	d011      	beq.n	80026ac <gc_execute_line+0x39c>
 8002688:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800268c:	2b28      	cmp	r3, #40	; 0x28
 800268e:	d00d      	beq.n	80026ac <gc_execute_line+0x39c>
 8002690:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002694:	2b32      	cmp	r3, #50	; 0x32
 8002696:	d009      	beq.n	80026ac <gc_execute_line+0x39c>
                FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 8002698:	2314      	movs	r3, #20
 800269a:	f001 bae0 	b.w	8003c5e <gc_execute_line+0x194e>
 800269e:	bf00      	nop
 80026a0:	20000ebc 	.word	0x20000ebc
 80026a4:	20000e78 	.word	0x20000e78
 80026a8:	42c80000 	.word	0x42c80000
              }
              gc_block.modal.motion += (mantissa/10)+100;
 80026ac:	4bd2      	ldr	r3, [pc, #840]	; (80029f8 <gc_execute_line+0x6e8>)
 80026ae:	785a      	ldrb	r2, [r3, #1]
 80026b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026b4:	49d1      	ldr	r1, [pc, #836]	; (80029fc <gc_execute_line+0x6ec>)
 80026b6:	fba1 1303 	umull	r1, r3, r1, r3
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3364      	adds	r3, #100	; 0x64
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4bcb      	ldr	r3, [pc, #812]	; (80029f8 <gc_execute_line+0x6e8>)
 80026ca:	705a      	strb	r2, [r3, #1]
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }  
            break;
 80026d2:	e080      	b.n	80027d6 <gc_execute_line+0x4c6>
          case 17: case 18: case 19:
            word_bit = MODAL_GROUP_G2;
 80026d4:	2302      	movs	r3, #2
 80026d6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.plane_select = int_value - 17;
 80026da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026de:	3b11      	subs	r3, #17
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4bc5      	ldr	r3, [pc, #788]	; (80029f8 <gc_execute_line+0x6e8>)
 80026e4:	715a      	strb	r2, [r3, #5]
            break;
 80026e6:	e079      	b.n	80027dc <gc_execute_line+0x4cc>
          case 90: case 91:
            if (mantissa == 0) {
 80026e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <gc_execute_line+0x3f4>
              word_bit = MODAL_GROUP_G3;
 80026f0:	2303      	movs	r3, #3
 80026f2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              gc_block.modal.distance = int_value - 90;
 80026f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026fa:	3b5a      	subs	r3, #90	; 0x5a
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4bbe      	ldr	r3, [pc, #760]	; (80029f8 <gc_execute_line+0x6e8>)
 8002700:	711a      	strb	r2, [r3, #4]
              word_bit = MODAL_GROUP_G4;
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
              // Otherwise, arc IJK incremental mode is default. G91.1 does nothing.
            }
            break;
 8002702:	e06b      	b.n	80027dc <gc_execute_line+0x4cc>
              word_bit = MODAL_GROUP_G4;
 8002704:	2304      	movs	r3, #4
 8002706:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 800270a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800270e:	2b0a      	cmp	r3, #10
 8002710:	d103      	bne.n	800271a <gc_execute_line+0x40a>
 8002712:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002716:	2b5a      	cmp	r3, #90	; 0x5a
 8002718:	d102      	bne.n	8002720 <gc_execute_line+0x410>
 800271a:	2314      	movs	r3, #20
 800271c:	f001 ba9f 	b.w	8003c5e <gc_execute_line+0x194e>
              mantissa = 0; // Set to zero to indicate valid non-integer G command.
 8002720:	2300      	movs	r3, #0
 8002722:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 8002726:	e059      	b.n	80027dc <gc_execute_line+0x4cc>
          case 93: case 94:
            word_bit = MODAL_GROUP_G5;
 8002728:	2305      	movs	r3, #5
 800272a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.feed_rate = 94 - int_value;
 800272e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002732:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4baf      	ldr	r3, [pc, #700]	; (80029f8 <gc_execute_line+0x6e8>)
 800273a:	709a      	strb	r2, [r3, #2]
            break;
 800273c:	e04e      	b.n	80027dc <gc_execute_line+0x4cc>
          case 20: case 21:
            word_bit = MODAL_GROUP_G6;
 800273e:	2306      	movs	r3, #6
 8002740:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.units = 21 - int_value;
 8002744:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002748:	f1c3 0315 	rsb	r3, r3, #21
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4baa      	ldr	r3, [pc, #680]	; (80029f8 <gc_execute_line+0x6e8>)
 8002750:	70da      	strb	r2, [r3, #3]
            break;
 8002752:	e043      	b.n	80027dc <gc_execute_line+0x4cc>
          case 40:
            word_bit = MODAL_GROUP_G7;
 8002754:	2307      	movs	r3, #7
 8002756:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            // NOTE: Not required since cutter radius compensation is always disabled. Only here
            // to support G40 commands that often appear in g-code program headers to setup defaults.
            // gc_block.modal.cutter_comp = CUTTER_COMP_DISABLE; // G40
            break;
 800275a:	e03f      	b.n	80027dc <gc_execute_line+0x4cc>
          case 43: case 49:
            word_bit = MODAL_GROUP_G8;
 800275c:	2308      	movs	r3, #8
 800275e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            // NOTE: The NIST g-code standard vaguely states that when a tool length offset is changed,
            // there cannot be any axis motion or coordinate offsets updated. Meaning G43, G43.1, and G49
            // all are explicit axis commands, regardless if they require axis words or not.
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8002762:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <gc_execute_line+0x460>
 800276a:	2318      	movs	r3, #24
 800276c:	f001 ba77 	b.w	8003c5e <gc_execute_line+0x194e>
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8002770:	2303      	movs	r3, #3
 8002772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            if (int_value == 49) { // G49
 8002776:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800277a:	2b31      	cmp	r3, #49	; 0x31
 800277c:	d103      	bne.n	8002786 <gc_execute_line+0x476>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 800277e:	4b9e      	ldr	r3, [pc, #632]	; (80029f8 <gc_execute_line+0x6e8>)
 8002780:	2200      	movs	r2, #0
 8002782:	719a      	strb	r2, [r3, #6]
 8002784:	e00a      	b.n	800279c <gc_execute_line+0x48c>
            } else if (mantissa == 10) { // G43.1
 8002786:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800278a:	2b0a      	cmp	r3, #10
 800278c:	d103      	bne.n	8002796 <gc_execute_line+0x486>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 800278e:	4b9a      	ldr	r3, [pc, #616]	; (80029f8 <gc_execute_line+0x6e8>)
 8002790:	2201      	movs	r2, #1
 8002792:	719a      	strb	r2, [r3, #6]
 8002794:	e002      	b.n	800279c <gc_execute_line+0x48c>
            } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported G43.x command]
 8002796:	2314      	movs	r3, #20
 8002798:	f001 ba61 	b.w	8003c5e <gc_execute_line+0x194e>
            mantissa = 0; // Set to zero to indicate valid non-integer G command.
 800279c:	2300      	movs	r3, #0
 800279e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            break;
 80027a2:	e01b      	b.n	80027dc <gc_execute_line+0x4cc>
          case 54: case 55: case 56: case 57: case 58: case 59:
            // NOTE: G59.x are not supported. (But their int_values would be 60, 61, and 62.)
            word_bit = MODAL_GROUP_G12;
 80027a4:	2309      	movs	r3, #9
 80027a6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 80027aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80027ae:	3b36      	subs	r3, #54	; 0x36
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b91      	ldr	r3, [pc, #580]	; (80029f8 <gc_execute_line+0x6e8>)
 80027b4:	71da      	strb	r2, [r3, #7]
            break;
 80027b6:	e011      	b.n	80027dc <gc_execute_line+0x4cc>
          case 61:
            word_bit = MODAL_GROUP_G13;
 80027b8:	230a      	movs	r3, #10
 80027ba:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 80027be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <gc_execute_line+0x4ca>
 80027c6:	2314      	movs	r3, #20
 80027c8:	f001 ba49 	b.w	8003c5e <gc_execute_line+0x194e>
            // gc_block.modal.control = CONTROL_MODE_EXACT_PATH; // G61
            break;
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G command]
 80027cc:	2314      	movs	r3, #20
 80027ce:	f001 ba46 	b.w	8003c5e <gc_execute_line+0x194e>
            break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <gc_execute_line+0x4cc>
            break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <gc_execute_line+0x4cc>
            break;
 80027da:	bf00      	nop
        }
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80027dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <gc_execute_line+0x4da>
 80027e4:	2317      	movs	r3, #23
 80027e6:	f001 ba3a 	b.w	8003c5e <gc_execute_line+0x194e>
        // Check for more than one command per modal group violations in the current block
        // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 80027ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80027ee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80027f2:	fa42 f303 	asr.w	r3, r2, r3
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <gc_execute_line+0x4f4>
 80027fe:	2315      	movs	r3, #21
 8002800:	f001 ba2d 	b.w	8003c5e <gc_execute_line+0x194e>
        command_words |= bit(word_bit);
 8002804:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002808:	2201      	movs	r2, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	b21a      	sxth	r2, r3
 8002810:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002814:	4313      	orrs	r3, r2
 8002816:	b21b      	sxth	r3, r3
 8002818:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        break;
 800281c:	e1b0      	b.n	8002b80 <gc_execute_line+0x870>
		if(system_control_get_state() & CONTROL_PIN_INDEX_RESET) { // if reset button is pressed
			mc_reset();
		}
#endif
        // Determine 'M' command and its modal group
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 800281e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <gc_execute_line+0x51c>
 8002826:	2317      	movs	r3, #23
 8002828:	f001 ba19 	b.w	8003c5e <gc_execute_line+0x194e>
        switch(int_value) {
 800282c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002830:	2b1e      	cmp	r3, #30
 8002832:	f200 8088 	bhi.w	8002946 <gc_execute_line+0x636>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <gc_execute_line+0x52c>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	080028b9 	.word	0x080028b9
 8002840:	080028b9 	.word	0x080028b9
 8002844:	080028b9 	.word	0x080028b9
 8002848:	080028e3 	.word	0x080028e3
 800284c:	080028e3 	.word	0x080028e3
 8002850:	080028e3 	.word	0x080028e3
 8002854:	08002947 	.word	0x08002947
 8002858:	08002915 	.word	0x08002915
 800285c:	08002915 	.word	0x08002915
 8002860:	08002915 	.word	0x08002915
 8002864:	08002947 	.word	0x08002947
 8002868:	08002947 	.word	0x08002947
 800286c:	08002947 	.word	0x08002947
 8002870:	08002947 	.word	0x08002947
 8002874:	08002947 	.word	0x08002947
 8002878:	08002947 	.word	0x08002947
 800287c:	08002947 	.word	0x08002947
 8002880:	08002947 	.word	0x08002947
 8002884:	08002947 	.word	0x08002947
 8002888:	08002947 	.word	0x08002947
 800288c:	08002947 	.word	0x08002947
 8002890:	08002947 	.word	0x08002947
 8002894:	08002947 	.word	0x08002947
 8002898:	08002947 	.word	0x08002947
 800289c:	08002947 	.word	0x08002947
 80028a0:	08002947 	.word	0x08002947
 80028a4:	08002947 	.word	0x08002947
 80028a8:	08002947 	.word	0x08002947
 80028ac:	08002947 	.word	0x08002947
 80028b0:	08002947 	.word	0x08002947
 80028b4:	080028b9 	.word	0x080028b9
          case 0: case 1: case 2: case 30:
            word_bit = MODAL_GROUP_M4;
 80028b8:	230b      	movs	r3, #11
 80028ba:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            switch(int_value) {
 80028be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <gc_execute_line+0x5bc>
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d009      	beq.n	80028de <gc_execute_line+0x5ce>
 80028ca:	e003      	b.n	80028d4 <gc_execute_line+0x5c4>
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 80028cc:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <gc_execute_line+0x6e8>)
 80028ce:	2203      	movs	r2, #3
 80028d0:	721a      	strb	r2, [r3, #8]
 80028d2:	e005      	b.n	80028e0 <gc_execute_line+0x5d0>
              case 1: break; // Optional stop not supported. Ignore.
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 80028d4:	4a48      	ldr	r2, [pc, #288]	; (80029f8 <gc_execute_line+0x6e8>)
 80028d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80028da:	7213      	strb	r3, [r2, #8]
            }
            break;
 80028dc:	e036      	b.n	800294c <gc_execute_line+0x63c>
              case 1: break; // Optional stop not supported. Ignore.
 80028de:	bf00      	nop
            break;
 80028e0:	e034      	b.n	800294c <gc_execute_line+0x63c>
					case 3: case 4: case 5:
            word_bit = MODAL_GROUP_M7;
 80028e2:	230c      	movs	r3, #12
 80028e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            switch(int_value) {
 80028e8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d008      	beq.n	8002902 <gc_execute_line+0x5f2>
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d00a      	beq.n	800290a <gc_execute_line+0x5fa>
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d000      	beq.n	80028fa <gc_execute_line+0x5ea>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
            }
            break;
 80028f8:	e028      	b.n	800294c <gc_execute_line+0x63c>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <gc_execute_line+0x6e8>)
 80028fc:	2210      	movs	r2, #16
 80028fe:	729a      	strb	r2, [r3, #10]
 8002900:	e007      	b.n	8002912 <gc_execute_line+0x602>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <gc_execute_line+0x6e8>)
 8002904:	2220      	movs	r2, #32
 8002906:	729a      	strb	r2, [r3, #10]
 8002908:	e003      	b.n	8002912 <gc_execute_line+0x602>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 800290a:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <gc_execute_line+0x6e8>)
 800290c:	2200      	movs	r2, #0
 800290e:	729a      	strb	r2, [r3, #10]
 8002910:	bf00      	nop
            break;
 8002912:	e01b      	b.n	800294c <gc_execute_line+0x63c>
          #ifdef ENABLE_M7
            case 7: case 8: case 9:
          #else
            case 8: case 9:
          #endif
            word_bit = MODAL_GROUP_M8;
 8002914:	230d      	movs	r3, #13
 8002916:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            switch(int_value) {
 800291a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800291e:	2b08      	cmp	r3, #8
 8002920:	d008      	beq.n	8002934 <gc_execute_line+0x624>
 8002922:	2b09      	cmp	r3, #9
 8002924:	d00a      	beq.n	800293c <gc_execute_line+0x62c>
 8002926:	2b07      	cmp	r3, #7
 8002928:	d000      	beq.n	800292c <gc_execute_line+0x61c>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
            }
            break;
 800292a:	e00f      	b.n	800294c <gc_execute_line+0x63c>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <gc_execute_line+0x6e8>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	725a      	strb	r2, [r3, #9]
 8002932:	e007      	b.n	8002944 <gc_execute_line+0x634>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8002934:	4b30      	ldr	r3, [pc, #192]	; (80029f8 <gc_execute_line+0x6e8>)
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	725a      	strb	r2, [r3, #9]
 800293a:	e003      	b.n	8002944 <gc_execute_line+0x634>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <gc_execute_line+0x6e8>)
 800293e:	2200      	movs	r2, #0
 8002940:	725a      	strb	r2, [r3, #9]
 8002942:	bf00      	nop
            break;
 8002944:	e002      	b.n	800294c <gc_execute_line+0x63c>
						case 56:
							word_bit = MODAL_GROUP_M9;
							gc_block.modal.override = OVERRIDE_PARKING_MOTION;
							break;
					#endif
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported M command]
 8002946:	2314      	movs	r3, #20
 8002948:	f001 b989 	b.w	8003c5e <gc_execute_line+0x194e>
        }

        // Check for more than one command per modal group violations in the current block
        // NOTE: Variable 'word_bit' is always assigned, if the command is valid.
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800294c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002950:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002954:	fa42 f303 	asr.w	r3, r2, r3
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <gc_execute_line+0x656>
 8002960:	2315      	movs	r3, #21
 8002962:	f001 b97c 	b.w	8003c5e <gc_execute_line+0x194e>
        command_words |= bit(word_bit);
 8002966:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800296a:	2201      	movs	r2, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	b21a      	sxth	r2, r3
 8002972:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002976:	4313      	orrs	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        break;
 800297e:	e0ff      	b.n	8002b80 <gc_execute_line+0x870>
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8002980:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002984:	3b46      	subs	r3, #70	; 0x46
 8002986:	2b14      	cmp	r3, #20
 8002988:	f200 80c8 	bhi.w	8002b1c <gc_execute_line+0x80c>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <gc_execute_line+0x684>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029e9 	.word	0x080029e9
 8002998:	08002b1d 	.word	0x08002b1d
 800299c:	08002b1d 	.word	0x08002b1d
 80029a0:	08002a01 	.word	0x08002a01
 80029a4:	08002a1b 	.word	0x08002a1b
 80029a8:	08002a35 	.word	0x08002a35
 80029ac:	08002a4f 	.word	0x08002a4f
 80029b0:	08002b1d 	.word	0x08002b1d
 80029b4:	08002a5f 	.word	0x08002a5f
 80029b8:	08002b1d 	.word	0x08002b1d
 80029bc:	08002a7d 	.word	0x08002a7d
 80029c0:	08002b1d 	.word	0x08002b1d
 80029c4:	08002a8b 	.word	0x08002a8b
 80029c8:	08002a99 	.word	0x08002a99
 80029cc:	08002aa7 	.word	0x08002aa7
 80029d0:	08002b1d 	.word	0x08002b1d
 80029d4:	08002b1d 	.word	0x08002b1d
 80029d8:	08002b1d 	.word	0x08002b1d
 80029dc:	08002acf 	.word	0x08002acf
 80029e0:	08002ae9 	.word	0x08002ae9
 80029e4:	08002b03 	.word	0x08002b03
		  #if defined ABC_AXIS
          case 'C': word_bit = WORD_C; gc_block.values.xyz[C_AXIS] = value; axis_words |= (1<<C_AXIS); break;
		  #endif
// ---
          // case 'D': // Not supported
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	4a01      	ldr	r2, [pc, #4]	; (80029f8 <gc_execute_line+0x6e8>)
 80029f2:	60d3      	str	r3, [r2, #12]
 80029f4:	e095      	b.n	8002b22 <gc_execute_line+0x812>
 80029f6:	bf00      	nop
 80029f8:	20000ebc 	.word	0x20000ebc
 80029fc:	cccccccd 	.word	0xcccccccd
          // case 'H': // Not supported
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	4ab4      	ldr	r2, [pc, #720]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a0a:	6113      	str	r3, [r2, #16]
 8002a0c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002a18:	e083      	b.n	8002b22 <gc_execute_line+0x812>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	4aae      	ldr	r2, [pc, #696]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a24:	6153      	str	r3, [r2, #20]
 8002a26:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002a32:	e076      	b.n	8002b22 <gc_execute_line+0x812>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002a34:	2303      	movs	r3, #3
 8002a36:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	4aa7      	ldr	r2, [pc, #668]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002a44:	f043 0304 	orr.w	r3, r3, #4
 8002a48:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002a4c:	e069      	b.n	8002b22 <gc_execute_line+0x812>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a54:	4aa1      	ldr	r2, [pc, #644]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a56:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002a5a:	7713      	strb	r3, [r2, #28]
 8002a5c:	e061      	b.n	8002b22 <gc_execute_line+0x812>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f007 ff02 	bl	800a870 <truncf>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fafa 	bl	8001068 <__aeabi_f2iz>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b99      	ldr	r3, [pc, #612]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a78:	621a      	str	r2, [r3, #32]
 8002a7a:	e052      	b.n	8002b22 <gc_execute_line+0x812>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8002a7c:	2306      	movs	r3, #6
 8002a7e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	4a95      	ldr	r2, [pc, #596]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a86:	6253      	str	r3, [r2, #36]	; 0x24
 8002a88:	e04b      	b.n	8002b22 <gc_execute_line+0x812>
          // NOTE: For certain commands, P value must be an integer, but none of these commands are supported.
          // case 'Q': // Not supported
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <gc_execute_line+0x9cc>)
 8002a94:	6293      	str	r3, [r2, #40]	; 0x28
 8002a96:	e044      	b.n	8002b22 <gc_execute_line+0x812>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	4a8e      	ldr	r2, [pc, #568]	; (8002cdc <gc_execute_line+0x9cc>)
 8002aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002aa4:	e03d      	b.n	8002b22 <gc_execute_line+0x812>
		  case 'T': word_bit = WORD_T;
 8002aa6:	2309      	movs	r3, #9
 8002aa8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	498c      	ldr	r1, [pc, #560]	; (8002ce0 <gc_execute_line+0x9d0>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fab9 	bl	8001028 <__aeabi_fcmpgt>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <gc_execute_line+0x7b2>
 8002abc:	2326      	movs	r3, #38	; 0x26
 8002abe:	f001 b8ce 	b.w	8003c5e <gc_execute_line+0x194e>
					gc_block.values.t = int_value;
 8002ac2:	4a86      	ldr	r2, [pc, #536]	; (8002cdc <gc_execute_line+0x9cc>)
 8002ac4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ac8:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
				break;
 8002acc:	e029      	b.n	8002b22 <gc_execute_line+0x812>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8002ace:	230a      	movs	r3, #10
 8002ad0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	4a81      	ldr	r2, [pc, #516]	; (8002cdc <gc_execute_line+0x9cc>)
 8002ad8:	6353      	str	r3, [r2, #52]	; 0x34
 8002ada:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002ae6:	e01c      	b.n	8002b22 <gc_execute_line+0x812>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8002ae8:	230b      	movs	r3, #11
 8002aea:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <gc_execute_line+0x9cc>)
 8002af2:	6393      	str	r3, [r2, #56]	; 0x38
 8002af4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002b00:	e00f      	b.n	8002b22 <gc_execute_line+0x812>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8002b02:	230c      	movs	r3, #12
 8002b04:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	4a74      	ldr	r2, [pc, #464]	; (8002cdc <gc_execute_line+0x9cc>)
 8002b0c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002b0e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8002b1a:	e002      	b.n	8002b22 <gc_execute_line+0x812>
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 8002b1c:	2314      	movs	r3, #20
 8002b1e:	f001 b89e 	b.w	8003c5e <gc_execute_line+0x194e>
        }

        // NOTE: Variable 'word_bit' is always assigned, if the non-command letter is valid.
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002b22:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b26:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b2a:	fa42 f303 	asr.w	r3, r2, r3
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <gc_execute_line+0x82c>
 8002b36:	2319      	movs	r3, #25
 8002b38:	f001 b891 	b.w	8003c5e <gc_execute_line+0x194e>
        // Check for invalid negative values for words F, N, P, T, and S.
        // NOTE: Negative value check is done here simply for code-efficiency.
        if ( bit(word_bit) & (bit(WORD_F)|bit(WORD_N)|bit(WORD_P)|bit(WORD_T)|bit(WORD_S)) ) {
 8002b3c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b40:	f240 3261 	movw	r2, #865	; 0x361
 8002b44:	fa42 f303 	asr.w	r3, r2, r3
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <gc_execute_line+0x858>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fa48 	bl	8000fec <__aeabi_fcmplt>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <gc_execute_line+0x858>
 8002b62:	2304      	movs	r3, #4
 8002b64:	f001 b87b 	b.w	8003c5e <gc_execute_line+0x194e>
        }
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8002b68:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8002b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f ac0c 	bne.w	80023aa <gc_execute_line+0x9a>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8002b92:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <gc_execute_line+0x898>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8002b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <gc_execute_line+0x898>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8002ba8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <gc_execute_line+0x8b4>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8002bb4:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <gc_execute_line+0x9cc>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a4a      	ldr	r2, [pc, #296]	; (8002ce4 <gc_execute_line+0x9d4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	dd02      	ble.n	8002bc4 <gc_execute_line+0x8b4>
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	f001 b84d 	b.w	8003c5e <gc_execute_line+0x194e>
  // [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

  // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
  //   is not defined after switching to G94 from G93.
  // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002bc4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d017      	beq.n	8002c00 <gc_execute_line+0x8f0>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8002bd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <gc_execute_line+0x8d2>
 8002bdc:	2316      	movs	r3, #22
 8002bde:	f001 b83e 	b.w	8003c5e <gc_execute_line+0x194e>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8002be2:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <gc_execute_line+0x9cc>)
 8002be4:	78db      	ldrb	r3, [r3, #3]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d140      	bne.n	8002c6c <gc_execute_line+0x95c>
 8002bea:	4b3c      	ldr	r3, [pc, #240]	; (8002cdc <gc_execute_line+0x9cc>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	493e      	ldr	r1, [pc, #248]	; (8002ce8 <gc_execute_line+0x9d8>)
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f85d 	bl	8000cb0 <__aeabi_fmul>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <gc_execute_line+0x9cc>)
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e035      	b.n	8002c6c <gc_execute_line+0x95c>
  } else {
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c02:	789b      	ldrb	r3, [r3, #2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d114      	bne.n	8002c32 <gc_execute_line+0x922>
      // NOTE: G38 can also operate in inverse time, but is undefined as an error. Missing F word check added here.
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d12d      	bne.n	8002c6c <gc_execute_line+0x95c>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d029      	beq.n	8002c6c <gc_execute_line+0x95c>
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d025      	beq.n	8002c6c <gc_execute_line+0x95c>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8002c20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11f      	bne.n	8002c6c <gc_execute_line+0x95c>
 8002c2c:	2316      	movs	r3, #22
 8002c2e:	f001 b816 	b.w	8003c5e <gc_execute_line+0x194e>
      // value in the block. If no F word is passed with a motion command that requires a feed rate, this will error
      // out in the motion modes error-checking. However, if no F word is passed with NO motion command that requires
      // a feed rate, we simply move on and the state feed rate value gets updated to zero and remains undefined.
    } else { // = G94
      // - In units per mm mode: If F word passed, ensure value is in mm/min, otherwise push last state value.
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 8002c32:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <gc_execute_line+0x9dc>)
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <gc_execute_line+0x95c>
        if (bit_istrue(value_words,bit(WORD_F))) {
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00e      	beq.n	8002c64 <gc_execute_line+0x954>
          if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c48:	78db      	ldrb	r3, [r3, #3]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <gc_execute_line+0x95c>
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <gc_execute_line+0x9d8>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f82b 	bl	8000cb0 <__aeabi_fmul>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e003      	b.n	8002c6c <gc_execute_line+0x95c>
        } else {
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <gc_execute_line+0x9dc>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c6a:	60d3      	str	r3, [r2, #12]
    }
  }
  // bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-checking.

  // [4. Set spindle speed ]: S is negative (done.)
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8002c6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <gc_execute_line+0x970>
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <gc_execute_line+0x9dc>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
#endif
	
  // [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <gc_execute_line+0x9cc>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d10e      	bne.n	8002ca6 <gc_execute_line+0x996>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <gc_execute_line+0x98a>
 8002c94:	231c      	movs	r3, #28
 8002c96:	f000 bfe2 	b.w	8003c5e <gc_execute_line+0x194e>
    bit_false(value_words,bit(WORD_P));
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  }

  // [11. Set active plane ]: N/A
  switch (gc_block.modal.plane_select) {
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <gc_execute_line+0x9cc>)
 8002ca8:	795b      	ldrb	r3, [r3, #5]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <gc_execute_line+0x9a4>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d00a      	beq.n	8002cc8 <gc_execute_line+0x9b8>
 8002cb2:	e01d      	b.n	8002cf0 <gc_execute_line+0x9e0>
    case PLANE_SELECT_XY:
      axis_0 = X_AXIS;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      axis_1 = Y_AXIS;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      axis_linear = Z_AXIS;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
      break;
 8002cc6:	e01c      	b.n	8002d02 <gc_execute_line+0x9f2>
    case PLANE_SELECT_ZX:
      axis_0 = Z_AXIS;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      axis_1 = X_AXIS;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      axis_linear = Y_AXIS;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
      break;
 8002cda:	e012      	b.n	8002d02 <gc_execute_line+0x9f2>
 8002cdc:	20000ebc 	.word	0x20000ebc
 8002ce0:	437f0000 	.word	0x437f0000
 8002ce4:	00989680 	.word	0x00989680
 8002ce8:	41cb3333 	.word	0x41cb3333
 8002cec:	20000e78 	.word	0x20000e78
    default: // case PLANE_SELECT_YZ:
      axis_0 = Y_AXIS;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
      axis_1 = Z_AXIS;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
      axis_linear = X_AXIS;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  }

  // [12. Set length units ]: N/A
  // Pre-convert XYZ coordinate values to millimeters, if applicable.
  uint8_t idx;
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002d02:	4b9e      	ldr	r3, [pc, #632]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d04:	78db      	ldrb	r3, [r3, #3]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d12b      	bne.n	8002d62 <gc_execute_line+0xa52>
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d10:	e023      	b.n	8002d5a <gc_execute_line+0xa4a>
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002d12:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d1a:	fa42 f303 	asr.w	r3, r2, r3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <gc_execute_line+0xa40>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002d26:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002d2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d2e:	4a93      	ldr	r2, [pc, #588]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d30:	330c      	adds	r3, #12
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4991      	ldr	r1, [pc, #580]	; (8002f80 <gc_execute_line+0xc70>)
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd ffb8 	bl	8000cb0 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	4a8d      	ldr	r2, [pc, #564]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d46:	f104 030c 	add.w	r3, r4, #12
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	6059      	str	r1, [r3, #4]
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d54:	3301      	adds	r3, #1
 8002d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d9d7      	bls.n	8002d12 <gc_execute_line+0xa02>
  // [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
  // [G43.1 Errors]: Motion command in same line.
  //   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
  //   axis that is configured (in config.h). There should be an error if the configured axis
  //   is absent or if any of the other axis words are present.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8002d62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d10a      	bne.n	8002d80 <gc_execute_line+0xa70>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8002d6a:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d6c:	799b      	ldrb	r3, [r3, #6]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d106      	bne.n	8002d80 <gc_execute_line+0xa70>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 8002d72:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d002      	beq.n	8002d80 <gc_execute_line+0xa70>
 8002d7a:	2325      	movs	r3, #37	; 0x25
 8002d7c:	f000 bf6f 	b.w	8003c5e <gc_execute_line+0x194e>
  // TODO: An EEPROM read of the coordinate data may require a buffer sync when the cycle
  // is active. The read pauses the processor temporarily and may cause a rare crash. For
  // future versions on processors with enough memory, all coordinate data should be stored
  // in memory and written to EEPROM only when there is not a cycle active.
  float block_coord_system[N_AXIS];
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 8002d80:	4a80      	ldr	r2, [pc, #512]	; (8002f84 <gc_execute_line+0xc74>)
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	3228      	adds	r2, #40	; 0x28
 8002d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8002d8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01a      	beq.n	8002dd0 <gc_execute_line+0xac0>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002d9a:	4b78      	ldr	r3, [pc, #480]	; (8002f7c <gc_execute_line+0xc6c>)
 8002d9c:	79db      	ldrb	r3, [r3, #7]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <gc_execute_line+0xa98>
 8002da2:	231d      	movs	r3, #29
 8002da4:	f000 bf5b 	b.w	8003c5e <gc_execute_line+0x194e>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002da8:	4b76      	ldr	r3, [pc, #472]	; (8002f84 <gc_execute_line+0xc74>)
 8002daa:	799a      	ldrb	r2, [r3, #6]
 8002dac:	4b73      	ldr	r3, [pc, #460]	; (8002f7c <gc_execute_line+0xc6c>)
 8002dae:	79db      	ldrb	r3, [r3, #7]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d00d      	beq.n	8002dd0 <gc_execute_line+0xac0>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002db4:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <gc_execute_line+0xc6c>)
 8002db6:	79db      	ldrb	r3, [r3, #7]
 8002db8:	f107 0214 	add.w	r2, r7, #20
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 fffe 	bl	8007dc0 <settings_read_coord_data>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <gc_execute_line+0xac0>
 8002dca:	2307      	movs	r3, #7
 8002dcc:	f000 bf47 	b.w	8003c5e <gc_execute_line+0x194e>
  // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offsets.
  // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as these
  // commands all treat axis words differently. G10 as absolute offsets or computes current position as
  // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that observes
  // all the current coordinate system and G92 offsets.
  switch (gc_block.non_modal_command) {
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <gc_execute_line+0xc6c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b0a      	cmp	r3, #10
 8002dd6:	d003      	beq.n	8002de0 <gc_execute_line+0xad0>
 8002dd8:	2b5c      	cmp	r3, #92	; 0x5c
 8002dda:	f000 80c3 	beq.w	8002f64 <gc_execute_line+0xc54>
 8002dde:	e13d      	b.n	800305c <gc_execute_line+0xd4c>
    case NON_MODAL_SET_COORDINATE_DATA:
      // [G10 Errors]: L missing and is not 2 or 20. P word missing. (Negative P value done.)
      // [G10 L2 Errors]: R word NOT SUPPORTED. P value not 0 to nCoordSys(max 9). Axis words missing.
      // [G10 L20 Errors]: P must be 0 to nCoordSys(max 9). Axis words missing.
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8002de0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <gc_execute_line+0xade>
 8002de8:	231a      	movs	r3, #26
 8002dea:	f000 bf38 	b.w	8003c5e <gc_execute_line+0x194e>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 8002dee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002df2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <gc_execute_line+0xaf0>
 8002dfa:	231c      	movs	r3, #28
 8002dfc:	f000 bf2f 	b.w	8003c5e <gc_execute_line+0x194e>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f007 fd33 	bl	800a870 <truncf>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f951 	bl	80010b4 <__aeabi_f2uiz>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002e18:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d902      	bls.n	8002e26 <gc_execute_line+0xb16>
 8002e20:	231d      	movs	r3, #29
 8002e22:	f000 bf1c 	b.w	8003c5e <gc_execute_line+0x194e>
      if (gc_block.values.l != 20) {
 8002e26:	4b55      	ldr	r3, [pc, #340]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e28:	7f1b      	ldrb	r3, [r3, #28]
 8002e2a:	2b14      	cmp	r3, #20
 8002e2c:	d00f      	beq.n	8002e4e <gc_execute_line+0xb3e>
        if (gc_block.values.l == 2) {
 8002e2e:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d108      	bne.n	8002e48 <gc_execute_line+0xb38>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8002e36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <gc_execute_line+0xb3e>
 8002e42:	2314      	movs	r3, #20
 8002e44:	f000 bf0b 	b.w	8003c5e <gc_execute_line+0x194e>
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8002e48:	2314      	movs	r3, #20
 8002e4a:	f000 bf08 	b.w	8003c5e <gc_execute_line+0x194e>
      }
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 8002e4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e52:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8002e56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      // Determine coordinate system to change and try to load from EEPROM.
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8002e5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <gc_execute_line+0xb5e>
 8002e62:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002e6c:	e003      	b.n	8002e76 <gc_execute_line+0xb66>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <gc_execute_line+0xc6c>)
 8002e70:	79db      	ldrb	r3, [r3, #7]
 8002e72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      
      // NOTE: Store parameter data in IJK values. By rule, they are not in use with this command.
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 8002e76:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002e7a:	4943      	ldr	r1, [pc, #268]	; (8002f88 <gc_execute_line+0xc78>)
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 ff9f 	bl	8007dc0 <settings_read_coord_data>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <gc_execute_line+0xb7e>
 8002e88:	2307      	movs	r3, #7
 8002e8a:	f000 bee8 	b.w	8003c5e <gc_execute_line+0x194e>

      // Pre-calculate the coordinate data changes.
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e94:	e061      	b.n	8002f5a <gc_execute_line+0xc4a>
        // Update axes defined only in block. Always in machine coordinates. Can change non-active system.
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002e96:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002e9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e9e:	fa42 f303 	asr.w	r3, r2, r3
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d052      	beq.n	8002f50 <gc_execute_line+0xc40>
          if (gc_block.values.l == 20) {
 8002eaa:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <gc_execute_line+0xc6c>)
 8002eac:	7f1b      	ldrb	r3, [r3, #28]
 8002eae:	2b14      	cmp	r3, #20
 8002eb0:	d140      	bne.n	8002f34 <gc_execute_line+0xc24>
            // L20: Update coordinate system axis at current position (with modifiers) with programmed value
            // WPos = MPos - WCS - G92 - TLO  ->  WCS = MPos - G92 - TLO - WPos
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8002eb2:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002eb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eba:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <gc_execute_line+0xc74>)
 8002ebc:	3306      	adds	r3, #6
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	6858      	ldr	r0, [r3, #4]
 8002ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ec8:	4a2e      	ldr	r2, [pc, #184]	; (8002f84 <gc_execute_line+0xc74>)
 8002eca:	330c      	adds	r3, #12
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fde2 	bl	8000a9c <__aeabi_fsub>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ee0:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <gc_execute_line+0xc6c>)
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7fd fdd6 	bl	8000a9c <__aeabi_fsub>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <gc_execute_line+0xc6c>)
 8002ef6:	1ca3      	adds	r3, r4, #2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	6099      	str	r1, [r3, #8]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8002efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d124      	bne.n	8002f50 <gc_execute_line+0xc40>
 8002f06:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002f0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f0e:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f10:	3302      	adds	r3, #2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <gc_execute_line+0xc74>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f7fd fdbc 	bl	8000a9c <__aeabi_fsub>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4619      	mov	r1, r3
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f2a:	1ca3      	adds	r3, r4, #2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	6099      	str	r1, [r3, #8]
 8002f32:	e00d      	b.n	8002f50 <gc_execute_line+0xc40>
          } else {
            // L2: Update coordinate system axis to programmed value.
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8002f34:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8002f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f3c:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f3e:	330c      	adds	r3, #12
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <gc_execute_line+0xc6c>)
 8002f48:	1c8b      	adds	r3, r1, #2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4403      	add	r3, r0
 8002f4e:	609a      	str	r2, [r3, #8]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002f50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f54:	3301      	adds	r3, #1
 8002f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d999      	bls.n	8002e96 <gc_execute_line+0xb86>
          }
        } // Else, keep current stored value.
      }
      break;
 8002f62:	e17b      	b.n	800325c <gc_execute_line+0xf4c>
    case NON_MODAL_SET_COORDINATE_OFFSET:
      // [G92 Errors]: No axis words.
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002f64:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <gc_execute_line+0xc62>
 8002f6c:	231a      	movs	r3, #26
 8002f6e:	f000 be76 	b.w	8003c5e <gc_execute_line+0x194e>

      // Update axes defined only in block. Offsets current system to defined value. Does not update when
      // active coordinate system is selected, but is still active unless G92.1 disables it.
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002f78:	e06b      	b.n	8003052 <gc_execute_line+0xd42>
 8002f7a:	bf00      	nop
 8002f7c:	20000ebc 	.word	0x20000ebc
 8002f80:	41cb3333 	.word	0x41cb3333
 8002f84:	20000e78 	.word	0x20000e78
 8002f88:	20000ecc 	.word	0x20000ecc
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002f8c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8002f90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f94:	fa42 f303 	asr.w	r3, r2, r3
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d044      	beq.n	800302a <gc_execute_line+0xd1a>
          // WPos = MPos - WCS - G92 - TLO  ->  G92 = MPos - WCS - TLO - WPos
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002fa0:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fa8:	4abb      	ldr	r2, [pc, #748]	; (8003298 <gc_execute_line+0xf88>)
 8002faa:	3306      	adds	r3, #6
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fd fd69 	bl	8000a9c <__aeabi_fsub>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fd2:	4ab2      	ldr	r2, [pc, #712]	; (800329c <gc_execute_line+0xf8c>)
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fd5d 	bl	8000a9c <__aeabi_fsub>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4aad      	ldr	r2, [pc, #692]	; (800329c <gc_execute_line+0xf8c>)
 8002fe8:	f104 030c 	add.w	r3, r4, #12
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	6059      	str	r1, [r3, #4]
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 8002ff2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d126      	bne.n	8003048 <gc_execute_line+0xd38>
 8002ffa:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8002ffe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003002:	4aa6      	ldr	r2, [pc, #664]	; (800329c <gc_execute_line+0xf8c>)
 8003004:	330c      	adds	r3, #12
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4ba2      	ldr	r3, [pc, #648]	; (8003298 <gc_execute_line+0xf88>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f7fd fd42 	bl	8000a9c <__aeabi_fsub>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	4a9f      	ldr	r2, [pc, #636]	; (800329c <gc_execute_line+0xf8c>)
 800301e:	f104 030c 	add.w	r3, r4, #12
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	6059      	str	r1, [r3, #4]
 8003028:	e00e      	b.n	8003048 <gc_execute_line+0xd38>
        } else {
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800302a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800302e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003032:	4a99      	ldr	r2, [pc, #612]	; (8003298 <gc_execute_line+0xf88>)
 8003034:	330c      	adds	r3, #12
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4897      	ldr	r0, [pc, #604]	; (800329c <gc_execute_line+0xf8c>)
 800303e:	f101 030c 	add.w	r3, r1, #12
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4403      	add	r3, r0
 8003046:	605a      	str	r2, [r3, #4]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8003048:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800304c:	3301      	adds	r3, #1
 800304e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003052:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003056:	2b02      	cmp	r3, #2
 8003058:	d998      	bls.n	8002f8c <gc_execute_line+0xc7c>
        }
      }
      break;
 800305a:	e0ff      	b.n	800325c <gc_execute_line+0xf4c>

      // At this point, the rest of the explicit axis commands treat the axis values as the traditional
      // target position with the coordinate system offsets, G92 offsets, absolute override, and distance
      // modes applied. This includes the motion mode commands. We can now pre-compute the target position.
      // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 800305c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003060:	2b03      	cmp	r3, #3
 8003062:	f000 8094 	beq.w	800318e <gc_execute_line+0xe7e>
        if (axis_words) {
 8003066:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 808f 	beq.w	800318e <gc_execute_line+0xe7e>
          for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003076:	e085      	b.n	8003184 <gc_execute_line+0xe74>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8003078:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800307c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003080:	fa42 f303 	asr.w	r3, r2, r3
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <gc_execute_line+0xd9c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 800308c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003090:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003094:	4a80      	ldr	r2, [pc, #512]	; (8003298 <gc_execute_line+0xf88>)
 8003096:	3306      	adds	r3, #6
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	487f      	ldr	r0, [pc, #508]	; (800329c <gc_execute_line+0xf8c>)
 80030a0:	f101 030c 	add.w	r3, r1, #12
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4403      	add	r3, r0
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e066      	b.n	800317a <gc_execute_line+0xe6a>
            } else {
              // Update specified value according to distance mode or ignore if absolute override is active.
              // NOTE: G53 is never active with G28/30 since they are in the same modal group.
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <gc_execute_line+0xf8c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b35      	cmp	r3, #53	; 0x35
 80030b2:	d062      	beq.n	800317a <gc_execute_line+0xe6a>
                // Apply coordinate offsets based on distance mode.
                if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE) {
 80030b4:	4b79      	ldr	r3, [pc, #484]	; (800329c <gc_execute_line+0xf8c>)
 80030b6:	791b      	ldrb	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d143      	bne.n	8003144 <gc_execute_line+0xe34>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 80030bc:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80030c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030c4:	4a75      	ldr	r2, [pc, #468]	; (800329c <gc_execute_line+0xf8c>)
 80030c6:	330c      	adds	r3, #12
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	685d      	ldr	r5, [r3, #4]
 80030ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80030d8:	4413      	add	r3, r2
 80030da:	f853 0c44 	ldr.w	r0, [r3, #-68]
 80030de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030e2:	4a6d      	ldr	r2, [pc, #436]	; (8003298 <gc_execute_line+0xf88>)
 80030e4:	330c      	adds	r3, #12
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fcd7 	bl	8000aa0 <__addsf3>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4619      	mov	r1, r3
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7fd fcd2 	bl	8000aa0 <__addsf3>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4619      	mov	r1, r3
 8003100:	4a66      	ldr	r2, [pc, #408]	; (800329c <gc_execute_line+0xf8c>)
 8003102:	f104 030c 	add.w	r3, r4, #12
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	6059      	str	r1, [r3, #4]
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 800310c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003110:	2b02      	cmp	r3, #2
 8003112:	d132      	bne.n	800317a <gc_execute_line+0xe6a>
 8003114:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800311c:	4a5f      	ldr	r2, [pc, #380]	; (800329c <gc_execute_line+0xf8c>)
 800311e:	330c      	adds	r3, #12
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <gc_execute_line+0xf88>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fd fcb7 	bl	8000aa0 <__addsf3>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	4a59      	ldr	r2, [pc, #356]	; (800329c <gc_execute_line+0xf8c>)
 8003138:	f104 030c 	add.w	r3, r4, #12
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	6059      	str	r1, [r3, #4]
 8003142:	e01a      	b.n	800317a <gc_execute_line+0xe6a>
                } else {  // Incremental mode
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 8003144:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003148:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800314c:	4a53      	ldr	r2, [pc, #332]	; (800329c <gc_execute_line+0xf8c>)
 800314e:	330c      	adds	r3, #12
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	6858      	ldr	r0, [r3, #4]
 8003156:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800315a:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <gc_execute_line+0xf88>)
 800315c:	3306      	adds	r3, #6
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4619      	mov	r1, r3
 8003166:	f7fd fc9b 	bl	8000aa0 <__addsf3>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	4a4b      	ldr	r2, [pc, #300]	; (800329c <gc_execute_line+0xf8c>)
 8003170:	f104 030c 	add.w	r3, r4, #12
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	6059      	str	r1, [r3, #4]
          for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 800317a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800317e:	3301      	adds	r3, #1
 8003180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003184:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003188:	2b02      	cmp	r3, #2
 800318a:	f67f af75 	bls.w	8003078 <gc_execute_line+0xd68>
          }
        }
      }

      // Check remaining non-modal commands for errors.
      switch (gc_block.non_modal_command) {
 800318e:	4b43      	ldr	r3, [pc, #268]	; (800329c <gc_execute_line+0xf8c>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b26      	cmp	r3, #38	; 0x26
 8003194:	d05d      	beq.n	8003252 <gc_execute_line+0xf42>
 8003196:	2b26      	cmp	r3, #38	; 0x26
 8003198:	dc04      	bgt.n	80031a4 <gc_execute_line+0xe94>
 800319a:	2b1c      	cmp	r3, #28
 800319c:	d008      	beq.n	80031b0 <gc_execute_line+0xea0>
 800319e:	2b1e      	cmp	r3, #30
 80031a0:	d006      	beq.n	80031b0 <gc_execute_line+0xea0>
 80031a2:	e05b      	b.n	800325c <gc_execute_line+0xf4c>
 80031a4:	2b35      	cmp	r3, #53	; 0x35
 80031a6:	d049      	beq.n	800323c <gc_execute_line+0xf2c>
 80031a8:	2b66      	cmp	r3, #102	; 0x66
 80031aa:	d054      	beq.n	8003256 <gc_execute_line+0xf46>
 80031ac:	2b28      	cmp	r3, #40	; 0x28
          break;
        case NON_MODAL_SET_HOME_0: // G28.1
        case NON_MODAL_SET_HOME_1: // G30.1
          // [G28.1/30.1 Errors]: Cutter compensation is enabled.
          // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
          break;
 80031ae:	e050      	b.n	8003252 <gc_execute_line+0xf42>
          if (gc_block.non_modal_command == NON_MODAL_GO_HOME_0) {
 80031b0:	4b3a      	ldr	r3, [pc, #232]	; (800329c <gc_execute_line+0xf8c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b1c      	cmp	r3, #28
 80031b6:	d109      	bne.n	80031cc <gc_execute_line+0xebc>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80031b8:	4939      	ldr	r1, [pc, #228]	; (80032a0 <gc_execute_line+0xf90>)
 80031ba:	2006      	movs	r0, #6
 80031bc:	f004 fe00 	bl	8007dc0 <settings_read_coord_data>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <gc_execute_line+0xed0>
 80031c6:	2307      	movs	r3, #7
 80031c8:	f000 bd49 	b.w	8003c5e <gc_execute_line+0x194e>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80031cc:	4934      	ldr	r1, [pc, #208]	; (80032a0 <gc_execute_line+0xf90>)
 80031ce:	2007      	movs	r0, #7
 80031d0:	f004 fdf6 	bl	8007dc0 <settings_read_coord_data>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <gc_execute_line+0xed0>
 80031da:	2307      	movs	r3, #7
 80031dc:	f000 bd3f 	b.w	8003c5e <gc_execute_line+0x194e>
          if (axis_words) {
 80031e0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d025      	beq.n	8003234 <gc_execute_line+0xf24>
            for (idx=0; idx<N_AXIS; idx++) {
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80031ee:	e01c      	b.n	800322a <gc_execute_line+0xf1a>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 80031f0:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80031f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031f8:	fa42 f303 	asr.w	r3, r2, r3
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <gc_execute_line+0xf10>
 8003204:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8003208:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <gc_execute_line+0xf88>)
 800320e:	3306      	adds	r3, #6
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4821      	ldr	r0, [pc, #132]	; (800329c <gc_execute_line+0xf8c>)
 8003218:	1c8b      	adds	r3, r1, #2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4403      	add	r3, r0
 800321e:	609a      	str	r2, [r3, #8]
            for (idx=0; idx<N_AXIS; idx++) {
 8003220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003224:	3301      	adds	r3, #1
 8003226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800322a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800322e:	2b02      	cmp	r3, #2
 8003230:	d9de      	bls.n	80031f0 <gc_execute_line+0xee0>
          break;
 8003232:	e013      	b.n	800325c <gc_execute_line+0xf4c>
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          break;
 800323a:	e00f      	b.n	800325c <gc_execute_line+0xf4c>
          // NOTE: If axis words are passed here, they are interpreted as an implicit motion mode.
          break;
        case NON_MODAL_ABSOLUTE_OVERRIDE:
          // [G53 Errors]: G0 and G1 are not active. Cutter compensation is enabled.
          // NOTE: All explicit axis word commands are in this modal group. So no implicit check necessary.
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <gc_execute_line+0xf8c>)
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <gc_execute_line+0xf4a>
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <gc_execute_line+0xf8c>)
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d006      	beq.n	800325a <gc_execute_line+0xf4a>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 800324c:	231e      	movs	r3, #30
 800324e:	f000 bd06 	b.w	8003c5e <gc_execute_line+0x194e>
          break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <gc_execute_line+0xf4c>
          break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <gc_execute_line+0xf4c>
          }
          break;
 800325a:	bf00      	nop
      }
  }

  // [20. Motion modes ]:
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <gc_execute_line+0xf8c>)
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b50      	cmp	r3, #80	; 0x50
 8003262:	d107      	bne.n	8003274 <gc_execute_line+0xf64>
    // [G80 Errors]: Axis word are programmed while G80 is active.
    // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8003264:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 821b 	beq.w	80036a4 <gc_execute_line+0x1394>
 800326e:	231f      	movs	r3, #31
 8003270:	f000 bcf5 	b.w	8003c5e <gc_execute_line+0x194e>

  // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), or
  // was explicitly commanded in the g-code block.
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8003274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003278:	2b02      	cmp	r3, #2
 800327a:	f040 8213 	bne.w	80036a4 <gc_execute_line+0x1394>

    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <gc_execute_line+0xf8c>)
 8003280:	785b      	ldrb	r3, [r3, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <gc_execute_line+0xf94>
      // [G0 Errors]: Axis letter not configured or without real value (done.)
      // Axis words are optional. If missing, set axis command flag to ignore execution.
      if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8003286:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 820a 	bne.w	80036a4 <gc_execute_line+0x1394>
 8003290:	2300      	movs	r3, #0
 8003292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003296:	e205      	b.n	80036a4 <gc_execute_line+0x1394>
 8003298:	20000e78 	.word	0x20000e78
 800329c:	20000ebc 	.word	0x20000ebc
 80032a0:	20000ecc 	.word	0x20000ecc

    // All remaining motion modes (all but G0 and G80), require a valid feed rate value. In units per mm mode,
    // the value must be positive. In inverse time mode, a positive value must be passed with each block.
    } else {
      // Check if feed rate is defined for the motion modes that require it.
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80032a4:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <gc_execute_line+0x1224>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe93 	bl	8000fd8 <__aeabi_fcmpeq>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <gc_execute_line+0xfae>
 80032b8:	2316      	movs	r3, #22
 80032ba:	f000 bcd0 	b.w	8003c5e <gc_execute_line+0x194e>

      switch (gc_block.modal.motion) {
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <gc_execute_line+0x1224>)
 80032c0:	785b      	ldrb	r3, [r3, #1]
 80032c2:	2b8c      	cmp	r3, #140	; 0x8c
 80032c4:	f000 81cd 	beq.w	8003662 <gc_execute_line+0x1352>
 80032c8:	2b8c      	cmp	r3, #140	; 0x8c
 80032ca:	dc06      	bgt.n	80032da <gc_execute_line+0xfca>
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d017      	beq.n	8003300 <gc_execute_line+0xff0>
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d01b      	beq.n	800330c <gc_execute_line+0xffc>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d00a      	beq.n	80032ee <gc_execute_line+0xfde>
 80032d8:	e1e4      	b.n	80036a4 <gc_execute_line+0x1394>
 80032da:	2b8e      	cmp	r3, #142	; 0x8e
 80032dc:	f000 81c1 	beq.w	8003662 <gc_execute_line+0x1352>
 80032e0:	2b8e      	cmp	r3, #142	; 0x8e
 80032e2:	f2c0 81b8 	blt.w	8003656 <gc_execute_line+0x1346>
 80032e6:	2b8f      	cmp	r3, #143	; 0x8f
 80032e8:	f000 81b5 	beq.w	8003656 <gc_execute_line+0x1346>
 80032ec:	e1da      	b.n	80036a4 <gc_execute_line+0x1394>
        case MOTION_MODE_LINEAR:
          // [G1 Errors]: Feed rate undefined. Axis letter not configured or without real value.
          // Axis words are optional. If missing, set axis command flag to ignore execution.
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 80032ee:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 81d3 	bne.w	800369e <gc_execute_line+0x138e>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

          break;
 80032fe:	e1ce      	b.n	800369e <gc_execute_line+0x138e>
        case MOTION_MODE_CW_ARC: 
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8003300:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          // [G2/3 Offset-Mode Errors]: No axis words and/or offsets in selected plane. The radius to the current
          //   point and the radius to the target point differs more than 0.002mm (EMC def. 0.5mm OR 0.005mm and 0.1% radius).
          // [G2/3 Full-Circle-Mode Errors]: NOT SUPPORTED. Axis words exist. No offsets programmed. P must be an integer.
          // NOTE: Both radius and offsets are required for arc tracing and are pre-computed with the error-checking.

          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 800330c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <gc_execute_line+0x100a>
 8003314:	231a      	movs	r3, #26
 8003316:	f000 bca2 	b.w	8003c5e <gc_execute_line+0x194e>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 800331a:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 800331e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003322:	2101      	movs	r1, #1
 8003324:	4099      	lsls	r1, r3
 8003326:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800332a:	2001      	movs	r0, #1
 800332c:	fa00 f303 	lsl.w	r3, r0, r3
 8003330:	430b      	orrs	r3, r1
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <gc_execute_line+0x102e>
 8003338:	2320      	movs	r3, #32
 800333a:	f000 bc90 	b.w	8003c5e <gc_execute_line+0x194e>

          // Calculate the change in position along each selected axis
          float x,y;
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 800333e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003342:	4a7c      	ldr	r2, [pc, #496]	; (8003534 <gc_execute_line+0x1224>)
 8003344:	330c      	adds	r3, #12
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	6858      	ldr	r0, [r3, #4]
 800334c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003350:	4a79      	ldr	r2, [pc, #484]	; (8003538 <gc_execute_line+0x1228>)
 8003352:	3306      	adds	r3, #6
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd fb9e 	bl	8000a9c <__aeabi_fsub>
 8003360:	4603      	mov	r3, r0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8003364:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003368:	4a72      	ldr	r2, [pc, #456]	; (8003534 <gc_execute_line+0x1224>)
 800336a:	330c      	adds	r3, #12
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	6858      	ldr	r0, [r3, #4]
 8003372:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <gc_execute_line+0x1228>)
 8003378:	3306      	adds	r3, #6
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4619      	mov	r1, r3
 8003382:	f7fd fb8b 	bl	8000a9c <__aeabi_fsub>
 8003386:	4603      	mov	r3, r0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34

          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 800338a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80af 	beq.w	80034f6 <gc_execute_line+0x11e6>
            bit_false(value_words,bit(WORD_R));
 8003398:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 80033a4:	220c      	movs	r2, #12
 80033a6:	4965      	ldr	r1, [pc, #404]	; (800353c <gc_execute_line+0x122c>)
 80033a8:	4865      	ldr	r0, [pc, #404]	; (8003540 <gc_execute_line+0x1230>)
 80033aa:	f007 f933 	bl	800a614 <memcmp>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <gc_execute_line+0x10aa>
 80033b4:	2321      	movs	r3, #33	; 0x21
 80033b6:	f000 bc52 	b.w	8003c5e <gc_execute_line+0x194e>

            // Convert radius value to proper units.
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <gc_execute_line+0x1224>)
 80033bc:	78db      	ldrb	r3, [r3, #3]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d109      	bne.n	80033d6 <gc_execute_line+0x10c6>
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <gc_execute_line+0x1224>)
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	495f      	ldr	r1, [pc, #380]	; (8003544 <gc_execute_line+0x1234>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fc71 	bl	8000cb0 <__aeabi_fmul>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b58      	ldr	r3, [pc, #352]	; (8003534 <gc_execute_line+0x1224>)
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
                j = (y + (x * h_x2_div_d))/2
            */

            // First, use h_x2_div_d to compute 4*h^2 to check if it is negative or r is smaller
            // than d. If so, the sqrt of a negative number is complex and error out.
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 80033d6:	4b57      	ldr	r3, [pc, #348]	; (8003534 <gc_execute_line+0x1224>)
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fc66 	bl	8000cb0 <__aeabi_fmul>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b52      	ldr	r3, [pc, #328]	; (8003534 <gc_execute_line+0x1224>)
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fd fc5e 	bl	8000cb0 <__aeabi_fmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461c      	mov	r4, r3
 80033f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033fc:	f7fd fc58 	bl	8000cb0 <__aeabi_fmul>
 8003400:	4603      	mov	r3, r0
 8003402:	4619      	mov	r1, r3
 8003404:	4620      	mov	r0, r4
 8003406:	f7fd fb49 	bl	8000a9c <__aeabi_fsub>
 800340a:	4603      	mov	r3, r0
 800340c:	461c      	mov	r4, r3
 800340e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003410:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003412:	f7fd fc4d 	bl	8000cb0 <__aeabi_fmul>
 8003416:	4603      	mov	r3, r0
 8003418:	4619      	mov	r1, r3
 800341a:	4620      	mov	r0, r4
 800341c:	f7fd fb3e 	bl	8000a9c <__aeabi_fsub>
 8003420:	4603      	mov	r3, r0
 8003422:	643b      	str	r3, [r7, #64]	; 0x40

            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800342a:	f7fd fddf 	bl	8000fec <__aeabi_fcmplt>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <gc_execute_line+0x112a>
 8003434:	2322      	movs	r3, #34	; 0x22
 8003436:	f000 bc12 	b.w	8003c5e <gc_execute_line+0x194e>

            // Finish computing h_x2_div_d.
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 800343a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800343c:	f007 fa2c 	bl	800a898 <sqrtf>
 8003440:	4603      	mov	r3, r0
 8003442:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003446:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800344a:	f001 fdd7 	bl	8004ffc <hypot_f>
 800344e:	4603      	mov	r3, r0
 8003450:	4619      	mov	r1, r3
 8003452:	4620      	mov	r0, r4
 8003454:	f7fd fce0 	bl	8000e18 <__aeabi_fdiv>
 8003458:	4603      	mov	r3, r0
 800345a:	643b      	str	r3, [r7, #64]	; 0x40
            // Invert the sign of h_x2_div_d if the circle is counter clockwise (see sketch below)
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 800345c:	4b35      	ldr	r3, [pc, #212]	; (8003534 <gc_execute_line+0x1224>)
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d103      	bne.n	800346c <gc_execute_line+0x115c>
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
            */
            // Negative R is g-code-alese for "I want a circle with more than 180 degrees of travel" (go figure!),
            // even though it is advised against ever generating such circles in a single line of g-code. By
            // inverting the sign of h_x2_div_d the center of the circles is placed on the opposite side of the line of
            // travel and thus we get the unadvisably long arcs as prescribed.
            if (gc_block.values.r < 0) {
 800346c:	4b31      	ldr	r3, [pc, #196]	; (8003534 <gc_execute_line+0x1224>)
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd fdb9 	bl	8000fec <__aeabi_fcmplt>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <gc_execute_line+0x1184>
                h_x2_div_d = -h_x2_div_d;
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <gc_execute_line+0x1224>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <gc_execute_line+0x1224>)
 8003492:	6293      	str	r3, [r2, #40]	; 0x28
            }
            // Complete the operation by calculating the actual center of the arc
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8003494:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8003498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800349a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800349c:	f7fd fc08 	bl	8000cb0 <__aeabi_fmul>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4619      	mov	r1, r3
 80034a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034a6:	f7fd faf9 	bl	8000a9c <__aeabi_fsub>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd fbfd 	bl	8000cb0 <__aeabi_fmul>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4619      	mov	r1, r3
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <gc_execute_line+0x1224>)
 80034bc:	1ca3      	adds	r3, r4, #2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	6099      	str	r1, [r3, #8]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 80034c4:	f897 4055 	ldrb.w	r4, [r7, #85]	; 0x55
 80034c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034cc:	f7fd fbf0 	bl	8000cb0 <__aeabi_fmul>
 80034d0:	4603      	mov	r3, r0
 80034d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd fae3 	bl	8000aa0 <__addsf3>
 80034da:	4603      	mov	r3, r0
 80034dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fbe5 	bl	8000cb0 <__aeabi_fmul>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4619      	mov	r1, r3
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <gc_execute_line+0x1224>)
 80034ec:	1ca3      	adds	r3, r4, #2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	6099      	str	r1, [r3, #8]
            if (delta_r > 0.005f) {
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
            }
          }
          break;
 80034f4:	e0d6      	b.n	80036a4 <gc_execute_line+0x1394>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 80034f6:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80034fa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80034fe:	2101      	movs	r1, #1
 8003500:	4099      	lsls	r1, r3
 8003502:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003506:	2001      	movs	r0, #1
 8003508:	fa00 f303 	lsl.w	r3, r0, r3
 800350c:	430b      	orrs	r3, r1
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <gc_execute_line+0x1208>
 8003514:	2323      	movs	r3, #35	; 0x23
 8003516:	e3a2      	b.n	8003c5e <gc_execute_line+0x194e>
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8003518:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800351c:	f023 030e 	bic.w	r3, r3, #14
 8003520:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <gc_execute_line+0x1224>)
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d134      	bne.n	8003596 <gc_execute_line+0x1286>
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003532:	e02c      	b.n	800358e <gc_execute_line+0x127e>
 8003534:	20000ebc 	.word	0x20000ebc
 8003538:	20000e78 	.word	0x20000e78
 800353c:	20000ef0 	.word	0x20000ef0
 8003540:	20000e94 	.word	0x20000e94
 8003544:	41cb3333 	.word	0x41cb3333
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 8003548:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800354c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003550:	fa42 f303 	asr.w	r3, r2, r3
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <gc_execute_line+0x1274>
 800355c:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003564:	4aa5      	ldr	r2, [pc, #660]	; (80037fc <gc_execute_line+0x14ec>)
 8003566:	3302      	adds	r3, #2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	49a4      	ldr	r1, [pc, #656]	; (8003800 <gc_execute_line+0x14f0>)
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb9d 	bl	8000cb0 <__aeabi_fmul>
 8003576:	4603      	mov	r3, r0
 8003578:	4619      	mov	r1, r3
 800357a:	4aa0      	ldr	r2, [pc, #640]	; (80037fc <gc_execute_line+0x14ec>)
 800357c:	1ca3      	adds	r3, r4, #2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	6099      	str	r1, [r3, #8]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8003584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003588:	3301      	adds	r3, #1
 800358a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800358e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003592:	2b02      	cmp	r3, #2
 8003594:	d9d8      	bls.n	8003548 <gc_execute_line+0x1238>
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8003596:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800359a:	4a98      	ldr	r2, [pc, #608]	; (80037fc <gc_execute_line+0x14ec>)
 800359c:	3302      	adds	r3, #2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4619      	mov	r1, r3
 80035a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035a8:	f7fd fa78 	bl	8000a9c <__aeabi_fsub>
 80035ac:	4603      	mov	r3, r0
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 80035b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035b4:	4a91      	ldr	r2, [pc, #580]	; (80037fc <gc_execute_line+0x14ec>)
 80035b6:	3302      	adds	r3, #2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	4619      	mov	r1, r3
 80035c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035c2:	f7fd fa6b 	bl	8000a9c <__aeabi_fsub>
 80035c6:	4603      	mov	r3, r0
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
            float target_r = hypot_f(x,y);
 80035ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80035cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035ce:	f001 fd15 	bl	8004ffc <hypot_f>
 80035d2:	6338      	str	r0, [r7, #48]	; 0x30
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 80035d4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80035d8:	4a88      	ldr	r2, [pc, #544]	; (80037fc <gc_execute_line+0x14ec>)
 80035da:	3302      	adds	r3, #2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	6898      	ldr	r0, [r3, #8]
 80035e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035e6:	4a85      	ldr	r2, [pc, #532]	; (80037fc <gc_execute_line+0x14ec>)
 80035e8:	3302      	adds	r3, #2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f001 fd03 	bl	8004ffc <hypot_f>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b80      	ldr	r3, [pc, #512]	; (80037fc <gc_execute_line+0x14ec>)
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
            float delta_r = fabsf(target_r-gc_block.values.r);
 80035fc:	4b7f      	ldr	r3, [pc, #508]	; (80037fc <gc_execute_line+0x14ec>)
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	4619      	mov	r1, r3
 8003602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003604:	f7fd fa4a 	bl	8000a9c <__aeabi_fsub>
 8003608:	4603      	mov	r3, r0
 800360a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (delta_r > 0.005f) {
 8003610:	497c      	ldr	r1, [pc, #496]	; (8003804 <gc_execute_line+0x14f4>)
 8003612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003614:	f7fd fd08 	bl	8001028 <__aeabi_fcmpgt>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d100      	bne.n	8003620 <gc_execute_line+0x1310>
          break;
 800361e:	e041      	b.n	80036a4 <gc_execute_line+0x1394>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8003620:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003626:	f7fd fcff 	bl	8001028 <__aeabi_fcmpgt>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <gc_execute_line+0x1324>
 8003630:	2321      	movs	r3, #33	; 0x21
 8003632:	e314      	b.n	8003c5e <gc_execute_line+0x194e>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8003634:	4b71      	ldr	r3, [pc, #452]	; (80037fc <gc_execute_line+0x14ec>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	4973      	ldr	r1, [pc, #460]	; (8003808 <gc_execute_line+0x14f8>)
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fb38 	bl	8000cb0 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fcd1 	bl	8000fec <__aeabi_fcmplt>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d100      	bne.n	8003652 <gc_execute_line+0x1342>
          break;
 8003650:	e028      	b.n	80036a4 <gc_execute_line+0x1394>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8003652:	2321      	movs	r3, #33	; 0x21
 8003654:	e303      	b.n	8003c5e <gc_execute_line+0x194e>
        case MOTION_MODE_PROBE_TOWARD_NO_ERROR: case MOTION_MODE_PROBE_AWAY_NO_ERROR:
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8003656:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800365a:	f043 0310 	orr.w	r3, r3, #16
 800365e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        case MOTION_MODE_PROBE_TOWARD: case MOTION_MODE_PROBE_AWAY:
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8003662:	4b66      	ldr	r3, [pc, #408]	; (80037fc <gc_execute_line+0x14ec>)
 8003664:	785b      	ldrb	r3, [r3, #1]
 8003666:	2b8e      	cmp	r3, #142	; 0x8e
 8003668:	d003      	beq.n	8003672 <gc_execute_line+0x1362>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 800366a:	4b64      	ldr	r3, [pc, #400]	; (80037fc <gc_execute_line+0x14ec>)
 800366c:	785b      	ldrb	r3, [r3, #1]
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 800366e:	2b8f      	cmp	r3, #143	; 0x8f
 8003670:	d105      	bne.n	800367e <gc_execute_line+0x136e>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8003672:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          // [G38 Errors]: Target is same current. No axis words. Cutter compensation is enabled. Feed rate
          //   is undefined. Probe is triggered. NOTE: Probe check moved to probe cycle. Instead of returning
          //   an error, it issues an alarm to prevent further motion to the probe. It's also done there to
          //   allow the planner buffer to empty and move off the probe trigger before another probing cycle.
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 800367e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <gc_execute_line+0x137a>
 8003686:	231a      	movs	r3, #26
 8003688:	e2e9      	b.n	8003c5e <gc_execute_line+0x194e>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 800368a:	220c      	movs	r2, #12
 800368c:	495f      	ldr	r1, [pc, #380]	; (800380c <gc_execute_line+0x14fc>)
 800368e:	4860      	ldr	r0, [pc, #384]	; (8003810 <gc_execute_line+0x1500>)
 8003690:	f006 ffc0 	bl	800a614 <memcmp>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <gc_execute_line+0x1392>
 800369a:	2321      	movs	r3, #33	; 0x21
 800369c:	e2df      	b.n	8003c5e <gc_execute_line+0x194e>
          break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <gc_execute_line+0x1394>
          break;
 80036a2:	bf00      	nop

  // [21. Program flow ]: No error checks required.

  // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
  // radius mode, or axis words that aren't used in the block.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80036a4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d006      	beq.n	80036be <gc_execute_line+0x13ae>
      // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 80036b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036b4:	f023 0321 	bic.w	r3, r3, #33	; 0x21
 80036b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80036bc:	e007      	b.n	80036ce <gc_execute_line+0x13be>
  } else {
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 80036be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036c2:	f423 7348 	bic.w	r3, r3, #800	; 0x320
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  #elif defined AB_AXIS
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B))); } // Remove axis words.
  #elif defined ABC_AXIS
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B)|bit(WORD_C))); } // Remove axis words.
  #else
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
 80036ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <gc_execute_line+0x13d2>
 80036d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036da:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80036de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  #endif
// ---
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80036e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <gc_execute_line+0x13de>
 80036ea:	2324      	movs	r3, #36	; 0x24
 80036ec:	e2b7      	b.n	8003c5e <gc_execute_line+0x194e>
     need to update the state and execute the block according to the order-of-execution.
  */

  // Initialize planner data struct for motion blocks.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 80036f4:	220c      	movs	r2, #12
 80036f6:	2100      	movs	r1, #0
 80036f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fa:	f006 ff9a 	bl	800a632 <memset>

                                              // Intercept jog commands and complete error checking for valid jog commands and execute.
                                              // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
                                              // targets are computed correctly. The final parser position after a jog is updated in
                                              // protocol_execute_realtime() when jogging completes or is canceled.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80036fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d033      	beq.n	8003772 <gc_execute_line+0x1462>
      // Only distance and unit modal commands and G53 absolute override command are allowed.
      // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 800370a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800370e:	f023 0349 	bic.w	r3, r3, #73	; 0x49
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <gc_execute_line+0x140a>
 8003716:	2310      	movs	r3, #16
 8003718:	e2a1      	b.n	8003c5e <gc_execute_line+0x194e>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 800371a:	4b38      	ldr	r3, [pc, #224]	; (80037fc <gc_execute_line+0x14ec>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b35      	cmp	r3, #53	; 0x35
 8003720:	d005      	beq.n	800372e <gc_execute_line+0x141e>
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <gc_execute_line+0x14ec>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <gc_execute_line+0x141e>
 800372a:	2310      	movs	r3, #16
 800372c:	e297      	b.n	8003c5e <gc_execute_line+0x194e>

      // Initialize planner data to current spindle and coolant modal state.
      pl_data->spindle_speed = gc_state.spindle_speed;
 800372e:	4b39      	ldr	r3, [pc, #228]	; (8003814 <gc_execute_line+0x1504>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	605a      	str	r2, [r3, #4]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8003736:	4b37      	ldr	r3, [pc, #220]	; (8003814 <gc_execute_line+0x1504>)
 8003738:	7a5a      	ldrb	r2, [r3, #9]
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <gc_execute_line+0x1504>)
 800373c:	7a1b      	ldrb	r3, [r3, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	743b      	strb	r3, [r7, #16]

      uint8_t status = jog_execute(&plan_data, &gc_block);
 8003744:	f107 0308 	add.w	r3, r7, #8
 8003748:	492c      	ldr	r1, [pc, #176]	; (80037fc <gc_execute_line+0x14ec>)
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fa9c 	bl	8003c88 <jog_execute>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8003756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <gc_execute_line+0x145c>
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <gc_execute_line+0x1504>)
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <gc_execute_line+0x14ec>)
 8003762:	331c      	adds	r3, #28
 8003764:	3234      	adds	r2, #52	; 0x34
 8003766:	ca07      	ldmia	r2, {r0, r1, r2}
 8003768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      return(status);
 800376c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003770:	e275      	b.n	8003c5e <gc_execute_line+0x194e>
  }

  // If in laser mode, setup laser power based on current and past parser conditions.
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <gc_execute_line+0x1508>)
 8003774:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d059      	beq.n	8003834 <gc_execute_line+0x1524>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <gc_execute_line+0x14ec>)
 8003782:	785b      	ldrb	r3, [r3, #1]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d00d      	beq.n	80037a4 <gc_execute_line+0x1494>
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <gc_execute_line+0x14ec>)
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d009      	beq.n	80037a4 <gc_execute_line+0x1494>
          || (gc_block.modal.motion == MOTION_MODE_CCW_ARC))) {
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <gc_execute_line+0x14ec>)
 8003792:	785b      	ldrb	r3, [r3, #1]
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8003794:	2b03      	cmp	r3, #3
 8003796:	d005      	beq.n	80037a4 <gc_execute_line+0x1494>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8003798:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800379c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      }

      // Any motion mode with axis words is allowed to be passed from a spindle speed update. 
      // NOTE: G1 and G0 without axis words sets axis_command to none. G28/30 are intentionally omitted.
      // TODO: Check sync conditions for M3 enabled motions that don't enter the planner. (zero length).
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 80037a4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <gc_execute_line+0x14b2>
 80037ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d106      	bne.n	80037c2 <gc_execute_line+0x14b2>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 80037b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80037c0:	e038      	b.n	8003834 <gc_execute_line+0x1524>
      }
      else {
        // M3 constant power laser requires planner syncs to update the laser when changing between
        // a G1/2/3 motion mode state and vice versa when there is no motion in the line.
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <gc_execute_line+0x1504>)
 80037c4:	7a5b      	ldrb	r3, [r3, #9]
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d134      	bne.n	8003834 <gc_execute_line+0x1524>
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <gc_execute_line+0x1504>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d007      	beq.n	80037e2 <gc_execute_line+0x14d2>
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <gc_execute_line+0x1504>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <gc_execute_line+0x14d2>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <gc_execute_line+0x1504>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d11c      	bne.n	800381c <gc_execute_line+0x150c>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80037e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d022      	beq.n	8003834 <gc_execute_line+0x1524>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
 80037ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037f2:	f043 0320 	orr.w	r3, r3, #32
 80037f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80037fa:	e01b      	b.n	8003834 <gc_execute_line+0x1524>
 80037fc:	20000ebc 	.word	0x20000ebc
 8003800:	41cb3333 	.word	0x41cb3333
 8003804:	3ba3d70a 	.word	0x3ba3d70a
 8003808:	3a83126f 	.word	0x3a83126f
 800380c:	20000ef0 	.word	0x20000ef0
 8003810:	20000e94 	.word	0x20000e94
 8003814:	20000e78 	.word	0x20000e78
 8003818:	200010b4 	.word	0x200010b4
            }
          }
          else {
            // When changing to a G1 motion mode without axis words from a non-G1/2/3 motion mode.
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800381c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <gc_execute_line+0x1524>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8003828:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800382c:	f043 0320 	orr.w	r3, r3, #32
 8003830:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      }
  }

  // [0. Non-specific/common error-checks and miscellaneous setup]:
  // NOTE: If no line number is present, the value is zero.
  gc_state.line_number = gc_block.values.n;
 8003834:	4b9d      	ldr	r3, [pc, #628]	; (8003aac <gc_execute_line+0x179c>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4a9d      	ldr	r2, [pc, #628]	; (8003ab0 <gc_execute_line+0x17a0>)
 800383a:	6193      	str	r3, [r2, #24]
  #endif

  // [1. Comments feedback ]:  NOT SUPPORTED

  // [2. Set feed rate mode ]:
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800383c:	4b9b      	ldr	r3, [pc, #620]	; (8003aac <gc_execute_line+0x179c>)
 800383e:	789a      	ldrb	r2, [r3, #2]
 8003840:	4b9b      	ldr	r3, [pc, #620]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003842:	705a      	strb	r2, [r3, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8003844:	4b9a      	ldr	r3, [pc, #616]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <gc_execute_line+0x154a>
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	7a1b      	ldrb	r3, [r3, #8]
 8003850:	f043 0308 	orr.w	r3, r3, #8
 8003854:	b2da      	uxtb	r2, r3
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	721a      	strb	r2, [r3, #8]

  // [3. Set feed rate ]:
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 800385a:	4b94      	ldr	r3, [pc, #592]	; (8003aac <gc_execute_line+0x179c>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4a94      	ldr	r2, [pc, #592]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003860:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8003862:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	601a      	str	r2, [r3, #0]

  // [4. Set spindle speed ]:
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 800386a:	4b91      	ldr	r3, [pc, #580]	; (8003ab0 <gc_execute_line+0x17a0>)
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <gc_execute_line+0x179c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fd fbaf 	bl	8000fd8 <__aeabi_fcmpeq>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <gc_execute_line+0x157c>
 8003880:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d021      	beq.n	80038d0 <gc_execute_line+0x15c0>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800388c:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <gc_execute_line+0x17a0>)
 800388e:	7a5b      	ldrb	r3, [r3, #9]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <gc_execute_line+0x15b8>
#ifdef VARIABLE_SPINDLE
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8003894:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003898:	2b00      	cmp	r3, #0
 800389a:	db15      	blt.n	80038c8 <gc_execute_line+0x15b8>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 800389c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <gc_execute_line+0x15a8>
            spindle_sync(gc_state.modal.spindle, 0.0);
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038aa:	7a5b      	ldrb	r3, [r3, #9]
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fe79 	bl	80085a8 <spindle_sync>
 80038b6:	e007      	b.n	80038c8 <gc_execute_line+0x15b8>
          }
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 80038b8:	4b7d      	ldr	r3, [pc, #500]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038ba:	7a5a      	ldrb	r2, [r3, #9]
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <gc_execute_line+0x179c>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f004 fe70 	bl	80085a8 <spindle_sync>
        }
#else
          spindle_sync(gc_state.modal.spindle, 0.0);
#endif
      }
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80038c8:	4b78      	ldr	r3, [pc, #480]	; (8003aac <gc_execute_line+0x179c>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a78      	ldr	r2, [pc, #480]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038ce:	60d3      	str	r3, [r2, #12]
  }
  // NOTE: Pass zero spindle speed for all restricted laser motions.
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80038d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <gc_execute_line+0x15d4>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 80038dc:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	605a      	str	r2, [r3, #4]
  } // else { pl_data->spindle_speed = 0.0; } // Initialized as zero already.

  // [5. Select tool ]: NOT SUPPORTED. Only tracks tool value.
  gc_state.tool = gc_block.values.t;
 80038e4:	4b71      	ldr	r3, [pc, #452]	; (8003aac <gc_execute_line+0x179c>)
 80038e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80038ea:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038ec:	751a      	strb	r2, [r3, #20]

  // [6. Change tool ]: NOT SUPPORTED

  // [7. Spindle control ]:
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80038ee:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <gc_execute_line+0x17a0>)
 80038f0:	7a5a      	ldrb	r2, [r3, #9]
 80038f2:	4b6e      	ldr	r3, [pc, #440]	; (8003aac <gc_execute_line+0x179c>)
 80038f4:	7a9b      	ldrb	r3, [r3, #10]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d00b      	beq.n	8003912 <gc_execute_line+0x1602>
    // Update spindle control and apply spindle speed when enabling it in this block.
    // NOTE: All spindle state changes are synced, even in laser mode. Also, pl_data,
    // rather than gc_state, is used to manage laser state for non-laser motions.
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <gc_execute_line+0x179c>)
 80038fc:	7a9a      	ldrb	r2, [r3, #10]
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f004 fe4f 	bl	80085a8 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 800390a:	4b68      	ldr	r3, [pc, #416]	; (8003aac <gc_execute_line+0x179c>)
 800390c:	7a9a      	ldrb	r2, [r3, #10]
 800390e:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003910:	725a      	strb	r2, [r3, #9]
  }
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	7a1a      	ldrb	r2, [r3, #8]
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003918:	7a5b      	ldrb	r3, [r3, #9]
 800391a:	4313      	orrs	r3, r2
 800391c:	b2da      	uxtb	r2, r3
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	721a      	strb	r2, [r3, #8]

  // [8. Coolant control ]:
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003924:	7a1a      	ldrb	r2, [r3, #8]
 8003926:	4b61      	ldr	r3, [pc, #388]	; (8003aac <gc_execute_line+0x179c>)
 8003928:	7a5b      	ldrb	r3, [r3, #9]
 800392a:	429a      	cmp	r2, r3
 800392c:	d014      	beq.n	8003958 <gc_execute_line+0x1648>
    // NOTE: Coolant M-codes are modal. Only one command per line is allowed. But, multiple states
    // can exist at the same time, while coolant disable clears all states.
    coolant_sync(gc_block.modal.coolant);
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <gc_execute_line+0x179c>)
 8003930:	7a5b      	ldrb	r3, [r3, #9]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fb98 	bl	8002068 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 8003938:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <gc_execute_line+0x179c>)
 800393a:	7a5b      	ldrb	r3, [r3, #9]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <gc_execute_line+0x1638>
 8003940:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003942:	2200      	movs	r2, #0
 8003944:	721a      	strb	r2, [r3, #8]
 8003946:	e007      	b.n	8003958 <gc_execute_line+0x1648>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <gc_execute_line+0x17a0>)
 800394a:	7a1a      	ldrb	r2, [r3, #8]
 800394c:	4b57      	ldr	r3, [pc, #348]	; (8003aac <gc_execute_line+0x179c>)
 800394e:	7a5b      	ldrb	r3, [r3, #9]
 8003950:	4313      	orrs	r3, r2
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003956:	721a      	strb	r2, [r3, #8]
  }
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	7a1a      	ldrb	r2, [r3, #8]
 800395c:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <gc_execute_line+0x17a0>)
 800395e:	7a1b      	ldrb	r3, [r3, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	b2da      	uxtb	r2, r3
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	721a      	strb	r2, [r3, #8]
		mc_override_ctrl_update(gc_state.modal.override);
	}
#endif

  // [10. Dwell ]:
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <gc_execute_line+0x179c>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <gc_execute_line+0x166a>
 8003970:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <gc_execute_line+0x179c>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f927 	bl	8004bc8 <mc_dwell>

  // [11. Set active plane ]:
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <gc_execute_line+0x179c>)
 800397c:	795a      	ldrb	r2, [r3, #5]
 800397e:	4b4c      	ldr	r3, [pc, #304]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003980:	711a      	strb	r2, [r3, #4]

  // [12. Set length units ]:
  gc_state.modal.units = gc_block.modal.units;
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <gc_execute_line+0x179c>)
 8003984:	78da      	ldrb	r2, [r3, #3]
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003988:	709a      	strb	r2, [r3, #2]

  // [14. Cutter length compensation ]: G43.1 and G49 supported. G43 NOT SUPPORTED.
  // NOTE: If G43 were supported, its operation wouldn't be any different from G43.1 in terms
  // of execution. The error-checking step would simply load the offset value into the correct
  // axis of the block XYZ value array.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 800398a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800398e:	2b03      	cmp	r3, #3
 8003990:	d11c      	bne.n	80039cc <gc_execute_line+0x16bc>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <gc_execute_line+0x179c>)
 8003994:	799a      	ldrb	r2, [r3, #6]
 8003996:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003998:	715a      	strb	r2, [r3, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 800399a:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <gc_execute_line+0x17a0>)
 800399c:	795b      	ldrb	r3, [r3, #5]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <gc_execute_line+0x169a>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 80039a2:	4b42      	ldr	r3, [pc, #264]	; (8003aac <gc_execute_line+0x179c>)
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	63da      	str	r2, [r3, #60]	; 0x3c
    } // else G43.1
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ae:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <gc_execute_line+0x179c>)
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f7fd fb0f 	bl	8000fd8 <__aeabi_fcmpeq>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <gc_execute_line+0x16bc>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 80039c0:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <gc_execute_line+0x179c>)
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
      system_flag_wco_change();
 80039c8:	f006 fc30 	bl	800a22c <system_flag_wco_change>
    }
  }

  // [15. Coordinate system selection ]:
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039ce:	799a      	ldrb	r2, [r3, #6]
 80039d0:	4b36      	ldr	r3, [pc, #216]	; (8003aac <gc_execute_line+0x179c>)
 80039d2:	79db      	ldrb	r3, [r3, #7]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d00c      	beq.n	80039f2 <gc_execute_line+0x16e2>
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <gc_execute_line+0x179c>)
 80039da:	79da      	ldrb	r2, [r3, #7]
 80039dc:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039de:	719a      	strb	r2, [r3, #6]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 80039e0:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039e2:	3328      	adds	r3, #40	; 0x28
 80039e4:	f107 0214 	add.w	r2, r7, #20
 80039e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    system_flag_wco_change();
 80039ee:	f006 fc1d 	bl	800a22c <system_flag_wco_change>

  // [16. Set path control mode ]: G61.1/G64 NOT SUPPORTED
  // gc_state.modal.control = gc_block.modal.control; // NOTE: Always default.

  // [17. Set distance mode ]:
  gc_state.modal.distance = gc_block.modal.distance;
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <gc_execute_line+0x179c>)
 80039f4:	791a      	ldrb	r2, [r3, #4]
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <gc_execute_line+0x17a0>)
 80039f8:	70da      	strb	r2, [r3, #3]

  // [18. Set retract mode ]: NOT SUPPORTED

  // [19. Go to predefined position, Set G10, or Set axis offsets ]:
  switch(gc_block.non_modal_command) {
 80039fa:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <gc_execute_line+0x179c>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b26      	cmp	r3, #38	; 0x26
 8003a00:	d040      	beq.n	8003a84 <gc_execute_line+0x1774>
 8003a02:	2b26      	cmp	r3, #38	; 0x26
 8003a04:	dc06      	bgt.n	8003a14 <gc_execute_line+0x1704>
 8003a06:	2b1c      	cmp	r3, #28
 8003a08:	d021      	beq.n	8003a4e <gc_execute_line+0x173e>
 8003a0a:	2b1e      	cmp	r3, #30
 8003a0c:	d01f      	beq.n	8003a4e <gc_execute_line+0x173e>
 8003a0e:	2b0a      	cmp	r3, #10
 8003a10:	d007      	beq.n	8003a22 <gc_execute_line+0x1712>
 8003a12:	e05e      	b.n	8003ad2 <gc_execute_line+0x17c2>
 8003a14:	2b5c      	cmp	r3, #92	; 0x5c
 8003a16:	d03f      	beq.n	8003a98 <gc_execute_line+0x1788>
 8003a18:	2b66      	cmp	r3, #102	; 0x66
 8003a1a:	d051      	beq.n	8003ac0 <gc_execute_line+0x17b0>
 8003a1c:	2b28      	cmp	r3, #40	; 0x28
 8003a1e:	d036      	beq.n	8003a8e <gc_execute_line+0x177e>
 8003a20:	e057      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_COORDINATE_DATA:
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8003a22:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003a26:	4923      	ldr	r1, [pc, #140]	; (8003ab4 <gc_execute_line+0x17a4>)
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 f883 	bl	8007b34 <settings_write_coord_data>
      // Update system coordinate system if currently active.
      if (gc_state.modal.coord_select == coord_select) {
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a30:	799b      	ldrb	r3, [r3, #6]
 8003a32:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d14a      	bne.n	8003ad0 <gc_execute_line+0x17c0>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a3c:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <gc_execute_line+0x179c>)
 8003a3e:	3328      	adds	r3, #40	; 0x28
 8003a40:	3210      	adds	r2, #16
 8003a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        system_flag_wco_change();
 8003a48:	f006 fbf0 	bl	800a22c <system_flag_wco_change>
      }
      break;
 8003a4c:	e040      	b.n	8003ad0 <gc_execute_line+0x17c0>
    case NON_MODAL_GO_HOME_0: case NON_MODAL_GO_HOME_1:
      // Move to intermediate position before going home. Obeys current coordinate system and offsets
      // and absolute and incremental modes.
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	7a1b      	ldrb	r3, [r3, #8]
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	721a      	strb	r2, [r3, #8]
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8003a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <gc_execute_line+0x175c>
 8003a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a66:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <gc_execute_line+0x17a8>)
 8003a68:	f000 fe20 	bl	80046ac <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8003a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6e:	4811      	ldr	r0, [pc, #68]	; (8003ab4 <gc_execute_line+0x17a4>)
 8003a70:	f000 fe1c 	bl	80046ac <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a76:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <gc_execute_line+0x179c>)
 8003a78:	331c      	adds	r3, #28
 8003a7a:	3210      	adds	r2, #16
 8003a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      break;
 8003a82:	e026      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_HOME_0:
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8003a84:	490d      	ldr	r1, [pc, #52]	; (8003abc <gc_execute_line+0x17ac>)
 8003a86:	2006      	movs	r0, #6
 8003a88:	f004 f854 	bl	8007b34 <settings_write_coord_data>
      break;
 8003a8c:	e021      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_HOME_1:
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8003a8e:	490b      	ldr	r1, [pc, #44]	; (8003abc <gc_execute_line+0x17ac>)
 8003a90:	2007      	movs	r0, #7
 8003a92:	f004 f84f 	bl	8007b34 <settings_write_coord_data>
      break;
 8003a96:	e01c      	b.n	8003ad2 <gc_execute_line+0x17c2>
    case NON_MODAL_SET_COORDINATE_OFFSET:
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <gc_execute_line+0x17a0>)
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <gc_execute_line+0x179c>)
 8003a9c:	3334      	adds	r3, #52	; 0x34
 8003a9e:	3234      	adds	r2, #52	; 0x34
 8003aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      system_flag_wco_change();
 8003aa6:	f006 fbc1 	bl	800a22c <system_flag_wco_change>
      break;
 8003aaa:	e012      	b.n	8003ad2 <gc_execute_line+0x17c2>
 8003aac:	20000ebc 	.word	0x20000ebc
 8003ab0:	20000e78 	.word	0x20000e78
 8003ab4:	20000ecc 	.word	0x20000ecc
 8003ab8:	20000ef0 	.word	0x20000ef0
 8003abc:	20000e94 	.word	0x20000e94
    case NON_MODAL_RESET_COORDINATE_OFFSET:
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8003ac0:	220c      	movs	r2, #12
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4868      	ldr	r0, [pc, #416]	; (8003c68 <gc_execute_line+0x1958>)
 8003ac6:	f006 fdb4 	bl	800a632 <memset>
      system_flag_wco_change();
 8003aca:	f006 fbaf 	bl	800a22c <system_flag_wco_change>
      break;
 8003ace:	e000      	b.n	8003ad2 <gc_execute_line+0x17c2>
      break;
 8003ad0:	bf00      	nop


  // [20. Motion modes ]:
  // NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes.
  // Enter motion modes only if there are axis words or a motion mode command word in the block.
  gc_state.modal.motion = gc_block.modal.motion;
 8003ad2:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <gc_execute_line+0x195c>)
 8003ad4:	785a      	ldrb	r2, [r3, #1]
 8003ad6:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <gc_execute_line+0x1960>)
 8003ad8:	701a      	strb	r2, [r3, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8003ada:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <gc_execute_line+0x1960>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b50      	cmp	r3, #80	; 0x50
 8003ae0:	d067      	beq.n	8003bb2 <gc_execute_line+0x18a2>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8003ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d163      	bne.n	8003bb2 <gc_execute_line+0x18a2>
      uint8_t gc_update_pos = GC_UPDATE_POS_TARGET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8003af0:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <gc_execute_line+0x1960>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d104      	bne.n	8003b02 <gc_execute_line+0x17f2>
        mc_line(gc_block.values.xyz, pl_data);
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	485e      	ldr	r0, [pc, #376]	; (8003c74 <gc_execute_line+0x1964>)
 8003afc:	f000 fdd6 	bl	80046ac <mc_line>
 8003b00:	e045      	b.n	8003b8e <gc_execute_line+0x187e>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8003b02:	4b5b      	ldr	r3, [pc, #364]	; (8003c70 <gc_execute_line+0x1960>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <gc_execute_line+0x1812>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	7a1b      	ldrb	r3, [r3, #8]
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	721a      	strb	r2, [r3, #8]
        mc_line(gc_block.values.xyz, pl_data);
 8003b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b1a:	4856      	ldr	r0, [pc, #344]	; (8003c74 <gc_execute_line+0x1964>)
 8003b1c:	f000 fdc6 	bl	80046ac <mc_line>
 8003b20:	e035      	b.n	8003b8e <gc_execute_line+0x187e>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8003b22:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <gc_execute_line+0x1960>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d003      	beq.n	8003b32 <gc_execute_line+0x1822>
 8003b2a:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <gc_execute_line+0x1960>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d11c      	bne.n	8003b6c <gc_execute_line+0x185c>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8003b32:	4b4e      	ldr	r3, [pc, #312]	; (8003c6c <gc_execute_line+0x195c>)
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              axis_0, axis_1, axis_linear, bit_istrue(gc_parser_flags, GC_PARSER_ARC_IS_CLOCKWISE));
 8003b36:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8003b3a:	f002 0204 	and.w	r2, r2, #4
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	bf14      	ite	ne
 8003b42:	2201      	movne	r2, #1
 8003b44:	2200      	moveq	r2, #0
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	9204      	str	r2, [sp, #16]
 8003b4a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003b4e:	9203      	str	r2, [sp, #12]
 8003b50:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003b54:	9202      	str	r2, [sp, #8]
 8003b56:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8003b5a:	9201      	str	r2, [sp, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <gc_execute_line+0x1968>)
 8003b60:	4a46      	ldr	r2, [pc, #280]	; (8003c7c <gc_execute_line+0x196c>)
 8003b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b64:	4843      	ldr	r0, [pc, #268]	; (8003c74 <gc_execute_line+0x1964>)
 8003b66:	f000 fdef 	bl	8004748 <mc_arc>
 8003b6a:	e010      	b.n	8003b8e <gc_execute_line+0x187e>
      } else {
        // NOTE: gc_block.values.xyz is returned from mc_probe_cycle with the updated position value. So
        // upon a successful probing cycle, the machine position and the returned value should be the same.
        #ifndef ALLOW_FEED_OVERRIDE_DURING_PROBE_CYCLES
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	7a1b      	ldrb	r3, [r3, #8]
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	721a      	strb	r2, [r3, #8]
        #endif
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8003b7a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b82:	483c      	ldr	r0, [pc, #240]	; (8003c74 <gc_execute_line+0x1964>)
 8003b84:	f001 f85e 	bl	8004c44 <mc_probe_cycle>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }  
     
      // As far as the parser is concerned, the position is now == target. In reality the
      // motion control system might still be processing the action and the real tool position
      // in any intermediate location.
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8003b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d107      	bne.n	8003ba6 <gc_execute_line+0x1896>
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <gc_execute_line+0x1960>)
 8003b98:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <gc_execute_line+0x195c>)
 8003b9a:	331c      	adds	r3, #28
 8003b9c:	3234      	adds	r2, #52	; 0x34
 8003b9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ba4:	e005      	b.n	8003bb2 <gc_execute_line+0x18a2>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8003ba6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <gc_execute_line+0x18a2>
        gc_sync_position(); // gc_state.position[] = sys_position
 8003bae:	f7fe fba3 	bl	80022f8 <gc_sync_position>
  }

  // [21. Program flow ]:
  // M0,M1,M2,M30: Perform non-running program flow actions. During a program pause, the buffer may
  // refill and can only be resumed by the cycle start run-time command.
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <gc_execute_line+0x195c>)
 8003bb4:	7a1a      	ldrb	r2, [r3, #8]
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <gc_execute_line+0x1960>)
 8003bb8:	71da      	strb	r2, [r3, #7]
  if (gc_state.modal.program_flow) {
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <gc_execute_line+0x1960>)
 8003bbc:	79db      	ldrb	r3, [r3, #7]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d04c      	beq.n	8003c5c <gc_execute_line+0x194c>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8003bc2:	f002 faa1 	bl	8006108 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <gc_execute_line+0x1960>)
 8003bc8:	79db      	ldrb	r3, [r3, #7]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d109      	bne.n	8003be2 <gc_execute_line+0x18d2>
      if (sys.state != STATE_CHECK_MODE) {
 8003bce:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <gc_execute_line+0x1970>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d03f      	beq.n	8003c56 <gc_execute_line+0x1946>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8003bd6:	2008      	movs	r0, #8
 8003bd8:	f006 fba4 	bl	800a324 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8003bdc:	f002 fab8 	bl	8006150 <protocol_execute_realtime>
 8003be0:	e039      	b.n	8003c56 <gc_execute_line+0x1946>
    } else { // == PROGRAM_FLOW_COMPLETED
      // Upon program complete, only a subset of g-codes reset to certain defaults, according to
      // LinuxCNC's program end descriptions and testing. Only modal groups [G-code 1,2,3,5,7,12]
      // and [M-code 7,8,9] reset to [G1,G17,G90,G94,G40,G54,M5,M9,M48]. The remaining modal groups
      // [G-code 4,6,8,10,13,14,15] and [M-code 4,5,6] and the modal words [F,S,T,H] do not reset.
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <gc_execute_line+0x1960>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <gc_execute_line+0x1960>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	711a      	strb	r2, [r3, #4]
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8003bee:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <gc_execute_line+0x1960>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	70da      	strb	r2, [r3, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <gc_execute_line+0x1960>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	705a      	strb	r2, [r3, #1]
      // gc_state.modal.cutter_comp = CUTTER_COMP_DISABLE; // Not supported.
      gc_state.modal.coord_select = 0; // G54
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <gc_execute_line+0x1960>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	719a      	strb	r2, [r3, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <gc_execute_line+0x1960>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	725a      	strb	r2, [r3, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 8003c06:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <gc_execute_line+0x1960>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	721a      	strb	r2, [r3, #8]
					gc_state.modal.override = OVERRIDE_PARKING_MOTION;
				#endif
			#endif

      #ifdef RESTORE_OVERRIDES_AFTER_PROGRAM_END
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <gc_execute_line+0x1970>)
 8003c0e:	2264      	movs	r2, #100	; 0x64
 8003c10:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <gc_execute_line+0x1970>)
 8003c14:	2264      	movs	r2, #100	; 0x64
 8003c16:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <gc_execute_line+0x1970>)
 8003c1a:	2264      	movs	r2, #100	; 0x64
 8003c1c:	729a      	strb	r2, [r3, #10]
      #endif

      // Execute coordinate change and spindle/coolant stop.
      if (sys.state != STATE_CHECK_MODE) {
 8003c1e:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <gc_execute_line+0x1970>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d014      	beq.n	8003c50 <gc_execute_line+0x1940>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <gc_execute_line+0x1960>)
 8003c28:	799b      	ldrb	r3, [r3, #6]
 8003c2a:	4916      	ldr	r1, [pc, #88]	; (8003c84 <gc_execute_line+0x1974>)
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 f8c7 	bl	8007dc0 <settings_read_coord_data>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <gc_execute_line+0x192c>
 8003c38:	2307      	movs	r3, #7
 8003c3a:	e010      	b.n	8003c5e <gc_execute_line+0x194e>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8003c3c:	f006 faf6 	bl	800a22c <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	2000      	movs	r0, #0
 8003c46:	f004 fc65 	bl	8008514 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fe f9e0 	bl	8002010 <coolant_set_state>
      }
      report_feedback_message(MESSAGE_PROGRAM_END);
 8003c50:	2008      	movs	r0, #8
 8003c52:	f002 ff7d 	bl	8006b50 <report_feedback_message>
    }
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <gc_execute_line+0x1960>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	71da      	strb	r2, [r3, #7]
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3758      	adds	r7, #88	; 0x58
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bdb0      	pop	{r4, r5, r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000eac 	.word	0x20000eac
 8003c6c:	20000ebc 	.word	0x20000ebc
 8003c70:	20000e78 	.word	0x20000e78
 8003c74:	20000ef0 	.word	0x20000ef0
 8003c78:	20000ecc 	.word	0x20000ecc
 8003c7c:	20000e94 	.word	0x20000e94
 8003c80:	20000f00 	.word	0x20000f00
 8003c84:	20000ea0 	.word	0x20000ea0

08003c88 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7a1b      	ldrb	r3, [r3, #8]
 8003c9e:	f043 0304 	orr.w	r3, r3, #4
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	721a      	strb	r2, [r3, #8]
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003ca8:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <jog_execute+0x78>)
 8003caa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <jog_execute+0x42>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3334      	adds	r3, #52	; 0x34
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 fafe 	bl	800a2bc <system_check_travel_limits>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <jog_execute+0x42>
 8003cc6:	230f      	movs	r3, #15
 8003cc8:	e016      	b.n	8003cf8 <jog_execute+0x70>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz, pl_data);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	3334      	adds	r3, #52	; 0x34
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fceb 	bl	80046ac <mc_line>
  if (sys.state == STATE_IDLE) {
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <jog_execute+0x7c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <jog_execute+0x6e>
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8003cde:	f001 fbed 	bl	80054bc <plan_get_current_block>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <jog_execute+0x6e>
      sys.state = STATE_JOG;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <jog_execute+0x7c>)
 8003cea:	2220      	movs	r2, #32
 8003cec:	701a      	strb	r2, [r3, #0]
      st_prep_buffer();
 8003cee:	f005 f8e7 	bl	8008ec0 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8003cf2:	f004 fcdd 	bl	80086b0 <st_wake_up>
    }
  }

  return(STATUS_OK);
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200010b4 	.word	0x200010b4
 8003d04:	20000f00 	.word	0x20000f00

08003d08 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8003d12:	4909      	ldr	r1, [pc, #36]	; (8003d38 <NVIC_DisableIRQ+0x30>)
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	79fa      	ldrb	r2, [r7, #7]
 8003d1c:	f002 021f 	and.w	r2, r2, #31
 8003d20:	2001      	movs	r0, #1
 8003d22:	fa00 f202 	lsl.w	r2, r0, r2
 8003d26:	3320      	adds	r3, #32
 8003d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003d46:	4909      	ldr	r1, [pc, #36]	; (8003d6c <NVIC_ClearPendingIRQ+0x30>)
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	79fa      	ldrb	r2, [r7, #7]
 8003d50:	f002 021f 	and.w	r2, r2, #31
 8003d54:	2001      	movs	r0, #1
 8003d56:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5a:	3360      	adds	r3, #96	; 0x60
 8003d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000e100 	.word	0xe000e100

08003d70 <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8003d76:	2101      	movs	r1, #1
 8003d78:	2009      	movs	r0, #9
 8003d7a:	f7fd fdfb 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73bb      	strb	r3, [r7, #14]
	#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8003d82:	2348      	movs	r3, #72	; 0x48
 8003d84:	73fb      	strb	r3, [r7, #15]
	#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 8003d86:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003d8a:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	4619      	mov	r1, r3
 8003d92:	4820      	ldr	r0, [pc, #128]	; (8003e14 <limits_init+0xa4>)
 8003d94:	f7fd fb84 	bl	80014a0 <GPIO_Init>

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <limits_init+0xa8>)
 8003d9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d02f      	beq.n	8003e06 <limits_init+0x96>
	{
		//delay_ms(100);                                      // added by MS for debug
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8003da6:	210c      	movs	r1, #12
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fd fcf1 	bl	8001790 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 8003dae:	210d      	movs	r1, #13
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7fd fced 	bl	8001790 <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8003db6:	210e      	movs	r1, #14
 8003db8:	2001      	movs	r0, #1
 8003dba:	f7fd fce9 	bl	8001790 <GPIO_EXTILineConfig>
		#ifdef ABC_AXIS
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, C_LIMIT_BIT);
		#endif
// ---
		EXTI_InitTypeDef EXTI_InitStructure;
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 8003dbe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003dc2:	607b      	str	r3, [r7, #4]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	723b      	strb	r3, [r7, #8]
		//EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)

		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <limits_init+0xa8>)
 8003dca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <limits_init+0x6c>
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising ; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003dd6:	2308      	movs	r3, #8
 8003dd8:	727b      	strb	r3, [r7, #9]
 8003dda:	e001      	b.n	8003de0 <limits_init+0x70>
		} else {
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003ddc:	230c      	movs	r3, #12
 8003dde:	727b      	strb	r3, [r7, #9]
		}

		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	72bb      	strb	r3, [r7, #10]
		EXTI_Init(&EXTI_InitStructure);
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd f9f8 	bl	80011dc <EXTI_Init>

		NVIC_InitTypeDef NVIC_InitStructure;
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003dec:	2328      	movs	r3, #40	; 0x28
 8003dee:	703b      	strb	r3, [r7, #0]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
 8003df0:	2302      	movs	r3, #2
 8003df2:	707b      	strb	r3, [r7, #1]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
 8003df4:	2302      	movs	r3, #2
 8003df6:	70bb      	strb	r3, [r7, #2]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
 8003df8:	2301      	movs	r3, #1
 8003dfa:	70fb      	strb	r3, [r7, #3]
		NVIC_Init(&NVIC_InitStructure);
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f98a 	bl	8001118 <NVIC_Init>
	else
	{
		limits_disable();
	}
#endif
}
 8003e04:	e001      	b.n	8003e0a <limits_init+0x9a>
		limits_disable();
 8003e06:	f000 f809 	bl	8003e1c <limits_disable>
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40010c00 	.word	0x40010c00
 8003e18:	200010b4 	.word	0x200010b4

08003e1c <limits_disable>:


// Disables hard limits.
void limits_disable()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
#ifdef AVRTARGET
  LIMIT_PCMSK &= ~LIMIT_MASK;  // Disable specific pins of the Pin Change Interrupt
  PCICR &= ~(1 << LIMIT_INT);  // Disable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003e20:	2028      	movs	r0, #40	; 0x28
 8003e22:	f7ff ff71 	bl	8003d08 <NVIC_DisableIRQ>
#endif
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  uint8_t limit_state = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	71fb      	strb	r3, [r7, #7]
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003e36:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <limits_get_state+0x74>)
 8003e38:	f7fd fbee 	bl	8001618 <GPIO_ReadInputData>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	80bb      	strh	r3, [r7, #4]
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003e40:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <limits_get_state+0x78>)
 8003e42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <limits_get_state+0x2a>
 8003e4e:	88bb      	ldrh	r3, [r7, #4]
 8003e50:	f483 43e0 	eor.w	r3, r3, #28672	; 0x7000
 8003e54:	80bb      	strh	r3, [r7, #4]
  if (pin) {
 8003e56:	88bb      	ldrh	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <limits_get_state+0x68>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	70fb      	strb	r3, [r7, #3]
 8003e60:	e015      	b.n	8003e8e <limits_get_state+0x62>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <limits_get_state+0x7c>)
 8003e66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003e6a:	88bb      	ldrh	r3, [r7, #4]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <limits_get_state+0x5c>
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	b25a      	sxtb	r2, r3
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	71fb      	strb	r3, [r7, #7]
    for (idx=0; idx<N_AXIS; idx++) {
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	70fb      	strb	r3, [r7, #3]
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9e6      	bls.n	8003e62 <limits_get_state+0x36>
    }
  }
#endif
  return(limit_state);
 8003e94:	79fb      	ldrb	r3, [r7, #7]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40010c00 	.word	0x40010c00
 8003ea4:	200010b4 	.word	0x200010b4
 8003ea8:	0800b9f4 	.word	0x0800b9f4

08003eac <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 8003eb0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003eb4:	f7fd fa04 	bl	80012c0 <EXTI_GetITStatus>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <EXTI15_10_IRQHandler+0x1a>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8003ebe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ec2:	f7fd fa21 	bl	8001308 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 8003ec6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003eca:	f7fd f9f9 	bl	80012c0 <EXTI_GetITStatus>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <EXTI15_10_IRQHandler+0x30>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8003ed4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ed8:	f7fd fa16 	bl	8001308 <EXTI_ClearITPendingBit>
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8003edc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ee0:	f7fd f9ee 	bl	80012c0 <EXTI_GetITStatus>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <EXTI15_10_IRQHandler+0x46>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 8003eea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003eee:	f7fd fa0b 	bl	8001308 <EXTI_ClearITPendingBit>
	{
		EXTI_ClearITPendingBit(1 << C_LIMIT_BIT);
	}	
	#endif
// ---
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8003ef2:	2028      	movs	r0, #40	; 0x28
 8003ef4:	f7ff ff22 	bl	8003d3c <NVIC_ClearPendingIRQ>
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <EXTI15_10_IRQHandler+0x6c>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d009      	beq.n	8003f14 <EXTI15_10_IRQHandler+0x68>
    if (!(sys_rt_exec_alarm)) {
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <EXTI15_10_IRQHandler+0x70>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <EXTI15_10_IRQHandler+0x68>
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 8003f0a:	f000 ff27 	bl	8004d5c <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f006 fa3a 	bl	800a388 <system_set_exec_alarm>
#endif
    }
  }
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000f00 	.word	0x20000f00
 8003f1c:	20000f30 	.word	0x20000f30

08003f20 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b094      	sub	sp, #80	; 0x50
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  if (sys.abort) { return; } // Block if system reset has been issued.
 8003f2a:	4bbf      	ldr	r3, [pc, #764]	; (8004228 <limits_go_home+0x308>)
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8215 	bne.w	800435e <limits_go_home+0x43e>

  // Initialize plan data struct for homing motion. Spindle and coolant are disabled.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
 8003f34:	f107 0320 	add.w	r3, r7, #32
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
  memset(pl_data,0,sizeof(plan_line_data_t));
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f40:	f006 fb77 	bl	800a632 <memset>
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	2206      	movs	r2, #6
 8003f48:	721a      	strb	r2, [r3, #8]
  #ifdef USE_LINE_NUMBERS
    pl_data->line_number = HOMING_CYCLE_LINE_NUMBER;
  #endif

  // Initialize variables used for homing computations.
  uint8_t n_cycle = (2*N_HOMING_LOCATE_CYCLE+1);
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  PORTPINDEF step_pin[N_AXIS];
  float target[N_AXIS];
  float max_travel = 0.0f;
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 8003f56:	2300      	movs	r3, #0
 8003f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003f5c:	e03c      	b.n	8003fd8 <limits_go_home+0xb8>
    // Initialize step pin masks
    step_pin[idx] = step_pin_mask[idx];
 8003f5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f62:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003f66:	49b1      	ldr	r1, [pc, #708]	; (800422c <limits_go_home+0x30c>)
 8003f68:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f72:	440b      	add	r3, r1
 8003f74:	f823 2c38 	strh.w	r2, [r3, #-56]
    #ifdef COREXY
      if ((idx==A_MOTOR)||(idx==B_MOTOR)) { step_pin[idx] = (step_pin_mask[X_AXIS]| step_pin_mask[Y_AXIS]); }
    #endif

    if (bit_istrue(cycle_mask,bit(idx))) {
 8003f78:	79fa      	ldrb	r2, [r7, #7]
 8003f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f7e:	fa42 f303 	asr.w	r3, r2, r3
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d021      	beq.n	8003fce <limits_go_home+0xae>
      // Set target based on max_travel setting. Ensure homing switches engaged with search scalar.
      // NOTE: settings.max_travel[] is stored as a negative value.
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8003f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f8e:	4aa8      	ldr	r2, [pc, #672]	; (8004230 <limits_go_home+0x310>)
 8003f90:	3308      	adds	r3, #8
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	49a6      	ldr	r1, [pc, #664]	; (8004234 <limits_go_home+0x314>)
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fe88 	bl	8000cb0 <__aeabi_fmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd f821 	bl	8000fec <__aeabi_fcmplt>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <limits_go_home+0x94>
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb2:	e00b      	b.n	8003fcc <limits_go_home+0xac>
 8003fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fb8:	4a9d      	ldr	r2, [pc, #628]	; (8004230 <limits_go_home+0x310>)
 8003fba:	3308      	adds	r3, #8
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	499c      	ldr	r1, [pc, #624]	; (8004234 <limits_go_home+0x314>)
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fe73 	bl	8000cb0 <__aeabi_fmul>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  for (idx=0; idx<N_AXIS; idx++) {
 8003fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003fd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d9be      	bls.n	8003f5e <limits_go_home+0x3e>
    }
  }

  // Set search mode with approach at seek rate to quickly engage the specified cycle_mask limit switches.
  bool approach = true;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	643b      	str	r3, [r7, #64]	; 0x40
  float homing_rate = settings.homing_seek_rate;
 8003fe4:	4b92      	ldr	r3, [pc, #584]	; (8004230 <limits_go_home+0x310>)
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe8:	63fb      	str	r3, [r7, #60]	; 0x3c

  PORTPINDEF axislock;
  uint8_t limit_state, n_active_axis;
  do {

    system_convert_array_steps_to_mpos(target,sys_position);  // fill target (mm) with sys_position (steps)
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	4992      	ldr	r1, [pc, #584]	; (8004238 <limits_go_home+0x318>)
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f006 f945 	bl	800a280 <system_convert_array_steps_to_mpos>

    // Initialize and declare variables needed for homing routine.
    axislock = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
    n_active_axis = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    for (idx=0; idx<N_AXIS; idx++) {
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004006:	e060      	b.n	80040ca <limits_go_home+0x1aa>
      // Set target location for active axes and setup computation for homing rate.
      if (bit_istrue(cycle_mask,bit(idx))) {
 8004008:	79fa      	ldrb	r2, [r7, #7]
 800400a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800400e:	fa42 f303 	asr.w	r3, r2, r3
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d052      	beq.n	80040c0 <limits_go_home+0x1a0>
        n_active_axis++;
 800401a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800401e:	3301      	adds	r3, #1
 8004020:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
            sys_position[A_MOTOR] = sys_position[B_MOTOR] = axis_position;
          } else {
            sys_position[Z_AXIS] = 0;
          }
        #else
          sys_position[idx] = 0;
 8004024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004028:	4a83      	ldr	r2, [pc, #524]	; (8004238 <limits_go_home+0x318>)
 800402a:	2100      	movs	r1, #0
 800402c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        #endif
        // Set target direction based on cycle mask and homing cycle approach state.
        // NOTE: This happens to compile smaller than any other implementation tried.
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8004030:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <limits_go_home+0x310>)
 8004032:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004036:	461a      	mov	r2, r3
 8004038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800403c:	fa42 f303 	asr.w	r3, r2, r3
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <limits_go_home+0x15a>
          if (approach) { target[idx] = -max_travel; }
 8004048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <limits_go_home+0x146>
 800404e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004054:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800405e:	440b      	add	r3, r1
 8004060:	f843 2c44 	str.w	r2, [r3, #-68]
 8004064:	e021      	b.n	80040aa <limits_go_home+0x18a>
          else { target[idx] = max_travel; }
 8004066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004070:	4413      	add	r3, r2
 8004072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004074:	f843 2c44 	str.w	r2, [r3, #-68]
 8004078:	e017      	b.n	80040aa <limits_go_home+0x18a>
        } else {
          if (approach) { target[idx] = max_travel; }
 800407a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <limits_go_home+0x174>
 8004080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800408a:	4413      	add	r3, r2
 800408c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408e:	f843 2c44 	str.w	r2, [r3, #-68]
 8004092:	e00a      	b.n	80040aa <limits_go_home+0x18a>
          else { target[idx] = -max_travel; }
 8004094:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409a:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80040a4:	440b      	add	r3, r1
 80040a6:	f843 2c44 	str.w	r2, [r3, #-68]
        }
        // Apply axislock to the step port pins active in this cycle.
        axislock |= step_pin[idx];
 80040aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040b4:	4413      	add	r3, r2
 80040b6:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 80040ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040bc:	4313      	orrs	r3, r2
 80040be:	877b      	strh	r3, [r7, #58]	; 0x3a
    for (idx=0; idx<N_AXIS; idx++) {
 80040c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040c4:	3301      	adds	r3, #1
 80040c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80040ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d99a      	bls.n	8004008 <limits_go_home+0xe8>
      }

    }
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 80040d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fc fd92 	bl	8000c00 <__aeabi_ui2f>
 80040dc:	4603      	mov	r3, r0
 80040de:	4618      	mov	r0, r3
 80040e0:	f006 fbda 	bl	800a898 <sqrtf>
 80040e4:	4603      	mov	r3, r0
 80040e6:	4619      	mov	r1, r3
 80040e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ea:	f7fc fde1 	bl	8000cb0 <__aeabi_fmul>
 80040ee:	4603      	mov	r3, r0
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sys.homing_axis_lock = axislock;
 80040f2:	4a4d      	ldr	r2, [pc, #308]	; (8004228 <limits_go_home+0x308>)
 80040f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040f6:	80d3      	strh	r3, [r2, #6]

    // Perform homing cycle. Planner buffer should be empty, as required to initiate the homing cycle.
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fc:	601a      	str	r2, [r3, #0]
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 80040fe:	f107 030c 	add.w	r3, r7, #12
 8004102:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004104:	4618      	mov	r0, r3
 8004106:	f001 faed 	bl	80056e4 <plan_buffer_line>

    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <limits_go_home+0x308>)
 800410c:	2204      	movs	r2, #4
 800410e:	711a      	strb	r2, [r3, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8004110:	f004 fed6 	bl	8008ec0 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8004114:	f004 facc 	bl	80086b0 <st_wake_up>
    do {
      if (approach) {
 8004118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d03b      	beq.n	8004196 <limits_go_home+0x276>
        // Check limit state. Lock out cycle axes when they change.
        limit_state = limits_get_state();
 800411e:	f7ff fe85 	bl	8003e2c <limits_get_state>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (idx=0; idx<N_AXIS; idx++) {
 8004128:	2300      	movs	r3, #0
 800412a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800412e:	e02b      	b.n	8004188 <limits_go_home+0x268>
          if (axislock & step_pin[idx]) {
 8004130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800413a:	4413      	add	r3, r2
 800413c:	f833 2c38 	ldrh.w	r2, [r3, #-56]
 8004140:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d019      	beq.n	800417e <limits_go_home+0x25e>
            if (limit_state & (1 << idx)) {
 800414a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800414e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004152:	fa42 f303 	asr.w	r3, r2, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00f      	beq.n	800417e <limits_go_home+0x25e>
              #ifdef COREXY
                if (idx==Z_AXIS) { axislock &= ~(step_pin[Z_AXIS]); }
                else { axislock &= ~(step_pin[A_MOTOR]|step_pin[B_MOTOR]); }
              #else
                axislock &= ~(step_pin[idx]);
 800415e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004168:	4413      	add	r3, r2
 800416a:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800416e:	b21b      	sxth	r3, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	b21a      	sxth	r2, r3
 8004174:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8004178:	4013      	ands	r3, r2
 800417a:	b21b      	sxth	r3, r3
 800417c:	877b      	strh	r3, [r7, #58]	; 0x3a
        for (idx=0; idx<N_AXIS; idx++) {
 800417e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004182:	3301      	adds	r3, #1
 8004184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800418c:	2b02      	cmp	r3, #2
 800418e:	d9cf      	bls.n	8004130 <limits_go_home+0x210>
              #endif
            }
          }
        }
        sys.homing_axis_lock = axislock;
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <limits_go_home+0x308>)
 8004192:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004194:	80d3      	strh	r3, [r2, #6]
      }

      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8004196:	f004 fe93 	bl	8008ec0 <st_prep_buffer>

      // Exit routines: No time to run protocol_execute_realtime() in this loop.
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800419a:	4b28      	ldr	r3, [pc, #160]	; (800423c <limits_go_home+0x31c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0334 	and.w	r3, r3, #52	; 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d04d      	beq.n	8004244 <limits_go_home+0x324>
        uint8_t rt_exec = sys_rt_exec_state;
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <limits_go_home+0x31c>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        // Homing failure condition: Reset issued during cycle.
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80041b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <limits_go_home+0x2a2>
 80041bc:	2006      	movs	r0, #6
 80041be:	f006 f8e3 	bl	800a388 <system_set_exec_alarm>
        // Homing failure condition: Safety door was opened.
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 80041c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <limits_go_home+0x2b4>
 80041ce:	2007      	movs	r0, #7
 80041d0:	f006 f8da 	bl	800a388 <system_set_exec_alarm>
        // Homing failure condition: Limit switch still engaged after pull-off motion
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80041d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <limits_go_home+0x2d2>
 80041da:	f7ff fe27 	bl	8003e2c <limits_get_state>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	4013      	ands	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <limits_go_home+0x2d2>
 80041ec:	2008      	movs	r0, #8
 80041ee:	f006 f8cb 	bl	800a388 <system_set_exec_alarm>
        // Homing failure condition: Limit switch not found during approach.
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <limits_go_home+0x2ea>
 80041f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <limits_go_home+0x2ea>
 8004204:	2009      	movs	r0, #9
 8004206:	f006 f8bf 	bl	800a388 <system_set_exec_alarm>
        if (sys_rt_exec_alarm) {
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <limits_go_home+0x320>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <limits_go_home+0x2fe>
        	mc_reset(); // Stop motors, if they are running.
 8004214:	f000 fda2 	bl	8004d5c <mc_reset>
          protocol_execute_realtime();
 8004218:	f001 ff9a 	bl	8006150 <protocol_execute_realtime>
          return;
 800421c:	e0a0      	b.n	8004360 <limits_go_home+0x440>
        } else {
          // Pull-off motion complete. Disable CYCLE_STOP from executing.
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800421e:	2004      	movs	r0, #4
 8004220:	f006 f896 	bl	800a350 <system_clear_exec_state_flag>
          break;
 8004224:	e015      	b.n	8004252 <limits_go_home+0x332>
 8004226:	bf00      	nop
 8004228:	20000f00 	.word	0x20000f00
 800422c:	0800b9e4 	.word	0x0800b9e4
 8004230:	200010b4 	.word	0x200010b4
 8004234:	bfc00000 	.word	0xbfc00000
 8004238:	20000f24 	.word	0x20000f24
 800423c:	20000f15 	.word	0x20000f15
 8004240:	20000f30 	.word	0x20000f30
        }
      }

    } while (STEP_MASK & axislock);
 8004244:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004246:	f003 0315 	and.w	r3, r3, #21
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	f47f af63 	bne.w	8004118 <limits_go_home+0x1f8>

    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8004252:	f004 fd13 	bl	8008c7c <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8004256:	4b44      	ldr	r3, [pc, #272]	; (8004368 <limits_go_home+0x448>)
 8004258:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800425c:	4618      	mov	r0, r3
 800425e:	f000 febb 	bl	8004fd8 <delay_ms>

    // Reverse direction and reset homing rate for locate cycle(s).
    approach = !approach;
 8004262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	643b      	str	r3, [r7, #64]	; 0x40

    // After first cycle, homing enters locating phase. Shorten search to pull-off distance.
    if (approach) {
 8004270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <limits_go_home+0x36e>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <limits_go_home+0x448>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	493c      	ldr	r1, [pc, #240]	; (800436c <limits_go_home+0x44c>)
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc fd17 	bl	8000cb0 <__aeabi_fmul>
 8004282:	4603      	mov	r3, r0
 8004284:	64bb      	str	r3, [r7, #72]	; 0x48
      homing_rate = settings.homing_feed_rate;
 8004286:	4b38      	ldr	r3, [pc, #224]	; (8004368 <limits_go_home+0x448>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428c:	e005      	b.n	800429a <limits_go_home+0x37a>
    } else {
      max_travel = settings.homing_pulloff;
 800428e:	4b36      	ldr	r3, [pc, #216]	; (8004368 <limits_go_home+0x448>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	64bb      	str	r3, [r7, #72]	; 0x48
      homing_rate = settings.homing_seek_rate;
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <limits_go_home+0x448>)
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  } while (n_cycle-- > 0);
 800429a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f aea0 	bne.w	8003fea <limits_go_home+0xca>
  // set up pull-off maneuver from axes limit switches that have been homed. This provides
  // some initial clearance off the switches and should also help prevent them from falsely
  // triggering when hard limits are enabled or when more than one axes shares a limit pin.
  int32_t set_axis_position;
  // Set machine positions for homed limit switches. Don't update non-homed axes.
  for (idx=0; idx<N_AXIS; idx++) {
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80042b0:	e04d      	b.n	800434e <limits_go_home+0x42e>
    // NOTE: settings.max_travel[] is stored as a negative value.
    if (cycle_mask & bit(idx)) {
 80042b2:	79fa      	ldrb	r2, [r7, #7]
 80042b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042b8:	fa42 f303 	asr.w	r3, r2, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d03f      	beq.n	8004344 <limits_go_home+0x424>
      #ifdef HOMING_FORCE_SET_ORIGIN
        set_axis_position = 0;
      #else
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 80042c4:	4b28      	ldr	r3, [pc, #160]	; (8004368 <limits_go_home+0x448>)
 80042c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80042ca:	461a      	mov	r2, r3
 80042cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042d0:	fa42 f303 	asr.w	r3, r2, r3
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01c      	beq.n	8004316 <limits_go_home+0x3f6>
          set_axis_position = lroundf((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 80042dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042e0:	4a21      	ldr	r2, [pc, #132]	; (8004368 <limits_go_home+0x448>)
 80042e2:	3308      	adds	r3, #8
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <limits_go_home+0x448>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f7fc fbd5 	bl	8000aa0 <__addsf3>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042fe:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <limits_go_home+0x448>)
 8004300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004304:	4619      	mov	r1, r3
 8004306:	f7fc fcd3 	bl	8000cb0 <__aeabi_fmul>
 800430a:	4603      	mov	r3, r0
 800430c:	4618      	mov	r0, r3
 800430e:	f006 fa4d 	bl	800a7ac <lroundf>
 8004312:	6378      	str	r0, [r7, #52]	; 0x34
 8004314:	e010      	b.n	8004338 <limits_go_home+0x418>
        } else {
          set_axis_position = lroundf(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <limits_go_home+0x448>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f083 4000 	eor.w	r0, r3, #2147483648	; 0x80000000
 800431e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004322:	4a11      	ldr	r2, [pc, #68]	; (8004368 <limits_go_home+0x448>)
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fcc1 	bl	8000cb0 <__aeabi_fmul>
 800432e:	4603      	mov	r3, r0
 8004330:	4618      	mov	r0, r3
 8004332:	f006 fa3b 	bl	800a7ac <lroundf>
 8004336:	6378      	str	r0, [r7, #52]	; 0x34
          sys_position[B_MOTOR] = off_axis_position - set_axis_position;
        } else {
          sys_position[idx] = set_axis_position;
        }
      #else
        sys_position[idx] = set_axis_position;
 8004338:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <limits_go_home+0x450>)
 800433e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx=0; idx<N_AXIS; idx++) {
 8004344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004348:	3301      	adds	r3, #1
 800434a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800434e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004352:	2b02      	cmp	r3, #2
 8004354:	d9ad      	bls.n	80042b2 <limits_go_home+0x392>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <limits_go_home+0x454>)
 8004358:	2200      	movs	r2, #0
 800435a:	711a      	strb	r2, [r3, #4]
 800435c:	e000      	b.n	8004360 <limits_go_home+0x440>
  if (sys.abort) { return; } // Block if system reset has been issued.
 800435e:	bf00      	nop
}
 8004360:	3750      	adds	r7, #80	; 0x50
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	200010b4 	.word	0x200010b4
 800436c:	40a00000 	.word	0x40a00000
 8004370:	20000f24 	.word	0x20000f24
 8004374:	20000f00 	.word	0x20000f00

08004378 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if (system_check_travel_limits(target)) {
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f005 ff9b 	bl	800a2bc <system_check_travel_limits>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01d      	beq.n	80043c8 <limits_soft_check+0x50>
    sys.soft_limit = true;
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <limits_soft_check+0x58>)
 800438e:	2201      	movs	r2, #1
 8004390:	70da      	strb	r2, [r3, #3]
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <limits_soft_check+0x58>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10c      	bne.n	80043b4 <limits_soft_check+0x3c>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800439a:	2008      	movs	r0, #8
 800439c:	f005 ffc2 	bl	800a324 <system_set_exec_state_flag>
      do {
        protocol_execute_realtime();
 80043a0:	f001 fed6 	bl	8006150 <protocol_execute_realtime>
        if (sys.abort) { return; }
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <limits_soft_check+0x58>)
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10c      	bne.n	80043c6 <limits_soft_check+0x4e>
      } while ( sys.state != STATE_IDLE );
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <limits_soft_check+0x58>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f5      	bne.n	80043a0 <limits_soft_check+0x28>
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 80043b4:	f000 fcd2 	bl	8004d5c <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 80043b8:	2002      	movs	r0, #2
 80043ba:	f005 ffe5 	bl	800a388 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 80043be:	f001 fec7 	bl	8006150 <protocol_execute_realtime>
    return;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <limits_soft_check+0x50>
        if (sys.abort) { return; }
 80043c6:	bf00      	nop
  }
}
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000f00 	.word	0x20000f00

080043d4 <USART1_Configuration>:
#include "stm32eeprom.h"
#ifndef USEUSB
#include "stm32f10x_usart.h"
volatile uint8_t tx_restart = 1;  // added by MS; 1 means that the tx buffer is empty and so writing a byte in the buffer has to activate Tx interrupt
void USART1_Configuration(u32 BaudRate)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80043dc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80043e0:	f7fc fe88 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;   
 80043e4:	2325      	movs	r3, #37	; 0x25
 80043e6:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
 80043e8:	2300      	movs	r3, #0
 80043ea:	727b      	strb	r3, [r7, #9]

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 80043ec:	2301      	movs	r3, #1
 80043ee:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);                 
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fe8f 	bl	8001118 <NVIC_Init>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 80043fa:	2101      	movs	r1, #1
 80043fc:	f244 0005 	movw	r0, #16389	; 0x4005
 8004400:	f7fd fab8 	bl	8001974 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8004404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004408:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	
 800440a:	2318      	movs	r3, #24
 800440c:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		
 800440e:	2303      	movs	r3, #3
 8004410:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004412:	f107 031c 	add.w	r3, r7, #28
 8004416:	4619      	mov	r1, r3
 8004418:	481c      	ldr	r0, [pc, #112]	; (800448c <USART1_Configuration+0xb8>)
 800441a:	f7fd f841 	bl	80014a0 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800441e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004422:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	
 8004424:	2304      	movs	r3, #4
 8004426:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	4619      	mov	r1, r3
 800442e:	4817      	ldr	r0, [pc, #92]	; (800448c <USART1_Configuration+0xb8>)
 8004430:	f7fd f836 	bl	80014a0 <GPIO_Init>

	USART_InitStructure.USART_BaudRate = BaudRate;	  
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b; 
 8004438:	2300      	movs	r3, #0
 800443a:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;	 
 800443c:	2300      	movs	r3, #0
 800443e:	827b      	strh	r3, [r7, #18]
	USART_InitStructure.USART_Parity = USART_Parity_No;	 
 8004440:	2300      	movs	r3, #0
 8004442:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004444:	2300      	movs	r3, #0
 8004446:	833b      	strh	r3, [r7, #24]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004448:	230c      	movs	r3, #12
 800444a:	82fb      	strh	r3, [r7, #22]
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 800444c:	4a10      	ldr	r2, [pc, #64]	; (8004490 <USART1_Configuration+0xbc>)
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <USART1_Configuration+0xbc>)
 8004450:	899b      	ldrh	r3, [r3, #12]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f043 030c 	orr.w	r3, r3, #12
 8004458:	b29b      	uxth	r3, r3
 800445a:	8193      	strh	r3, [r2, #12]
	USART_Init(USART1, &USART_InitStructure);
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	4619      	mov	r1, r3
 8004462:	480b      	ldr	r0, [pc, #44]	; (8004490 <USART1_Configuration+0xbc>)
 8004464:	f7fd fc58 	bl	8001d18 <USART_Init>
	//	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8004468:	2201      	movs	r2, #1
 800446a:	f240 5125 	movw	r1, #1317	; 0x525
 800446e:	4808      	ldr	r0, [pc, #32]	; (8004490 <USART1_Configuration+0xbc>)
 8004470:	f7fd fd2b 	bl	8001eca <USART_ITConfig>
	USART_Cmd(USART1, ENABLE);
 8004474:	2101      	movs	r1, #1
 8004476:	4806      	ldr	r0, [pc, #24]	; (8004490 <USART1_Configuration+0xbc>)
 8004478:	f7fd fd08 	bl	8001e8c <USART_Cmd>
	tx_restart = 1; // 1 means that Tx interrupt has to be restarted when a (first) byte will be added in the tx buffer
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <USART1_Configuration+0xc0>)
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40010800 	.word	0x40010800
 8004490:	40013800 	.word	0x40013800
 8004494:	20000014 	.word	0x20000014

08004498 <main>:
#ifdef WIN32
int main(int argc, char *argv[])
#else
int main(void)
#endif
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800449e:	2101      	movs	r1, #1
 80044a0:	2010      	movs	r0, #16
 80044a2:	f7fd fa67 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80044a6:	2302      	movs	r3, #2
 80044a8:	70bb      	strb	r3, [r7, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80044aa:	2310      	movs	r3, #16
 80044ac:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80044ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044b2:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80044b4:	463b      	mov	r3, r7
 80044b6:	4619      	mov	r1, r3
 80044b8:	4835      	ldr	r0, [pc, #212]	; (8004590 <main+0xf8>)
 80044ba:	f7fc fff1 	bl	80014a0 <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB
	USART1_Configuration(115200);
 80044be:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80044c2:	f7ff ff87 	bl	80043d4 <USART1_Configuration>
	USB_Interrupts_Config();
	USB_Init();
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 80044c6:	f7fc ff2d 	bl	8001324 <FLASH_Unlock>
	eeprom_init();
 80044ca:	f7fd fe2f 	bl	800212c <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 80044ce:	4a31      	ldr	r2, [pc, #196]	; (8004594 <main+0xfc>)
 80044d0:	4b30      	ldr	r3, [pc, #192]	; (8004594 <main+0xfc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6013      	str	r3, [r2, #0]
#endif
  // Initialize system upon power-up.
  serial_init();   // Setup serial baud rate and interrupts
 80044da:	f003 f92f 	bl	800773c <serial_init>
#ifdef WIN32
  winserial_init(argv[1]);
  eeprom_init();
#endif
  settings_init(); // Load Grbl settings from EEPROM
 80044de:	f003 fea9 	bl	8008234 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80044e2:	f004 fc2b 	bl	8008d3c <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80044e6:	f005 fb37 	bl	8009b58 <system_init>

  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80044ea:	220c      	movs	r2, #12
 80044ec:	2100      	movs	r1, #0
 80044ee:	482a      	ldr	r0, [pc, #168]	; (8004598 <main+0x100>)
 80044f0:	f006 f89f 	bl	800a632 <memset>
  // Initialize system state.
  #ifdef FORCE_INITIALIZATION_ALARM
    // Force Grbl into an ALARM state upon a power-cycle or hard reset.
    sys.state = STATE_ALARM;
  #else
    sys.state = STATE_IDLE;
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <main+0x104>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
  // cycle '$H' or kill alarm locks '$X' will disable the alarm.
  // NOTE: The startup script will run after successful completion of the homing cycle, but
  // not after disabling the alarm locks. Prevents motion startup blocks from crashing into
  // things uncontrollably. Very bad.
  #ifdef HOMING_INIT_LOCK
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 80044fa:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <main+0x108>)
 80044fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <main+0x76>
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <main+0x104>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
  // Grbl initialization loop upon power-up or a system abort. For the latter, all processes
  // will return to this loop to be cleanly re-initialized.
  for(;;) {

    // Reset system variables.
    uint8_t prior_state = sys.state;
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <main+0x104>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	71fb      	strb	r3, [r7, #7]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8004514:	2214      	movs	r2, #20
 8004516:	2100      	movs	r1, #0
 8004518:	4820      	ldr	r0, [pc, #128]	; (800459c <main+0x104>)
 800451a:	f006 f88a 	bl	800a632 <memset>
    sys.state = prior_state;
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <main+0x104>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	7013      	strb	r3, [r2, #0]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 8004524:	4b1d      	ldr	r3, [pc, #116]	; (800459c <main+0x104>)
 8004526:	2264      	movs	r2, #100	; 0x64
 8004528:	721a      	strb	r2, [r3, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <main+0x104>)
 800452c:	2264      	movs	r2, #100	; 0x64
 800452e:	725a      	strb	r2, [r3, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <main+0x104>)
 8004532:	2264      	movs	r2, #100	; 0x64
 8004534:	729a      	strb	r2, [r3, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8004536:	220c      	movs	r2, #12
 8004538:	2100      	movs	r1, #0
 800453a:	481a      	ldr	r0, [pc, #104]	; (80045a4 <main+0x10c>)
 800453c:	f006 f879 	bl	800a632 <memset>
    sys_probe_state = 0;
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <main+0x110>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_state = 0;
 8004546:	4b19      	ldr	r3, [pc, #100]	; (80045ac <main+0x114>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_alarm = 0;
 800454c:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <main+0x118>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_motion_override = 0;
 8004552:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <main+0x11c>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
    sys_rt_exec_accessory_override = 0;
 8004558:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <main+0x120>)
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 800455e:	f003 fab3 	bl	8007ac8 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 8004562:	f7fd feaf 	bl	80022c4 <gc_init>
    spindle_init();
 8004566:	f003 fe77 	bl	8008258 <spindle_init>
    coolant_init();
 800456a:	f7fd fcf5 	bl	8001f58 <coolant_init>
    limits_init();
 800456e:	f7ff fbff 	bl	8003d70 <limits_init>
    probe_init();
 8004572:	f001 fc65 	bl	8005e40 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8004576:	f000 ff41 	bl	80053fc <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 800457a:	f004 fb7f 	bl	8008c7c <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 800457e:	f001 facf 	bl	8005b20 <plan_sync_position>
    gc_sync_position();
 8004582:	f7fd feb9 	bl	80022f8 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 8004586:	f002 fb53 	bl	8006c30 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 800458a:	f001 fcd5 	bl	8005f38 <protocol_main_loop>
  for(;;) {
 800458e:	e7be      	b.n	800450e <main+0x76>
 8004590:	40011000 	.word	0x40011000
 8004594:	e000e010 	.word	0xe000e010
 8004598:	20000f24 	.word	0x20000f24
 800459c:	20000f00 	.word	0x20000f00
 80045a0:	200010b4 	.word	0x200010b4
 80045a4:	20000f18 	.word	0x20000f18
 80045a8:	20000f16 	.word	0x20000f16
 80045ac:	20000f15 	.word	0x20000f15
 80045b0:	20000f30 	.word	0x20000f30
 80045b4:	20000efc 	.word	0x20000efc
 80045b8:	20000f14 	.word	0x20000f14

080045bc <_delay_ms>:
  }
  return 0;   /* Never reached */
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 80045c4:	4a12      	ldr	r2, [pc, #72]	; (8004610 <_delay_ms+0x54>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f242 3128 	movw	r1, #9000	; 0x2328
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <_delay_ms+0x54>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <_delay_ms+0x54>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL;
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <_delay_ms+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <_delay_ms+0x3c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f2      	beq.n	80045de <_delay_ms+0x22>
	SysTick->CTRL = 0x00;                                            // Close the counter
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <_delay_ms+0x54>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <_delay_ms+0x54>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000e010 	.word	0xe000e010

08004614 <LedBlink>:
void LedBlink(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <LedBlink+0x2c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004622:	4808      	ldr	r0, [pc, #32]	; (8004644 <LedBlink+0x30>)
 8004624:	f7fd f82c 	bl	8001680 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <LedBlink+0x2c>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	4b01      	ldr	r3, [pc, #4]	; (8004640 <LedBlink+0x2c>)
 800463a:	701a      	strb	r2, [r3, #0]
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000015 	.word	0x20000015
 8004644:	40011000 	.word	0x40011000

08004648 <NVIC_EnableIRQ>:
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8004652:	4908      	ldr	r1, [pc, #32]	; (8004674 <NVIC_EnableIRQ+0x2c>)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	79fa      	ldrb	r2, [r7, #7]
 800465c:	f002 021f 	and.w	r2, r2, #31
 8004660:	2001      	movs	r0, #1
 8004662:	fa00 f202 	lsl.w	r2, r0, r2
 8004666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	e000e100 	.word	0xe000e100

08004678 <NVIC_ClearPendingIRQ>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8004682:	4909      	ldr	r1, [pc, #36]	; (80046a8 <NVIC_ClearPendingIRQ+0x30>)
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	79fa      	ldrb	r2, [r7, #7]
 800468c:	f002 021f 	and.w	r2, r2, #31
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	3360      	adds	r3, #96	; 0x60
 8004698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	e000e100 	.word	0xe000e100

080046ac <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 80046b6:	4b21      	ldr	r3, [pc, #132]	; (800473c <mc_line+0x90>)
 80046b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <mc_line+0x26>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <mc_line+0x94>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d002      	beq.n	80046d2 <mc_line+0x26>
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fe53 	bl	8004378 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <mc_line+0x94>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d029      	beq.n	800472e <mc_line+0x82>
  // parser and planner are separate from the system machine positions, this is doable.

  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
 80046da:	f001 fd39 	bl	8006150 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <mc_line+0x94>)
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d125      	bne.n	8004732 <mc_line+0x86>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 80046e6:	f000 ff29 	bl	800553c <plan_check_full_buffer>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <mc_line+0x4a>
 80046f0:	f001 fd22 	bl	8006138 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 80046f4:	e7f1      	b.n	80046da <mc_line+0x2e>
    else { break; }
 80046f6:	bf00      	nop
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fff2 	bl	80056e4 <plan_buffer_line>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d116      	bne.n	8004734 <mc_line+0x88>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <mc_line+0x90>)
 8004708:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00f      	beq.n	8004734 <mc_line+0x88>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	7a1b      	ldrb	r3, [r3, #8]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <mc_line+0x88>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	2010      	movs	r0, #16
 8004728:	f003 ff3e 	bl	80085a8 <spindle_sync>
 800472c:	e002      	b.n	8004734 <mc_line+0x88>
  if (sys.state == STATE_CHECK_MODE) { return; }
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <mc_line+0x88>
    if (sys.abort) { return; } // Bail, if system abort.
 8004732:	bf00      	nop
			}
		}
	}
}
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200010b4 	.word	0x200010b4
 8004740:	20000f00 	.word	0x20000f00
 8004744:	00000000 	.word	0x00000000

08004748 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b094      	sub	sp, #80	; 0x50
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8004756:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	4413      	add	r3, r2
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	f7fc f996 	bl	8000aa0 <__addsf3>
 8004774:	4603      	mov	r3, r0
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
  float center_axis1 = position[axis_1] + offset[axis_1];
 8004778:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4413      	add	r3, r2
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4619      	mov	r1, r3
 8004792:	f7fc f985 	bl	8000aa0 <__addsf3>
 8004796:	4603      	mov	r3, r0
 8004798:	63bb      	str	r3, [r7, #56]	; 0x38
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 800479a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	4413      	add	r3, r2
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  float r_axis1 = -offset[axis_1];
 80047ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
  float rt_axis0 = target[axis_0] - center_axis0;
 80047be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fc f965 	bl	8000a9c <__aeabi_fsub>
 80047d2:	4603      	mov	r3, r0
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
  float rt_axis1 = target[axis_1] - center_axis1;
 80047d6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc f959 	bl	8000a9c <__aeabi_fsub>
 80047ea:	4603      	mov	r3, r0
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 80047ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80047f2:	f7fc fa5d 	bl	8000cb0 <__aeabi_fmul>
 80047f6:	4603      	mov	r3, r0
 80047f8:	461c      	mov	r4, r3
 80047fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80047fe:	f7fc fa57 	bl	8000cb0 <__aeabi_fmul>
 8004802:	4603      	mov	r3, r0
 8004804:	4619      	mov	r1, r3
 8004806:	4620      	mov	r0, r4
 8004808:	f7fc f948 	bl	8000a9c <__aeabi_fsub>
 800480c:	4603      	mov	r3, r0
 800480e:	461c      	mov	r4, r3
 8004810:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004812:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004814:	f7fc fa4c 	bl	8000cb0 <__aeabi_fmul>
 8004818:	4603      	mov	r3, r0
 800481a:	461d      	mov	r5, r3
 800481c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800481e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004820:	f7fc fa46 	bl	8000cb0 <__aeabi_fmul>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	4628      	mov	r0, r5
 800482a:	f7fc f939 	bl	8000aa0 <__addsf3>
 800482e:	4603      	mov	r3, r0
 8004830:	4619      	mov	r1, r3
 8004832:	4620      	mov	r0, r4
 8004834:	f006 f82e 	bl	800a894 <atan2f>
 8004838:	6478      	str	r0, [r7, #68]	; 0x44
  if (is_clockwise_arc) { // Correct atan2 output per direction
 800483a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01b      	beq.n	800487a <mc_arc+0x132>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8004842:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004844:	f7fb fde8 	bl	8000418 <__aeabi_f2d>
 8004848:	a385      	add	r3, pc, #532	; (adr r3, 8004a60 <mc_arc+0x318>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fc f8bd 	bl	80009cc <__aeabi_dcmpge>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02b      	beq.n	80048b0 <mc_arc+0x168>
 8004858:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800485a:	f7fb fddd 	bl	8000418 <__aeabi_f2d>
 800485e:	a382      	add	r3, pc, #520	; (adr r3, 8004a68 <mc_arc+0x320>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fc78 	bl	8000158 <__aeabi_dsub>
 8004868:	4603      	mov	r3, r0
 800486a:	460c      	mov	r4, r1
 800486c:	4618      	mov	r0, r3
 800486e:	4621      	mov	r1, r4
 8004870:	f7fc f8c0 	bl	80009f4 <__aeabi_d2f>
 8004874:	4603      	mov	r3, r0
 8004876:	647b      	str	r3, [r7, #68]	; 0x44
 8004878:	e01a      	b.n	80048b0 <mc_arc+0x168>
  } else {
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 800487a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800487c:	f7fb fdcc 	bl	8000418 <__aeabi_f2d>
 8004880:	a37b      	add	r3, pc, #492	; (adr r3, 8004a70 <mc_arc+0x328>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fc f897 	bl	80009b8 <__aeabi_dcmple>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00f      	beq.n	80048b0 <mc_arc+0x168>
 8004890:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004892:	f7fb fdc1 	bl	8000418 <__aeabi_f2d>
 8004896:	a374      	add	r3, pc, #464	; (adr r3, 8004a68 <mc_arc+0x320>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f7fb fc5e 	bl	800015c <__adddf3>
 80048a0:	4603      	mov	r3, r0
 80048a2:	460c      	mov	r4, r1
 80048a4:	4618      	mov	r0, r3
 80048a6:	4621      	mov	r1, r4
 80048a8:	f7fc f8a4 	bl	80009f4 <__aeabi_d2f>
 80048ac:	4603      	mov	r3, r0
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44

  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80048b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80048b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80048b6:	f7fc f9fb 	bl	8000cb0 <__aeabi_fmul>
 80048ba:	4603      	mov	r3, r0
 80048bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc f9f6 	bl	8000cb0 <__aeabi_fmul>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80048ca:	4b6b      	ldr	r3, [pc, #428]	; (8004a78 <mc_arc+0x330>)
 80048cc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80048ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d0:	4619      	mov	r1, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fc f8e4 	bl	8000aa0 <__addsf3>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <mc_arc+0x330>)
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fc f8da 	bl	8000a9c <__aeabi_fsub>
 80048e8:	4603      	mov	r3, r0
 80048ea:	4619      	mov	r1, r3
 80048ec:	4628      	mov	r0, r5
 80048ee:	f7fc f9df 	bl	8000cb0 <__aeabi_fmul>
 80048f2:	4603      	mov	r3, r0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f005 ffcf 	bl	800a898 <sqrtf>
 80048fa:	4603      	mov	r3, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 80048fc:	4619      	mov	r1, r3
 80048fe:	4620      	mov	r0, r4
 8004900:	f7fc fa8a 	bl	8000e18 <__aeabi_fdiv>
 8004904:	4603      	mov	r3, r0
 8004906:	4618      	mov	r0, r3
 8004908:	f005 ff10 	bl	800a72c <floorf>
 800490c:	4603      	mov	r3, r0
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc fbd0 	bl	80010b4 <__aeabi_f2uiz>
 8004914:	4603      	mov	r3, r0
 8004916:	85fb      	strh	r3, [r7, #46]	; 0x2e

  if (segments) {
 8004918:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8149 	beq.w	8004bb2 <mc_arc+0x46a>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	7a1b      	ldrb	r3, [r3, #8]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d015      	beq.n	8004958 <mc_arc+0x210>
      pl_data->feed_rate *= segments; 
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681c      	ldr	r4, [r3, #0]
 8004930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc f968 	bl	8000c08 <__aeabi_i2f>
 8004938:	4603      	mov	r3, r0
 800493a:	4619      	mov	r1, r3
 800493c:	4620      	mov	r0, r4
 800493e:	f7fc f9b7 	bl	8000cb0 <__aeabi_fmul>
 8004942:	4603      	mov	r3, r0
 8004944:	461a      	mov	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	601a      	str	r2, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	7a1b      	ldrb	r3, [r3, #8]
 800494e:	f023 0308 	bic.w	r3, r3, #8
 8004952:	b2da      	uxtb	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	721a      	strb	r2, [r3, #8]
    }
    
    float theta_per_segment = angular_travel/segments;
 8004958:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800495a:	4618      	mov	r0, r3
 800495c:	f7fc f954 	bl	8000c08 <__aeabi_i2f>
 8004960:	4603      	mov	r3, r0
 8004962:	4619      	mov	r1, r3
 8004964:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004966:	f7fc fa57 	bl	8000e18 <__aeabi_fdiv>
 800496a:	4603      	mov	r3, r0
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 800496e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4619      	mov	r1, r3
 8004988:	f7fc f888 	bl	8000a9c <__aeabi_fsub>
 800498c:	4603      	mov	r3, r0
 800498e:	461c      	mov	r4, r3
 8004990:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc f938 	bl	8000c08 <__aeabi_i2f>
 8004998:	4603      	mov	r3, r0
 800499a:	4619      	mov	r1, r3
 800499c:	4620      	mov	r0, r4
 800499e:	f7fc fa3b 	bl	8000e18 <__aeabi_fdiv>
 80049a2:	4603      	mov	r3, r0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 80049a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f7fc f981 	bl	8000cb0 <__aeabi_fmul>
 80049ae:	4603      	mov	r3, r0
 80049b0:	4619      	mov	r1, r3
 80049b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80049b6:	f7fc f871 	bl	8000a9c <__aeabi_fsub>
 80049ba:	4603      	mov	r3, r0
 80049bc:	623b      	str	r3, [r7, #32]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 80049be:	492f      	ldr	r1, [pc, #188]	; (8004a7c <mc_arc+0x334>)
 80049c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c2:	f7fc f975 	bl	8000cb0 <__aeabi_fmul>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461c      	mov	r4, r3
 80049ca:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80049ce:	6a38      	ldr	r0, [r7, #32]
 80049d0:	f7fc f866 	bl	8000aa0 <__addsf3>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4619      	mov	r1, r3
 80049d8:	4620      	mov	r0, r4
 80049da:	f7fc f969 	bl	8000cb0 <__aeabi_fmul>
 80049de:	4603      	mov	r3, r0
 80049e0:	61fb      	str	r3, [r7, #28]
    cos_T *= 0.5;
 80049e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80049e6:	6a38      	ldr	r0, [r7, #32]
 80049e8:	f7fc f962 	bl	8000cb0 <__aeabi_fmul>
 80049ec:	4603      	mov	r3, r0
 80049ee:	623b      	str	r3, [r7, #32]

    float sin_Ti;
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80049f6:	2301      	movs	r3, #1
 80049f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049fc:	e0d3      	b.n	8004ba6 <mc_arc+0x45e>

      if (count < N_ARC_CORRECTION) {
 80049fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004a02:	2b0b      	cmp	r3, #11
 8004a04:	d83c      	bhi.n	8004a80 <mc_arc+0x338>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8004a06:	69f9      	ldr	r1, [r7, #28]
 8004a08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004a0a:	f7fc f951 	bl	8000cb0 <__aeabi_fmul>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461c      	mov	r4, r3
 8004a12:	6a39      	ldr	r1, [r7, #32]
 8004a14:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a16:	f7fc f94b 	bl	8000cb0 <__aeabi_fmul>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7fc f83e 	bl	8000aa0 <__addsf3>
 8004a24:	4603      	mov	r3, r0
 8004a26:	61bb      	str	r3, [r7, #24]
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8004a28:	6a39      	ldr	r1, [r7, #32]
 8004a2a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004a2c:	f7fc f940 	bl	8000cb0 <__aeabi_fmul>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461c      	mov	r4, r3
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a38:	f7fc f93a 	bl	8000cb0 <__aeabi_fmul>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7fc f82b 	bl	8000a9c <__aeabi_fsub>
 8004a46:	4603      	mov	r3, r0
 8004a48:	64fb      	str	r3, [r7, #76]	; 0x4c
        r_axis1 = r_axisi;
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
        count++;
 8004a4e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004a52:	3301      	adds	r3, #1
 8004a54:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8004a58:	e071      	b.n	8004b3e <mc_arc+0x3f6>
 8004a5a:	bf00      	nop
 8004a5c:	f3af 8000 	nop.w
 8004a60:	a0b5ed8d 	.word	0xa0b5ed8d
 8004a64:	bea0c6f7 	.word	0xbea0c6f7
 8004a68:	54442d18 	.word	0x54442d18
 8004a6c:	401921fb 	.word	0x401921fb
 8004a70:	a0b5ed8d 	.word	0xa0b5ed8d
 8004a74:	3ea0c6f7 	.word	0x3ea0c6f7
 8004a78:	200010b4 	.word	0x200010b4
 8004a7c:	3e2aaaab 	.word	0x3e2aaaab
      } else {
        // Arc correction to radius vector. Computed only every N_ARC_CORRECTION increments. ~375 usec
        // Compute exact location by applying transformation matrix from initial radius vector(=-offset).
        cos_Ti = cosf(i*theta_per_segment);
 8004a80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fc f8bf 	bl	8000c08 <__aeabi_i2f>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fc f90e 	bl	8000cb0 <__aeabi_fmul>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f005 fe14 	bl	800a6c4 <cosf>
 8004a9c:	6178      	str	r0, [r7, #20]
        sin_Ti = sinf(i*theta_per_segment);
 8004a9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc f8b0 	bl	8000c08 <__aeabi_i2f>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc f8ff 	bl	8000cb0 <__aeabi_fmul>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f005 fea5 	bl	800a804 <sinf>
 8004aba:	6138      	str	r0, [r7, #16]
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8004abc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc f8ee 	bl	8000cb0 <__aeabi_fmul>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461c      	mov	r4, r3
 8004ad8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc f8e2 	bl	8000cb0 <__aeabi_fmul>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4619      	mov	r1, r3
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fb ffd5 	bl	8000aa0 <__addsf3>
 8004af6:	4603      	mov	r3, r0
 8004af8:	64fb      	str	r3, [r7, #76]	; 0x4c
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8004afa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004b0a:	6939      	ldr	r1, [r7, #16]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc f8cf 	bl	8000cb0 <__aeabi_fmul>
 8004b12:	4603      	mov	r3, r0
 8004b14:	461c      	mov	r4, r3
 8004b16:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	4413      	add	r3, r2
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6979      	ldr	r1, [r7, #20]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc f8c3 	bl	8000cb0 <__aeabi_fmul>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7fb ffb4 	bl	8000a9c <__aeabi_fsub>
 8004b34:	4603      	mov	r3, r0
 8004b36:	64bb      	str	r3, [r7, #72]	; 0x48
        count = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8004b3e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	18d4      	adds	r4, r2, r3
 8004b48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004b4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b4c:	f7fb ffa8 	bl	8000aa0 <__addsf3>
 8004b50:	4603      	mov	r3, r0
 8004b52:	6023      	str	r3, [r4, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8004b54:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	18d4      	adds	r4, r2, r3
 8004b5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b62:	f7fb ff9d 	bl	8000aa0 <__addsf3>
 8004b66:	4603      	mov	r3, r0
 8004b68:	6023      	str	r3, [r4, #0]
      position[axis_linear] += linear_per_segment;
 8004b6a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	18d4      	adds	r4, r2, r3
 8004b74:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fb ff8c 	bl	8000aa0 <__addsf3>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	6023      	str	r3, [r4, #0]

      mc_line(position, pl_data);
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fd8c 	bl	80046ac <mc_line>

      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <mc_arc+0x47c>)
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10f      	bne.n	8004bbc <mc_arc+0x474>
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8004b9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ba6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bac:	429a      	cmp	r2, r3
 8004bae:	f4ff af26 	bcc.w	80049fe <mc_arc+0x2b6>
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fd79 	bl	80046ac <mc_line>
 8004bba:	e000      	b.n	8004bbe <mc_arc+0x476>
      if (sys.abort) { return; }
 8004bbc:	bf00      	nop
}
 8004bbe:	3750      	adds	r7, #80	; 0x50
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc4:	20000f00 	.word	0x20000f00

08004bc8 <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if (sys.state == STATE_CHECK_MODE) { return; }
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <mc_dwell+0x28>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d006      	beq.n	8004be6 <mc_dwell+0x1e>
  protocol_buffer_synchronize();
 8004bd8:	f001 fa96 	bl	8006108 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8004bdc:	2100      	movs	r1, #0
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9c0 	bl	8004f64 <delay_sec>
 8004be4:	e000      	b.n	8004be8 <mc_dwell+0x20>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8004be6:	bf00      	nop
}
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000f00 	.word	0x20000f00

08004bf4 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8004bfe:	f7ff f90d 	bl	8003e1c <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8004c02:	2004      	movs	r0, #4
 8004c04:	f7ff f98c 	bl	8003f20 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f7ff f989 	bl	8003f20 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8004c0e:	f001 fa9f 	bl	8006150 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <mc_homing_cycle+0x4c>)
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10e      	bne.n	8004c38 <mc_homing_cycle+0x44>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8004c1a:	f7fd fb6d 	bl	80022f8 <gc_sync_position>
  plan_sync_position();
 8004c1e:	f000 ff7f 	bl	8005b20 <plan_sync_position>
	#elif defined AB_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT) | (1 << B_LIMIT_BIT));
	#elif defined ABC_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT) | (1 << B_LIMIT_BIT) | (1 << C_LIMIT_BIT));
	#else
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT));
 8004c22:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8004c26:	f7fc fb6f 	bl	8001308 <EXTI_ClearITPendingBit>
	#endif
// ---
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004c2a:	2028      	movs	r0, #40	; 0x28
 8004c2c:	f7ff fd24 	bl	8004678 <NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004c30:	2028      	movs	r0, #40	; 0x28
 8004c32:	f7ff fd09 	bl	8004648 <NVIC_EnableIRQ>
 8004c36:	e000      	b.n	8004c3a <mc_homing_cycle+0x46>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8004c38:	bf00      	nop
#else
	limits_init();
#endif
}
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000f00 	.word	0x20000f00

08004c44 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	71fb      	strb	r3, [r7, #7]
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004c52:	4b3e      	ldr	r3, [pc, #248]	; (8004d4c <mc_probe_cycle+0x108>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d101      	bne.n	8004c5e <mc_probe_cycle+0x1a>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e071      	b.n	8004d42 <mc_probe_cycle+0xfe>

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8004c5e:	f001 fa53 	bl	8006108 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8004c62:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <mc_probe_cycle+0x108>)
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <mc_probe_cycle+0x2a>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e069      	b.n	8004d42 <mc_probe_cycle+0xfe>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_AWAY);
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	75fb      	strb	r3, [r7, #23]
  uint8_t is_no_error = bit_istrue(parser_flags, GC_PARSER_PROBE_IS_NO_ERROR);
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	75bb      	strb	r3, [r7, #22]
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <mc_probe_cycle+0x108>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	715a      	strb	r2, [r3, #5]
  probe_configure_invert_mask(is_probe_away);
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 f8ec 	bl	8005e78 <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 8004ca0:	f001 f912 	bl	8005ec8 <probe_get_state>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <mc_probe_cycle+0x7a>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8004caa:	2004      	movs	r0, #4
 8004cac:	f005 fb6c 	bl	800a388 <system_set_exec_alarm>
    protocol_execute_realtime();
 8004cb0:	f001 fa4e 	bl	8006150 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f001 f8df 	bl	8005e78 <probe_configure_invert_mask>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e041      	b.n	8004d42 <mc_probe_cycle+0xfe>
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fcf3 	bl	80046ac <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <mc_probe_cycle+0x10c>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8004ccc:	2002      	movs	r0, #2
 8004cce:	f005 fb29 	bl	800a324 <system_set_exec_state_flag>
  do {
    protocol_execute_realtime();
 8004cd2:	f001 fa3d 	bl	8006150 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <mc_probe_cycle+0x108>)
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <mc_probe_cycle+0x9e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e02f      	b.n	8004d42 <mc_probe_cycle+0xfe>
  } while (sys.state != STATE_IDLE);
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <mc_probe_cycle+0x108>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f3      	bne.n	8004cd2 <mc_probe_cycle+0x8e>

  // Probing cycle complete!

  // Set state variables and error out, if the probe failed and cycle with error is enabled.
  if (sys_probe_state == PROBE_ACTIVE) {
 8004cea:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <mc_probe_cycle+0x10c>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10c      	bne.n	8004d0e <mc_probe_cycle+0xca>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8004cf4:	7dbb      	ldrb	r3, [r7, #22]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <mc_probe_cycle+0xc2>
 8004cfa:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <mc_probe_cycle+0x110>)
 8004cfc:	4a16      	ldr	r2, [pc, #88]	; (8004d58 <mc_probe_cycle+0x114>)
 8004cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004d04:	e006      	b.n	8004d14 <mc_probe_cycle+0xd0>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8004d06:	2005      	movs	r0, #5
 8004d08:	f005 fb3e 	bl	800a388 <system_set_exec_alarm>
 8004d0c:	e002      	b.n	8004d14 <mc_probe_cycle+0xd0>
  } else {
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 8004d0e:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <mc_probe_cycle+0x108>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	715a      	strb	r2, [r3, #5]
  }
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <mc_probe_cycle+0x10c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f001 f8ac 	bl	8005e78 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 8004d20:	f001 fa16 	bl	8006150 <protocol_execute_realtime>

  // Reset the stepper and planner buffers to remove the remainder of the probe motion.
  st_reset(); // Reset step segment buffer.
 8004d24:	f003 ffaa 	bl	8008c7c <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8004d28:	f000 fb68 	bl	80053fc <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8004d2c:	f000 fef8 	bl	8005b20 <plan_sync_position>

  #ifdef MESSAGE_PROBE_COORDINATES
    // All done! Output the probe position as message.
    report_probe_parameters();
 8004d30:	f002 f8d0 	bl	8006ed4 <report_probe_parameters>
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <mc_probe_cycle+0x108>)
 8004d36:	795b      	ldrb	r3, [r3, #5]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <mc_probe_cycle+0xfc>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <mc_probe_cycle+0xfe>
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000f00 	.word	0x20000f00
 8004d50:	20000f16 	.word	0x20000f16
 8004d54:	20000f18 	.word	0x20000f18
 8004d58:	20000f24 	.word	0x20000f24

08004d5c <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8004d60:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <mc_reset+0x60>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d124      	bne.n	8004db8 <mc_reset+0x5c>
    system_set_exec_state_flag(EXEC_RESET);
 8004d6e:	2010      	movs	r0, #16
 8004d70:	f005 fad8 	bl	800a324 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 8004d74:	f003 fb28 	bl	80083c8 <spindle_stop>
    coolant_stop();
 8004d78:	f7fd f93c 	bl	8001ff4 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004d7c:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <mc_reset+0x64>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 032c 	and.w	r3, r3, #44	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <mc_reset+0x38>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <mc_reset+0x64>)
 8004d8a:	791b      	ldrb	r3, [r3, #4]
 8004d8c:	f003 0306 	and.w	r3, r3, #6
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d011      	beq.n	8004db8 <mc_reset+0x5c>
#endif
    {
      if (sys.state == STATE_HOMING) {
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <mc_reset+0x64>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d108      	bne.n	8004dae <mc_reset+0x52>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <mc_reset+0x68>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <mc_reset+0x58>
 8004da6:	2006      	movs	r0, #6
 8004da8:	f005 faee 	bl	800a388 <system_set_exec_alarm>
 8004dac:	e002      	b.n	8004db4 <mc_reset+0x58>
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 8004dae:	2003      	movs	r0, #3
 8004db0:	f005 faea 	bl	800a388 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 8004db4:	f003 fcd6 	bl	8008764 <st_go_idle>
    }
  }
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000f15 	.word	0x20000f15
 8004dc0:	20000f00 	.word	0x20000f00
 8004dc4:	20000f30 	.word	0x20000f30

08004dc8 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08c      	sub	sp, #48	; 0x30
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  char *ptr = line + *char_counter;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  // Capture initial positive/minus character
  bool isnegative = false;
 8004dec:	2300      	movs	r3, #0
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (c == '-') {
 8004df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004df4:	2b2d      	cmp	r3, #45	; 0x2d
 8004df6:	d108      	bne.n	8004e0a <read_float+0x42>
    isnegative = true;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
    c = *ptr++;
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e08:	e009      	b.n	8004e1e <read_float+0x56>
  } else if (c == '+') {
 8004e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	2b2b      	cmp	r3, #43	; 0x2b
 8004e10:	d105      	bne.n	8004e1e <read_float+0x56>
    c = *ptr++;
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
  int8_t exp = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	77fb      	strb	r3, [r7, #31]
  uint8_t ndigit = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	77bb      	strb	r3, [r7, #30]
  bool isdecimal = false;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
  while(1) {
    c -= '0';
 8004e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e32:	3b30      	subs	r3, #48	; 0x30
 8004e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (c <= 9) {
 8004e38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	d822      	bhi.n	8004e86 <read_float+0xbe>
      ndigit++;
 8004e40:	7fbb      	ldrb	r3, [r7, #30]
 8004e42:	3301      	adds	r3, #1
 8004e44:	77bb      	strb	r3, [r7, #30]
      if (ndigit <= MAX_INT_DIGITS) {
 8004e46:	7fbb      	ldrb	r3, [r7, #30]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d812      	bhi.n	8004e72 <read_float+0xaa>
        if (isdecimal) { exp--; }
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <read_float+0x96>
 8004e52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	77fb      	strb	r3, [r7, #31]
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	009a      	lsls	r2, r3, #2
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4413      	add	r3, r2
 8004e66:	005a      	lsls	r2, r3, #1
 8004e68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e6c:	4413      	add	r3, r2
 8004e6e:	623b      	str	r3, [r7, #32]
 8004e70:	e012      	b.n	8004e98 <read_float+0xd0>
      } else {
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10f      	bne.n	8004e98 <read_float+0xd0>
 8004e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e008      	b.n	8004e98 <read_float+0xd0>
      }
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8004e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e8c:	d10b      	bne.n	8004ea6 <read_float+0xde>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <read_float+0xde>
      isdecimal = true;
 8004e94:	2301      	movs	r3, #1
 8004e96:	61bb      	str	r3, [r7, #24]
    } else {
      break;
    }
    c = *ptr++;
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    c -= '0';
 8004ea4:	e7c3      	b.n	8004e2e <read_float+0x66>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 8004ea6:	7fbb      	ldrb	r3, [r7, #30]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <read_float+0xe8>
 8004eac:	2300      	movs	r3, #0
 8004eae:	e04e      	b.n	8004f4e <read_float+0x186>

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8004eb0:	6a38      	ldr	r0, [r7, #32]
 8004eb2:	f7fb fea5 	bl	8000c00 <__aeabi_ui2f>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	617b      	str	r3, [r7, #20]

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	6978      	ldr	r0, [r7, #20]
 8004ec0:	f7fc f88a 	bl	8000fd8 <__aeabi_fcmpeq>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d12c      	bne.n	8004f24 <read_float+0x15c>
    while (exp <= -2) {
 8004eca:	e009      	b.n	8004ee0 <read_float+0x118>
      fval *= 0.01f;
 8004ecc:	4922      	ldr	r1, [pc, #136]	; (8004f58 <read_float+0x190>)
 8004ece:	6978      	ldr	r0, [r7, #20]
 8004ed0:	f7fb feee 	bl	8000cb0 <__aeabi_fmul>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	617b      	str	r3, [r7, #20]
      exp += 2;
 8004ed8:	7ffb      	ldrb	r3, [r7, #31]
 8004eda:	3302      	adds	r3, #2
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	77fb      	strb	r3, [r7, #31]
    while (exp <= -2) {
 8004ee0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	dbf0      	blt.n	8004ecc <read_float+0x104>
    }
    if (exp < 0) {
 8004eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da06      	bge.n	8004f00 <read_float+0x138>
      fval *= 0.1f;
 8004ef2:	491a      	ldr	r1, [pc, #104]	; (8004f5c <read_float+0x194>)
 8004ef4:	6978      	ldr	r0, [r7, #20]
 8004ef6:	f7fb fedb 	bl	8000cb0 <__aeabi_fmul>
 8004efa:	4603      	mov	r3, r0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e011      	b.n	8004f24 <read_float+0x15c>
    } else if (exp > 0) {
 8004f00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	dd0d      	ble.n	8004f24 <read_float+0x15c>
      do {
        fval *= 10.0f;
 8004f08:	4915      	ldr	r1, [pc, #84]	; (8004f60 <read_float+0x198>)
 8004f0a:	6978      	ldr	r0, [r7, #20]
 8004f0c:	f7fb fed0 	bl	8000cb0 <__aeabi_fmul>
 8004f10:	4603      	mov	r3, r0
 8004f12:	617b      	str	r3, [r7, #20]
      } while (--exp > 0);
 8004f14:	7ffb      	ldrb	r3, [r7, #31]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	dcf1      	bgt.n	8004f08 <read_float+0x140>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <read_float+0x16e>
    *float_ptr = -fval;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e002      	b.n	8004f3c <read_float+0x174>
  } else {
    *float_ptr = fval;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	601a      	str	r2, [r3, #0]
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement
 8004f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	701a      	strb	r2, [r3, #0]

  return(true);
 8004f4c:	2301      	movs	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3730      	adds	r7, #48	; 0x30
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	3c23d70a 	.word	0x3c23d70a
 8004f5c:	3dcccccd 	.word	0x3dcccccd
 8004f60:	41200000 	.word	0x41200000

08004f64 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8004f70:	4917      	ldr	r1, [pc, #92]	; (8004fd0 <delay_sec+0x6c>)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fe9c 	bl	8000cb0 <__aeabi_fmul>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f005 fb62 	bl	800a644 <ceilf>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc f896 	bl	80010b4 <__aeabi_f2uiz>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	81fb      	strh	r3, [r7, #14]
	while (i-- > 0) {
 8004f8c:	e014      	b.n	8004fb8 <delay_sec+0x54>
		if (sys.abort) { return; }
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <delay_sec+0x70>)
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <delay_sec+0x60>
		if (mode == DELAY_MODE_DWELL) {
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <delay_sec+0x3e>
			protocol_execute_realtime();
 8004f9c:	f001 f8d8 	bl	8006150 <protocol_execute_realtime>
 8004fa0:	e007      	b.n	8004fb2 <delay_sec+0x4e>
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
 8004fa2:	f001 f8e3 	bl	800616c <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <delay_sec+0x70>)
 8004fa8:	789b      	ldrb	r3, [r3, #2]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <delay_sec+0x64>
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8004fb2:	2032      	movs	r0, #50	; 0x32
 8004fb4:	f7ff fb02 	bl	80045bc <_delay_ms>
	while (i-- > 0) {
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	1e5a      	subs	r2, r3, #1
 8004fbc:	81fa      	strh	r2, [r7, #14]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <delay_sec+0x2a>
 8004fc2:	e002      	b.n	8004fca <delay_sec+0x66>
		if (sys.abort) { return; }
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <delay_sec+0x66>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 8004fc8:	bf00      	nop
	}
}
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	41a00000 	.word	0x41a00000
 8004fd4:	20000f00 	.word	0x20000f00

08004fd8 <delay_ms>:


// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
  while ( ms-- ) { _delay_ms(1); }
 8004fe2:	e002      	b.n	8004fea <delay_ms+0x12>
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f7ff fae9 	bl	80045bc <_delay_ms>
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	80fa      	strh	r2, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f7      	bne.n	8004fe4 <delay_ms+0xc>
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <hypot_f>:


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fb fe51 	bl	8000cb0 <__aeabi_fmul>
 800500e:	4603      	mov	r3, r0
 8005010:	461c      	mov	r4, r3
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6838      	ldr	r0, [r7, #0]
 8005016:	f7fb fe4b 	bl	8000cb0 <__aeabi_fmul>
 800501a:	4603      	mov	r3, r0
 800501c:	4619      	mov	r1, r3
 800501e:	4620      	mov	r0, r4
 8005020:	f7fb fd3e 	bl	8000aa0 <__addsf3>
 8005024:	4603      	mov	r3, r0
 8005026:	4618      	mov	r0, r3
 8005028:	f005 fc36 	bl	800a898 <sqrtf>
 800502c:	4603      	mov	r3, r0
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}

08005036 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 8005036:	b590      	push	{r4, r7, lr}
 8005038:	b087      	sub	sp, #28
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint8_t idx;
  float magnitude = 0.0f;
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
  for (idx=0; idx<N_AXIS; idx++) {
 8005044:	2300      	movs	r3, #0
 8005046:	75fb      	strb	r3, [r7, #23]
 8005048:	e023      	b.n	8005092 <convert_delta_vector_to_unit_vector+0x5c>
    if (vector[idx] != 0.0f) {
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f7fb ffbd 	bl	8000fd8 <__aeabi_fcmpeq>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d113      	bne.n	800508c <convert_delta_vector_to_unit_vector+0x56>
      magnitude += vector[idx]*vector[idx];
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	7dfb      	ldrb	r3, [r7, #23]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	f7fb fe19 	bl	8000cb0 <__aeabi_fmul>
 800507e:	4603      	mov	r3, r0
 8005080:	4619      	mov	r1, r3
 8005082:	6938      	ldr	r0, [r7, #16]
 8005084:	f7fb fd0c 	bl	8000aa0 <__addsf3>
 8005088:	4603      	mov	r3, r0
 800508a:	613b      	str	r3, [r7, #16]
  for (idx=0; idx<N_AXIS; idx++) {
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	3301      	adds	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d9d8      	bls.n	800504a <convert_delta_vector_to_unit_vector+0x14>
    }
  }
  magnitude = sqrtf(magnitude);
 8005098:	6938      	ldr	r0, [r7, #16]
 800509a:	f005 fbfd 	bl	800a898 <sqrtf>
 800509e:	6138      	str	r0, [r7, #16]
  float inv_magnitude = 1.0f/magnitude;
 80050a0:	6939      	ldr	r1, [r7, #16]
 80050a2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80050a6:	f7fb feb7 	bl	8000e18 <__aeabi_fdiv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	60fb      	str	r3, [r7, #12]
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
 80050b2:	e011      	b.n	80050d8 <convert_delta_vector_to_unit_vector+0xa2>
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	18d4      	adds	r4, r2, r3
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fb fdf1 	bl	8000cb0 <__aeabi_fmul>
 80050ce:	4603      	mov	r3, r0
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
 80050d4:	3301      	adds	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d9ea      	bls.n	80050b4 <convert_delta_vector_to_unit_vector+0x7e>
  return(magnitude);
 80050de:	693b      	ldr	r3, [r7, #16]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd90      	pop	{r4, r7, pc}

080050e8 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <limit_value_by_axis_maximum+0x98>)
 80050f4:	60bb      	str	r3, [r7, #8]
  for (idx=0; idx<N_AXIS; idx++) {
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
 80050fa:	e039      	b.n	8005170 <limit_value_by_axis_maximum+0x88>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	4413      	add	r3, r2
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f04f 0100 	mov.w	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb ff64 	bl	8000fd8 <__aeabi_fcmpeq>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d129      	bne.n	800516a <limit_value_by_axis_maximum+0x82>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	4413      	add	r3, r2
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4619      	mov	r1, r3
 800512c:	f7fb fe74 	bl	8000e18 <__aeabi_fdiv>
 8005130:	4603      	mov	r3, r0
 8005132:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb ff75 	bl	8001028 <__aeabi_fcmpgt>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <limit_value_by_axis_maximum+0x60>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	e00f      	b.n	8005168 <limit_value_by_axis_maximum+0x80>
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4413      	add	r3, r2
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	4413      	add	r3, r2
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	f7fb fe5b 	bl	8000e18 <__aeabi_fdiv>
 8005162:	4603      	mov	r3, r0
 8005164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005168:	60bb      	str	r3, [r7, #8]
  for (idx=0; idx<N_AXIS; idx++) {
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3301      	adds	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d9c2      	bls.n	80050fc <limit_value_by_axis_maximum+0x14>
    }
  }
  return(limit_value);
 8005176:	68bb      	ldr	r3, [r7, #8]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	7f7fffff 	.word	0x7f7fffff

08005184 <plan_next_block_index>:
static planner_t pl;


// Returns the index of the next block in the ring buffer. Also called by stepper segment buffer.
uint8_t plan_next_block_index(uint8_t block_index)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	71fb      	strb	r3, [r7, #7]
  block_index++;
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	3301      	adds	r3, #1
 8005192:	71fb      	strb	r3, [r7, #7]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	2b24      	cmp	r3, #36	; 0x24
 8005198:	d101      	bne.n	800519e <plan_next_block_index+0x1a>
 800519a:	2300      	movs	r3, #0
 800519c:	71fb      	strb	r3, [r7, #7]
  return(block_index);
 800519e:	79fb      	ldrb	r3, [r7, #7]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <plan_prev_block_index>:


// Returns the index of the previous block in the ring buffer
static uint8_t plan_prev_block_index(uint8_t block_index)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	4603      	mov	r3, r0
 80051b2:	71fb      	strb	r3, [r7, #7]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <plan_prev_block_index+0x14>
 80051ba:	2324      	movs	r3, #36	; 0x24
 80051bc:	71fb      	strb	r3, [r7, #7]
  block_index--;
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	71fb      	strb	r3, [r7, #7]
  return(block_index);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 80051d6:	4b85      	ldr	r3, [pc, #532]	; (80053ec <planner_recalculate+0x21c>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff ffe5 	bl	80051aa <plan_prev_block_index>
 80051e0:	4603      	mov	r3, r0
 80051e2:	73fb      	strb	r3, [r7, #15]

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 80051e4:	4b82      	ldr	r3, [pc, #520]	; (80053f0 <planner_recalculate+0x220>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	f000 80fa 	beq.w	80053e4 <planner_recalculate+0x214>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2234      	movs	r2, #52	; 0x34
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	4a7e      	ldr	r2, [pc, #504]	; (80053f4 <planner_recalculate+0x224>)
 80051fa:	4413      	add	r3, r2
 80051fc:	607b      	str	r3, [r7, #4]

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699c      	ldr	r4, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4619      	mov	r1, r3
 8005208:	4618      	mov	r0, r3
 800520a:	f7fb fc49 	bl	8000aa0 <__addsf3>
 800520e:	4603      	mov	r3, r0
 8005210:	461a      	mov	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f7fb fd49 	bl	8000cb0 <__aeabi_fmul>
 800521e:	4603      	mov	r3, r0
 8005220:	4619      	mov	r1, r3
 8005222:	4620      	mov	r0, r4
 8005224:	f7fb fee2 	bl	8000fec <__aeabi_fcmplt>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <planner_recalculate+0x64>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	e00e      	b.n	8005252 <planner_recalculate+0x82>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	4619      	mov	r1, r3
 800523a:	4618      	mov	r0, r3
 800523c:	f7fb fc30 	bl	8000aa0 <__addsf3>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fb fd30 	bl	8000cb0 <__aeabi_fmul>
 8005250:	4603      	mov	r3, r0
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6153      	str	r3, [r2, #20]

  block_index = plan_prev_block_index(block_index);
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ffa6 	bl	80051aa <plan_prev_block_index>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 8005262:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <planner_recalculate+0x220>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	429a      	cmp	r2, r3
 800526a:	d151      	bne.n	8005310 <planner_recalculate+0x140>
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800526c:	4b62      	ldr	r3, [pc, #392]	; (80053f8 <planner_recalculate+0x228>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	429a      	cmp	r2, r3
 8005274:	d151      	bne.n	800531a <planner_recalculate+0x14a>
 8005276:	f003 fded 	bl	8008e54 <st_update_plan_block_parameters>
 800527a:	e04e      	b.n	800531a <planner_recalculate+0x14a>
  } else { // Three or more plan-able blocks
    while (block_index != block_buffer_planned) {
      next = current;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60bb      	str	r3, [r7, #8]
      current = &block_buffer[block_index];
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2234      	movs	r2, #52	; 0x34
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	4a5a      	ldr	r2, [pc, #360]	; (80053f4 <planner_recalculate+0x224>)
 800528a:	4413      	add	r3, r2
 800528c:	607b      	str	r3, [r7, #4]
      block_index = plan_prev_block_index(block_index);
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff ff8a 	bl	80051aa <plan_prev_block_index>
 8005296:	4603      	mov	r3, r0
 8005298:	73fb      	strb	r3, [r7, #15]

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800529a:	4b57      	ldr	r3, [pc, #348]	; (80053f8 <planner_recalculate+0x228>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	7bfa      	ldrb	r2, [r7, #15]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d101      	bne.n	80052a8 <planner_recalculate+0xd8>
 80052a4:	f003 fdd6 	bl	8008e54 <st_update_plan_block_parameters>

      // Compute maximum entry speed decelerating over the current block from its exit speed.
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695a      	ldr	r2, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7fb fe90 	bl	8000fd8 <__aeabi_fcmpeq>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d000      	beq.n	80052c0 <planner_recalculate+0xf0>
 80052be:	e027      	b.n	8005310 <planner_recalculate+0x140>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	695c      	ldr	r4, [r3, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	4619      	mov	r1, r3
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fb fbe8 	bl	8000aa0 <__addsf3>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fb fce8 	bl	8000cb0 <__aeabi_fmul>
 80052e0:	4603      	mov	r3, r0
 80052e2:	4619      	mov	r1, r3
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7fb fbdb 	bl	8000aa0 <__addsf3>
 80052ea:	4603      	mov	r3, r0
 80052ec:	603b      	str	r3, [r7, #0]
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	6839      	ldr	r1, [r7, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb fe97 	bl	8001028 <__aeabi_fcmpgt>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <planner_recalculate+0x138>
          current->entry_speed_sqr = entry_speed_sqr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	615a      	str	r2, [r3, #20]
 8005306:	e003      	b.n	8005310 <planner_recalculate+0x140>
        } else {
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	615a      	str	r2, [r3, #20]
    while (block_index != block_buffer_planned) {
 8005310:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <planner_recalculate+0x220>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	7bfa      	ldrb	r2, [r7, #15]
 8005316:	429a      	cmp	r2, r3
 8005318:	d1b0      	bne.n	800527c <planner_recalculate+0xac>
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 800531a:	4b35      	ldr	r3, [pc, #212]	; (80053f0 <planner_recalculate+0x220>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	2334      	movs	r3, #52	; 0x34
 8005322:	fb03 f302 	mul.w	r3, r3, r2
 8005326:	4a33      	ldr	r2, [pc, #204]	; (80053f4 <planner_recalculate+0x224>)
 8005328:	4413      	add	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
  block_index = plan_next_block_index(block_buffer_planned);
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <planner_recalculate+0x220>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff ff27 	bl	8005184 <plan_next_block_index>
 8005336:	4603      	mov	r3, r0
 8005338:	73fb      	strb	r3, [r7, #15]
  while (block_index != block_buffer_head) {
 800533a:	e04d      	b.n	80053d8 <planner_recalculate+0x208>
    current = next;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	607b      	str	r3, [r7, #4]
    next = &block_buffer[block_index];
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2234      	movs	r2, #52	; 0x34
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	4a2a      	ldr	r2, [pc, #168]	; (80053f4 <planner_recalculate+0x224>)
 800534a:	4413      	add	r3, r2
 800534c:	60bb      	str	r3, [r7, #8]

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f7fb fe47 	bl	8000fec <__aeabi_fcmplt>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d025      	beq.n	80053b0 <planner_recalculate+0x1e0>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	695c      	ldr	r4, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4619      	mov	r1, r3
 800536e:	4618      	mov	r0, r3
 8005370:	f7fb fb96 	bl	8000aa0 <__addsf3>
 8005374:	4603      	mov	r3, r0
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f7fb fc96 	bl	8000cb0 <__aeabi_fmul>
 8005384:	4603      	mov	r3, r0
 8005386:	4619      	mov	r1, r3
 8005388:	4620      	mov	r0, r4
 800538a:	f7fb fb89 	bl	8000aa0 <__addsf3>
 800538e:	4603      	mov	r3, r0
 8005390:	603b      	str	r3, [r7, #0]
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7fb fe45 	bl	8001028 <__aeabi_fcmpgt>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <planner_recalculate+0x1e0>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	615a      	str	r2, [r3, #20]
        block_buffer_planned = block_index; // Set optimal plan pointer.
 80053aa:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <planner_recalculate+0x220>)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	7013      	strb	r3, [r2, #0]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f7fb fe0c 	bl	8000fd8 <__aeabi_fcmpeq>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <planner_recalculate+0x1fc>
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <planner_recalculate+0x220>)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	7013      	strb	r3, [r2, #0]
    block_index = plan_next_block_index( block_index );
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fed8 	bl	8005184 <plan_next_block_index>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]
  while (block_index != block_buffer_head) {
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <planner_recalculate+0x21c>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d1ac      	bne.n	800533c <planner_recalculate+0x16c>
 80053e2:	e000      	b.n	80053e6 <planner_recalculate+0x216>
  if (block_index == block_buffer_planned) { return; }
 80053e4:	bf00      	nop
  }
}
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	20000881 	.word	0x20000881
 80053f0:	20000883 	.word	0x20000883
 80053f4:	20000130 	.word	0x20000130
 80053f8:	20000880 	.word	0x20000880

080053fc <plan_reset>:


void plan_reset()
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 8005400:	221c      	movs	r2, #28
 8005402:	2100      	movs	r1, #0
 8005404:	4803      	ldr	r0, [pc, #12]	; (8005414 <plan_reset+0x18>)
 8005406:	f005 f914 	bl	800a632 <memset>
  plan_reset_buffer();
 800540a:	f000 f805 	bl	8005418 <plan_reset_buffer>
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000884 	.word	0x20000884

08005418 <plan_reset_buffer>:


void plan_reset_buffer()
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  block_buffer_tail = 0;
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <plan_reset_buffer+0x24>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
  block_buffer_head = 0; // Empty = tail
 8005422:	4b07      	ldr	r3, [pc, #28]	; (8005440 <plan_reset_buffer+0x28>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <plan_reset_buffer+0x2c>)
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <plan_reset_buffer+0x30>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	20000880 	.word	0x20000880
 8005440:	20000881 	.word	0x20000881
 8005444:	20000882 	.word	0x20000882
 8005448:	20000883 	.word	0x20000883

0800544c <plan_discard_current_block>:


void plan_discard_current_block()
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <plan_discard_current_block+0x40>)
 8005454:	781a      	ldrb	r2, [r3, #0]
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <plan_discard_current_block+0x44>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d012      	beq.n	8005484 <plan_discard_current_block+0x38>
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <plan_discard_current_block+0x44>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe8e 	bl	8005184 <plan_next_block_index>
 8005468:	4603      	mov	r3, r0
 800546a:	71fb      	strb	r3, [r7, #7]
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <plan_discard_current_block+0x44>)
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <plan_discard_current_block+0x48>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d102      	bne.n	800547e <plan_discard_current_block+0x32>
 8005478:	4a06      	ldr	r2, [pc, #24]	; (8005494 <plan_discard_current_block+0x48>)
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	7013      	strb	r3, [r2, #0]
    block_buffer_tail = block_index;
 800547e:	4a04      	ldr	r2, [pc, #16]	; (8005490 <plan_discard_current_block+0x44>)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	7013      	strb	r3, [r2, #0]
  }
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000881 	.word	0x20000881
 8005490:	20000880 	.word	0x20000880
 8005494:	20000883 	.word	0x20000883

08005498 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return(&block_buffer[block_buffer_head]);
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <plan_get_system_motion_block+0x1c>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	2334      	movs	r3, #52	; 0x34
 80054a4:	fb03 f302 	mul.w	r3, r3, r2
 80054a8:	4a03      	ldr	r2, [pc, #12]	; (80054b8 <plan_get_system_motion_block+0x20>)
 80054aa:	4413      	add	r3, r2
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	20000881 	.word	0x20000881
 80054b8:	20000130 	.word	0x20000130

080054bc <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <plan_get_current_block+0x2c>)
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <plan_get_current_block+0x30>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d101      	bne.n	80054d0 <plan_get_current_block+0x14>
 80054cc:	2300      	movs	r3, #0
 80054ce:	e007      	b.n	80054e0 <plan_get_current_block+0x24>
  return(&block_buffer[block_buffer_tail]);
 80054d0:	4b06      	ldr	r3, [pc, #24]	; (80054ec <plan_get_current_block+0x30>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	2334      	movs	r3, #52	; 0x34
 80054d8:	fb03 f302 	mul.w	r3, r3, r2
 80054dc:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <plan_get_current_block+0x34>)
 80054de:	4413      	add	r3, r2
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	20000881 	.word	0x20000881
 80054ec:	20000880 	.word	0x20000880
 80054f0:	20000130 	.word	0x20000130

080054f4 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <plan_get_exec_block_exit_speed_sqr+0x3c>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fe40 	bl	8005184 <plan_next_block_index>
 8005504:	4603      	mov	r3, r0
 8005506:	71fb      	strb	r3, [r7, #7]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <plan_get_exec_block_exit_speed_sqr+0x40>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	79fa      	ldrb	r2, [r7, #7]
 800550e:	429a      	cmp	r2, r3
 8005510:	d102      	bne.n	8005518 <plan_get_exec_block_exit_speed_sqr+0x24>
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e007      	b.n	8005528 <plan_get_exec_block_exit_speed_sqr+0x34>
  return( block_buffer[block_index].entry_speed_sqr );
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	4a07      	ldr	r2, [pc, #28]	; (8005538 <plan_get_exec_block_exit_speed_sqr+0x44>)
 800551c:	2134      	movs	r1, #52	; 0x34
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3314      	adds	r3, #20
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000880 	.word	0x20000880
 8005534:	20000881 	.word	0x20000881
 8005538:	20000130 	.word	0x20000130

0800553c <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  if (block_buffer_tail == next_buffer_head) { return(true); }
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <plan_check_full_buffer+0x20>)
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <plan_check_full_buffer+0x24>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d101      	bne.n	8005550 <plan_check_full_buffer+0x14>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <plan_check_full_buffer+0x16>
  return(false);
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000880 	.word	0x20000880
 8005560:	20000882 	.word	0x20000882

08005564 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  float nominal_speed = block->programmed_rate;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	60fb      	str	r3, [r7, #12]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7c9b      	ldrb	r3, [r3, #18]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d011      	beq.n	80055a2 <plan_compute_profile_nominal_speed+0x3e>
 800557e:	4b22      	ldr	r3, [pc, #136]	; (8005608 <plan_compute_profile_nominal_speed+0xa4>)
 8005580:	7a5b      	ldrb	r3, [r3, #9]
 8005582:	4618      	mov	r0, r3
 8005584:	f7fb fb40 	bl	8000c08 <__aeabi_i2f>
 8005588:	4603      	mov	r3, r0
 800558a:	4920      	ldr	r1, [pc, #128]	; (800560c <plan_compute_profile_nominal_speed+0xa8>)
 800558c:	4618      	mov	r0, r3
 800558e:	f7fb fb8f 	bl	8000cb0 <__aeabi_fmul>
 8005592:	4603      	mov	r3, r0
 8005594:	4619      	mov	r1, r3
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7fb fb8a 	bl	8000cb0 <__aeabi_fmul>
 800559c:	4603      	mov	r3, r0
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e022      	b.n	80055e8 <plan_compute_profile_nominal_speed+0x84>
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7c9b      	ldrb	r3, [r3, #18]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d110      	bne.n	80055d0 <plan_compute_profile_nominal_speed+0x6c>
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <plan_compute_profile_nominal_speed+0xa4>)
 80055b0:	7a1b      	ldrb	r3, [r3, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fb28 	bl	8000c08 <__aeabi_i2f>
 80055b8:	4603      	mov	r3, r0
 80055ba:	4914      	ldr	r1, [pc, #80]	; (800560c <plan_compute_profile_nominal_speed+0xa8>)
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fb fb77 	bl	8000cb0 <__aeabi_fmul>
 80055c2:	4603      	mov	r3, r0
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7fb fb72 	bl	8000cb0 <__aeabi_fmul>
 80055cc:	4603      	mov	r3, r0
 80055ce:	60fb      	str	r3, [r7, #12]
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fb fd08 	bl	8000fec <__aeabi_fcmplt>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <plan_compute_profile_nominal_speed+0x84>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	60fb      	str	r3, [r7, #12]
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
 80055e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7fb fd1b 	bl	8001028 <__aeabi_fcmpgt>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <plan_compute_profile_nominal_speed+0x98>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	e001      	b.n	8005600 <plan_compute_profile_nominal_speed+0x9c>
  return(MINIMUM_FEED_RATE);
 80055fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000f00 	.word	0x20000f00
 800560c:	3c23d70a 	.word	0x3c23d70a

08005610 <plan_compute_profile_parameters>:


// Computes and updates the max entry speed (sqr) of the block, based on the minimum of the junction's
// previous and current nominal speeds and max junction speed.
static void plan_compute_profile_parameters(plan_block_t *block, float nominal_speed, float prev_nominal_speed)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  // Compute the junction maximum entry based on the minimum of the junction speed and neighboring nominal speeds.
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	68b8      	ldr	r0, [r7, #8]
 8005620:	f7fb fd02 	bl	8001028 <__aeabi_fcmpgt>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <plan_compute_profile_parameters+0x2c>
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fb fb3f 	bl	8000cb0 <__aeabi_fmul>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	619a      	str	r2, [r3, #24]
 800563a:	e007      	b.n	800564c <plan_compute_profile_parameters+0x3c>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68b8      	ldr	r0, [r7, #8]
 8005640:	f7fb fb36 	bl	8000cb0 <__aeabi_fmul>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	619a      	str	r2, [r3, #24]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fb fce6 	bl	8001028 <__aeabi_fcmpgt>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d100      	bne.n	8005664 <plan_compute_profile_parameters+0x54>
}
 8005662:	e003      	b.n	800566c <plan_compute_profile_parameters+0x5c>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	619a      	str	r2, [r3, #24]
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <plan_update_velocity_profile_parameters>:


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
  uint8_t block_index = block_buffer_tail;
 800567a:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <plan_update_velocity_profile_parameters+0x5c>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	73fb      	strb	r3, [r7, #15]
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <plan_update_velocity_profile_parameters+0x60>)
 8005682:	60bb      	str	r3, [r7, #8]
  while (block_index != block_buffer_head) {
 8005684:	e017      	b.n	80056b6 <plan_update_velocity_profile_parameters+0x42>
    block = &block_buffer[block_index];
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2234      	movs	r2, #52	; 0x34
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	4a12      	ldr	r2, [pc, #72]	; (80056d8 <plan_update_velocity_profile_parameters+0x64>)
 8005690:	4413      	add	r3, r2
 8005692:	607b      	str	r3, [r7, #4]
    nominal_speed = plan_compute_profile_nominal_speed(block);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff ff65 	bl	8005564 <plan_compute_profile_nominal_speed>
 800569a:	6038      	str	r0, [r7, #0]
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ffb5 	bl	8005610 <plan_compute_profile_parameters>
    prev_nominal_speed = nominal_speed;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	60bb      	str	r3, [r7, #8]
    block_index = plan_next_block_index(block_index);
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fd69 	bl	8005184 <plan_next_block_index>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
  while (block_index != block_buffer_head) {
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <plan_update_velocity_profile_parameters+0x68>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	7bfa      	ldrb	r2, [r7, #15]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1e2      	bne.n	8005686 <plan_update_velocity_profile_parameters+0x12>
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <plan_update_velocity_profile_parameters+0x6c>)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6193      	str	r3, [r2, #24]
}
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000880 	.word	0x20000880
 80056d4:	7f7fffff 	.word	0x7f7fffff
 80056d8:	20000130 	.word	0x20000130
 80056dc:	20000881 	.word	0x20000881
 80056e0:	20000884 	.word	0x20000884

080056e4 <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 80056e4:	b590      	push	{r4, r7, lr}
 80056e6:	b097      	sub	sp, #92	; 0x5c
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 80056ee:	4bb2      	ldr	r3, [pc, #712]	; (80059b8 <plan_buffer_line+0x2d4>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	2334      	movs	r3, #52	; 0x34
 80056f6:	fb03 f302 	mul.w	r3, r3, r2
 80056fa:	4ab0      	ldr	r2, [pc, #704]	; (80059bc <plan_buffer_line+0x2d8>)
 80056fc:	4413      	add	r3, r2
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8005700:	2234      	movs	r2, #52	; 0x34
 8005702:	2100      	movs	r1, #0
 8005704:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005706:	f004 ff94 	bl	800a632 <memset>
  block->condition = pl_data->condition;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	7a1a      	ldrb	r2, [r3, #8]
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	749a      	strb	r2, [r3, #18]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 800571a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571c:	7c9b      	ldrb	r3, [r3, #18]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <plan_buffer_line+0x50>
#ifdef COREXY
    position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
    position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
    position_steps[Z_AXIS] = sys_position[Z_AXIS];
#else
    memcpy(position_steps, sys_position, sizeof(sys_position));
 8005726:	4aa6      	ldr	r2, [pc, #664]	; (80059c0 <plan_buffer_line+0x2dc>)
 8005728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572c:	ca07      	ldmia	r2, {r0, r1, r2}
 800572e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005732:	e005      	b.n	8005740 <plan_buffer_line+0x5c>
#endif
  }
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8005734:	4aa3      	ldr	r2, [pc, #652]	; (80059c4 <plan_buffer_line+0x2e0>)
 8005736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573a:	ca07      	ldmia	r2, {r0, r1, r2}
 800573c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    target_steps[B_MOTOR] = lround(target[B_MOTOR]*settings.steps_per_mm[B_MOTOR]);
    block->steps[A_MOTOR] = labs((target_steps[X_AXIS]-position_steps[X_AXIS]) + (target_steps[Y_AXIS]-position_steps[Y_AXIS]));
    block->steps[B_MOTOR] = labs((target_steps[X_AXIS]-position_steps[X_AXIS]) - (target_steps[Y_AXIS]-position_steps[Y_AXIS]));
  #endif

  for (idx=0; idx<N_AXIS; idx++) {
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005746:	e07f      	b.n	8005848 <plan_buffer_line+0x164>
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8005748:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 800574c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800575c:	4a9a      	ldr	r2, [pc, #616]	; (80059c8 <plan_buffer_line+0x2e4>)
 800575e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005762:	4619      	mov	r1, r3
 8005764:	f7fb faa4 	bl	8000cb0 <__aeabi_fmul>
 8005768:	4603      	mov	r3, r0
 800576a:	4618      	mov	r0, r3
 800576c:	f005 f81e 	bl	800a7ac <lroundf>
 8005770:	4602      	mov	r2, r0
 8005772:	00a3      	lsls	r3, r4, #2
 8005774:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005778:	440b      	add	r3, r1
 800577a:	f843 2c28 	str.w	r2, [r3, #-40]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800577e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800578c:	440b      	add	r3, r1
 800578e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8005792:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800579c:	4403      	add	r3, r0
 800579e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80057a2:	1acb      	subs	r3, r1, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bfb8      	it	lt
 80057a8:	425b      	neglt	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80057b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	bf38      	it	cc
 80057c4:	461a      	movcc	r2, r3
 80057c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c8:	60da      	str	r2, [r3, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80057ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80057d4:	4413      	add	r3, r2
 80057d6:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80057da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80057e4:	440b      	add	r3, r1
 80057e6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fb fa0b 	bl	8000c08 <__aeabi_i2f>
 80057f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057f6:	4a74      	ldr	r2, [pc, #464]	; (80059c8 <plan_buffer_line+0x2e4>)
 80057f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fc:	4619      	mov	r1, r3
 80057fe:	f7fb fb0b 	bl	8000e18 <__aeabi_fdiv>
 8005802:	4603      	mov	r3, r0
 8005804:	64bb      	str	r3, [r7, #72]	; 0x48
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8005806:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005810:	4413      	add	r3, r2
 8005812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005814:	f843 2c40 	str.w	r2, [r3, #-64]

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800581e:	f7fb fbe5 	bl	8000fec <__aeabi_fcmplt>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <plan_buffer_line+0x15a>
 8005828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582a:	8a1a      	ldrh	r2, [r3, #16]
 800582c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005830:	4966      	ldr	r1, [pc, #408]	; (80059cc <plan_buffer_line+0x2e8>)
 8005832:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005836:	4313      	orrs	r3, r2
 8005838:	b29a      	uxth	r2, r3
 800583a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583c:	821a      	strh	r2, [r3, #16]
  for (idx=0; idx<N_AXIS; idx++) {
 800583e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005842:	3301      	adds	r3, #1
 8005844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800584c:	2b02      	cmp	r3, #2
 800584e:	f67f af7b 	bls.w	8005748 <plan_buffer_line+0x64>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8005852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <plan_buffer_line+0x17a>
 800585a:	2300      	movs	r3, #0
 800585c:	e151      	b.n	8005b02 <plan_buffer_line+0x41e>

  // Calculate the unit vector of the line move and the block maximum feed rate and acceleration scaled
  // down such that no individual axes maximum values are exceeded with respect to the line direction.
  // NOTE: This calculation assumes all axes are orthogonal (Cartesian) and works with ABC-axes,
  // if they are also orthogonal/independent. Operates on the absolute value of the unit vector.
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 800585e:	f107 0318 	add.w	r3, r7, #24
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fbe7 	bl	8005036 <convert_delta_vector_to_unit_vector>
 8005868:	4602      	mov	r2, r0
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	621a      	str	r2, [r3, #32]
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	4619      	mov	r1, r3
 8005874:	4856      	ldr	r0, [pc, #344]	; (80059d0 <plan_buffer_line+0x2ec>)
 8005876:	f7ff fc37 	bl	80050e8 <limit_value_by_axis_maximum>
 800587a:	4602      	mov	r2, r0
 800587c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587e:	61da      	str	r2, [r3, #28]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8005880:	f107 0318 	add.w	r3, r7, #24
 8005884:	4619      	mov	r1, r3
 8005886:	4853      	ldr	r0, [pc, #332]	; (80059d4 <plan_buffer_line+0x2f0>)
 8005888:	f7ff fc2e 	bl	80050e8 <limit_value_by_axis_maximum>
 800588c:	4602      	mov	r2, r0
 800588e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005890:	629a      	str	r2, [r3, #40]	; 0x28

  // Store programmed rate.
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	7c9b      	ldrb	r3, [r3, #18]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d004      	beq.n	80058a8 <plan_buffer_line+0x1c4>
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80058a6:	e015      	b.n	80058d4 <plan_buffer_line+0x1f0>
  else { 
    block->programmed_rate = pl_data->feed_rate;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	7c9b      	ldrb	r3, [r3, #18]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <plan_buffer_line+0x1f0>
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fb f9f2 	bl	8000cb0 <__aeabi_fmul>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  // TODO: Need to check this method handling zero junction speeds when starting from rest.
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 80058d4:	4b38      	ldr	r3, [pc, #224]	; (80059b8 <plan_buffer_line+0x2d4>)
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <plan_buffer_line+0x2f4>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d005      	beq.n	80058ec <plan_buffer_line+0x208>
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	7c9b      	ldrb	r3, [r3, #18]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <plan_buffer_line+0x21a>

    // Initialize block entry speed as zero. Assume it will be starting from rest. Planner will correct this later.
    // If system motion, the system motion block always is assumed to start from rest and end at a complete stop.
    block->entry_speed_sqr = 0.0f;
 80058ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	615a      	str	r2, [r3, #20]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 80058f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24
 80058fc:	e0ce      	b.n	8005a9c <plan_buffer_line+0x3b8>
    // changed dynamically during operation nor can the line move geometry. This must be kept in
    // memory in the event of a feedrate override changing the nominal speeds of blocks, which can
    // change the overall maximum entry speed conditions of all blocks.

    float junction_unit_vec[N_AXIS];
    float junction_cos_theta = 0.0f;
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
    for (idx=0; idx<N_AXIS; idx++) {
 8005904:	2300      	movs	r3, #0
 8005906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800590a:	e03a      	b.n	8005982 <plan_buffer_line+0x29e>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 800590c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005910:	4a2c      	ldr	r2, [pc, #176]	; (80059c4 <plan_buffer_line+0x2e0>)
 8005912:	3302      	adds	r3, #2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005924:	440b      	add	r3, r1
 8005926:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f7fb f9bf 	bl	8000cb0 <__aeabi_fmul>
 8005932:	4603      	mov	r3, r0
 8005934:	4619      	mov	r1, r3
 8005936:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005938:	f7fb f8b0 	bl	8000a9c <__aeabi_fsub>
 800593c:	4603      	mov	r3, r0
 800593e:	653b      	str	r3, [r7, #80]	; 0x50
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8005940:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8005944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800594e:	4413      	add	r3, r2
 8005950:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8005954:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005958:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <plan_buffer_line+0x2e0>)
 800595a:	3302      	adds	r3, #2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4619      	mov	r1, r3
 8005964:	f7fb f89a 	bl	8000a9c <__aeabi_fsub>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	00a3      	lsls	r3, r4, #2
 800596e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005972:	440b      	add	r3, r1
 8005974:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (idx=0; idx<N_AXIS; idx++) {
 8005978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800597c:	3301      	adds	r3, #1
 800597e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005982:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005986:	2b02      	cmp	r3, #2
 8005988:	d9c0      	bls.n	800590c <plan_buffer_line+0x228>
    }

    // NOTE: Computed without any expensive trig, sin() or acos(), by trig half angle identity of cos(theta).
    if (junction_cos_theta > 0.999999f) {
 800598a:	4914      	ldr	r1, [pc, #80]	; (80059dc <plan_buffer_line+0x2f8>)
 800598c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800598e:	f7fb fb4b 	bl	8001028 <__aeabi_fcmpgt>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <plan_buffer_line+0x2be>
      //  For a 0 degree acute junction, just set minimum junction speed.
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8005998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
 80059a0:	e07c      	b.n	8005a9c <plan_buffer_line+0x3b8>
    } else {
      if (junction_cos_theta < -0.999999f) {
 80059a2:	490f      	ldr	r1, [pc, #60]	; (80059e0 <plan_buffer_line+0x2fc>)
 80059a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059a6:	f7fb fb21 	bl	8000fec <__aeabi_fcmplt>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <plan_buffer_line+0x304>
        // Junction is a straight line or 180 degrees. Junction speed is infinite.
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <plan_buffer_line+0x300>)
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24
 80059b6:	e071      	b.n	8005a9c <plan_buffer_line+0x3b8>
 80059b8:	20000881 	.word	0x20000881
 80059bc:	20000130 	.word	0x20000130
 80059c0:	20000f24 	.word	0x20000f24
 80059c4:	20000884 	.word	0x20000884
 80059c8:	200010b4 	.word	0x200010b4
 80059cc:	0800b9ec 	.word	0x0800b9ec
 80059d0:	200010cc 	.word	0x200010cc
 80059d4:	200010c0 	.word	0x200010c0
 80059d8:	20000880 	.word	0x20000880
 80059dc:	3f7fffef 	.word	0x3f7fffef
 80059e0:	bf7fffef 	.word	0xbf7fffef
 80059e4:	7f7fffff 	.word	0x7f7fffff
      } else {
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 80059e8:	f107 030c 	add.w	r3, r7, #12
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fb22 	bl	8005036 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	4619      	mov	r1, r3
 80059f8:	4844      	ldr	r0, [pc, #272]	; (8005b0c <plan_buffer_line+0x428>)
 80059fa:	f7ff fb75 	bl	80050e8 <limit_value_by_axis_maximum>
 80059fe:	6478      	str	r0, [r7, #68]	; 0x44
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8005a00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a06:	f7fb f849 	bl	8000a9c <__aeabi_fsub>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fb f94d 	bl	8000cb0 <__aeabi_fmul>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f004 ff3d 	bl	800a898 <sqrtf>
 8005a1e:	6438      	str	r0, [r7, #64]	; 0x40
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8005a20:	4b3b      	ldr	r3, [pc, #236]	; (8005b10 <plan_buffer_line+0x42c>)
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fb f942 	bl	8000cb0 <__aeabi_fmul>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fb f93d 	bl	8000cb0 <__aeabi_fmul>
 8005a36:	4603      	mov	r3, r0
 8005a38:	461c      	mov	r4, r3
 8005a3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a3c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a40:	f7fb f82c 	bl	8000a9c <__aeabi_fsub>
 8005a44:	4603      	mov	r3, r0
 8005a46:	4619      	mov	r1, r3
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7fb f9e5 	bl	8000e18 <__aeabi_fdiv>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fb fac9 	bl	8000fec <__aeabi_fcmplt>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <plan_buffer_line+0x382>
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	e018      	b.n	8005a98 <plan_buffer_line+0x3b4>
 8005a66:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <plan_buffer_line+0x42c>)
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fb f91f 	bl	8000cb0 <__aeabi_fmul>
 8005a72:	4603      	mov	r3, r0
 8005a74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fb f91a 	bl	8000cb0 <__aeabi_fmul>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461c      	mov	r4, r3
 8005a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a86:	f7fb f809 	bl	8000a9c <__aeabi_fsub>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f7fb f9c2 	bl	8000e18 <__aeabi_fdiv>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
  }

  // Block system motion from updating this data to ensure next g-code motion is computed correctly.
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9e:	7c9b      	ldrb	r3, [r3, #18]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d12b      	bne.n	8005b00 <plan_buffer_line+0x41c>
    float nominal_speed = plan_compute_profile_nominal_speed(block);
 8005aa8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005aaa:	f7ff fd5b 	bl	8005564 <plan_compute_profile_nominal_speed>
 8005aae:	63f8      	str	r0, [r7, #60]	; 0x3c
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <plan_buffer_line+0x430>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ab8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005aba:	f7ff fda9 	bl	8005610 <plan_compute_profile_parameters>
    pl.previous_nominal_speed = nominal_speed;
 8005abe:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <plan_buffer_line+0x430>)
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac2:	6193      	str	r3, [r2, #24]

    // Update previous path unit_vector and planner position.
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8005ac4:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <plan_buffer_line+0x430>)
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	f107 0218 	add.w	r2, r7, #24
 8005acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <plan_buffer_line+0x430>)
 8005ad4:	461c      	mov	r4, r3
 8005ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // New block is all set. Update buffer head and next buffer head indices.
    block_buffer_head = next_buffer_head;
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <plan_buffer_line+0x434>)
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <plan_buffer_line+0x438>)
 8005ae8:	701a      	strb	r2, [r3, #0]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8005aea:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <plan_buffer_line+0x438>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fb48 	bl	8005184 <plan_next_block_index>
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <plan_buffer_line+0x434>)
 8005afa:	701a      	strb	r2, [r3, #0]

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
 8005afc:	f7ff fb68 	bl	80051d0 <planner_recalculate>
  }
  return(PLAN_OK);
 8005b00:	2301      	movs	r3, #1
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	375c      	adds	r7, #92	; 0x5c
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	200010cc 	.word	0x200010cc
 8005b10:	200010b4 	.word	0x200010b4
 8005b14:	20000884 	.word	0x20000884
 8005b18:	20000882 	.word	0x20000882
 8005b1c:	20000881 	.word	0x20000881

08005b20 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
  // TODO: For motor configurations not in the same coordinate frame as the machine position,
  // this function needs to be updated to accomodate the difference.
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 8005b26:	2300      	movs	r3, #0
 8005b28:	71fb      	strb	r3, [r7, #7]
 8005b2a:	e00a      	b.n	8005b42 <plan_sync_position+0x22>
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	79fa      	ldrb	r2, [r7, #7]
 8005b30:	4908      	ldr	r1, [pc, #32]	; (8005b54 <plan_sync_position+0x34>)
 8005b32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b36:	4908      	ldr	r1, [pc, #32]	; (8005b58 <plan_sync_position+0x38>)
 8005b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx=0; idx<N_AXIS; idx++) {
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	71fb      	strb	r3, [r7, #7]
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d9f1      	bls.n	8005b2c <plan_sync_position+0xc>
    #endif
  }
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000f24 	.word	0x20000f24
 8005b58:	20000884 	.word	0x20000884

08005b5c <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <plan_get_block_buffer_available+0x3c>)
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <plan_get_block_buffer_available+0x40>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d308      	bcc.n	8005b7e <plan_get_block_buffer_available+0x22>
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <plan_get_block_buffer_available+0x40>)
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <plan_get_block_buffer_available+0x3c>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	3323      	adds	r3, #35	; 0x23
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e007      	b.n	8005b8e <plan_get_block_buffer_available+0x32>
  return((block_buffer_tail-block_buffer_head-1));
 8005b7e:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <plan_get_block_buffer_available+0x40>)
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <plan_get_block_buffer_available+0x3c>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000881 	.word	0x20000881
 8005b9c:	20000880 	.word	0x20000880

08005ba0 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8005ba4:	f003 f956 	bl	8008e54 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8005ba8:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <plan_cycle_reinitialize+0x18>)
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <plan_cycle_reinitialize+0x1c>)
 8005bae:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
 8005bb0:	f7ff fb0e 	bl	80051d0 <planner_recalculate>
}
 8005bb4:	bf00      	nop
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000880 	.word	0x20000880
 8005bbc:	20000883 	.word	0x20000883

08005bc0 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  while (*s)
 8005bc8:	e006      	b.n	8005bd8 <printString+0x18>
    serial_write(*s++);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 fdb8 	bl	8007748 <serial_write>
  while (*s)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f4      	bne.n	8005bca <printString+0xa>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <print_uint8_base10>:
// }


// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t digit_a = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]
  uint8_t digit_b = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73bb      	strb	r3, [r7, #14]
  if (n >= 100) { // 100-255
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	2b63      	cmp	r3, #99	; 0x63
 8005bfe:	d912      	bls.n	8005c26 <print_uint8_base10+0x3e>
    digit_a = '0' + n % 10;
 8005c00:	79fa      	ldrb	r2, [r7, #7]
 8005c02:	4b20      	ldr	r3, [pc, #128]	; (8005c84 <print_uint8_base10+0x9c>)
 8005c04:	fba3 1302 	umull	r1, r3, r3, r2
 8005c08:	08d9      	lsrs	r1, r3, #3
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	3330      	adds	r3, #48	; 0x30
 8005c18:	73fb      	strb	r3, [r7, #15]
    n /= 10;
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <print_uint8_base10+0x9c>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	08db      	lsrs	r3, r3, #3
 8005c24:	71fb      	strb	r3, [r7, #7]
  }
  if (n >= 10) { // 10-99
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d912      	bls.n	8005c52 <print_uint8_base10+0x6a>
    digit_b = '0' + n % 10;
 8005c2c:	79fa      	ldrb	r2, [r7, #7]
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <print_uint8_base10+0x9c>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	08d9      	lsrs	r1, r3, #3
 8005c36:	460b      	mov	r3, r1
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	3330      	adds	r3, #48	; 0x30
 8005c44:	73bb      	strb	r3, [r7, #14]
    n /= 10;
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	4a0e      	ldr	r2, [pc, #56]	; (8005c84 <print_uint8_base10+0x9c>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	71fb      	strb	r3, [r7, #7]
  }
  serial_write('0' + n);
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	3330      	adds	r3, #48	; 0x30
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 fd75 	bl	8007748 <serial_write>
  if (digit_b) { serial_write(digit_b); }
 8005c5e:	7bbb      	ldrb	r3, [r7, #14]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <print_uint8_base10+0x84>
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fd6e 	bl	8007748 <serial_write>
  if (digit_a) { serial_write(digit_a); }
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <print_uint8_base10+0x92>
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fd67 	bl	8007748 <serial_write>
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	cccccccd 	.word	0xcccccccd

08005c88 <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  if (n < 0) {
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fb f9a7 	bl	8000fec <__aeabi_fcmplt>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <printFloat+0x2a>
    serial_write('-');
 8005ca4:	202d      	movs	r0, #45	; 0x2d
 8005ca6:	f001 fd4f 	bl	8007748 <serial_write>
    n = -n;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005cb0:	607b      	str	r3, [r7, #4]
  }

  uint8_t decimals = decimal_places;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	77fb      	strb	r3, [r7, #31]
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8005cb6:	e008      	b.n	8005cca <printFloat+0x42>
    n *= 100;
 8005cb8:	493c      	ldr	r1, [pc, #240]	; (8005dac <printFloat+0x124>)
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fa fff8 	bl	8000cb0 <__aeabi_fmul>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	607b      	str	r3, [r7, #4]
    decimals -= 2;
 8005cc4:	7ffb      	ldrb	r3, [r7, #31]
 8005cc6:	3b02      	subs	r3, #2
 8005cc8:	77fb      	strb	r3, [r7, #31]
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8005cca:	7ffb      	ldrb	r3, [r7, #31]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d8f3      	bhi.n	8005cb8 <printFloat+0x30>
  }
  if (decimals) { n *= 10; }
 8005cd0:	7ffb      	ldrb	r3, [r7, #31]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <printFloat+0x5a>
 8005cd6:	4936      	ldr	r1, [pc, #216]	; (8005db0 <printFloat+0x128>)
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7fa ffe9 	bl	8000cb0 <__aeabi_fmul>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	607b      	str	r3, [r7, #4]
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005ce2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fa feda 	bl	8000aa0 <__addsf3>
 8005cec:	4603      	mov	r3, r0
 8005cee:	607b      	str	r3, [r7, #4]

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	77bb      	strb	r3, [r7, #30]
  uint32_t a = (long)n;
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fb f9b7 	bl	8001068 <__aeabi_f2iz>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	61bb      	str	r3, [r7, #24]
  while(a > 0) {
 8005cfe:	e01b      	b.n	8005d38 <printFloat+0xb0>
    buf[i++] = (a % 10) + '0'; // Get digit
 8005d00:	7fbb      	ldrb	r3, [r7, #30]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	77ba      	strb	r2, [r7, #30]
 8005d06:	4618      	mov	r0, r3
 8005d08:	69b9      	ldr	r1, [r7, #24]
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <printFloat+0x12c>)
 8005d0c:	fba3 2301 	umull	r2, r3, r3, r1
 8005d10:	08da      	lsrs	r2, r3, #3
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	1aca      	subs	r2, r1, r3
 8005d1c:	b2d3      	uxtb	r3, r2
 8005d1e:	3330      	adds	r3, #48	; 0x30
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	f107 0320 	add.w	r3, r7, #32
 8005d26:	4403      	add	r3, r0
 8005d28:	f803 2c18 	strb.w	r2, [r3, #-24]
    a /= 10;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	4a21      	ldr	r2, [pc, #132]	; (8005db4 <printFloat+0x12c>)
 8005d30:	fba2 2303 	umull	r2, r3, r2, r3
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	61bb      	str	r3, [r7, #24]
  while(a > 0) {
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e0      	bne.n	8005d00 <printFloat+0x78>
  }
  while (i < decimal_places) {
 8005d3e:	e008      	b.n	8005d52 <printFloat+0xca>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005d40:	7fbb      	ldrb	r3, [r7, #30]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	77ba      	strb	r2, [r7, #30]
 8005d46:	f107 0220 	add.w	r2, r7, #32
 8005d4a:	4413      	add	r3, r2
 8005d4c:	2230      	movs	r2, #48	; 0x30
 8005d4e:	f803 2c18 	strb.w	r2, [r3, #-24]
  while (i < decimal_places) {
 8005d52:	7fba      	ldrb	r2, [r7, #30]
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d3f2      	bcc.n	8005d40 <printFloat+0xb8>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005d5a:	7fba      	ldrb	r2, [r7, #30]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d11d      	bne.n	8005d9e <printFloat+0x116>
    buf[i++] = '0';
 8005d62:	7fbb      	ldrb	r3, [r7, #30]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	77ba      	strb	r2, [r7, #30]
 8005d68:	f107 0220 	add.w	r2, r7, #32
 8005d6c:	4413      	add	r3, r2
 8005d6e:	2230      	movs	r2, #48	; 0x30
 8005d70:	f803 2c18 	strb.w	r2, [r3, #-24]
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8005d74:	e013      	b.n	8005d9e <printFloat+0x116>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005d76:	7fba      	ldrb	r2, [r7, #30]
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d102      	bne.n	8005d84 <printFloat+0xfc>
 8005d7e:	202e      	movs	r0, #46	; 0x2e
 8005d80:	f001 fce2 	bl	8007748 <serial_write>
    serial_write(buf[i-1]);
 8005d84:	7fbb      	ldrb	r3, [r7, #30]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	f107 0220 	add.w	r2, r7, #32
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fcd8 	bl	8007748 <serial_write>
  for (; i > 0; i--) {
 8005d98:	7fbb      	ldrb	r3, [r7, #30]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	77bb      	strb	r3, [r7, #30]
 8005d9e:	7fbb      	ldrb	r3, [r7, #30]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e8      	bne.n	8005d76 <printFloat+0xee>
  }
}
 8005da4:	bf00      	nop
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	42c80000 	.word	0x42c80000
 8005db0:	41200000 	.word	0x41200000
 8005db4:	cccccccd 	.word	0xcccccccd

08005db8 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <printFloat_CoordValue+0x3c>)
 8005dc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <printFloat_CoordValue+0x2a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8005dce:	490a      	ldr	r1, [pc, #40]	; (8005df8 <printFloat_CoordValue+0x40>)
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fa ff6d 	bl	8000cb0 <__aeabi_fmul>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2104      	movs	r1, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff ff54 	bl	8005c88 <printFloat>
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 8005de0:	e003      	b.n	8005dea <printFloat_CoordValue+0x32>
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
 8005de2:	2103      	movs	r1, #3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff4f 	bl	8005c88 <printFloat>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	200010b4 	.word	0x200010b4
 8005df8:	3d21428b 	.word	0x3d21428b

08005dfc <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <printFloat_RateValue+0x3c>)
 8005e06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <printFloat_RateValue+0x2a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8005e12:	490a      	ldr	r1, [pc, #40]	; (8005e3c <printFloat_RateValue+0x40>)
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fa ff4b 	bl	8000cb0 <__aeabi_fmul>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff ff32 	bl	8005c88 <printFloat>
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8005e24:	e003      	b.n	8005e2e <printFloat_RateValue+0x32>
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
 8005e26:	2100      	movs	r1, #0
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff2d 	bl	8005c88 <printFloat>
}
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	200010b4 	.word	0x200010b4
 8005e3c:	3d21428b 	.word	0x3d21428b

08005e40 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8005e46:	2101      	movs	r1, #1
 8005e48:	2008      	movs	r0, #8
 8005e4a:	f7fb fd93 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	71bb      	strb	r3, [r7, #6]
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005e52:	2348      	movs	r3, #72	; 0x48
 8005e54:	71fb      	strb	r3, [r7, #7]
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 8005e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4804      	ldr	r0, [pc, #16]	; (8005e74 <probe_init+0x34>)
 8005e62:	f7fb fb1d 	bl	80014a0 <GPIO_Init>
#endif
  probe_configure_invert_mask(false); // Initialize invert mask.
 8005e66:	2000      	movs	r0, #0
 8005e68:	f000 f806 	bl	8005e78 <probe_configure_invert_mask>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40010c00 	.word	0x40010c00

08005e78 <probe_configure_invert_mask>:

// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	71fb      	strb	r3, [r7, #7]
  probe_invert_mask = 0; // Initialize as zero.
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <probe_configure_invert_mask+0x48>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	801a      	strh	r2, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005e88:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <probe_configure_invert_mask+0x4c>)
 8005e8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	db06      	blt.n	8005ea2 <probe_configure_invert_mask+0x2a>
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <probe_configure_invert_mask+0x48>)
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <probe_configure_invert_mask+0x48>)
 8005ea0:	801a      	strh	r2, [r3, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d006      	beq.n	8005eb6 <probe_configure_invert_mask+0x3e>
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <probe_configure_invert_mask+0x48>)
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <probe_configure_invert_mask+0x48>)
 8005eb4:	801a      	strh	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	20000f32 	.word	0x20000f32
 8005ec4:	200010b4 	.word	0x200010b4

08005ec8 <probe_get_state>:


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 8005ecc:	4807      	ldr	r0, [pc, #28]	; (8005eec <probe_get_state+0x24>)
 8005ece:	f7fb fba3 	bl	8001618 <GPIO_ReadInputData>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <probe_get_state+0x28>)
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
#endif
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	40010c00 	.word	0x40010c00
 8005ef0:	20000f32 	.word	0x20000f32

08005ef4 <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0

	if (probe_get_state()) {
 8005ef8:	f7ff ffe6 	bl	8005ec8 <probe_get_state>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <probe_state_monitor+0x2e>
    sys_probe_state = PROBE_OFF;
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <probe_state_monitor+0x34>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <probe_state_monitor+0x38>)
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <probe_state_monitor+0x3c>)
 8005f0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005f0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 8005f12:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <probe_state_monitor+0x40>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <probe_state_monitor+0x40>)
 8005f20:	701a      	strb	r2, [r3, #0]
  }
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000f16 	.word	0x20000f16
 8005f2c:	20000f18 	.word	0x20000f18
 8005f30:	20000f24 	.word	0x20000f24
 8005f34:	20000f15 	.word	0x20000f15

08005f38 <protocol_main_loop>:

/*
  GRBL PRIMARY LOOP:
*/
void protocol_main_loop()
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
  // Perform some machine checks to make sure everything is good to go.
  #ifdef CHECK_LIMITS_AT_INIT
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 8005f3e:	4b6e      	ldr	r3, [pc, #440]	; (80060f8 <protocol_main_loop+0x1c0>)
 8005f40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <protocol_main_loop+0x2a>
      if (limits_get_state()) {
 8005f4c:	f7fd ff6e 	bl	8003e2c <limits_get_state>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <protocol_main_loop+0x2a>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 8005f56:	4b69      	ldr	r3, [pc, #420]	; (80060fc <protocol_main_loop+0x1c4>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	701a      	strb	r2, [r3, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 8005f5c:	2007      	movs	r0, #7
 8005f5e:	f000 fdf7 	bl	8006b50 <report_feedback_message>
    }
  #endif
  // Check for and report alarm state after a reset, error, or an initial power up.
  // NOTE: Sleep mode disables the stepper drivers and position can't be guaranteed.
  // Re-initialize the sleep state as an ALARM mode to ensure user homes or acknowledges.
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 8005f62:	4b66      	ldr	r3, [pc, #408]	; (80060fc <protocol_main_loop+0x1c4>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d006      	beq.n	8005f7c <protocol_main_loop+0x44>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 8005f6e:	2002      	movs	r0, #2
 8005f70:	f000 fdee 	bl	8006b50 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 8005f74:	4b61      	ldr	r3, [pc, #388]	; (80060fc <protocol_main_loop+0x1c4>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	e014      	b.n	8005fa6 <protocol_main_loop+0x6e>
  } else {
    // Check if the safety door is open.
    sys.state = STATE_IDLE;
 8005f7c:	4b5f      	ldr	r3, [pc, #380]	; (80060fc <protocol_main_loop+0x1c4>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
    if (system_check_safety_door_ajar()) {
 8005f82:	f003 fea9 	bl	8009cd8 <system_check_safety_door_ajar>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <protocol_main_loop+0x68>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8005f8c:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <protocol_main_loop+0x1c8>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f043 0320 	orr.w	r3, r3, #32
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	4b59      	ldr	r3, [pc, #356]	; (8006100 <protocol_main_loop+0x1c8>)
 8005f9a:	701a      	strb	r2, [r3, #0]
      protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 8005f9c:	f000 f8d8 	bl	8006150 <protocol_execute_realtime>
    }
    // All systems go!
    system_execute_startup(line); // Execute startup script.
 8005fa0:	4858      	ldr	r0, [pc, #352]	; (8006104 <protocol_main_loop+0x1cc>)
 8005fa2:	f003 fea3 	bl	8009cec <system_execute_startup>
  // ---------------------------------------------------------------------------------
  // Primary loop! Upon a system abort, this exits back to main() to reset the system.
  // This is also where Grbl idles while waiting for something to do.
  // ---------------------------------------------------------------------------------

  uint8_t line_flags = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t char_counter = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	71bb      	strb	r3, [r7, #6]
  uint8_t c;
  for (;;) {
#ifdef DEBUG_TIMING_WITH_FLOOD_AND_MIST
	  toggleFloodBit(); // added by MS for debug
 8005fae:	f000 fcf9 	bl	80069a4 <toggleFloodBit>
#endif
	  // Process one line of incoming serial data, as the data becomes available. Performs an
    // initial filtering by removing spaces and comments and capitalizing all letters.
    while((c = serial_read()) != SERIAL_NO_DATA) {
 8005fb2:	e08a      	b.n	80060ca <protocol_main_loop+0x192>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 8005fb4:	797b      	ldrb	r3, [r7, #5]
 8005fb6:	2b0a      	cmp	r3, #10
 8005fb8:	d002      	beq.n	8005fc0 <protocol_main_loop+0x88>
 8005fba:	797b      	ldrb	r3, [r7, #5]
 8005fbc:	2b0d      	cmp	r3, #13
 8005fbe:	d13f      	bne.n	8006040 <protocol_main_loop+0x108>

        protocol_execute_realtime(); // Runtime command check point.
 8005fc0:	f000 f8c6 	bl	8006150 <protocol_execute_realtime>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <protocol_main_loop+0x1c4>)
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 808f 	bne.w	80060ec <protocol_main_loop+0x1b4>

        line[char_counter] = 0; // Set string termination character.
 8005fce:	79bb      	ldrb	r3, [r7, #6]
 8005fd0:	4a4c      	ldr	r2, [pc, #304]	; (8006104 <protocol_main_loop+0x1cc>)
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	54d1      	strb	r1, [r2, r3]
#ifdef LEDBLINK
				LedBlink();
 8005fd6:	f7fe fb1d 	bl	8004614 <LedBlink>
				#ifdef REPORT_ECHO_LINE_RECEIVED
          report_echo_line_received(line);
        #endif

        // Direct and execute one line of formatted input, and report status of execution.
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <protocol_main_loop+0xb4>
          // Report line overflow error.
          report_status_message(STATUS_OVERFLOW);
 8005fe4:	200b      	movs	r0, #11
 8005fe6:	f000 fd7d 	bl	8006ae4 <report_status_message>
 8005fea:	e024      	b.n	8006036 <protocol_main_loop+0xfe>
        } else if (line[0] == 0) {
 8005fec:	4b45      	ldr	r3, [pc, #276]	; (8006104 <protocol_main_loop+0x1cc>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <protocol_main_loop+0xc4>
          // Empty or comment line. For syncing purposes.
          report_status_message(STATUS_OK);
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f000 fd75 	bl	8006ae4 <report_status_message>
 8005ffa:	e01c      	b.n	8006036 <protocol_main_loop+0xfe>
        } else if (line[0] == '$') {
 8005ffc:	4b41      	ldr	r3, [pc, #260]	; (8006104 <protocol_main_loop+0x1cc>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b24      	cmp	r3, #36	; 0x24
 8006002:	d107      	bne.n	8006014 <protocol_main_loop+0xdc>
          // Grbl '$' system command
          report_status_message(system_execute_line(line));
 8006004:	483f      	ldr	r0, [pc, #252]	; (8006104 <protocol_main_loop+0x1cc>)
 8006006:	f003 fea1 	bl	8009d4c <system_execute_line>
 800600a:	4603      	mov	r3, r0
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fd69 	bl	8006ae4 <report_status_message>
 8006012:	e010      	b.n	8006036 <protocol_main_loop+0xfe>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8006014:	4b39      	ldr	r3, [pc, #228]	; (80060fc <protocol_main_loop+0x1c4>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <protocol_main_loop+0xf0>
          // Everything else is gcode. Block if in alarm or jog mode.
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006020:	2009      	movs	r0, #9
 8006022:	f000 fd5f 	bl	8006ae4 <report_status_message>
 8006026:	e006      	b.n	8006036 <protocol_main_loop+0xfe>
        } else {
          // Parse and execute g-code block.
          report_status_message(gc_execute_line(line));
 8006028:	4836      	ldr	r0, [pc, #216]	; (8006104 <protocol_main_loop+0x1cc>)
 800602a:	f7fc f971 	bl	8002310 <gc_execute_line>
 800602e:	4603      	mov	r3, r0
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fd57 	bl	8006ae4 <report_status_message>
        }

        // Reset tracking data for next line.
        line_flags = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	71fb      	strb	r3, [r7, #7]
        char_counter = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	71bb      	strb	r3, [r7, #6]
 800603e:	e044      	b.n	80060ca <protocol_main_loop+0x192>

      } else {

        if (line_flags) {
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <protocol_main_loop+0x128>
          // Throw away all (except EOL) comment characters and overflow characters.
          if (c == ')') {
 8006046:	797b      	ldrb	r3, [r7, #5]
 8006048:	2b29      	cmp	r3, #41	; 0x29
 800604a:	d13e      	bne.n	80060ca <protocol_main_loop+0x192>
            // End of '()' comment. Resume line allowed.
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d039      	beq.n	80060ca <protocol_main_loop+0x192>
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	f023 0302 	bic.w	r3, r3, #2
 800605c:	71fb      	strb	r3, [r7, #7]
 800605e:	e034      	b.n	80060ca <protocol_main_loop+0x192>
          }
        } else {
          if (c <= ' ') {
 8006060:	797b      	ldrb	r3, [r7, #5]
 8006062:	2b20      	cmp	r3, #32
 8006064:	d931      	bls.n	80060ca <protocol_main_loop+0x192>
            // Throw away whitepace and control characters
          } else if (c == '/') {
 8006066:	797b      	ldrb	r3, [r7, #5]
 8006068:	2b2f      	cmp	r3, #47	; 0x2f
 800606a:	d02e      	beq.n	80060ca <protocol_main_loop+0x192>
            // Block delete NOT SUPPORTED. Ignore character.
            // NOTE: If supported, would simply need to check the system if block delete is enabled.
          } else if (c == '(') {
 800606c:	797b      	ldrb	r3, [r7, #5]
 800606e:	2b28      	cmp	r3, #40	; 0x28
 8006070:	d104      	bne.n	800607c <protocol_main_loop+0x144>
            // Enable comments flag and ignore all characters until ')' or EOL.
            // NOTE: This doesn't follow the NIST definition exactly, but is good enough for now.
            // In the future, we could simply remove the items within the comments, but retain the
            // comment control characters, so that the g-code parser can error-check it.
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	71fb      	strb	r3, [r7, #7]
 800607a:	e026      	b.n	80060ca <protocol_main_loop+0x192>
          } else if (c == ';') {
 800607c:	797b      	ldrb	r3, [r7, #5]
 800607e:	2b3b      	cmp	r3, #59	; 0x3b
 8006080:	d104      	bne.n	800608c <protocol_main_loop+0x154>
            // NOTE: ';' comment to EOL is a LinuxCNC definition. Not NIST.
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	f043 0304 	orr.w	r3, r3, #4
 8006088:	71fb      	strb	r3, [r7, #7]
 800608a:	e01e      	b.n	80060ca <protocol_main_loop+0x192>
            // Program start-end percent sign NOT SUPPORTED.
            // NOTE: This maybe installed to tell Grbl when a program is running vs manual input,
            // where, during a program, the system auto-cycle start will continue to execute
            // everything until the next '%' sign. This will help fix resuming issues with certain
            // functions that empty the planner buffer to execute its task on-time.
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 800608c:	79bb      	ldrb	r3, [r7, #6]
 800608e:	2b4e      	cmp	r3, #78	; 0x4e
 8006090:	d904      	bls.n	800609c <protocol_main_loop+0x164>
            // Detect line buffer overflow and set flag.
            line_flags |= LINE_FLAG_OVERFLOW;
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	71fb      	strb	r3, [r7, #7]
 800609a:	e016      	b.n	80060ca <protocol_main_loop+0x192>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 800609c:	797b      	ldrb	r3, [r7, #5]
 800609e:	2b60      	cmp	r3, #96	; 0x60
 80060a0:	d90c      	bls.n	80060bc <protocol_main_loop+0x184>
 80060a2:	797b      	ldrb	r3, [r7, #5]
 80060a4:	2b7a      	cmp	r3, #122	; 0x7a
 80060a6:	d809      	bhi.n	80060bc <protocol_main_loop+0x184>
            line[char_counter++] = c-'a'+'A';
 80060a8:	79bb      	ldrb	r3, [r7, #6]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	71ba      	strb	r2, [r7, #6]
 80060ae:	461a      	mov	r2, r3
 80060b0:	797b      	ldrb	r3, [r7, #5]
 80060b2:	3b20      	subs	r3, #32
 80060b4:	b2d9      	uxtb	r1, r3
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <protocol_main_loop+0x1cc>)
 80060b8:	5499      	strb	r1, [r3, r2]
 80060ba:	e006      	b.n	80060ca <protocol_main_loop+0x192>
          } else {
            line[char_counter++] = c;
 80060bc:	79bb      	ldrb	r3, [r7, #6]
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	71ba      	strb	r2, [r7, #6]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4a0f      	ldr	r2, [pc, #60]	; (8006104 <protocol_main_loop+0x1cc>)
 80060c6:	797b      	ldrb	r3, [r7, #5]
 80060c8:	5453      	strb	r3, [r2, r1]
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80060ca:	f001 fb95 	bl	80077f8 <serial_read>
 80060ce:	4603      	mov	r3, r0
 80060d0:	717b      	strb	r3, [r7, #5]
 80060d2:	797b      	ldrb	r3, [r7, #5]
 80060d4:	2bff      	cmp	r3, #255	; 0xff
 80060d6:	f47f af6d 	bne.w	8005fb4 <protocol_main_loop+0x7c>
    }

    // If there are no more characters in the serial read buffer to be processed and executed,
    // this indicates that g-code streaming has either filled the planner buffer or has
    // completed. In either case, auto-cycle start, if enabled, any queued moves.
    protocol_auto_cycle_start();
 80060da:	f000 f82d 	bl	8006138 <protocol_auto_cycle_start>

    protocol_execute_realtime();  // Runtime command check point.
 80060de:	f000 f837 	bl	8006150 <protocol_execute_realtime>

    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <protocol_main_loop+0x1c4>)
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <protocol_main_loop+0x1b8>
	  toggleFloodBit(); // added by MS for debug
 80060ea:	e760      	b.n	8005fae <protocol_main_loop+0x76>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80060ec:	bf00      	nop
 80060ee:	e000      	b.n	80060f2 <protocol_main_loop+0x1ba>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80060f0:	bf00      	nop
  }

  return; /* Never reached */
}
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	200010b4 	.word	0x200010b4
 80060fc:	20000f00 	.word	0x20000f00
 8006100:	20000f15 	.word	0x20000f15
 8006104:	200008a0 	.word	0x200008a0

08006108 <protocol_buffer_synchronize>:


// Block until all buffered steps are executed or in a cycle state. Works with feed hold
// during a synchronize call, if it should happen. Also, waits for clean cycle end.
void protocol_buffer_synchronize()
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  // If system is queued, ensure cycle resumes if the auto start flag is present.
  protocol_auto_cycle_start();
 800610c:	f000 f814 	bl	8006138 <protocol_auto_cycle_start>
  do {
    protocol_execute_realtime();   // Check and execute run-time commands
 8006110:	f000 f81e 	bl	8006150 <protocol_execute_realtime>
    if (sys.abort) { return; } // Check for system abort
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <protocol_buffer_synchronize+0x2c>)
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <protocol_buffer_synchronize+0x28>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 800611c:	f7ff f9ce 	bl	80054bc <plan_get_current_block>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f4      	bne.n	8006110 <protocol_buffer_synchronize+0x8>
 8006126:	4b03      	ldr	r3, [pc, #12]	; (8006134 <protocol_buffer_synchronize+0x2c>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b08      	cmp	r3, #8
 800612c:	d0f0      	beq.n	8006110 <protocol_buffer_synchronize+0x8>
 800612e:	e000      	b.n	8006132 <protocol_buffer_synchronize+0x2a>
    if (sys.abort) { return; } // Check for system abort
 8006130:	bf00      	nop
}
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000f00 	.word	0x20000f00

08006138 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800613c:	f7ff f9be 	bl	80054bc <plan_get_current_block>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <protocol_auto_cycle_start+0x14>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8006146:	2002      	movs	r0, #2
 8006148:	f004 f8ec 	bl	800a324 <system_set_exec_state_flag>
  }
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}

08006150 <protocol_execute_realtime>:
// also provides a controlled way to execute certain tasks without having two or more instances of
// the same task, such as the planner recalculating the buffer upon a feedhold or overrides.
// NOTE: The sys_rt_exec_state variable flags are set by any process, step or serial interrupts, pinouts,
// limit switches, or the main program.
void protocol_execute_realtime()
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
	protocol_exec_rt_system();
 8006154:	f000 f80a 	bl	800616c <protocol_exec_rt_system>

  if (sys.suspend) {
 8006158:	4b03      	ldr	r3, [pc, #12]	; (8006168 <protocol_execute_realtime+0x18>)
 800615a:	789b      	ldrb	r3, [r3, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <protocol_execute_realtime+0x14>
	  protocol_exec_rt_suspend();
 8006160:	f000 fad8 	bl	8006714 <protocol_exec_rt_suspend>

  }
}
 8006164:	bf00      	nop
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000f00 	.word	0x20000f00

0800616c <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8006172:	4b9d      	ldr	r3, [pc, #628]	; (80063e8 <protocol_exec_rt_system+0x27c>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) { // Enter only if any bit flag is true
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <protocol_exec_rt_system+0x4a>
    // System alarm. Everything has shutdown by something that has gone severely wrong. Report
    // the source of the error to the user. If critical, Grbl disables by entering an infinite
    // loop until system reset/abort.
	sys.state = STATE_ALARM; // Set system alarm state
 800617e:	4b9b      	ldr	r3, [pc, #620]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]
    report_alarm_message(rt_exec);
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fcca 	bl	8006b20 <report_alarm_message>
    // Halt everything upon a critical event flag. Currently hard and soft limits flag this.
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d002      	beq.n	8006198 <protocol_exec_rt_system+0x2c>
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d10c      	bne.n	80061b2 <protocol_exec_rt_system+0x46>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8006198:	2001      	movs	r0, #1
 800619a:	f000 fcd9 	bl	8006b50 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800619e:	2010      	movs	r0, #16
 80061a0:	f004 f8d6 	bl	800a350 <system_clear_exec_state_flag>
        // Block everything, except reset and status reports, until user issues reset or power
        // cycles. Hard limits typically occur while unattended or not paying attention. Gives
        // the user and a GUI time to do what is needed before resetting, like killing the
        // incoming stream. The same could be said about soft limits. While the position is not
        // lost, continued streaming could cause a serious crash if by chance it gets executed.
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80061a4:	4b92      	ldr	r3, [pc, #584]	; (80063f0 <protocol_exec_rt_system+0x284>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f8      	beq.n	80061a4 <protocol_exec_rt_system+0x38>
    }
    system_clear_exec_alarm(); // Clear alarm
 80061b2:	f004 f8fb 	bl	800a3ac <system_clear_exec_alarm>
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 80061b6:	4b8e      	ldr	r3, [pc, #568]	; (80063f0 <protocol_exec_rt_system+0x284>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) {
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 817d 	beq.w	80064be <protocol_exec_rt_system+0x352>
    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <protocol_exec_rt_system+0x6a>
      sys.abort = true;  // Only place this is set true.
 80061ce:	4b87      	ldr	r3, [pc, #540]	; (80063ec <protocol_exec_rt_system+0x280>)
 80061d0:	2201      	movs	r2, #1
 80061d2:	705a      	strb	r2, [r3, #1]
      return; // Nothing else to do but exit.
 80061d4:	e297      	b.n	8006706 <protocol_exec_rt_system+0x59a>
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <protocol_exec_rt_system+0x7e>
      report_realtime_status();
 80061e0:	f001 f81e 	bl	8007220 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80061e4:	2001      	movs	r0, #1
 80061e6:	f004 f8b3 	bl	800a350 <system_clear_exec_state_flag>
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	f003 03e8 	and.w	r3, r3, #232	; 0xe8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8095 	beq.w	8006320 <protocol_exec_rt_system+0x1b4>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80061f6:	4b7d      	ldr	r3, [pc, #500]	; (80063ec <protocol_exec_rt_system+0x280>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d179      	bne.n	80062f6 <protocol_exec_rt_system+0x18a>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8006202:	4b7a      	ldr	r3, [pc, #488]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d019      	beq.n	8006242 <protocol_exec_rt_system+0xd6>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 800620e:	4b77      	ldr	r3, [pc, #476]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006210:	789b      	ldrb	r3, [r3, #2]
 8006212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <protocol_exec_rt_system+0xd6>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 800621a:	f002 fe1b 	bl	8008e54 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800621e:	4b73      	ldr	r3, [pc, #460]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006220:	2202      	movs	r2, #2
 8006222:	711a      	strb	r2, [r3, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8006224:	4b71      	ldr	r3, [pc, #452]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b20      	cmp	r3, #32
 800622a:	d10a      	bne.n	8006242 <protocol_exec_rt_system+0xd6>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 800622c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db06      	blt.n	8006242 <protocol_exec_rt_system+0xd6>
 8006234:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006236:	789b      	ldrb	r3, [r3, #2]
 8006238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800623c:	b2da      	uxtb	r2, r3
 800623e:	4b6b      	ldr	r3, [pc, #428]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006240:	709a      	strb	r2, [r3, #2]
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8006242:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <protocol_exec_rt_system+0xe4>
 800624a:	4b68      	ldr	r3, [pc, #416]	; (80063ec <protocol_exec_rt_system+0x280>)
 800624c:	2201      	movs	r2, #1
 800624e:	709a      	strb	r2, [r3, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <protocol_exec_rt_system+0x108>
          // MOTION_CANCEL only occurs during a CYCLE, but a HOLD and SAFETY_DOOR may been initiated beforehand
          // to hold the CYCLE. Motion cancel is valid for a single planner block motion only, while jog cancel
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800625a:	4b64      	ldr	r3, [pc, #400]	; (80063ec <protocol_exec_rt_system+0x280>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <protocol_exec_rt_system+0x108>
 8006266:	4b61      	ldr	r3, [pc, #388]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006268:	789b      	ldrb	r3, [r3, #2]
 800626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626e:	b2da      	uxtb	r2, r3
 8006270:	4b5e      	ldr	r3, [pc, #376]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006272:	709a      	strb	r2, [r3, #2]
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d008      	beq.n	8006290 <protocol_exec_rt_system+0x124>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800627e:	4b5b      	ldr	r3, [pc, #364]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <protocol_exec_rt_system+0x124>
 800628a:	4b58      	ldr	r3, [pc, #352]	; (80063ec <protocol_exec_rt_system+0x280>)
 800628c:	2210      	movs	r2, #16
 800628e:	701a      	strb	r2, [r3, #0]
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02d      	beq.n	80062f6 <protocol_exec_rt_system+0x18a>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 800629a:	2006      	movs	r0, #6
 800629c:	f000 fc58 	bl	8006b50 <report_feedback_message>
          // If jogging, block safety door methods until jog cancel is complete. Just flag that it happened.
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80062a0:	4b52      	ldr	r3, [pc, #328]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062a2:	789b      	ldrb	r3, [r3, #2]
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db1e      	blt.n	80062e8 <protocol_exec_rt_system+0x17c>
            // Check if the safety re-opened during a restore parking motion only. Ignore if
            // already retracting, parked or in sleep state.
            if (sys.state == STATE_SAFETY_DOOR) {
 80062aa:	4b50      	ldr	r3, [pc, #320]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d113      	bne.n	80062da <protocol_exec_rt_system+0x16e>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80062b2:	4b4e      	ldr	r3, [pc, #312]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062b4:	789b      	ldrb	r3, [r3, #2]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <protocol_exec_rt_system+0x16e>
                    st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
                    sys.step_control = (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION);
                    sys.suspend &= ~(SUSPEND_HOLD_COMPLETE);
                  } // else NO_MOTION is active.
                #endif
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80062be:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062c0:	789b      	ldrb	r3, [r3, #2]
 80062c2:	f023 031c 	bic.w	r3, r3, #28
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	4b48      	ldr	r3, [pc, #288]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062ca:	709a      	strb	r2, [r3, #2]
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80062cc:	4b47      	ldr	r3, [pc, #284]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062ce:	789b      	ldrb	r3, [r3, #2]
 80062d0:	f043 0302 	orr.w	r3, r3, #2
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	4b45      	ldr	r3, [pc, #276]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062d8:	709a      	strb	r2, [r3, #2]
              }
            }
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 80062da:	4b44      	ldr	r3, [pc, #272]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b80      	cmp	r3, #128	; 0x80
 80062e0:	d002      	beq.n	80062e8 <protocol_exec_rt_system+0x17c>
 80062e2:	4b42      	ldr	r3, [pc, #264]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062e4:	2240      	movs	r2, #64	; 0x40
 80062e6:	701a      	strb	r2, [r3, #0]
          }
          // NOTE: This flag doesn't change when the door closes, unlike sys.state. Ensures any parking motions
          // are executed if the door switch closes and the state returns to HOLD.
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 80062e8:	4b40      	ldr	r3, [pc, #256]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062ea:	789b      	ldrb	r3, [r3, #2]
 80062ec:	f043 0320 	orr.w	r3, r3, #32
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <protocol_exec_rt_system+0x280>)
 80062f4:	709a      	strb	r2, [r3, #2]
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 80062f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da0d      	bge.n	800631a <protocol_exec_rt_system+0x1ae>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80062fe:	4b3b      	ldr	r3, [pc, #236]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d106      	bne.n	8006314 <protocol_exec_rt_system+0x1a8>
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006308:	789b      	ldrb	r3, [r3, #2]
 800630a:	f043 0305 	orr.w	r3, r3, #5
 800630e:	b2da      	uxtb	r2, r3
 8006310:	4b36      	ldr	r3, [pc, #216]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006312:	709a      	strb	r2, [r3, #2]
        sys.state = STATE_SLEEP; 
 8006314:	4b35      	ldr	r3, [pc, #212]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	701a      	strb	r2, [r3, #0]
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 800631a:	20e8      	movs	r0, #232	; 0xe8
 800631c:	f004 f818 	bl	800a350 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d06d      	beq.n	8006406 <protocol_exec_rt_system+0x29a>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 0368 	and.w	r3, r3, #104	; 0x68
 8006330:	2b00      	cmp	r3, #0
 8006332:	d165      	bne.n	8006400 <protocol_exec_rt_system+0x294>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006334:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d11c      	bne.n	8006376 <protocol_exec_rt_system+0x20a>
 800633c:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <protocol_exec_rt_system+0x280>)
 800633e:	789b      	ldrb	r3, [r3, #2]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d116      	bne.n	8006376 <protocol_exec_rt_system+0x20a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <protocol_exec_rt_system+0x280>)
 800634a:	789b      	ldrb	r3, [r3, #2]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <protocol_exec_rt_system+0x1f0>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e00c      	b.n	8006376 <protocol_exec_rt_system+0x20a>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 800635c:	4b23      	ldr	r3, [pc, #140]	; (80063ec <protocol_exec_rt_system+0x280>)
 800635e:	789b      	ldrb	r3, [r3, #2]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d006      	beq.n	8006376 <protocol_exec_rt_system+0x20a>
            // Flag to re-energize powered components and restore original position, if disabled by SAFETY_DOOR.
            // NOTE: For a safety door to resume, the switch must be closed, as indicated by HOLD state, and
            // the retraction execution is complete, which implies the initial feed hold is not active. To
            // restore normal operation, the restore procedures must be initiated by the following flag. Once,
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8006368:	4b20      	ldr	r3, [pc, #128]	; (80063ec <protocol_exec_rt_system+0x280>)
 800636a:	789b      	ldrb	r3, [r3, #2]
 800636c:	f043 0308 	orr.w	r3, r3, #8
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006374:	709a      	strb	r2, [r3, #2]
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <protocol_exec_rt_system+0x22a>
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03a      	beq.n	8006400 <protocol_exec_rt_system+0x294>
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <protocol_exec_rt_system+0x280>)
 800638c:	789b      	ldrb	r3, [r3, #2]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d034      	beq.n	8006400 <protocol_exec_rt_system+0x294>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8006396:	4b15      	ldr	r3, [pc, #84]	; (80063ec <protocol_exec_rt_system+0x280>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b10      	cmp	r3, #16
 800639c:	d10b      	bne.n	80063b6 <protocol_exec_rt_system+0x24a>
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063a0:	7adb      	ldrb	r3, [r3, #11]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <protocol_exec_rt_system+0x24a>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063a8:	7adb      	ldrb	r3, [r3, #11]
 80063aa:	f043 0308 	orr.w	r3, r3, #8
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063b2:	72da      	strb	r2, [r3, #11]
 80063b4:	e024      	b.n	8006400 <protocol_exec_rt_system+0x294>
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	711a      	strb	r2, [r3, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80063bc:	f7ff f87e 	bl	80054bc <plan_get_current_block>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <protocol_exec_rt_system+0x288>
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063c8:	789b      	ldrb	r3, [r3, #2]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d110      	bne.n	80063f4 <protocol_exec_rt_system+0x288>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80063d2:	4b06      	ldr	r3, [pc, #24]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	709a      	strb	r2, [r3, #2]
              sys.state = STATE_CYCLE;
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <protocol_exec_rt_system+0x280>)
 80063da:	2208      	movs	r2, #8
 80063dc:	701a      	strb	r2, [r3, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80063de:	f002 fd6f 	bl	8008ec0 <st_prep_buffer>
              st_wake_up();
 80063e2:	f002 f965 	bl	80086b0 <st_wake_up>
 80063e6:	e00b      	b.n	8006400 <protocol_exec_rt_system+0x294>
 80063e8:	20000f30 	.word	0x20000f30
 80063ec:	20000f00 	.word	0x20000f00
 80063f0:	20000f15 	.word	0x20000f15
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80063f4:	4bb6      	ldr	r3, [pc, #728]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	709a      	strb	r2, [r3, #2]
              sys.state = STATE_IDLE;
 80063fa:	4bb5      	ldr	r3, [pc, #724]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8006400:	2002      	movs	r0, #2
 8006402:	f003 ffa5 	bl	800a350 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d056      	beq.n	80064be <protocol_exec_rt_system+0x352>
      // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
      // realtime command execution in the main program, ensuring that the planner re-plans safely.
      // NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
      // cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
      // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006410:	4baf      	ldr	r3, [pc, #700]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01f      	beq.n	800645c <protocol_exec_rt_system+0x2f0>
 800641c:	4bac      	ldr	r3, [pc, #688]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11b      	bne.n	800645c <protocol_exec_rt_system+0x2f0>
 8006424:	4baa      	ldr	r3, [pc, #680]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006426:	789b      	ldrb	r3, [r3, #2]
 8006428:	b25b      	sxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	db16      	blt.n	800645c <protocol_exec_rt_system+0x2f0>
        // Hold complete. Set to indicate ready to resume.  Remain in HOLD or DOOR states until user
        // has issued a resume command or reset.
        plan_cycle_reinitialize();
 800642e:	f7ff fbb7 	bl	8005ba0 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8006432:	4ba7      	ldr	r3, [pc, #668]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006434:	791b      	ldrb	r3, [r3, #4]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d006      	beq.n	800644c <protocol_exec_rt_system+0x2e0>
 800643e:	4ba4      	ldr	r3, [pc, #656]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006440:	789b      	ldrb	r3, [r3, #2]
 8006442:	f043 0301 	orr.w	r3, r3, #1
 8006446:	b2da      	uxtb	r2, r3
 8006448:	4ba1      	ldr	r3, [pc, #644]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800644a:	709a      	strb	r2, [r3, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800644c:	4ba0      	ldr	r3, [pc, #640]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800644e:	791b      	ldrb	r3, [r3, #4]
 8006450:	f023 0306 	bic.w	r3, r3, #6
 8006454:	b2da      	uxtb	r2, r3
 8006456:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006458:	711a      	strb	r2, [r3, #4]
 800645a:	e02d      	b.n	80064b8 <protocol_exec_rt_system+0x34c>
      } else {
        // Motion complete. Includes CYCLE/JOG/HOMING states and jog cancel/motion cancel/soft limit events.
        // NOTE: Motion and jog cancel both immediately return to idle after the hold completes.
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 800645c:	4b9c      	ldr	r3, [pc, #624]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800645e:	789b      	ldrb	r3, [r3, #2]
 8006460:	b25b      	sxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	da0a      	bge.n	800647c <protocol_exec_rt_system+0x310>

        	sys.step_control = STEP_CONTROL_NORMAL_OP;
 8006466:	4b9a      	ldr	r3, [pc, #616]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006468:	2200      	movs	r2, #0
 800646a:	711a      	strb	r2, [r3, #4]
          plan_reset();
 800646c:	f7fe ffc6 	bl	80053fc <plan_reset>
          st_reset();
 8006470:	f002 fc04 	bl	8008c7c <st_reset>
          gc_sync_position();
 8006474:	f7fb ff40 	bl	80022f8 <gc_sync_position>
          plan_sync_position();
 8006478:	f7ff fb52 	bl	8005b20 <plan_sync_position>
        }
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 800647c:	4b94      	ldr	r3, [pc, #592]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800647e:	789b      	ldrb	r3, [r3, #2]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d011      	beq.n	80064ac <protocol_exec_rt_system+0x340>
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006488:	4b91      	ldr	r3, [pc, #580]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800648a:	789b      	ldrb	r3, [r3, #2]
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006494:	709a      	strb	r2, [r3, #2]
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8006496:	4b8e      	ldr	r3, [pc, #568]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006498:	789b      	ldrb	r3, [r3, #2]
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	4b8b      	ldr	r3, [pc, #556]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80064a2:	709a      	strb	r2, [r3, #2]
          sys.state = STATE_SAFETY_DOOR;
 80064a4:	4b8a      	ldr	r3, [pc, #552]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e005      	b.n	80064b8 <protocol_exec_rt_system+0x34c>
        } else {
          sys.suspend = SUSPEND_DISABLE;
 80064ac:	4b88      	ldr	r3, [pc, #544]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	709a      	strb	r2, [r3, #2]
          sys.state = STATE_IDLE;
 80064b2:	4b87      	ldr	r3, [pc, #540]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80064b8:	2004      	movs	r0, #4
 80064ba:	f003 ff49 	bl	800a350 <system_clear_exec_state_flag>
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 80064be:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <protocol_exec_rt_system+0x568>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) {
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <protocol_exec_rt_system+0x426>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 80064ca:	f003 ffa9 	bl	800a420 <system_clear_exec_motion_overrides>

    uint8_t new_f_override =  sys.f_override;
 80064ce:	4b80      	ldr	r3, [pc, #512]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80064d0:	7a1b      	ldrb	r3, [r3, #8]
 80064d2:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <protocol_exec_rt_system+0x376>
 80064de:	2364      	movs	r3, #100	; 0x64
 80064e0:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <protocol_exec_rt_system+0x386>
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	330a      	adds	r3, #10
 80064f0:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 80064f2:	78fb      	ldrb	r3, [r7, #3]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <protocol_exec_rt_system+0x396>
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	3b0a      	subs	r3, #10
 8006500:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <protocol_exec_rt_system+0x3a6>
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	3301      	adds	r3, #1
 8006510:	71fb      	strb	r3, [r7, #7]
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <protocol_exec_rt_system+0x3b6>
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	3b01      	subs	r3, #1
 8006520:	71fb      	strb	r3, [r7, #7]
    new_f_override = min(new_f_override,MAX_FEED_RATE_OVERRIDE);
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	2bc8      	cmp	r3, #200	; 0xc8
 8006526:	bf28      	it	cs
 8006528:	23c8      	movcs	r3, #200	; 0xc8
 800652a:	71fb      	strb	r3, [r7, #7]
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b0a      	cmp	r3, #10
 8006530:	bf38      	it	cc
 8006532:	230a      	movcc	r3, #10
 8006534:	71fb      	strb	r3, [r7, #7]

    uint8_t new_r_override = sys.r_override;
 8006536:	4b66      	ldr	r3, [pc, #408]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006538:	7a5b      	ldrb	r3, [r3, #9]
 800653a:	71bb      	strb	r3, [r7, #6]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <protocol_exec_rt_system+0x3de>
 8006546:	2364      	movs	r3, #100	; 0x64
 8006548:	71bb      	strb	r3, [r7, #6]
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <protocol_exec_rt_system+0x3ec>
 8006554:	2332      	movs	r3, #50	; 0x32
 8006556:	71bb      	strb	r3, [r7, #6]
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8006558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800655c:	2b00      	cmp	r3, #0
 800655e:	da01      	bge.n	8006564 <protocol_exec_rt_system+0x3f8>
 8006560:	2319      	movs	r3, #25
 8006562:	71bb      	strb	r3, [r7, #6]

    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006564:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006566:	7a1b      	ldrb	r3, [r3, #8]
 8006568:	79fa      	ldrb	r2, [r7, #7]
 800656a:	429a      	cmp	r2, r3
 800656c:	d104      	bne.n	8006578 <protocol_exec_rt_system+0x40c>
 800656e:	4b58      	ldr	r3, [pc, #352]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006570:	7a5b      	ldrb	r3, [r3, #9]
 8006572:	79ba      	ldrb	r2, [r7, #6]
 8006574:	429a      	cmp	r2, r3
 8006576:	d00c      	beq.n	8006592 <protocol_exec_rt_system+0x426>
      sys.f_override = new_f_override;
 8006578:	4a55      	ldr	r2, [pc, #340]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	7213      	strb	r3, [r2, #8]
      sys.r_override = new_r_override;
 800657e:	4a54      	ldr	r2, [pc, #336]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006580:	79bb      	ldrb	r3, [r7, #6]
 8006582:	7253      	strb	r3, [r2, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006584:	4b52      	ldr	r3, [pc, #328]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006586:	2200      	movs	r2, #0
 8006588:	731a      	strb	r2, [r3, #12]
      plan_update_velocity_profile_parameters();
 800658a:	f7ff f873 	bl	8005674 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800658e:	f7ff fb07 	bl	8005ba0 <plan_cycle_reinitialize>
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8006592:	4b51      	ldr	r3, [pc, #324]	; (80066d8 <protocol_exec_rt_system+0x56c>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	70fb      	strb	r3, [r7, #3]
  if (rt_exec) {
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80ab 	beq.w	80066f6 <protocol_exec_rt_system+0x58a>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80065a0:	f003 ff4c 	bl	800a43c <system_clear_exec_accessory_overrides>

    // NOTE: Unlike motion overrides, spindle overrides do not require a planner reinitialization.
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80065a4:	4b4a      	ldr	r3, [pc, #296]	; (80066d0 <protocol_exec_rt_system+0x564>)
 80065a6:	7a9b      	ldrb	r3, [r3, #10]
 80065a8:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <protocol_exec_rt_system+0x44c>
 80065b4:	2364      	movs	r3, #100	; 0x64
 80065b6:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <protocol_exec_rt_system+0x45c>
 80065c2:	797b      	ldrb	r3, [r7, #5]
 80065c4:	330a      	adds	r3, #10
 80065c6:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <protocol_exec_rt_system+0x46c>
 80065d2:	797b      	ldrb	r3, [r7, #5]
 80065d4:	3b0a      	subs	r3, #10
 80065d6:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <protocol_exec_rt_system+0x47c>
 80065e2:	797b      	ldrb	r3, [r7, #5]
 80065e4:	3301      	adds	r3, #1
 80065e6:	717b      	strb	r3, [r7, #5]
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <protocol_exec_rt_system+0x48c>
 80065f2:	797b      	ldrb	r3, [r7, #5]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	717b      	strb	r3, [r7, #5]
    last_s_override = min(last_s_override,MAX_SPINDLE_SPEED_OVERRIDE);
 80065f8:	797b      	ldrb	r3, [r7, #5]
 80065fa:	2bc8      	cmp	r3, #200	; 0xc8
 80065fc:	bf28      	it	cs
 80065fe:	23c8      	movcs	r3, #200	; 0xc8
 8006600:	717b      	strb	r3, [r7, #5]
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8006602:	797b      	ldrb	r3, [r7, #5]
 8006604:	2b0a      	cmp	r3, #10
 8006606:	bf38      	it	cc
 8006608:	230a      	movcc	r3, #10
 800660a:	717b      	strb	r3, [r7, #5]

    if (last_s_override != sys.spindle_speed_ovr) {
 800660c:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800660e:	7a9b      	ldrb	r3, [r3, #10]
 8006610:	797a      	ldrb	r2, [r7, #5]
 8006612:	429a      	cmp	r2, r3
 8006614:	d00c      	beq.n	8006630 <protocol_exec_rt_system+0x4c4>
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006616:	4b2e      	ldr	r3, [pc, #184]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006618:	791b      	ldrb	r3, [r3, #4]
 800661a:	f043 0308 	orr.w	r3, r3, #8
 800661e:	b2da      	uxtb	r2, r3
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006622:	711a      	strb	r2, [r3, #4]
      sys.spindle_speed_ovr = last_s_override;
 8006624:	4a2a      	ldr	r2, [pc, #168]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006626:	797b      	ldrb	r3, [r7, #5]
 8006628:	7293      	strb	r3, [r2, #10]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800662a:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800662c:	2200      	movs	r2, #0
 800662e:	731a      	strb	r2, [r3, #12]
    }

    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <protocol_exec_rt_system+0x500>
      // Spindle stop override allowed only while in HOLD state.
      // NOTE: Report counters are set in spindle_set_state() when spindle stop is executed.
      if (sys.state == STATE_HOLD) {
 800663a:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b10      	cmp	r3, #16
 8006640:	d114      	bne.n	800666c <protocol_exec_rt_system+0x500>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006642:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006644:	7adb      	ldrb	r3, [r3, #11]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d103      	bne.n	8006652 <protocol_exec_rt_system+0x4e6>
 800664a:	4b21      	ldr	r3, [pc, #132]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800664c:	2202      	movs	r2, #2
 800664e:	72da      	strb	r2, [r3, #11]
 8006650:	e00c      	b.n	800666c <protocol_exec_rt_system+0x500>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006654:	7adb      	ldrb	r3, [r3, #11]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <protocol_exec_rt_system+0x500>
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006660:	7adb      	ldrb	r3, [r3, #11]
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	b2da      	uxtb	r2, r3
 8006668:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <protocol_exec_rt_system+0x564>)
 800666a:	72da      	strb	r2, [r3, #11]
      }
    }

    // NOTE: Since coolant state always performs a planner sync whenever it changes, the current
    // run state can be determined by checking the parser state.
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d03f      	beq.n	80066f6 <protocol_exec_rt_system+0x58a>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <protocol_exec_rt_system+0x51e>
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <protocol_exec_rt_system+0x564>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f003 0318 	and.w	r3, r3, #24
 8006686:	2b00      	cmp	r3, #0
 8006688:	d035      	beq.n	80066f6 <protocol_exec_rt_system+0x58a>
        uint8_t coolant_state = gc_state.modal.coolant;
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <protocol_exec_rt_system+0x570>)
 800668c:	7a1b      	ldrb	r3, [r3, #8]
 800668e:	713b      	strb	r3, [r7, #4]
        #ifdef ENABLE_M7
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006694:	2b00      	cmp	r3, #0
 8006696:	da0c      	bge.n	80066b2 <protocol_exec_rt_system+0x546>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8006698:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	da04      	bge.n	80066aa <protocol_exec_rt_system+0x53e>
 80066a0:	793b      	ldrb	r3, [r7, #4]
 80066a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a6:	713b      	strb	r3, [r7, #4]
 80066a8:	e003      	b.n	80066b2 <protocol_exec_rt_system+0x546>
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 80066aa:	793b      	ldrb	r3, [r7, #4]
 80066ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066b0:	713b      	strb	r3, [r7, #4]
          }
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d015      	beq.n	80066e8 <protocol_exec_rt_system+0x57c>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 80066bc:	793b      	ldrb	r3, [r7, #4]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00c      	beq.n	80066e0 <protocol_exec_rt_system+0x574>
 80066c6:	793b      	ldrb	r3, [r7, #4]
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	713b      	strb	r3, [r7, #4]
 80066ce:	e00b      	b.n	80066e8 <protocol_exec_rt_system+0x57c>
 80066d0:	20000f00 	.word	0x20000f00
 80066d4:	20000efc 	.word	0x20000efc
 80066d8:	20000f14 	.word	0x20000f14
 80066dc:	20000e78 	.word	0x20000e78
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 80066e0:	793b      	ldrb	r3, [r7, #4]
 80066e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e6:	713b      	strb	r3, [r7, #4]
          }
        #else
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
        #endif
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 80066e8:	793b      	ldrb	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fb fc90 	bl	8002010 <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 80066f0:	4a06      	ldr	r2, [pc, #24]	; (800670c <protocol_exec_rt_system+0x5a0>)
 80066f2:	793b      	ldrb	r3, [r7, #4]
 80066f4:	7213      	strb	r3, [r2, #8]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <protocol_exec_rt_system+0x5a4>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <protocol_exec_rt_system+0x59a>
    st_prep_buffer();
 8006702:	f002 fbdd 	bl	8008ec0 <st_prep_buffer>
  }

}
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000e78 	.word	0x20000e78
 8006710:	20000f00 	.word	0x20000f00

08006714 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 800671a:	f7fe fecf 	bl	80054bc <plan_get_current_block>
 800671e:	6078      	str	r0, [r7, #4]
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <protocol_exec_rt_suspend+0x26>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8006726:	4b9c      	ldr	r3, [pc, #624]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 8006728:	7a5a      	ldrb	r2, [r3, #9]
 800672a:	4b9b      	ldr	r3, [pc, #620]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 800672c:	7a1b      	ldrb	r3, [r3, #8]
 800672e:	4313      	orrs	r3, r2
 8006730:	73fb      	strb	r3, [r7, #15]
      restore_spindle_speed = gc_state.spindle_speed;
 8006732:	4b99      	ldr	r3, [pc, #612]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	e005      	b.n	8006746 <protocol_exec_rt_suspend+0x32>
    } else {
      restore_condition = block->condition;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	7c9b      	ldrb	r3, [r3, #18]
 800673e:	73fb      	strb	r3, [r7, #15]
      restore_spindle_speed = block->spindle_speed;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	60bb      	str	r3, [r7, #8]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8006746:	4b95      	ldr	r3, [pc, #596]	; (800699c <protocol_exec_rt_suspend+0x288>)
 8006748:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8117 	beq.w	8006984 <protocol_exec_rt_suspend+0x270>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8006756:	2020      	movs	r0, #32
 8006758:	f003 fe4c 	bl	800a3f4 <system_set_exec_accessory_override_flag>
  #else
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
    else { restore_condition = block->condition; }
  #endif

  while (sys.suspend) {
 800675c:	e112      	b.n	8006984 <protocol_exec_rt_suspend+0x270>

    if (sys.abort) { return; }
 800675e:	4b90      	ldr	r3, [pc, #576]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 8114 	bne.w	8006990 <protocol_exec_rt_suspend+0x27c>

    // Block until initial hold is complete and the machine has stopped motion.
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8006768:	4b8d      	ldr	r3, [pc, #564]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800676a:	789b      	ldrb	r3, [r3, #2]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8105 	beq.w	8006980 <protocol_exec_rt_suspend+0x26c>

      // Parking manager. Handles de/re-energizing, switch state checks, and parking motions for 
      // the safety door and sleep states.
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8006776:	4b8a      	ldr	r3, [pc, #552]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 809d 	beq.w	80068be <protocol_exec_rt_suspend+0x1aa>
      
        // Handles retraction motions and de-energizing.
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 8006784:	4b86      	ldr	r3, [pc, #536]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006786:	789b      	ldrb	r3, [r3, #2]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d119      	bne.n	80067c4 <protocol_exec_rt_suspend+0xb0>

          // Ensure any prior spindle stop override is disabled at start of safety door routine.
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8006790:	4b83      	ldr	r3, [pc, #524]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006792:	2200      	movs	r2, #0
 8006794:	72da      	strb	r2, [r3, #11]

          #ifndef PARKING_ENABLE

            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8006796:	f04f 0100 	mov.w	r1, #0
 800679a:	2000      	movs	r0, #0
 800679c:	f001 feba 	bl	8008514 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 80067a0:	2000      	movs	r0, #0
 80067a2:	f7fb fc35 	bl	8002010 <coolant_set_state>

            }

          #endif

          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 80067a6:	4b7e      	ldr	r3, [pc, #504]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067a8:	789b      	ldrb	r3, [r3, #2]
 80067aa:	f023 0302 	bic.w	r3, r3, #2
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	4b7b      	ldr	r3, [pc, #492]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067b2:	709a      	strb	r2, [r3, #2]
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 80067b4:	4b7a      	ldr	r3, [pc, #488]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067b6:	789b      	ldrb	r3, [r3, #2]
 80067b8:	f043 0304 	orr.w	r3, r3, #4
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	4b78      	ldr	r3, [pc, #480]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067c0:	709a      	strb	r2, [r3, #2]
 80067c2:	e0dd      	b.n	8006980 <protocol_exec_rt_suspend+0x26c>

        } else {

          
          if (sys.state == STATE_SLEEP) {
 80067c4:	4b76      	ldr	r3, [pc, #472]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d114      	bne.n	80067f6 <protocol_exec_rt_suspend+0xe2>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 80067cc:	200b      	movs	r0, #11
 80067ce:	f000 f9bf 	bl	8006b50 <report_feedback_message>
            // Spindle and coolant should already be stopped, but do it again just to be sure.
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80067d2:	f04f 0100 	mov.w	r1, #0
 80067d6:	2000      	movs	r0, #0
 80067d8:	f001 fe9c 	bl	8008514 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 80067dc:	2000      	movs	r0, #0
 80067de:	f7fb fc17 	bl	8002010 <coolant_set_state>
            st_go_idle(); // Disable steppers
 80067e2:	f001 ffbf 	bl	8008764 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 80067e6:	e001      	b.n	80067ec <protocol_exec_rt_suspend+0xd8>
 80067e8:	f7ff fcc0 	bl	800616c <protocol_exec_rt_system>
 80067ec:	4b6c      	ldr	r3, [pc, #432]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f9      	beq.n	80067e8 <protocol_exec_rt_suspend+0xd4>
            return; // Abort received. Return to re-initialize.
 80067f4:	e0cd      	b.n	8006992 <protocol_exec_rt_suspend+0x27e>
          }    
          
          // Allows resuming from parking/safety door. Actively checks if safety door is closed and ready to resume.
          if (sys.state == STATE_SAFETY_DOOR) {
 80067f6:	4b6a      	ldr	r3, [pc, #424]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d10b      	bne.n	8006816 <protocol_exec_rt_suspend+0x102>
            if (!(system_check_safety_door_ajar())) {
 80067fe:	f003 fa6b 	bl	8009cd8 <system_check_safety_door_ajar>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <protocol_exec_rt_suspend+0x102>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8006808:	4b65      	ldr	r3, [pc, #404]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800680a:	789b      	ldrb	r3, [r3, #2]
 800680c:	f023 0320 	bic.w	r3, r3, #32
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4b63      	ldr	r3, [pc, #396]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006814:	709a      	strb	r2, [r3, #2]
            }
          }

          // Handles parking restore and safety door resume.
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8006816:	4b62      	ldr	r3, [pc, #392]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006818:	789b      	ldrb	r3, [r3, #2]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80ae 	beq.w	8006980 <protocol_exec_rt_suspend+0x26c>
                }
              }
            #endif

            // Delayed Tasks: Restart spindle and coolant, delay to power-up, then resume cycle.
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8006824:	4b5c      	ldr	r3, [pc, #368]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 8006826:	7a5b      	ldrb	r3, [r3, #9]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d021      	beq.n	8006870 <protocol_exec_rt_suspend+0x15c>
              // Block if safety door re-opened during prior restore actions.
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800682c:	4b5c      	ldr	r3, [pc, #368]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800682e:	789b      	ldrb	r3, [r3, #2]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11b      	bne.n	8006870 <protocol_exec_rt_suspend+0x15c>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8006838:	4b58      	ldr	r3, [pc, #352]	; (800699c <protocol_exec_rt_suspend+0x288>)
 800683a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d007      	beq.n	8006856 <protocol_exec_rt_suspend+0x142>
                  // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006846:	4b56      	ldr	r3, [pc, #344]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	f043 0308 	orr.w	r3, r3, #8
 800684e:	b2da      	uxtb	r2, r3
 8006850:	4b53      	ldr	r3, [pc, #332]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006852:	711a      	strb	r2, [r3, #4]
 8006854:	e00c      	b.n	8006870 <protocol_exec_rt_suspend+0x15c>
                } else {
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800685c:	b2db      	uxtb	r3, r3
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	f001 fe57 	bl	8008514 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8006866:	2101      	movs	r1, #1
 8006868:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800686c:	f7fe fb7a 	bl	8004f64 <delay_sec>
                }
              }
            }
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8006870:	4b49      	ldr	r3, [pc, #292]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 8006872:	7a1b      	ldrb	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d011      	beq.n	800689c <protocol_exec_rt_suspend+0x188>
              // Block if safety door re-opened during prior restore actions.
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8006878:	4b49      	ldr	r3, [pc, #292]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800687a:	789b      	ldrb	r3, [r3, #2]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <protocol_exec_rt_suspend+0x188>
                // NOTE: Laser mode will honor this delay. An exhaust system is often controlled by this pin.
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4618      	mov	r0, r3
 800688e:	f7fb fbbf 	bl	8002010 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8006892:	2101      	movs	r1, #1
 8006894:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006898:	f7fe fb64 	bl	8004f64 <delay_sec>
                  mc_parking_motion(restore_target, pl_data);
                }
              }
            #endif

            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800689c:	4b40      	ldr	r3, [pc, #256]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800689e:	789b      	ldrb	r3, [r3, #2]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d16b      	bne.n	8006980 <protocol_exec_rt_suspend+0x26c>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 80068a8:	4b3d      	ldr	r3, [pc, #244]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068aa:	789b      	ldrb	r3, [r3, #2]
 80068ac:	f043 0310 	orr.w	r3, r3, #16
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	4b3b      	ldr	r3, [pc, #236]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068b4:	709a      	strb	r2, [r3, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 80068b6:	2002      	movs	r0, #2
 80068b8:	f003 fd34 	bl	800a324 <system_set_exec_state_flag>
 80068bc:	e060      	b.n	8006980 <protocol_exec_rt_suspend+0x26c>

      } else {

        // Feed hold manager. Controls spindle stop override states.
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
 80068be:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068c0:	7adb      	ldrb	r3, [r3, #11]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d047      	beq.n	8006956 <protocol_exec_rt_suspend+0x242>
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 80068c6:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068c8:	7adb      	ldrb	r3, [r3, #11]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d010      	beq.n	80068f4 <protocol_exec_rt_suspend+0x1e0>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80068d2:	4b31      	ldr	r3, [pc, #196]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 80068d4:	7a5b      	ldrb	r3, [r3, #9]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <protocol_exec_rt_suspend+0x1d8>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	2000      	movs	r0, #0
 80068e0:	f001 fe18 	bl	8008514 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 80068e4:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	72da      	strb	r2, [r3, #11]
 80068ea:	e049      	b.n	8006980 <protocol_exec_rt_suspend+0x26c>
            } else {
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80068ec:	4b2c      	ldr	r3, [pc, #176]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	72da      	strb	r2, [r3, #11]
 80068f2:	e045      	b.n	8006980 <protocol_exec_rt_suspend+0x26c>
            }
          // Handles restoring of spindle state
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80068f4:	4b2a      	ldr	r3, [pc, #168]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 80068f6:	7adb      	ldrb	r3, [r3, #11]
 80068f8:	f003 030c 	and.w	r3, r3, #12
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d03f      	beq.n	8006980 <protocol_exec_rt_suspend+0x26c>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <protocol_exec_rt_suspend+0x284>)
 8006902:	7a5b      	ldrb	r3, [r3, #9]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d019      	beq.n	800693c <protocol_exec_rt_suspend+0x228>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8006908:	200a      	movs	r0, #10
 800690a:	f000 f921 	bl	8006b50 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 800690e:	4b23      	ldr	r3, [pc, #140]	; (800699c <protocol_exec_rt_suspend+0x288>)
 8006910:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <protocol_exec_rt_suspend+0x218>
                // When in laser mode, ignore spindle spin-up delay. Set to turn on laser when cycle starts.
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800691c:	4b20      	ldr	r3, [pc, #128]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	f043 0308 	orr.w	r3, r3, #8
 8006924:	b2da      	uxtb	r2, r3
 8006926:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006928:	711a      	strb	r2, [r3, #4]
 800692a:	e007      	b.n	800693c <protocol_exec_rt_suspend+0x228>
              } else {
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006932:	b2db      	uxtb	r3, r3
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fdec 	bl	8008514 <spindle_set_state>
              }
            }
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 800693c:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800693e:	7adb      	ldrb	r3, [r3, #11]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <protocol_exec_rt_suspend+0x23a>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 8006948:	2002      	movs	r0, #2
 800694a:	f003 fceb 	bl	800a324 <system_set_exec_state_flag>
            }
            sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006950:	2200      	movs	r2, #0
 8006952:	72da      	strb	r2, [r3, #11]
 8006954:	e014      	b.n	8006980 <protocol_exec_rt_suspend+0x26c>
          }
        } else {
          // Handles spindle state during hold. NOTE: Spindle speed overrides may be altered during hold state.
          // NOTE: STEP_CONTROL_UPDATE_SPINDLE_PWM is automatically reset upon resume in step generator.
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006958:	791b      	ldrb	r3, [r3, #4]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00e      	beq.n	8006980 <protocol_exec_rt_suspend+0x26c>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006968:	b2db      	uxtb	r3, r3
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fdd1 	bl	8008514 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006974:	791b      	ldrb	r3, [r3, #4]
 8006976:	f023 0308 	bic.w	r3, r3, #8
 800697a:	b2da      	uxtb	r2, r3
 800697c:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 800697e:	711a      	strb	r2, [r3, #4]
        }

      }
    }

    protocol_exec_rt_system();
 8006980:	f7ff fbf4 	bl	800616c <protocol_exec_rt_system>
  while (sys.suspend) {
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <protocol_exec_rt_suspend+0x28c>)
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f aee8 	bne.w	800675e <protocol_exec_rt_suspend+0x4a>
 800698e:	e000      	b.n	8006992 <protocol_exec_rt_suspend+0x27e>
    if (sys.abort) { return; }
 8006990:	bf00      	nop

  }
}
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000e78 	.word	0x20000e78
 800699c:	200010b4 	.word	0x200010b4
 80069a0:	20000f00 	.word	0x20000f00

080069a4 <toggleFloodBit>:


void toggleFloodBit() {
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
	if ( bit_istrue( GPIO_ReadOutputData(COOLANT_FLOOD_PORT) , (1 << COOLANT_FLOOD_BIT) ) ) {
 80069a8:	4809      	ldr	r0, [pc, #36]	; (80069d0 <toggleFloodBit+0x2c>)
 80069aa:	f7fa fe41 	bl	8001630 <GPIO_ReadOutputData>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f003 0310 	and.w	r3, r3, #16
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <toggleFloodBit+0x1e>
		GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80069b8:	2110      	movs	r1, #16
 80069ba:	4805      	ldr	r0, [pc, #20]	; (80069d0 <toggleFloodBit+0x2c>)
 80069bc:	f7fa fe52 	bl	8001664 <GPIO_ResetBits>
	} else {
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
	}
}
 80069c0:	e003      	b.n	80069ca <toggleFloodBit+0x26>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 80069c2:	2110      	movs	r1, #16
 80069c4:	4802      	ldr	r0, [pc, #8]	; (80069d0 <toggleFloodBit+0x2c>)
 80069c6:	f7fa fe3f 	bl	8001648 <GPIO_SetBits>
}
 80069ca:	bf00      	nop
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40010c00 	.word	0x40010c00

080069d4 <report_util_setting_prefix>:

#include "grbl.h"


// Internal report utilities to reduce flash with repetitive tasks turned into functions.
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	71fb      	strb	r3, [r7, #7]
 80069de:	2024      	movs	r0, #36	; 0x24
 80069e0:	f000 feb2 	bl	8007748 <serial_write>
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f8fe 	bl	8005be8 <print_uint8_base10>
 80069ec:	203d      	movs	r0, #61	; 0x3d
 80069ee:	f000 feab 	bl	8007748 <serial_write>
 80069f2:	bf00      	nop
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <report_util_line_feed>:
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	4802      	ldr	r0, [pc, #8]	; (8006a0c <report_util_line_feed+0x10>)
 8006a02:	f7ff f8dd 	bl	8005bc0 <printString>
 8006a06:	bf00      	nop
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	0800b7c4 	.word	0x0800b7c4

08006a10 <report_util_feedback_line_feed>:
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	205d      	movs	r0, #93	; 0x5d
 8006a16:	f000 fe97 	bl	8007748 <serial_write>
 8006a1a:	f7ff ffef 	bl	80069fc <report_util_line_feed>
 8006a1e:	bf00      	nop
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <report_util_gcode_modes_G>:
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	4802      	ldr	r0, [pc, #8]	; (8006a34 <report_util_gcode_modes_G+0x10>)
 8006a2a:	f7ff f8c9 	bl	8005bc0 <printString>
 8006a2e:	bf00      	nop
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	0800b7c8 	.word	0x0800b7c8

08006a38 <report_util_gcode_modes_M>:
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	4802      	ldr	r0, [pc, #8]	; (8006a48 <report_util_gcode_modes_M+0x10>)
 8006a3e:	f7ff f8bf 	bl	8005bc0 <printString>
 8006a42:	bf00      	nop
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	0800b7cc 	.word	0x0800b7cc

08006a4c <report_util_axis_values>:
// static void report_util_comment_line_feed() { serial_write(')'); report_util_line_feed(); }
static void report_util_axis_values(float *axis_value) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 8006a54:	2300      	movs	r3, #0
 8006a56:	73fb      	strb	r3, [r7, #15]
 8006a58:	e010      	b.n	8006a7c <report_util_axis_values+0x30>
    printFloat_CoordValue(axis_value[idx]);
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff f9a7 	bl	8005db8 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d802      	bhi.n	8006a76 <report_util_axis_values+0x2a>
 8006a70:	202c      	movs	r0, #44	; 0x2c
 8006a72:	f000 fe69 	bl	8007748 <serial_write>
  for (idx=0; idx<N_AXIS; idx++) {
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d9eb      	bls.n	8006a5a <report_util_axis_values+0xe>
  }
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <report_util_uint8_setting>:
  }
  report_util_comment_line_feed();
}
*/

static void report_util_uint8_setting(uint8_t n, int val) {
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	4603      	mov	r3, r0
 8006a92:	6039      	str	r1, [r7, #0]
 8006a94:	71fb      	strb	r3, [r7, #7]
  report_util_setting_prefix(n);
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff ff9b 	bl	80069d4 <report_util_setting_prefix>
  print_uint8_base10(val);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f8a0 	bl	8005be8 <print_uint8_base10>
  report_util_line_feed(); // report_util_setting_string(n); 
 8006aa8:	f7ff ffa8 	bl	80069fc <report_util_line_feed>
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <report_util_float_setting>:
static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	71bb      	strb	r3, [r7, #6]
  report_util_setting_prefix(n);
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ff84 	bl	80069d4 <report_util_setting_prefix>
  printFloat(val, n_decimal);
 8006acc:	79bb      	ldrb	r3, [r7, #6]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6838      	ldr	r0, [r7, #0]
 8006ad2:	f7ff f8d9 	bl	8005c88 <printFloat>
  report_util_line_feed(); // report_util_setting_string(n);
 8006ad6:	f7ff ff91 	bl	80069fc <report_util_line_feed>
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]
  switch(status_code) {
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <report_status_message+0x18>
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
 8006af4:	4808      	ldr	r0, [pc, #32]	; (8006b18 <report_status_message+0x34>)
 8006af6:	f7ff f863 	bl	8005bc0 <printString>
 8006afa:	e008      	b.n	8006b0e <report_status_message+0x2a>
    default:
      printPgmString(PSTR("error:"));
 8006afc:	4807      	ldr	r0, [pc, #28]	; (8006b1c <report_status_message+0x38>)
 8006afe:	f7ff f85f 	bl	8005bc0 <printString>
      print_uint8_base10(status_code);
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff f86f 	bl	8005be8 <print_uint8_base10>
      report_util_line_feed();
 8006b0a:	f7ff ff77 	bl	80069fc <report_util_line_feed>
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	0800b7d0 	.word	0x0800b7d0
 8006b1c:	0800b7d8 	.word	0x0800b7d8

08006b20 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
  printPgmString(PSTR("ALARM:"));
 8006b2a:	4808      	ldr	r0, [pc, #32]	; (8006b4c <report_alarm_message+0x2c>)
 8006b2c:	f7ff f848 	bl	8005bc0 <printString>
  print_uint8_base10(alarm_code);
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff f858 	bl	8005be8 <print_uint8_base10>
  report_util_line_feed();
 8006b38:	f7ff ff60 	bl	80069fc <report_util_line_feed>
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 8006b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b40:	f7fe fa4a 	bl	8004fd8 <delay_ms>
}
 8006b44:	bf00      	nop
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	0800b7e0 	.word	0x0800b7e0

08006b50 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  printPgmString(PSTR("[MSG:"));
 8006b5a:	4829      	ldr	r0, [pc, #164]	; (8006c00 <report_feedback_message+0xb0>)
 8006b5c:	f7ff f830 	bl	8005bc0 <printString>
  switch(message_code) {
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	2b0a      	cmp	r3, #10
 8006b66:	d845      	bhi.n	8006bf4 <report_feedback_message+0xa4>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <report_feedback_message+0x20>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006b9d 	.word	0x08006b9d
 8006b74:	08006ba5 	.word	0x08006ba5
 8006b78:	08006bad 	.word	0x08006bad
 8006b7c:	08006bb5 	.word	0x08006bb5
 8006b80:	08006bbd 	.word	0x08006bbd
 8006b84:	08006bc5 	.word	0x08006bc5
 8006b88:	08006bcd 	.word	0x08006bcd
 8006b8c:	08006bd5 	.word	0x08006bd5
 8006b90:	08006bdd 	.word	0x08006bdd
 8006b94:	08006be5 	.word	0x08006be5
 8006b98:	08006bed 	.word	0x08006bed
    case MESSAGE_CRITICAL_EVENT:
      printPgmString(PSTR("Reset to continue")); break;
 8006b9c:	4819      	ldr	r0, [pc, #100]	; (8006c04 <report_feedback_message+0xb4>)
 8006b9e:	f7ff f80f 	bl	8005bc0 <printString>
 8006ba2:	e027      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_ALARM_LOCK:
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8006ba4:	4818      	ldr	r0, [pc, #96]	; (8006c08 <report_feedback_message+0xb8>)
 8006ba6:	f7ff f80b 	bl	8005bc0 <printString>
 8006baa:	e023      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_ALARM_UNLOCK:
      printPgmString(PSTR("Caution: Unlocked")); break;
 8006bac:	4817      	ldr	r0, [pc, #92]	; (8006c0c <report_feedback_message+0xbc>)
 8006bae:	f7ff f807 	bl	8005bc0 <printString>
 8006bb2:	e01f      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_ENABLED:
      printPgmString(PSTR("Enabled")); break;
 8006bb4:	4816      	ldr	r0, [pc, #88]	; (8006c10 <report_feedback_message+0xc0>)
 8006bb6:	f7ff f803 	bl	8005bc0 <printString>
 8006bba:	e01b      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_DISABLED:
      printPgmString(PSTR("Disabled")); break;
 8006bbc:	4815      	ldr	r0, [pc, #84]	; (8006c14 <report_feedback_message+0xc4>)
 8006bbe:	f7fe ffff 	bl	8005bc0 <printString>
 8006bc2:	e017      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_SAFETY_DOOR_AJAR:
      printPgmString(PSTR("Check Door")); break;
 8006bc4:	4814      	ldr	r0, [pc, #80]	; (8006c18 <report_feedback_message+0xc8>)
 8006bc6:	f7fe fffb 	bl	8005bc0 <printString>
 8006bca:	e013      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_CHECK_LIMITS:
      printPgmString(PSTR("Check Limits")); break;
 8006bcc:	4813      	ldr	r0, [pc, #76]	; (8006c1c <report_feedback_message+0xcc>)
 8006bce:	f7fe fff7 	bl	8005bc0 <printString>
 8006bd2:	e00f      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_PROGRAM_END:
      printPgmString(PSTR("Pgm End")); break;
 8006bd4:	4812      	ldr	r0, [pc, #72]	; (8006c20 <report_feedback_message+0xd0>)
 8006bd6:	f7fe fff3 	bl	8005bc0 <printString>
 8006bda:	e00b      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
 8006bdc:	4811      	ldr	r0, [pc, #68]	; (8006c24 <report_feedback_message+0xd4>)
 8006bde:	f7fe ffef 	bl	8005bc0 <printString>
 8006be2:	e007      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
 8006be4:	4810      	ldr	r0, [pc, #64]	; (8006c28 <report_feedback_message+0xd8>)
 8006be6:	f7fe ffeb 	bl	8005bc0 <printString>
 8006bea:	e003      	b.n	8006bf4 <report_feedback_message+0xa4>
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 8006bec:	480f      	ldr	r0, [pc, #60]	; (8006c2c <report_feedback_message+0xdc>)
 8006bee:	f7fe ffe7 	bl	8005bc0 <printString>
 8006bf2:	bf00      	nop
  }
  report_util_feedback_line_feed();
 8006bf4:	f7ff ff0c 	bl	8006a10 <report_util_feedback_line_feed>
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	0800b7e8 	.word	0x0800b7e8
 8006c04:	0800b7f0 	.word	0x0800b7f0
 8006c08:	0800b804 	.word	0x0800b804
 8006c0c:	0800b818 	.word	0x0800b818
 8006c10:	0800b82c 	.word	0x0800b82c
 8006c14:	0800b834 	.word	0x0800b834
 8006c18:	0800b840 	.word	0x0800b840
 8006c1c:	0800b84c 	.word	0x0800b84c
 8006c20:	0800b85c 	.word	0x0800b85c
 8006c24:	0800b864 	.word	0x0800b864
 8006c28:	0800b878 	.word	0x0800b878
 8006c2c:	0800b88c 	.word	0x0800b88c

08006c30 <report_init_message>:


// Welcome message
void report_init_message()
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  printPgmString(PSTR("\r\nGrbl "  GRBL_VERSION " ['$' for help]\r\n"));
 8006c34:	4802      	ldr	r0, [pc, #8]	; (8006c40 <report_init_message+0x10>)
 8006c36:	f7fe ffc3 	bl	8005bc0 <printString>
}
 8006c3a:	bf00      	nop
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	0800b898 	.word	0x0800b898

08006c44 <report_grbl_help>:

// Grbl help message
void report_grbl_help() {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8006c48:	4802      	ldr	r0, [pc, #8]	; (8006c54 <report_grbl_help+0x10>)
 8006c4a:	f7fe ffb9 	bl	8005bc0 <printString>
}
 8006c4e:	bf00      	nop
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	0800b8b8 	.word	0x0800b8b8

08006c58 <report_grbl_settings>:


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006c5e:	4b9b      	ldr	r3, [pc, #620]	; (8006ecc <report_grbl_settings+0x274>)
 8006c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c64:	4619      	mov	r1, r3
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7ff ff0f 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8006c6c:	4b97      	ldr	r3, [pc, #604]	; (8006ecc <report_grbl_settings+0x274>)
 8006c6e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c72:	4619      	mov	r1, r3
 8006c74:	2001      	movs	r0, #1
 8006c76:	f7ff ff08 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(2,settings.step_invert_mask);
 8006c7a:	4b94      	ldr	r3, [pc, #592]	; (8006ecc <report_grbl_settings+0x274>)
 8006c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c7e:	4619      	mov	r1, r3
 8006c80:	2002      	movs	r0, #2
 8006c82:	f7ff ff02 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8006c86:	4b91      	ldr	r3, [pc, #580]	; (8006ecc <report_grbl_settings+0x274>)
 8006c88:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	2003      	movs	r0, #3
 8006c8e:	f7ff fefc 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8006c92:	4b8e      	ldr	r3, [pc, #568]	; (8006ecc <report_grbl_settings+0x274>)
 8006c94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	2004      	movs	r0, #4
 8006caa:	f7ff feee 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006cae:	4b87      	ldr	r3, [pc, #540]	; (8006ecc <report_grbl_settings+0x274>)
 8006cb0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	2005      	movs	r0, #5
 8006cc6:	f7ff fee0 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006cca:	4b80      	ldr	r3, [pc, #512]	; (8006ecc <report_grbl_settings+0x274>)
 8006ccc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006cd0:	b25b      	sxtb	r3, r3
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	09db      	lsrs	r3, r3, #7
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	4619      	mov	r1, r3
 8006cda:	2006      	movs	r0, #6
 8006cdc:	f7ff fed5 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(10,settings.status_report_mask);
 8006ce0:	4b7a      	ldr	r3, [pc, #488]	; (8006ecc <report_grbl_settings+0x274>)
 8006ce2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	200a      	movs	r0, #10
 8006cea:	f7ff fece 	bl	8006a8a <report_util_uint8_setting>
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8006cee:	4b77      	ldr	r3, [pc, #476]	; (8006ecc <report_grbl_settings+0x274>)
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	200b      	movs	r0, #11
 8006cf8:	f7ff fedc 	bl	8006ab4 <report_util_float_setting>
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8006cfc:	4b73      	ldr	r3, [pc, #460]	; (8006ecc <report_grbl_settings+0x274>)
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d00:	2203      	movs	r2, #3
 8006d02:	4619      	mov	r1, r3
 8006d04:	200c      	movs	r0, #12
 8006d06:	f7ff fed5 	bl	8006ab4 <report_util_float_setting>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8006d0a:	4b70      	ldr	r3, [pc, #448]	; (8006ecc <report_grbl_settings+0x274>)
 8006d0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	4619      	mov	r1, r3
 8006d20:	200d      	movs	r0, #13
 8006d22:	f7ff feb2 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006d26:	4b69      	ldr	r3, [pc, #420]	; (8006ecc <report_grbl_settings+0x274>)
 8006d28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	2014      	movs	r0, #20
 8006d3e:	f7ff fea4 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006d42:	4b62      	ldr	r3, [pc, #392]	; (8006ecc <report_grbl_settings+0x274>)
 8006d44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	4619      	mov	r1, r3
 8006d58:	2015      	movs	r0, #21
 8006d5a:	f7ff fe96 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006d5e:	4b5b      	ldr	r3, [pc, #364]	; (8006ecc <report_grbl_settings+0x274>)
 8006d60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	4619      	mov	r1, r3
 8006d74:	2016      	movs	r0, #22
 8006d76:	f7ff fe88 	bl	8006a8a <report_util_uint8_setting>
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8006d7a:	4b54      	ldr	r3, [pc, #336]	; (8006ecc <report_grbl_settings+0x274>)
 8006d7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006d80:	4619      	mov	r1, r3
 8006d82:	2017      	movs	r0, #23
 8006d84:	f7ff fe81 	bl	8006a8a <report_util_uint8_setting>
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006d88:	4b50      	ldr	r3, [pc, #320]	; (8006ecc <report_grbl_settings+0x274>)
 8006d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	4619      	mov	r1, r3
 8006d90:	2018      	movs	r0, #24
 8006d92:	f7ff fe8f 	bl	8006ab4 <report_util_float_setting>
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8006d96:	4b4d      	ldr	r3, [pc, #308]	; (8006ecc <report_grbl_settings+0x274>)
 8006d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	2019      	movs	r0, #25
 8006da0:	f7ff fe88 	bl	8006ab4 <report_util_float_setting>
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8006da4:	4b49      	ldr	r3, [pc, #292]	; (8006ecc <report_grbl_settings+0x274>)
 8006da6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006daa:	4619      	mov	r1, r3
 8006dac:	201a      	movs	r0, #26
 8006dae:	f7ff fe6c 	bl	8006a8a <report_util_uint8_setting>
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006db2:	4b46      	ldr	r3, [pc, #280]	; (8006ecc <report_grbl_settings+0x274>)
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	2203      	movs	r2, #3
 8006db8:	4619      	mov	r1, r3
 8006dba:	201b      	movs	r0, #27
 8006dbc:	f7ff fe7a 	bl	8006ab4 <report_util_float_setting>
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006dc0:	4b42      	ldr	r3, [pc, #264]	; (8006ecc <report_grbl_settings+0x274>)
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	201e      	movs	r0, #30
 8006dca:	f7ff fe73 	bl	8006ab4 <report_util_float_setting>
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006dce:	4b3f      	ldr	r3, [pc, #252]	; (8006ecc <report_grbl_settings+0x274>)
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	201f      	movs	r0, #31
 8006dd8:	f7ff fe6c 	bl	8006ab4 <report_util_float_setting>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006ddc:	4b3b      	ldr	r3, [pc, #236]	; (8006ecc <report_grbl_settings+0x274>)
 8006dde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bf14      	ite	ne
 8006dea:	2301      	movne	r3, #1
 8006dec:	2300      	moveq	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4619      	mov	r1, r3
 8006df2:	2020      	movs	r0, #32
 8006df4:	f7ff fe49 	bl	8006a8a <report_util_uint8_setting>
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8006df8:	2364      	movs	r3, #100	; 0x64
 8006dfa:	717b      	strb	r3, [r7, #5]
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	71bb      	strb	r3, [r7, #6]
 8006e00:	e05d      	b.n	8006ebe <report_grbl_settings+0x266>
    for (idx=0; idx<N_AXIS; idx++) {
 8006e02:	2300      	movs	r3, #0
 8006e04:	71fb      	strb	r3, [r7, #7]
 8006e06:	e051      	b.n	8006eac <report_grbl_settings+0x254>
      switch (set_idx) {
 8006e08:	79bb      	ldrb	r3, [r7, #6]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d84b      	bhi.n	8006ea6 <report_grbl_settings+0x24e>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <report_grbl_settings+0x1bc>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e3f 	.word	0x08006e3f
 8006e1c:	08006e5d 	.word	0x08006e5d
 8006e20:	08006e85 	.word	0x08006e85
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006e24:	797a      	ldrb	r2, [r7, #5]
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	4413      	add	r3, r2
 8006e2a:	b2d8      	uxtb	r0, r3
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <report_grbl_settings+0x274>)
 8006e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e34:	2203      	movs	r2, #3
 8006e36:	4619      	mov	r1, r3
 8006e38:	f7ff fe3c 	bl	8006ab4 <report_util_float_setting>
 8006e3c:	e033      	b.n	8006ea6 <report_grbl_settings+0x24e>
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006e3e:	797a      	ldrb	r2, [r7, #5]
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	4413      	add	r3, r2
 8006e44:	b2d8      	uxtb	r0, r3
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	4a20      	ldr	r2, [pc, #128]	; (8006ecc <report_grbl_settings+0x274>)
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2203      	movs	r2, #3
 8006e54:	4619      	mov	r1, r3
 8006e56:	f7ff fe2d 	bl	8006ab4 <report_util_float_setting>
 8006e5a:	e024      	b.n	8006ea6 <report_grbl_settings+0x24e>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006e5c:	797a      	ldrb	r2, [r7, #5]
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	4413      	add	r3, r2
 8006e62:	b2dc      	uxtb	r4, r3
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	4a19      	ldr	r2, [pc, #100]	; (8006ecc <report_grbl_settings+0x274>)
 8006e68:	3306      	adds	r3, #6
 8006e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6e:	4918      	ldr	r1, [pc, #96]	; (8006ed0 <report_grbl_settings+0x278>)
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7f9 ffd1 	bl	8000e18 <__aeabi_fdiv>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2203      	movs	r2, #3
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f7ff fe19 	bl	8006ab4 <report_util_float_setting>
 8006e82:	e010      	b.n	8006ea6 <report_grbl_settings+0x24e>
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006e84:	797a      	ldrb	r2, [r7, #5]
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	4413      	add	r3, r2
 8006e8a:	b2d8      	uxtb	r0, r3
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	4a0f      	ldr	r2, [pc, #60]	; (8006ecc <report_grbl_settings+0x274>)
 8006e90:	3308      	adds	r3, #8
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f7ff fe08 	bl	8006ab4 <report_util_float_setting>
 8006ea4:	bf00      	nop
    for (idx=0; idx<N_AXIS; idx++) {
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	71fb      	strb	r3, [r7, #7]
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d9aa      	bls.n	8006e08 <report_grbl_settings+0x1b0>
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8006eb2:	797b      	ldrb	r3, [r7, #5]
 8006eb4:	330a      	adds	r3, #10
 8006eb6:	717b      	strb	r3, [r7, #5]
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006eb8:	79bb      	ldrb	r3, [r7, #6]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	71bb      	strb	r3, [r7, #6]
 8006ebe:	79bb      	ldrb	r3, [r7, #6]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d99e      	bls.n	8006e02 <report_grbl_settings+0x1aa>
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd90      	pop	{r4, r7, pc}
 8006ecc:	200010b4 	.word	0x200010b4
 8006ed0:	45610000 	.word	0x45610000

08006ed4 <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006eda:	480d      	ldr	r0, [pc, #52]	; (8006f10 <report_probe_parameters+0x3c>)
 8006edc:	f7fe fe70 	bl	8005bc0 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006ee0:	1d3b      	adds	r3, r7, #4
 8006ee2:	490c      	ldr	r1, [pc, #48]	; (8006f14 <report_probe_parameters+0x40>)
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f003 f9cb 	bl	800a280 <system_convert_array_steps_to_mpos>
  report_util_axis_values(print_position);
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fdad 	bl	8006a4c <report_util_axis_values>
  serial_write(':');
 8006ef2:	203a      	movs	r0, #58	; 0x3a
 8006ef4:	f000 fc28 	bl	8007748 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <report_probe_parameters+0x44>)
 8006efa:	795b      	ldrb	r3, [r3, #5]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fe73 	bl	8005be8 <print_uint8_base10>
  report_util_feedback_line_feed();
 8006f02:	f7ff fd85 	bl	8006a10 <report_util_feedback_line_feed>
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	0800b904 	.word	0x0800b904
 8006f14:	20000f18 	.word	0x20000f18
 8006f18:	20000f00 	.word	0x20000f00

08006f1c <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
  float coord_data[N_AXIS];
  uint8_t coord_select;
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
 8006f26:	e030      	b.n	8006f8a <report_ngc_parameters+0x6e>
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006f28:	463a      	mov	r2, r7
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 ff46 	bl	8007dc0 <settings_read_coord_data>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <report_ngc_parameters+0x26>
      report_status_message(STATUS_SETTING_READ_FAIL);
 8006f3a:	2007      	movs	r0, #7
 8006f3c:	f7ff fdd2 	bl	8006ae4 <report_status_message>
 8006f40:	e03a      	b.n	8006fb8 <report_ngc_parameters+0x9c>
      return;
    }
    printPgmString(PSTR("[G"));
 8006f42:	481f      	ldr	r0, [pc, #124]	; (8006fc0 <report_ngc_parameters+0xa4>)
 8006f44:	f7fe fe3c 	bl	8005bc0 <printString>
    switch (coord_select) {
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b06      	cmp	r3, #6
 8006f4c:	d002      	beq.n	8006f54 <report_ngc_parameters+0x38>
 8006f4e:	2b07      	cmp	r3, #7
 8006f50:	d004      	beq.n	8006f5c <report_ngc_parameters+0x40>
 8006f52:	e007      	b.n	8006f64 <report_ngc_parameters+0x48>
      case 6: printPgmString(PSTR("28")); break;
 8006f54:	481b      	ldr	r0, [pc, #108]	; (8006fc4 <report_ngc_parameters+0xa8>)
 8006f56:	f7fe fe33 	bl	8005bc0 <printString>
 8006f5a:	e00a      	b.n	8006f72 <report_ngc_parameters+0x56>
      case 7: printPgmString(PSTR("30")); break;
 8006f5c:	481a      	ldr	r0, [pc, #104]	; (8006fc8 <report_ngc_parameters+0xac>)
 8006f5e:	f7fe fe2f 	bl	8005bc0 <printString>
 8006f62:	e006      	b.n	8006f72 <report_ngc_parameters+0x56>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	3336      	adds	r3, #54	; 0x36
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fe3c 	bl	8005be8 <print_uint8_base10>
 8006f70:	bf00      	nop
    }
    serial_write(':');
 8006f72:	203a      	movs	r0, #58	; 0x3a
 8006f74:	f000 fbe8 	bl	8007748 <serial_write>
    report_util_axis_values(coord_data);
 8006f78:	463b      	mov	r3, r7
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fd66 	bl	8006a4c <report_util_axis_values>
    report_util_feedback_line_feed();
 8006f80:	f7ff fd46 	bl	8006a10 <report_util_feedback_line_feed>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	3301      	adds	r3, #1
 8006f88:	73fb      	strb	r3, [r7, #15]
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b07      	cmp	r3, #7
 8006f8e:	d9cb      	bls.n	8006f28 <report_ngc_parameters+0xc>
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006f90:	480e      	ldr	r0, [pc, #56]	; (8006fcc <report_ngc_parameters+0xb0>)
 8006f92:	f7fe fe15 	bl	8005bc0 <printString>
  report_util_axis_values(gc_state.coord_offset);
 8006f96:	480e      	ldr	r0, [pc, #56]	; (8006fd0 <report_ngc_parameters+0xb4>)
 8006f98:	f7ff fd58 	bl	8006a4c <report_util_axis_values>
  report_util_feedback_line_feed();
 8006f9c:	f7ff fd38 	bl	8006a10 <report_util_feedback_line_feed>
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006fa0:	480c      	ldr	r0, [pc, #48]	; (8006fd4 <report_ngc_parameters+0xb8>)
 8006fa2:	f7fe fe0d 	bl	8005bc0 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <report_ngc_parameters+0xbc>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe ff04 	bl	8005db8 <printFloat_CoordValue>
  report_util_feedback_line_feed();
 8006fb0:	f7ff fd2e 	bl	8006a10 <report_util_feedback_line_feed>
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
 8006fb4:	f7ff ff8e 	bl	8006ed4 <report_probe_parameters>
}
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	0800b90c 	.word	0x0800b90c
 8006fc4:	0800b910 	.word	0x0800b910
 8006fc8:	0800b914 	.word	0x0800b914
 8006fcc:	0800b918 	.word	0x0800b918
 8006fd0:	20000eac 	.word	0x20000eac
 8006fd4:	0800b920 	.word	0x0800b920
 8006fd8:	20000e78 	.word	0x20000e78

08006fdc <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  printPgmString(PSTR("[GC:G"));
 8006fe0:	4859      	ldr	r0, [pc, #356]	; (8007148 <report_gcode_modes+0x16c>)
 8006fe2:	f7fe fded 	bl	8005bc0 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006fe6:	4b59      	ldr	r3, [pc, #356]	; (800714c <report_gcode_modes+0x170>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b8b      	cmp	r3, #139	; 0x8b
 8006fec:	d90a      	bls.n	8007004 <report_gcode_modes+0x28>
    printPgmString(PSTR("38."));
 8006fee:	4858      	ldr	r0, [pc, #352]	; (8007150 <report_gcode_modes+0x174>)
 8006ff0:	f7fe fde6 	bl	8005bc0 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006ff4:	4b55      	ldr	r3, [pc, #340]	; (800714c <report_gcode_modes+0x170>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	3376      	adds	r3, #118	; 0x76
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fe fdf3 	bl	8005be8 <print_uint8_base10>
 8007002:	e004      	b.n	800700e <report_gcode_modes+0x32>
  } else {
    print_uint8_base10(gc_state.modal.motion);
 8007004:	4b51      	ldr	r3, [pc, #324]	; (800714c <report_gcode_modes+0x170>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fded 	bl	8005be8 <print_uint8_base10>
  }

  report_util_gcode_modes_G();
 800700e:	f7ff fd09 	bl	8006a24 <report_util_gcode_modes_G>
  print_uint8_base10(gc_state.modal.coord_select+54);
 8007012:	4b4e      	ldr	r3, [pc, #312]	; (800714c <report_gcode_modes+0x170>)
 8007014:	799b      	ldrb	r3, [r3, #6]
 8007016:	3336      	adds	r3, #54	; 0x36
 8007018:	b2db      	uxtb	r3, r3
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fde4 	bl	8005be8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8007020:	f7ff fd00 	bl	8006a24 <report_util_gcode_modes_G>
  print_uint8_base10(gc_state.modal.plane_select+17);
 8007024:	4b49      	ldr	r3, [pc, #292]	; (800714c <report_gcode_modes+0x170>)
 8007026:	791b      	ldrb	r3, [r3, #4]
 8007028:	3311      	adds	r3, #17
 800702a:	b2db      	uxtb	r3, r3
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fddb 	bl	8005be8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8007032:	f7ff fcf7 	bl	8006a24 <report_util_gcode_modes_G>
  print_uint8_base10(21-gc_state.modal.units);
 8007036:	4b45      	ldr	r3, [pc, #276]	; (800714c <report_gcode_modes+0x170>)
 8007038:	789b      	ldrb	r3, [r3, #2]
 800703a:	f1c3 0315 	rsb	r3, r3, #21
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fdd1 	bl	8005be8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8007046:	f7ff fced 	bl	8006a24 <report_util_gcode_modes_G>
  print_uint8_base10(gc_state.modal.distance+90);
 800704a:	4b40      	ldr	r3, [pc, #256]	; (800714c <report_gcode_modes+0x170>)
 800704c:	78db      	ldrb	r3, [r3, #3]
 800704e:	335a      	adds	r3, #90	; 0x5a
 8007050:	b2db      	uxtb	r3, r3
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fdc8 	bl	8005be8 <print_uint8_base10>

  report_util_gcode_modes_G();
 8007058:	f7ff fce4 	bl	8006a24 <report_util_gcode_modes_G>
  print_uint8_base10(94-gc_state.modal.feed_rate);
 800705c:	4b3b      	ldr	r3, [pc, #236]	; (800714c <report_gcode_modes+0x170>)
 800705e:	785b      	ldrb	r3, [r3, #1]
 8007060:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fdbe 	bl	8005be8 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 800706c:	4b37      	ldr	r3, [pc, #220]	; (800714c <report_gcode_modes+0x170>)
 800706e:	79db      	ldrb	r3, [r3, #7]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d014      	beq.n	800709e <report_gcode_modes+0xc2>
    report_util_gcode_modes_M();
 8007074:	f7ff fce0 	bl	8006a38 <report_util_gcode_modes_M>
    switch (gc_state.modal.program_flow) {
 8007078:	4b34      	ldr	r3, [pc, #208]	; (800714c <report_gcode_modes+0x170>)
 800707a:	79db      	ldrb	r3, [r3, #7]
 800707c:	2b03      	cmp	r3, #3
 800707e:	d004      	beq.n	800708a <report_gcode_modes+0xae>
 8007080:	2b1e      	cmp	r3, #30
 8007082:	d006      	beq.n	8007092 <report_gcode_modes+0xb6>
 8007084:	2b02      	cmp	r3, #2
 8007086:	d004      	beq.n	8007092 <report_gcode_modes+0xb6>
 8007088:	e009      	b.n	800709e <report_gcode_modes+0xc2>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 800708a:	2030      	movs	r0, #48	; 0x30
 800708c:	f000 fb5c 	bl	8007748 <serial_write>
 8007090:	e005      	b.n	800709e <report_gcode_modes+0xc2>
      // case PROGRAM_FLOW_OPTIONAL_STOP : serial_write('1'); break; // M1 is ignored and not supported.
      case PROGRAM_FLOW_COMPLETED_M2 : 
      case PROGRAM_FLOW_COMPLETED_M30 : 
        print_uint8_base10(gc_state.modal.program_flow);
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <report_gcode_modes+0x170>)
 8007094:	79db      	ldrb	r3, [r3, #7]
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fda6 	bl	8005be8 <print_uint8_base10>
        break;
 800709c:	bf00      	nop
    }
  }

  report_util_gcode_modes_M();
 800709e:	f7ff fccb 	bl	8006a38 <report_util_gcode_modes_M>
  switch (gc_state.modal.spindle) {
 80070a2:	4b2a      	ldr	r3, [pc, #168]	; (800714c <report_gcode_modes+0x170>)
 80070a4:	7a5b      	ldrb	r3, [r3, #9]
 80070a6:	2b10      	cmp	r3, #16
 80070a8:	d004      	beq.n	80070b4 <report_gcode_modes+0xd8>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d006      	beq.n	80070bc <report_gcode_modes+0xe0>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <report_gcode_modes+0xe8>
 80070b2:	e00b      	b.n	80070cc <report_gcode_modes+0xf0>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 80070b4:	2033      	movs	r0, #51	; 0x33
 80070b6:	f000 fb47 	bl	8007748 <serial_write>
 80070ba:	e007      	b.n	80070cc <report_gcode_modes+0xf0>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 80070bc:	2034      	movs	r0, #52	; 0x34
 80070be:	f000 fb43 	bl	8007748 <serial_write>
 80070c2:	e003      	b.n	80070cc <report_gcode_modes+0xf0>
    case SPINDLE_DISABLE : serial_write('5'); break;
 80070c4:	2035      	movs	r0, #53	; 0x35
 80070c6:	f000 fb3f 	bl	8007748 <serial_write>
 80070ca:	bf00      	nop
  }

  report_util_gcode_modes_M();
 80070cc:	f7ff fcb4 	bl	8006a38 <report_util_gcode_modes_M>
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <report_gcode_modes+0x170>)
 80070d2:	7a1b      	ldrb	r3, [r3, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d015      	beq.n	8007104 <report_gcode_modes+0x128>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 80070d8:	4b1c      	ldr	r3, [pc, #112]	; (800714c <report_gcode_modes+0x170>)
 80070da:	7a1b      	ldrb	r3, [r3, #8]
 80070dc:	b25b      	sxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da04      	bge.n	80070ec <report_gcode_modes+0x110>
 80070e2:	f7ff fca9 	bl	8006a38 <report_util_gcode_modes_M>
 80070e6:	2037      	movs	r0, #55	; 0x37
 80070e8:	f000 fb2e 	bl	8007748 <serial_write>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 80070ec:	4b17      	ldr	r3, [pc, #92]	; (800714c <report_gcode_modes+0x170>)
 80070ee:	7a1b      	ldrb	r3, [r3, #8]
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <report_gcode_modes+0x132>
 80070f8:	f7ff fc9e 	bl	8006a38 <report_util_gcode_modes_M>
 80070fc:	2038      	movs	r0, #56	; 0x38
 80070fe:	f000 fb23 	bl	8007748 <serial_write>
 8007102:	e004      	b.n	800710e <report_gcode_modes+0x132>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8007104:	f7ff fc98 	bl	8006a38 <report_util_gcode_modes_M>
 8007108:	2039      	movs	r0, #57	; 0x39
 800710a:	f000 fb1d 	bl	8007748 <serial_write>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 800710e:	4811      	ldr	r0, [pc, #68]	; (8007154 <report_gcode_modes+0x178>)
 8007110:	f7fe fd56 	bl	8005bc0 <printString>
  print_uint8_base10(gc_state.tool);
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <report_gcode_modes+0x170>)
 8007116:	7d1b      	ldrb	r3, [r3, #20]
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fd65 	bl	8005be8 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 800711e:	480e      	ldr	r0, [pc, #56]	; (8007158 <report_gcode_modes+0x17c>)
 8007120:	f7fe fd4e 	bl	8005bc0 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <report_gcode_modes+0x170>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fe67 	bl	8005dfc <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 800712e:	480b      	ldr	r0, [pc, #44]	; (800715c <report_gcode_modes+0x180>)
 8007130:	f7fe fd46 	bl	8005bc0 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <report_gcode_modes+0x170>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2100      	movs	r1, #0
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fda4 	bl	8005c88 <printFloat>
  #endif

  report_util_feedback_line_feed();
 8007140:	f7ff fc66 	bl	8006a10 <report_util_feedback_line_feed>
}
 8007144:	bf00      	nop
 8007146:	bd80      	pop	{r7, pc}
 8007148:	0800b928 	.word	0x0800b928
 800714c:	20000e78 	.word	0x20000e78
 8007150:	0800b930 	.word	0x0800b930
 8007154:	0800b934 	.word	0x0800b934
 8007158:	0800b938 	.word	0x0800b938
 800715c:	0800b93c 	.word	0x0800b93c

08007160 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  printPgmString(PSTR("$N"));
 800716c:	4809      	ldr	r0, [pc, #36]	; (8007194 <report_startup_line+0x34>)
 800716e:	f7fe fd27 	bl	8005bc0 <printString>
  print_uint8_base10(n);
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fd37 	bl	8005be8 <print_uint8_base10>
  serial_write('=');
 800717a:	203d      	movs	r0, #61	; 0x3d
 800717c:	f000 fae4 	bl	8007748 <serial_write>
  printString(line);
 8007180:	6838      	ldr	r0, [r7, #0]
 8007182:	f7fe fd1d 	bl	8005bc0 <printString>
  report_util_line_feed();
 8007186:	f7ff fc39 	bl	80069fc <report_util_line_feed>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	0800b940 	.word	0x0800b940

08007198 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  serial_write('>');
 80071a4:	203e      	movs	r0, #62	; 0x3e
 80071a6:	f000 facf 	bl	8007748 <serial_write>
  printString(line);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fe fd08 	bl	8005bc0 <printString>
  serial_write(':');
 80071b0:	203a      	movs	r0, #58	; 0x3a
 80071b2:	f000 fac9 	bl	8007748 <serial_write>
  report_status_message(status_code);
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fc93 	bl	8006ae4 <report_status_message>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 80071d0:	4811      	ldr	r0, [pc, #68]	; (8007218 <report_build_info+0x50>)
 80071d2:	f7fe fcf5 	bl	8005bc0 <printString>
  printString(line);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fe fcf2 	bl	8005bc0 <printString>
  report_util_feedback_line_feed();
 80071dc:	f7ff fc18 	bl	8006a10 <report_util_feedback_line_feed>
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 80071e0:	480e      	ldr	r0, [pc, #56]	; (800721c <report_build_info+0x54>)
 80071e2:	f7fe fced 	bl	8005bc0 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 80071e6:	2056      	movs	r0, #86	; 0x56
 80071e8:	f000 faae 	bl	8007748 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 80071ec:	204d      	movs	r0, #77	; 0x4d
 80071ee:	f000 faab 	bl	8007748 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 80071f2:	202c      	movs	r0, #44	; 0x2c
 80071f4:	f000 faa8 	bl	8007748 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 80071f8:	2023      	movs	r0, #35	; 0x23
 80071fa:	f7fe fcf5 	bl	8005be8 <print_uint8_base10>
	serial_write(',');
 80071fe:	202c      	movs	r0, #44	; 0x2c
 8007200:	f000 faa2 	bl	8007748 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 8007204:	20fe      	movs	r0, #254	; 0xfe
 8007206:	f7fe fcef 	bl	8005be8 <print_uint8_base10>

	report_util_feedback_line_feed();
 800720a:	f7ff fc01 	bl	8006a10 <report_util_feedback_line_feed>
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	0800b944 	.word	0x0800b944
 800721c:	0800b958 	.word	0x0800b958

08007220 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b08d      	sub	sp, #52	; 0x34
 8007224:	af00      	add	r7, sp, #0
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 8007226:	4a82      	ldr	r2, [pc, #520]	; (8007430 <report_realtime_status+0x210>)
 8007228:	f107 031c 	add.w	r3, r7, #28
 800722c:	ca07      	ldmia	r2, {r0, r1, r2}
 800722e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);
 8007232:	f107 021c 	add.w	r2, r7, #28
 8007236:	f107 0310 	add.w	r3, r7, #16
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f003 f81f 	bl	800a280 <system_convert_array_steps_to_mpos>

  // Report current machine state and sub-states
  serial_write('<');
 8007242:	203c      	movs	r0, #60	; 0x3c
 8007244:	f000 fa80 	bl	8007748 <serial_write>
  switch (sys.state) {
 8007248:	4b7a      	ldr	r3, [pc, #488]	; (8007434 <report_realtime_status+0x214>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d01d      	beq.n	800728c <report_realtime_status+0x6c>
 8007250:	2b08      	cmp	r3, #8
 8007252:	dc0b      	bgt.n	800726c <report_realtime_status+0x4c>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d03b      	beq.n	80072d0 <report_realtime_status+0xb0>
 8007258:	2b01      	cmp	r3, #1
 800725a:	dc02      	bgt.n	8007262 <report_realtime_status+0x42>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d011      	beq.n	8007284 <report_realtime_status+0x64>
 8007260:	e067      	b.n	8007332 <report_realtime_status+0x112>
 8007262:	2b02      	cmp	r3, #2
 8007264:	d038      	beq.n	80072d8 <report_realtime_status+0xb8>
 8007266:	2b04      	cmp	r3, #4
 8007268:	d02e      	beq.n	80072c8 <report_realtime_status+0xa8>
 800726a:	e062      	b.n	8007332 <report_realtime_status+0x112>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d027      	beq.n	80072c0 <report_realtime_status+0xa0>
 8007270:	2b20      	cmp	r3, #32
 8007272:	dc02      	bgt.n	800727a <report_realtime_status+0x5a>
 8007274:	2b10      	cmp	r3, #16
 8007276:	d00d      	beq.n	8007294 <report_realtime_status+0x74>
 8007278:	e05b      	b.n	8007332 <report_realtime_status+0x112>
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d030      	beq.n	80072e0 <report_realtime_status+0xc0>
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d053      	beq.n	800732a <report_realtime_status+0x10a>
 8007282:	e056      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8007284:	486c      	ldr	r0, [pc, #432]	; (8007438 <report_realtime_status+0x218>)
 8007286:	f7fe fc9b 	bl	8005bc0 <printString>
 800728a:	e052      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 800728c:	486b      	ldr	r0, [pc, #428]	; (800743c <report_realtime_status+0x21c>)
 800728e:	f7fe fc97 	bl	8005bc0 <printString>
 8007292:	e04e      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_HOLD:
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8007294:	4b67      	ldr	r3, [pc, #412]	; (8007434 <report_realtime_status+0x214>)
 8007296:	789b      	ldrb	r3, [r3, #2]
 8007298:	b25b      	sxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	db10      	blt.n	80072c0 <report_realtime_status+0xa0>
      printPgmString(PSTR("Hold:"));
 800729e:	4868      	ldr	r0, [pc, #416]	; (8007440 <report_realtime_status+0x220>)
 80072a0:	f7fe fc8e 	bl	8005bc0 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 80072a4:	4b63      	ldr	r3, [pc, #396]	; (8007434 <report_realtime_status+0x214>)
 80072a6:	789b      	ldrb	r3, [r3, #2]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <report_realtime_status+0x98>
 80072b0:	2030      	movs	r0, #48	; 0x30
 80072b2:	f000 fa49 	bl	8007748 <serial_write>
      else { serial_write('1'); } // Actively holding
      break;
 80072b6:	e03c      	b.n	8007332 <report_realtime_status+0x112>
      else { serial_write('1'); } // Actively holding
 80072b8:	2031      	movs	r0, #49	; 0x31
 80072ba:	f000 fa45 	bl	8007748 <serial_write>
      break;
 80072be:	e038      	b.n	8007332 <report_realtime_status+0x112>
    } // Continues to print jog state during jog cancel.
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 80072c0:	4860      	ldr	r0, [pc, #384]	; (8007444 <report_realtime_status+0x224>)
 80072c2:	f7fe fc7d 	bl	8005bc0 <printString>
 80072c6:	e034      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 80072c8:	485f      	ldr	r0, [pc, #380]	; (8007448 <report_realtime_status+0x228>)
 80072ca:	f7fe fc79 	bl	8005bc0 <printString>
 80072ce:	e030      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 80072d0:	485e      	ldr	r0, [pc, #376]	; (800744c <report_realtime_status+0x22c>)
 80072d2:	f7fe fc75 	bl	8005bc0 <printString>
 80072d6:	e02c      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 80072d8:	485d      	ldr	r0, [pc, #372]	; (8007450 <report_realtime_status+0x230>)
 80072da:	f7fe fc71 	bl	8005bc0 <printString>
 80072de:	e028      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_SAFETY_DOOR:
    printPgmString(PSTR("Door:"));
 80072e0:	485c      	ldr	r0, [pc, #368]	; (8007454 <report_realtime_status+0x234>)
 80072e2:	f7fe fc6d 	bl	8005bc0 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80072e6:	4b53      	ldr	r3, [pc, #332]	; (8007434 <report_realtime_status+0x214>)
 80072e8:	789b      	ldrb	r3, [r3, #2]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <report_realtime_status+0xda>
      serial_write('3'); // Restoring
 80072f2:	2033      	movs	r0, #51	; 0x33
 80072f4:	f000 fa28 	bl	8007748 <serial_write>
      }
      else {
        serial_write('2'); // Retracting
      }
    }
    break;
 80072f8:	e01b      	b.n	8007332 <report_realtime_status+0x112>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80072fa:	4b4e      	ldr	r3, [pc, #312]	; (8007434 <report_realtime_status+0x214>)
 80072fc:	789b      	ldrb	r3, [r3, #2]
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <report_realtime_status+0x102>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8007306:	4b4b      	ldr	r3, [pc, #300]	; (8007434 <report_realtime_status+0x214>)
 8007308:	789b      	ldrb	r3, [r3, #2]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <report_realtime_status+0xfa>
          serial_write('1'); // Door ajar
 8007312:	2031      	movs	r0, #49	; 0x31
 8007314:	f000 fa18 	bl	8007748 <serial_write>
    break;
 8007318:	e00b      	b.n	8007332 <report_realtime_status+0x112>
          serial_write('0');
 800731a:	2030      	movs	r0, #48	; 0x30
 800731c:	f000 fa14 	bl	8007748 <serial_write>
    break;
 8007320:	e007      	b.n	8007332 <report_realtime_status+0x112>
        serial_write('2'); // Retracting
 8007322:	2032      	movs	r0, #50	; 0x32
 8007324:	f000 fa10 	bl	8007748 <serial_write>
    break;
 8007328:	e003      	b.n	8007332 <report_realtime_status+0x112>
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 800732a:	484b      	ldr	r0, [pc, #300]	; (8007458 <report_realtime_status+0x238>)
 800732c:	f7fe fc48 	bl	8005bc0 <printString>
 8007330:	bf00      	nop
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007332:	4b4a      	ldr	r3, [pc, #296]	; (800745c <report_realtime_status+0x23c>)
 8007334:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <report_realtime_status+0x128>
    (sys.report_wco_counter == 0)) {
 8007340:	4b3c      	ldr	r3, [pc, #240]	; (8007434 <report_realtime_status+0x214>)
 8007342:	7b5b      	ldrb	r3, [r3, #13]
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007344:	2b00      	cmp	r3, #0
 8007346:	d167      	bne.n	8007418 <report_realtime_status+0x1f8>
    for (idx = 0; idx< N_AXIS; idx++) {
 8007348:	2300      	movs	r3, #0
 800734a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800734e:	e05f      	b.n	8007410 <report_realtime_status+0x1f0>
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007350:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8007354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007358:	4a41      	ldr	r2, [pc, #260]	; (8007460 <report_realtime_status+0x240>)
 800735a:	330a      	adds	r3, #10
 800735c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007364:	4a3e      	ldr	r2, [pc, #248]	; (8007460 <report_realtime_status+0x240>)
 8007366:	330c      	adds	r3, #12
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	4619      	mov	r1, r3
 8007370:	f7f9 fb96 	bl	8000aa0 <__addsf3>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	00a3      	lsls	r3, r4, #2
 800737a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800737e:	440b      	add	r3, r1
 8007380:	f843 2c2c 	str.w	r2, [r3, #-44]
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007388:	2b02      	cmp	r3, #2
 800738a:	d117      	bne.n	80073bc <report_realtime_status+0x19c>
 800738c:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8007390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800739a:	4413      	add	r3, r2
 800739c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80073a0:	4b2f      	ldr	r3, [pc, #188]	; (8007460 <report_realtime_status+0x240>)
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7f9 fb7a 	bl	8000aa0 <__addsf3>
 80073ac:	4603      	mov	r3, r0
 80073ae:	461a      	mov	r2, r3
 80073b0:	00a3      	lsls	r3, r4, #2
 80073b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073b6:	440b      	add	r3, r1
 80073b8:	f843 2c2c 	str.w	r2, [r3, #-44]
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 80073bc:	4b27      	ldr	r3, [pc, #156]	; (800745c <report_realtime_status+0x23c>)
 80073be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d11d      	bne.n	8007406 <report_realtime_status+0x1e6>
        print_position[idx] -= wco[idx];
 80073ca:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80073ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80073d8:	4413      	add	r3, r2
 80073da:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80073de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073e8:	440b      	add	r3, r1
 80073ea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7f9 fb53 	bl	8000a9c <__aeabi_fsub>
 80073f6:	4603      	mov	r3, r0
 80073f8:	461a      	mov	r2, r3
 80073fa:	00a3      	lsls	r3, r4, #2
 80073fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007400:	440b      	add	r3, r1
 8007402:	f843 2c20 	str.w	r2, [r3, #-32]
    for (idx = 0; idx< N_AXIS; idx++) {
 8007406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800740a:	3301      	adds	r3, #1
 800740c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007414:	2b02      	cmp	r3, #2
 8007416:	d99b      	bls.n	8007350 <report_realtime_status+0x130>
      }
    }
  }

  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <report_realtime_status+0x23c>)
 800741a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d020      	beq.n	8007468 <report_realtime_status+0x248>
    printPgmString(PSTR("|MPos:"));
 8007426:	480f      	ldr	r0, [pc, #60]	; (8007464 <report_realtime_status+0x244>)
 8007428:	f7fe fbca 	bl	8005bc0 <printString>
 800742c:	e01f      	b.n	800746e <report_realtime_status+0x24e>
 800742e:	bf00      	nop
 8007430:	20000f24 	.word	0x20000f24
 8007434:	20000f00 	.word	0x20000f00
 8007438:	0800b968 	.word	0x0800b968
 800743c:	0800b970 	.word	0x0800b970
 8007440:	0800b974 	.word	0x0800b974
 8007444:	0800b97c 	.word	0x0800b97c
 8007448:	0800b980 	.word	0x0800b980
 800744c:	0800b988 	.word	0x0800b988
 8007450:	0800b990 	.word	0x0800b990
 8007454:	0800b998 	.word	0x0800b998
 8007458:	0800b9a0 	.word	0x0800b9a0
 800745c:	200010b4 	.word	0x200010b4
 8007460:	20000e78 	.word	0x20000e78
 8007464:	0800b9a8 	.word	0x0800b9a8
  }
  else {
    printPgmString(PSTR("|WPos:"));
 8007468:	4899      	ldr	r0, [pc, #612]	; (80076d0 <report_realtime_status+0x4b0>)
 800746a:	f7fe fba9 	bl	8005bc0 <printString>
  }
  report_util_axis_values(print_position);
 800746e:	f107 0310 	add.w	r3, r7, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff faea 	bl	8006a4c <report_util_axis_values>

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8007478:	4b96      	ldr	r3, [pc, #600]	; (80076d4 <report_realtime_status+0x4b4>)
 800747a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d011      	beq.n	80074aa <report_realtime_status+0x28a>
    printPgmString(PSTR("|Bf:"));
 8007486:	4894      	ldr	r0, [pc, #592]	; (80076d8 <report_realtime_status+0x4b8>)
 8007488:	f7fe fb9a 	bl	8005bc0 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 800748c:	f7fe fb66 	bl	8005b5c <plan_get_block_buffer_available>
 8007490:	4603      	mov	r3, r0
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fba8 	bl	8005be8 <print_uint8_base10>
    serial_write(',');
 8007498:	202c      	movs	r0, #44	; 0x2c
 800749a:	f000 f955 	bl	8007748 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 800749e:	f000 f929 	bl	80076f4 <serial_get_rx_buffer_available>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fb9f 	bl	8005be8 <print_uint8_base10>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 80074aa:	488c      	ldr	r0, [pc, #560]	; (80076dc <report_realtime_status+0x4bc>)
 80074ac:	f7fe fb88 	bl	8005bc0 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 80074b0:	f002 faca 	bl	8009a48 <st_get_realtime_rate>
 80074b4:	4603      	mov	r3, r0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fca0 	bl	8005dfc <printFloat_RateValue>
  serial_write(',');
 80074bc:	202c      	movs	r0, #44	; 0x2c
 80074be:	f000 f943 	bl	8007748 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 80074c2:	4b87      	ldr	r3, [pc, #540]	; (80076e0 <report_realtime_status+0x4c0>)
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fe fbdd 	bl	8005c88 <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 80074ce:	f7fc fcad 	bl	8003e2c <limits_get_state>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t ctrl_pin_state = system_control_get_state();
 80074d8:	f002 fb88 	bl	8009bec <system_control_get_state>
 80074dc:	4603      	mov	r3, r0
 80074de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t prb_pin_state = probe_get_state();
 80074e2:	f7fe fcf1 	bl	8005ec8 <probe_get_state>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80074ec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80074f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074fc:	4313      	orrs	r3, r2
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d050      	beq.n	80075a6 <report_realtime_status+0x386>
    printPgmString(PSTR("|Pn:"));
 8007504:	4877      	ldr	r0, [pc, #476]	; (80076e4 <report_realtime_status+0x4c4>)
 8007506:	f7fe fb5b 	bl	8005bc0 <printString>
    if (prb_pin_state) { serial_write('P'); }
 800750a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <report_realtime_status+0x2f8>
 8007512:	2050      	movs	r0, #80	; 0x50
 8007514:	f000 f918 	bl	8007748 <serial_write>
    if (lim_pin_state) {
 8007518:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01a      	beq.n	8007556 <report_realtime_status+0x336>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8007520:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <report_realtime_status+0x312>
 800752c:	2058      	movs	r0, #88	; 0x58
 800752e:	f000 f90b 	bl	8007748 <serial_write>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8007532:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <report_realtime_status+0x324>
 800753e:	2059      	movs	r0, #89	; 0x59
 8007540:	f000 f902 	bl	8007748 <serial_write>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 8007544:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <report_realtime_status+0x336>
 8007550:	205a      	movs	r0, #90	; 0x5a
 8007552:	f000 f8f9 	bl	8007748 <serial_write>
	  #ifdef ABC_AXIS
	  if (bit_istrue(lim_pin_state, bit(C_AXIS))) { serial_write('C'); }
	  #endif
// ---
    }
    if (ctrl_pin_state) {
 8007556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800755a:	2b00      	cmp	r3, #0
 800755c:	d023      	beq.n	80075a6 <report_realtime_status+0x386>
#ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_SAFETY_DOOR)) { serial_write('D'); }
 800755e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <report_realtime_status+0x350>
 800756a:	2044      	movs	r0, #68	; 0x44
 800756c:	f000 f8ec 	bl	8007748 <serial_write>
#endif
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8007570:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <report_realtime_status+0x362>
 800757c:	2052      	movs	r0, #82	; 0x52
 800757e:	f000 f8e3 	bl	8007748 <serial_write>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8007582:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <report_realtime_status+0x374>
 800758e:	2048      	movs	r0, #72	; 0x48
 8007590:	f000 f8da 	bl	8007748 <serial_write>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8007594:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <report_realtime_status+0x386>
 80075a0:	2053      	movs	r0, #83	; 0x53
 80075a2:	f000 f8d1 	bl	8007748 <serial_write>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 80075a6:	4b4e      	ldr	r3, [pc, #312]	; (80076e0 <report_realtime_status+0x4c0>)
 80075a8:	7b5b      	ldrb	r3, [r3, #13]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d006      	beq.n	80075bc <report_realtime_status+0x39c>
 80075ae:	4b4c      	ldr	r3, [pc, #304]	; (80076e0 <report_realtime_status+0x4c0>)
 80075b0:	7b5b      	ldrb	r3, [r3, #13]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	4b4a      	ldr	r3, [pc, #296]	; (80076e0 <report_realtime_status+0x4c0>)
 80075b8:	735a      	strb	r2, [r3, #13]
 80075ba:	e01a      	b.n	80075f2 <report_realtime_status+0x3d2>
  else {
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80075bc:	4b48      	ldr	r3, [pc, #288]	; (80076e0 <report_realtime_status+0x4c0>)
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <report_realtime_status+0x3b0>
      sys.report_wco_counter = (REPORT_WCO_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
 80075c8:	4b45      	ldr	r3, [pc, #276]	; (80076e0 <report_realtime_status+0x4c0>)
 80075ca:	221d      	movs	r2, #29
 80075cc:	735a      	strb	r2, [r3, #13]
 80075ce:	e002      	b.n	80075d6 <report_realtime_status+0x3b6>
    }
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 80075d0:	4b43      	ldr	r3, [pc, #268]	; (80076e0 <report_realtime_status+0x4c0>)
 80075d2:	2209      	movs	r2, #9
 80075d4:	735a      	strb	r2, [r3, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80075d6:	4b42      	ldr	r3, [pc, #264]	; (80076e0 <report_realtime_status+0x4c0>)
 80075d8:	7b1b      	ldrb	r3, [r3, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <report_realtime_status+0x3c4>
 80075de:	4b40      	ldr	r3, [pc, #256]	; (80076e0 <report_realtime_status+0x4c0>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	731a      	strb	r2, [r3, #12]
    printPgmString(PSTR("|WCO:"));
 80075e4:	4840      	ldr	r0, [pc, #256]	; (80076e8 <report_realtime_status+0x4c8>)
 80075e6:	f7fe faeb 	bl	8005bc0 <printString>
    report_util_axis_values(wco);
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fa2d 	bl	8006a4c <report_util_axis_values>
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80075f2:	4b3b      	ldr	r3, [pc, #236]	; (80076e0 <report_realtime_status+0x4c0>)
 80075f4:	7b1b      	ldrb	r3, [r3, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d006      	beq.n	8007608 <report_realtime_status+0x3e8>
 80075fa:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <report_realtime_status+0x4c0>)
 80075fc:	7b1b      	ldrb	r3, [r3, #12]
 80075fe:	3b01      	subs	r3, #1
 8007600:	b2da      	uxtb	r2, r3
 8007602:	4b37      	ldr	r3, [pc, #220]	; (80076e0 <report_realtime_status+0x4c0>)
 8007604:	731a      	strb	r2, [r3, #12]
 8007606:	e05a      	b.n	80076be <report_realtime_status+0x49e>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8007608:	4b35      	ldr	r3, [pc, #212]	; (80076e0 <report_realtime_status+0x4c0>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <report_realtime_status+0x3fc>
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
 8007614:	4b32      	ldr	r3, [pc, #200]	; (80076e0 <report_realtime_status+0x4c0>)
 8007616:	2213      	movs	r2, #19
 8007618:	731a      	strb	r2, [r3, #12]
 800761a:	e002      	b.n	8007622 <report_realtime_status+0x402>
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 800761c:	4b30      	ldr	r3, [pc, #192]	; (80076e0 <report_realtime_status+0x4c0>)
 800761e:	2209      	movs	r2, #9
 8007620:	731a      	strb	r2, [r3, #12]
      printPgmString(PSTR("|Ov:"));
 8007622:	4832      	ldr	r0, [pc, #200]	; (80076ec <report_realtime_status+0x4cc>)
 8007624:	f7fe facc 	bl	8005bc0 <printString>
      print_uint8_base10(sys.f_override);
 8007628:	4b2d      	ldr	r3, [pc, #180]	; (80076e0 <report_realtime_status+0x4c0>)
 800762a:	7a1b      	ldrb	r3, [r3, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fe fadb 	bl	8005be8 <print_uint8_base10>
      serial_write(',');
 8007632:	202c      	movs	r0, #44	; 0x2c
 8007634:	f000 f888 	bl	8007748 <serial_write>
      print_uint8_base10(sys.r_override);
 8007638:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <report_realtime_status+0x4c0>)
 800763a:	7a5b      	ldrb	r3, [r3, #9]
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fad3 	bl	8005be8 <print_uint8_base10>
      serial_write(',');
 8007642:	202c      	movs	r0, #44	; 0x2c
 8007644:	f000 f880 	bl	8007748 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 8007648:	4b25      	ldr	r3, [pc, #148]	; (80076e0 <report_realtime_status+0x4c0>)
 800764a:	7a9b      	ldrb	r3, [r3, #10]
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe facb 	bl	8005be8 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 8007652:	f000 fe99 	bl	8008388 <spindle_get_state>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      uint8_t cl_state = coolant_get_state();
 800765c:	f7fa fca6 	bl	8001fac <coolant_get_state>
 8007660:	4603      	mov	r3, r0
 8007662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      if (sp_state || cl_state) {
 8007666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <report_realtime_status+0x456>
 800766e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007672:	2b00      	cmp	r3, #0
 8007674:	d023      	beq.n	80076be <report_realtime_status+0x49e>
        printPgmString(PSTR("|A:"));
 8007676:	481e      	ldr	r0, [pc, #120]	; (80076f0 <report_realtime_status+0x4d0>)
 8007678:	f7fe faa2 	bl	8005bc0 <printString>
        if (sp_state) { // != SPINDLE_STATE_DISABLE
 800767c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <report_realtime_status+0x47a>
          #ifdef VARIABLE_SPINDLE 
            #ifdef USE_SPINDLE_DIR_AS_ENABLE_PIN
              serial_write('S'); // CW
            #else
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007688:	2b01      	cmp	r3, #1
 800768a:	d103      	bne.n	8007694 <report_realtime_status+0x474>
 800768c:	2053      	movs	r0, #83	; 0x53
 800768e:	f000 f85b 	bl	8007748 <serial_write>
 8007692:	e002      	b.n	800769a <report_realtime_status+0x47a>
              else { serial_write('C'); } // CCW
 8007694:	2043      	movs	r0, #67	; 0x43
 8007696:	f000 f857 	bl	8007748 <serial_write>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800769a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <report_realtime_status+0x48c>
 80076a6:	2046      	movs	r0, #70	; 0x46
 80076a8:	f000 f84e 	bl	8007748 <serial_write>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 80076ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <report_realtime_status+0x49e>
 80076b8:	204d      	movs	r0, #77	; 0x4d
 80076ba:	f000 f845 	bl	8007748 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 80076be:	203e      	movs	r0, #62	; 0x3e
 80076c0:	f000 f842 	bl	8007748 <serial_write>
  report_util_line_feed();
 80076c4:	f7ff f99a 	bl	80069fc <report_util_line_feed>
}
 80076c8:	bf00      	nop
 80076ca:	3734      	adds	r7, #52	; 0x34
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd90      	pop	{r4, r7, pc}
 80076d0:	0800b9b0 	.word	0x0800b9b0
 80076d4:	200010b4 	.word	0x200010b4
 80076d8:	0800b9b8 	.word	0x0800b9b8
 80076dc:	0800b9c0 	.word	0x0800b9c0
 80076e0:	20000f00 	.word	0x20000f00
 80076e4:	0800b9c8 	.word	0x0800b9c8
 80076e8:	0800b9d0 	.word	0x0800b9d0
 80076ec:	0800b9d8 	.word	0x0800b9d8
 80076f0:	0800b9e0 	.word	0x0800b9e0

080076f4 <serial_get_rx_buffer_available>:



// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 80076fa:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <serial_get_rx_buffer_available+0x40>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007700:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <serial_get_rx_buffer_available+0x44>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	79fa      	ldrb	r2, [r7, #7]
 8007706:	429a      	cmp	r2, r3
 8007708:	d807      	bhi.n	800771a <serial_get_rx_buffer_available+0x26>
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <serial_get_rx_buffer_available+0x44>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	79fa      	ldrb	r2, [r7, #7]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	b2db      	uxtb	r3, r3
 8007714:	3b02      	subs	r3, #2
 8007716:	b2db      	uxtb	r3, r3
 8007718:	e006      	b.n	8007728 <serial_get_rx_buffer_available+0x34>
  return((rtail-serial_rx_buffer_head-1));
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <serial_get_rx_buffer_available+0x44>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	79fa      	ldrb	r2, [r7, #7]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	b2db      	uxtb	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b2db      	uxtb	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	200008f1 	.word	0x200008f1
 8007738:	200008f0 	.word	0x200008f0

0800773c <serial_init>:
}



void serial_init()
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  // defaults to 8-bit, no parity, 1 stop bit
#endif
#ifdef WIN32
  InitializeCriticalSectionAndSpinCount(&CriticalSection,0x00000400);
#endif
}
 8007740:	bf00      	nop
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <serial_write>:
}
#endif


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 8007752:	4b22      	ldr	r3, [pc, #136]	; (80077dc <serial_write+0x94>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	3301      	adds	r3, #1
 8007758:	73fb      	strb	r3, [r7, #15]
//	USART_SendData(USART1, data);                // remove by MS because we try to use interrupt
//	while (!(USART1->SR & USART_FLAG_TXE));      // remove by MS because we try to use interrupt
//    return;                                    // remove by MS because we try to use interrupt
#endif
#endif
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	2b80      	cmp	r3, #128	; 0x80
 800775e:	d109      	bne.n	8007774 <serial_write+0x2c>
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
 8007764:	e006      	b.n	8007774 <serial_write+0x2c>
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8007766:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <serial_write+0x98>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b00      	cmp	r3, #0
 8007772:	d12c      	bne.n	80077ce <serial_write+0x86>
  while (next_head == serial_tx_buffer_tail) {
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <serial_write+0x9c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	7bfa      	ldrb	r2, [r7, #15]
 800777c:	429a      	cmp	r2, r3
 800777e:	d0f2      	beq.n	8007766 <serial_write+0x1e>
     Sleep(1);
#endif
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 8007780:	4b16      	ldr	r3, [pc, #88]	; (80077dc <serial_write+0x94>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <serial_write+0xa0>)
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	5453      	strb	r3, [r2, r1]
#ifdef USB_CHANGED_DEBUG
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800778c:	e006      	b.n	800779c <serial_write+0x54>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <serial_write+0x98>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11a      	bne.n	80077d2 <serial_write+0x8a>
  while(txUsbLock) { // lock until txUsbLock to 0 on EP1_callback and change serial_tx_buffer_head variable
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <serial_write+0xa4>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1f3      	bne.n	800778e <serial_write+0x46>
  }
#endif
  serial_tx_buffer_head = next_head;
 80077a6:	4a0d      	ldr	r2, [pc, #52]	; (80077dc <serial_write+0x94>)
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	7013      	strb	r3, [r2, #0]
  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  UCSR0B |=  (1 << UDRIE0);
#endif
#ifdef STM32F103C8                   // added by MS
#ifndef USEUSB                       // added by MS
  if (tx_restart) {                 // added by MS              // If transmit interrupt is disabled, enable it
 80077ac:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <serial_write+0xa8>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <serial_write+0x8c>
      tx_restart = 0;                // added by MS
 80077b6:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <serial_write+0xa8>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
  	USART1->CR1 |= USART_FLAG_TXE;   // added by MS		          // enable TX interrupt
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <serial_write+0xac>)
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <serial_write+0xac>)
 80077c0:	899b      	ldrh	r3, [r3, #12]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8193      	strh	r3, [r2, #12]
 80077cc:	e002      	b.n	80077d4 <serial_write+0x8c>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <serial_write+0x8c>
	  if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop. }
 80077d2:	bf00      	nop
    }                                // added by MS
#endif                               // added by MS
#endif                               // added by MS
}
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr
 80077dc:	200008f2 	.word	0x200008f2
 80077e0:	20000f15 	.word	0x20000f15
 80077e4:	200008f3 	.word	0x200008f3
 80077e8:	20000f34 	.word	0x20000f34
 80077ec:	20000a74 	.word	0x20000a74
 80077f0:	20000014 	.word	0x20000014
 80077f4:	40013800 	.word	0x40013800

080077f8 <serial_read>:
}
#endif

// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <serial_read+0x44>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
  if (serial_rx_buffer_head == tail) {
 8007804:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <serial_read+0x48>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	79fa      	ldrb	r2, [r7, #7]
 800780a:	429a      	cmp	r2, r3
 800780c:	d101      	bne.n	8007812 <serial_read+0x1a>
    return SERIAL_NO_DATA;
 800780e:	23ff      	movs	r3, #255	; 0xff
 8007810:	e00f      	b.n	8007832 <serial_read+0x3a>
  } else {
    uint8_t data = serial_rx_buffer[tail];
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	4a0b      	ldr	r2, [pc, #44]	; (8007844 <serial_read+0x4c>)
 8007816:	5cd3      	ldrb	r3, [r2, r3]
 8007818:	71bb      	strb	r3, [r7, #6]

    tail++;
 800781a:	79fb      	ldrb	r3, [r7, #7]
 800781c:	3301      	adds	r3, #1
 800781e:	71fb      	strb	r3, [r7, #7]
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	2bfe      	cmp	r3, #254	; 0xfe
 8007824:	d101      	bne.n	800782a <serial_read+0x32>
 8007826:	2300      	movs	r3, #0
 8007828:	71fb      	strb	r3, [r7, #7]
    serial_rx_buffer_tail = tail;
 800782a:	4a04      	ldr	r2, [pc, #16]	; (800783c <serial_read+0x44>)
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	7013      	strb	r3, [r2, #0]

    return data;
 8007830:	79bb      	ldrb	r3, [r7, #6]
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	200008f1 	.word	0x200008f1
 8007840:	200008f0 	.word	0x200008f0
 8007844:	20000fb4 	.word	0x20000fb4

08007848 <storeHandleDataIn>:


// store one received byte into Rx buffer or handle if it is a realtime command
void storeHandleDataIn(uint8_t data){
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]

  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
	uint8_t next_head;
	switch (data) {
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b21      	cmp	r3, #33	; 0x21
 8007856:	d014      	beq.n	8007882 <storeHandleDataIn+0x3a>
 8007858:	2b21      	cmp	r3, #33	; 0x21
 800785a:	dc02      	bgt.n	8007862 <storeHandleDataIn+0x1a>
 800785c:	2b18      	cmp	r3, #24
 800785e:	d005      	beq.n	800786c <storeHandleDataIn+0x24>
 8007860:	e013      	b.n	800788a <storeHandleDataIn+0x42>
 8007862:	2b3f      	cmp	r3, #63	; 0x3f
 8007864:	d005      	beq.n	8007872 <storeHandleDataIn+0x2a>
 8007866:	2b7e      	cmp	r3, #126	; 0x7e
 8007868:	d007      	beq.n	800787a <storeHandleDataIn+0x32>
 800786a:	e00e      	b.n	800788a <storeHandleDataIn+0x42>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 800786c:	f7fd fa76 	bl	8004d5c <mc_reset>
 8007870:	e0bd      	b.n	80079ee <storeHandleDataIn+0x1a6>
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 8007872:	2001      	movs	r0, #1
 8007874:	f002 fd56 	bl	800a324 <system_set_exec_state_flag>
 8007878:	e0b9      	b.n	80079ee <storeHandleDataIn+0x1a6>
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 800787a:	2002      	movs	r0, #2
 800787c:	f002 fd52 	bl	800a324 <system_set_exec_state_flag>
 8007880:	e0b5      	b.n	80079ee <storeHandleDataIn+0x1a6>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 8007882:	2008      	movs	r0, #8
 8007884:	f002 fd4e 	bl	800a324 <system_set_exec_state_flag>
 8007888:	e0b1      	b.n	80079ee <storeHandleDataIn+0x1a6>
    default :
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 800788a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f280 8093 	bge.w	80079ba <storeHandleDataIn+0x172>
        switch(data) {
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	3b84      	subs	r3, #132	; 0x84
 8007898:	2b1d      	cmp	r3, #29
 800789a:	f200 80a8 	bhi.w	80079ee <storeHandleDataIn+0x1a6>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <storeHandleDataIn+0x5c>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	0800791d 	.word	0x0800791d
 80078a8:	08007925 	.word	0x08007925
 80078ac:	080079ef 	.word	0x080079ef
 80078b0:	080079ef 	.word	0x080079ef
 80078b4:	080079ef 	.word	0x080079ef
 80078b8:	080079ef 	.word	0x080079ef
 80078bc:	080079ef 	.word	0x080079ef
 80078c0:	080079ef 	.word	0x080079ef
 80078c4:	080079ef 	.word	0x080079ef
 80078c8:	080079ef 	.word	0x080079ef
 80078cc:	080079ef 	.word	0x080079ef
 80078d0:	080079ef 	.word	0x080079ef
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007941 	.word	0x08007941
 80078dc:	08007949 	.word	0x08007949
 80078e0:	08007951 	.word	0x08007951
 80078e4:	08007959 	.word	0x08007959
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007969 	.word	0x08007969
 80078f0:	08007971 	.word	0x08007971
 80078f4:	080079ef 	.word	0x080079ef
 80078f8:	08007979 	.word	0x08007979
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007989 	.word	0x08007989
 8007904:	08007991 	.word	0x08007991
 8007908:	08007999 	.word	0x08007999
 800790c:	080079a1 	.word	0x080079a1
 8007910:	080079ef 	.word	0x080079ef
 8007914:	080079a9 	.word	0x080079a9
 8007918:	080079b1 	.word	0x080079b1
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 800791c:	2020      	movs	r0, #32
 800791e:	f002 fd01 	bl	800a324 <system_set_exec_state_flag>
 8007922:	e064      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_JOG_CANCEL:
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 8007924:	4b34      	ldr	r3, [pc, #208]	; (80079f8 <storeHandleDataIn+0x1b0>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05d      	beq.n	80079ec <storeHandleDataIn+0x1a4>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL);
 8007930:	2040      	movs	r0, #64	; 0x40
 8007932:	f002 fcf7 	bl	800a324 <system_set_exec_state_flag>
              //printString("set EMC\n");                      // added by MS to debug
            }
            break;
 8007936:	e059      	b.n	80079ec <storeHandleDataIn+0x1a4>
          #ifdef DEBUG
            case CMD_DEBUG_REPORT: {uint8_t sreg = SREG; cli(); bit_true(sys_rt_exec_debug,EXEC_DEBUG_REPORT); SREG = sreg;} break;
          #endif
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 8007938:	2001      	movs	r0, #1
 800793a:	f002 fd45 	bl	800a3c8 <system_set_exec_motion_override_flag>
 800793e:	e056      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 8007940:	2002      	movs	r0, #2
 8007942:	f002 fd41 	bl	800a3c8 <system_set_exec_motion_override_flag>
 8007946:	e052      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 8007948:	2004      	movs	r0, #4
 800794a:	f002 fd3d 	bl	800a3c8 <system_set_exec_motion_override_flag>
 800794e:	e04e      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 8007950:	2008      	movs	r0, #8
 8007952:	f002 fd39 	bl	800a3c8 <system_set_exec_motion_override_flag>
 8007956:	e04a      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 8007958:	2010      	movs	r0, #16
 800795a:	f002 fd35 	bl	800a3c8 <system_set_exec_motion_override_flag>
 800795e:	e046      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 8007960:	2020      	movs	r0, #32
 8007962:	f002 fd31 	bl	800a3c8 <system_set_exec_motion_override_flag>
 8007966:	e042      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 8007968:	2040      	movs	r0, #64	; 0x40
 800796a:	f002 fd2d 	bl	800a3c8 <system_set_exec_motion_override_flag>
 800796e:	e03e      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 8007970:	2080      	movs	r0, #128	; 0x80
 8007972:	f002 fd29 	bl	800a3c8 <system_set_exec_motion_override_flag>
 8007976:	e03a      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8007978:	2001      	movs	r0, #1
 800797a:	f002 fd3b 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 800797e:	e036      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8007980:	2002      	movs	r0, #2
 8007982:	f002 fd37 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 8007986:	e032      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8007988:	2004      	movs	r0, #4
 800798a:	f002 fd33 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 800798e:	e02e      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8007990:	2008      	movs	r0, #8
 8007992:	f002 fd2f 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 8007996:	e02a      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8007998:	2010      	movs	r0, #16
 800799a:	f002 fd2b 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 800799e:	e026      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 80079a0:	2020      	movs	r0, #32
 80079a2:	f002 fd27 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 80079a6:	e022      	b.n	80079ee <storeHandleDataIn+0x1a6>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 80079a8:	2040      	movs	r0, #64	; 0x40
 80079aa:	f002 fd23 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 80079ae:	e01e      	b.n	80079ee <storeHandleDataIn+0x1a6>
          #ifdef ENABLE_M7
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 80079b0:	2080      	movs	r0, #128	; 0x80
 80079b2:	f002 fd1f 	bl	800a3f4 <system_set_exec_accessory_override_flag>
 80079b6:	bf00      	nop
 80079b8:	e019      	b.n	80079ee <storeHandleDataIn+0x1a6>
          #endif
        }
        // Throw away any unfound extended-ASCII character by not passing it to the serial buffer.
      } else { // Write character to buffer
        next_head = serial_rx_buffer_head + 1;
 80079ba:	4b10      	ldr	r3, [pc, #64]	; (80079fc <storeHandleDataIn+0x1b4>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	3301      	adds	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2bfe      	cmp	r3, #254	; 0xfe
 80079c6:	d101      	bne.n	80079cc <storeHandleDataIn+0x184>
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]

        // Write data to buffer unless it is full.
        if (next_head != serial_rx_buffer_tail) {
 80079cc:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <storeHandleDataIn+0x1b8>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	7bfa      	ldrb	r2, [r7, #15]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d00a      	beq.n	80079ee <storeHandleDataIn+0x1a6>
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <storeHandleDataIn+0x1b4>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <storeHandleDataIn+0x1bc>)
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	5453      	strb	r3, [r2, r1]
          serial_rx_buffer_head = next_head;
 80079e4:	4a05      	ldr	r2, [pc, #20]	; (80079fc <storeHandleDataIn+0x1b4>)
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	7013      	strb	r3, [r2, #0]
        }
      }
  }
}
 80079ea:	e000      	b.n	80079ee <storeHandleDataIn+0x1a6>
            break;
 80079ec:	bf00      	nop
}
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000f00 	.word	0x20000f00
 80079fc:	200008f0 	.word	0x200008f0
 8007a00:	200008f1 	.word	0x200008f1
 8007a04:	20000fb4 	.word	0x20000fb4

08007a08 <USART1_IRQHandler>:
/*----------------------------------------------------------------------------
  USART1_IRQHandler
  Handles USART1 global interrupt request.
 *----------------------------------------------------------------------------*/
void USART1_IRQHandler (void) 
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
    volatile unsigned int IIR;
    uint8_t data;
    uint8_t tail;

    IIR = USART1->SR;
 8007a0e:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	603b      	str	r3, [r7, #0]
    if (IIR & USART_FLAG_RXNE) 
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f003 0320 	and.w	r3, r3, #32
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00f      	beq.n	8007a40 <USART1_IRQHandler+0x38>
    {                  // read interrupt
        data = USART1->DR & 0x1FF;
 8007a20:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a22:	889b      	ldrh	r3, [r3, #4]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	71bb      	strb	r3, [r7, #6]
        storeHandleDataIn(data);
 8007a28:	79bb      	ldrb	r3, [r7, #6]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff ff0c 	bl	8007848 <storeHandleDataIn>
        USART1->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 8007a30:	4a20      	ldr	r2, [pc, #128]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a32:	4b20      	ldr	r3, [pc, #128]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	8013      	strh	r3, [r2, #0]
    }

    if (IIR & USART_FLAG_TXE) {
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d02f      	beq.n	8007aaa <USART1_IRQHandler+0xa2>
          USART1->SR &= ~USART_FLAG_TXE;	          // clear interrupt
 8007a4a:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a4c:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	8013      	strh	r3, [r2, #0]
          tail = serial_tx_buffer_tail;
 8007a5a:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <USART1_IRQHandler+0xb0>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	71fb      	strb	r3, [r7, #7]
          if (tail != serial_tx_buffer_head) {  // if there is at least one byte to send; take it from the buffer and
 8007a60:	4b16      	ldr	r3, [pc, #88]	; (8007abc <USART1_IRQHandler+0xb4>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	79fa      	ldrb	r2, [r7, #7]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d014      	beq.n	8007a94 <USART1_IRQHandler+0x8c>
        	  USART1->DR = serial_tx_buffer[tail];
 8007a6a:	4a12      	ldr	r2, [pc, #72]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	4914      	ldr	r1, [pc, #80]	; (8007ac0 <USART1_IRQHandler+0xb8>)
 8007a70:	5ccb      	ldrb	r3, [r1, r3]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8093      	strh	r3, [r2, #4]
        	  tail++;
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	71fb      	strb	r3, [r7, #7]
        	  if ( tail == TX_BUFFER_SIZE) { tail = 0;  }
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	2b80      	cmp	r3, #128	; 0x80
 8007a80:	d101      	bne.n	8007a86 <USART1_IRQHandler+0x7e>
 8007a82:	2300      	movs	r3, #0
 8007a84:	71fb      	strb	r3, [r7, #7]
        	  serial_tx_buffer_tail = tail;
 8007a86:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <USART1_IRQHandler+0xb0>)
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	7013      	strb	r3, [r2, #0]
        	  tx_restart = 0;
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <USART1_IRQHandler+0xbc>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
//          }
//          else {
//            tx_restart = 1;
//    		USART1->CR1 &= ~USART_FLAG_TXE;		      // disable TX interrupt if nothing to send
    } // end of sending
}     // end of interrupt
 8007a92:	e00a      	b.n	8007aaa <USART1_IRQHandler+0xa2>
        	  tx_restart = 1;
 8007a94:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <USART1_IRQHandler+0xbc>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
        	  USART1->CR1 &= ~USART_FLAG_TXE;		      // disable TX interrupt if nothing to send
 8007a9a:	4a06      	ldr	r2, [pc, #24]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <USART1_IRQHandler+0xac>)
 8007a9e:	899b      	ldrh	r3, [r3, #12]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8193      	strh	r3, [r2, #12]
}     // end of interrupt
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40013800 	.word	0x40013800
 8007ab8:	200008f3 	.word	0x200008f3
 8007abc:	200008f2 	.word	0x200008f2
 8007ac0:	20000f34 	.word	0x20000f34
 8007ac4:	20000014 	.word	0x20000014

08007ac8 <serial_reset_read_buffer>:
#endif  // end of else of USEUSB
#endif  // end of STM32STM32F103C8

void serial_reset_read_buffer()
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8007acc:	4b03      	ldr	r3, [pc, #12]	; (8007adc <serial_reset_read_buffer+0x14>)
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	4b03      	ldr	r3, [pc, #12]	; (8007ae0 <serial_reset_read_buffer+0x18>)
 8007ad2:	701a      	strb	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr
 8007adc:	200008f0 	.word	0x200008f0
 8007ae0:	200008f1 	.word	0x200008f1

08007ae4 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 8007af0:	f7fe fb0a 	bl	8006108 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007af4:	79fa      	ldrb	r2, [r7, #7]
 8007af6:	4613      	mov	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4413      	add	r3, r2
 8007afc:	00da      	lsls	r2, r3, #3
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007b04:	60fb      	str	r3, [r7, #12]
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007b06:	2250      	movs	r2, #80	; 0x50
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7fa fb68 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007b10:	bf00      	nop
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <settings_store_build_info>:


// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007b20:	2250      	movs	r2, #80	; 0x50
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007b28:	f7fa fb5a 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <settings_write_coord_data>:


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 8007b40:	f7fe fae2 	bl	8006108 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007b44:	79fa      	ldrb	r2, [r7, #7]
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007b54:	60fb      	str	r3, [r7, #12]
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007b56:	220c      	movs	r2, #12
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7fa fb40 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <write_global_settings>:


// Method to store Grbl global settings struct and version number into EEPROM
// NOTE: This function can only be called in IDLE state.
void write_global_settings()
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  eeprom_put_char(0, SETTINGS_VERSION);
 8007b6c:	210a      	movs	r1, #10
 8007b6e:	2000      	movs	r0, #0
 8007b70:	f7fa fb24 	bl	80021bc <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007b74:	225c      	movs	r2, #92	; 0x5c
 8007b76:	4903      	ldr	r1, [pc, #12]	; (8007b84 <write_global_settings+0x1c>)
 8007b78:	2001      	movs	r0, #1
 8007b7a:	f7fa fb31 	bl	80021e0 <memcpy_to_eeprom_with_checksum>
}
 8007b7e:	bf00      	nop
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	200010b4 	.word	0x200010b4

08007b88 <settings_restore>:


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	71fb      	strb	r3, [r7, #7]
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d075      	beq.n	8007c88 <settings_restore+0x100>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007b9c:	4b5e      	ldr	r3, [pc, #376]	; (8007d18 <settings_restore+0x190>)
 8007b9e:	2206      	movs	r2, #6
 8007ba0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007ba4:	4b5c      	ldr	r3, [pc, #368]	; (8007d18 <settings_restore+0x190>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007bac:	4b5a      	ldr	r3, [pc, #360]	; (8007d18 <settings_restore+0x190>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	865a      	strh	r2, [r3, #50]	; 0x32
    settings.dir_invert_mask = DEFAULT_DIRECTION_INVERT_MASK;
 8007bb2:	4b59      	ldr	r3, [pc, #356]	; (8007d18 <settings_restore+0x190>)
 8007bb4:	221f      	movs	r2, #31
 8007bb6:	869a      	strh	r2, [r3, #52]	; 0x34
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007bb8:	4b57      	ldr	r3, [pc, #348]	; (8007d18 <settings_restore+0x190>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007bc0:	4b55      	ldr	r3, [pc, #340]	; (8007d18 <settings_restore+0x190>)
 8007bc2:	4a56      	ldr	r2, [pc, #344]	; (8007d1c <settings_restore+0x194>)
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007bc6:	4b54      	ldr	r3, [pc, #336]	; (8007d18 <settings_restore+0x190>)
 8007bc8:	4a55      	ldr	r2, [pc, #340]	; (8007d20 <settings_restore+0x198>)
 8007bca:	63da      	str	r2, [r3, #60]	; 0x3c

    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007bcc:	4b52      	ldr	r3, [pc, #328]	; (8007d18 <settings_restore+0x190>)
 8007bce:	4a55      	ldr	r2, [pc, #340]	; (8007d24 <settings_restore+0x19c>)
 8007bd0:	641a      	str	r2, [r3, #64]	; 0x40
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007bd2:	4b51      	ldr	r3, [pc, #324]	; (8007d18 <settings_restore+0x190>)
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44

    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007bda:	4b4f      	ldr	r3, [pc, #316]	; (8007d18 <settings_restore+0x190>)
 8007bdc:	221f      	movs	r2, #31
 8007bde:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007be2:	4b4d      	ldr	r3, [pc, #308]	; (8007d18 <settings_restore+0x190>)
 8007be4:	4a50      	ldr	r2, [pc, #320]	; (8007d28 <settings_restore+0x1a0>)
 8007be6:	64da      	str	r2, [r3, #76]	; 0x4c
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007be8:	4b4b      	ldr	r3, [pc, #300]	; (8007d18 <settings_restore+0x190>)
 8007bea:	4a50      	ldr	r2, [pc, #320]	; (8007d2c <settings_restore+0x1a4>)
 8007bec:	651a      	str	r2, [r3, #80]	; 0x50
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007bee:	4b4a      	ldr	r3, [pc, #296]	; (8007d18 <settings_restore+0x190>)
 8007bf0:	22fa      	movs	r2, #250	; 0xfa
 8007bf2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007bf6:	4b48      	ldr	r3, [pc, #288]	; (8007d18 <settings_restore+0x190>)
 8007bf8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8007bfc:	659a      	str	r2, [r3, #88]	; 0x58

    settings.flags = 0;
 8007bfe:	4b46      	ldr	r3, [pc, #280]	; (8007d18 <settings_restore+0x190>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_REPORT_INCHES) { settings.flags |= BITFLAG_REPORT_INCHES; }
    if (DEFAULT_LASER_MODE) { settings.flags |= BITFLAG_LASER_MODE; }
    if (DEFAULT_INVERT_ST_ENABLE) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007c06:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <settings_restore+0x190>)
 8007c08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007c0c:	f043 0304 	orr.w	r3, r3, #4
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <settings_restore+0x190>)
 8007c14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_HARD_LIMIT_ENABLE) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007c18:	4b3f      	ldr	r3, [pc, #252]	; (8007d18 <settings_restore+0x190>)
 8007c1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007c1e:	f043 0308 	orr.w	r3, r3, #8
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	4b3c      	ldr	r3, [pc, #240]	; (8007d18 <settings_restore+0x190>)
 8007c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_HOMING_ENABLE) { settings.flags |= BITFLAG_HOMING_ENABLE; }
    if (DEFAULT_SOFT_LIMIT_ENABLE) { settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE; }
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007c2a:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <settings_restore+0x190>)
 8007c2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	4b38      	ldr	r3, [pc, #224]	; (8007d18 <settings_restore+0x190>)
 8007c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    if (DEFAULT_INVERT_PROBE_PIN) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }

    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007c3c:	4b36      	ldr	r3, [pc, #216]	; (8007d18 <settings_restore+0x190>)
 8007c3e:	4a3c      	ldr	r2, [pc, #240]	; (8007d30 <settings_restore+0x1a8>)
 8007c40:	601a      	str	r2, [r3, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007c42:	4b35      	ldr	r3, [pc, #212]	; (8007d18 <settings_restore+0x190>)
 8007c44:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <settings_restore+0x1a8>)
 8007c46:	605a      	str	r2, [r3, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007c48:	4b33      	ldr	r3, [pc, #204]	; (8007d18 <settings_restore+0x190>)
 8007c4a:	4a39      	ldr	r2, [pc, #228]	; (8007d30 <settings_restore+0x1a8>)
 8007c4c:	609a      	str	r2, [r3, #8]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007c4e:	4b32      	ldr	r3, [pc, #200]	; (8007d18 <settings_restore+0x190>)
 8007c50:	4a38      	ldr	r2, [pc, #224]	; (8007d34 <settings_restore+0x1ac>)
 8007c52:	60da      	str	r2, [r3, #12]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007c54:	4b30      	ldr	r3, [pc, #192]	; (8007d18 <settings_restore+0x190>)
 8007c56:	4a37      	ldr	r2, [pc, #220]	; (8007d34 <settings_restore+0x1ac>)
 8007c58:	611a      	str	r2, [r3, #16]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007c5a:	4b2f      	ldr	r3, [pc, #188]	; (8007d18 <settings_restore+0x190>)
 8007c5c:	4a35      	ldr	r2, [pc, #212]	; (8007d34 <settings_restore+0x1ac>)
 8007c5e:	615a      	str	r2, [r3, #20]
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <settings_restore+0x190>)
 8007c62:	4a35      	ldr	r2, [pc, #212]	; (8007d38 <settings_restore+0x1b0>)
 8007c64:	619a      	str	r2, [r3, #24]
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007c66:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <settings_restore+0x190>)
 8007c68:	4a33      	ldr	r2, [pc, #204]	; (8007d38 <settings_restore+0x1b0>)
 8007c6a:	61da      	str	r2, [r3, #28]
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007c6c:	4b2a      	ldr	r3, [pc, #168]	; (8007d18 <settings_restore+0x190>)
 8007c6e:	4a32      	ldr	r2, [pc, #200]	; (8007d38 <settings_restore+0x1b0>)
 8007c70:	621a      	str	r2, [r3, #32]
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007c72:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <settings_restore+0x190>)
 8007c74:	4a31      	ldr	r2, [pc, #196]	; (8007d3c <settings_restore+0x1b4>)
 8007c76:	625a      	str	r2, [r3, #36]	; 0x24
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007c78:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <settings_restore+0x190>)
 8007c7a:	4a30      	ldr	r2, [pc, #192]	; (8007d3c <settings_restore+0x1b4>)
 8007c7c:	629a      	str	r2, [r3, #40]	; 0x28
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007c7e:	4b26      	ldr	r3, [pc, #152]	; (8007d18 <settings_restore+0x190>)
 8007c80:	4a2e      	ldr	r2, [pc, #184]	; (8007d3c <settings_restore+0x1b4>)
 8007c82:	62da      	str	r2, [r3, #44]	; 0x2c
    settings.max_rate[C_AXIS] = DEFAULT_C_MAX_RATE;
    settings.acceleration[C_AXIS] = DEFAULT_C_ACCELERATION;
    settings.max_travel[C_AXIS] = (-DEFAULT_C_MAX_TRAVEL);
	#endif
// ---
    write_global_settings();
 8007c84:	f7ff ff70 	bl	8007b68 <write_global_settings>
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d016      	beq.n	8007cc0 <settings_restore+0x138>
    uint8_t idx;
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
 8007c92:	f107 0308 	add.w	r3, r7, #8
 8007c96:	220c      	movs	r2, #12
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f002 fcc9 	bl	800a632 <memset>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75fb      	strb	r3, [r7, #23]
 8007ca4:	e009      	b.n	8007cba <settings_restore+0x132>
 8007ca6:	f107 0208 	add.w	r2, r7, #8
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff ff40 	bl	8007b34 <settings_write_coord_data>
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b07      	cmp	r3, #7
 8007cbe:	d9f2      	bls.n	8007ca6 <settings_restore+0x11e>
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <settings_restore+0x16a>
    #if N_STARTUP_LINE > 0
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007cd0:	f7fa fa74 	bl	80021bc <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f240 3001 	movw	r0, #769	; 0x301
 8007cda:	f7fa fa6f 	bl	80021bc <eeprom_put_char>
    #endif
    #if N_STARTUP_LINE > 1
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007cde:	2100      	movs	r1, #0
 8007ce0:	f240 3051 	movw	r0, #849	; 0x351
 8007ce4:	f7fa fa6a 	bl	80021bc <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f240 3052 	movw	r0, #850	; 0x352
 8007cee:	f7fa fa65 	bl	80021bc <eeprom_put_char>
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	f003 0308 	and.w	r3, r3, #8
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <settings_restore+0x188>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007d02:	f7fa fa5b 	bl	80021bc <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007d06:	2100      	movs	r1, #0
 8007d08:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007d0c:	f7fa fa56 	bl	80021bc <eeprom_put_char>
  }
}
 8007d10:	bf00      	nop
 8007d12:	3718      	adds	r7, #24
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	200010b4 	.word	0x200010b4
 8007d1c:	3c23d70a 	.word	0x3c23d70a
 8007d20:	3b03126f 	.word	0x3b03126f
 8007d24:	447a0000 	.word	0x447a0000
 8007d28:	41200000 	.word	0x41200000
 8007d2c:	42c80000 	.word	0x42c80000
 8007d30:	42f00000 	.word	0x42f00000
 8007d34:	44fa0000 	.word	0x44fa0000
 8007d38:	43c80000 	.word	0x43c80000
 8007d3c:	c38c0000 	.word	0xc38c0000

08007d40 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	6039      	str	r1, [r7, #0]
 8007d4a:	71fb      	strb	r3, [r7, #7]
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 8007d4c:	79fa      	ldrb	r2, [r7, #7]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4413      	add	r3, r2
 8007d54:	00da      	lsls	r2, r3, #3
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007d5c:	60fb      	str	r3, [r7, #12]
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8007d5e:	2250      	movs	r2, #80	; 0x50
 8007d60:	68f9      	ldr	r1, [r7, #12]
 8007d62:	6838      	ldr	r0, [r7, #0]
 8007d64:	f7fa fa72 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <settings_read_startup_line+0x42>
    // Reset line with default value
    line[0] = 0; // Empty line
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
    settings_store_startup_line(n, line);
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff feb3 	bl	8007ae4 <settings_store_startup_line>
    return(false);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e000      	b.n	8007d84 <settings_read_startup_line+0x44>
  }
  return(true);
 8007d82:	2301      	movs	r3, #1
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8007d94:	2250      	movs	r2, #80	; 0x50
 8007d96:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fa fa56 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d107      	bne.n	8007db6 <settings_read_build_info+0x2a>
    // Reset line with default value
    line[0] = 0; // Empty line
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
    settings_store_build_info(line);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff feb3 	bl	8007b18 <settings_store_build_info>
    return(false);
 8007db2:	2300      	movs	r3, #0
 8007db4:	e000      	b.n	8007db8 <settings_read_build_info+0x2c>
  }
  return(true);
 8007db6:	2301      	movs	r3, #1
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007dcc:	79fa      	ldrb	r2, [r7, #7]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ddc:	60fb      	str	r3, [r7, #12]
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007dde:	220c      	movs	r2, #12
 8007de0:	68f9      	ldr	r1, [r7, #12]
 8007de2:	6838      	ldr	r0, [r7, #0]
 8007de4:	f7fa fa32 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d114      	bne.n	8007e18 <settings_read_coord_data+0x58>
    // Reset with default zero vector
		coord_data[X_AXIS] = 0.0f;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
		coord_data[Y_AXIS] = 0.0f;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
		coord_data[Z_AXIS] = 0.0f;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
		#endif
		#ifdef ABC_AXIS
		coord_data[C_AXIS] = 0.0f;
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7ff fe90 	bl	8007b34 <settings_write_coord_data>
    return(false);
 8007e14:	2300      	movs	r3, #0
 8007e16:	e000      	b.n	8007e1a <settings_read_coord_data+0x5a>
  }
  return(true);
 8007e18:	2301      	movs	r3, #1
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <read_global_settings>:


// Reads Grbl global settings struct from EEPROM.
uint8_t read_global_settings() {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7fa f9b6 	bl	800219c <eeprom_get_char>
 8007e30:	4603      	mov	r3, r0
 8007e32:	71fb      	strb	r3, [r7, #7]
  if (version == SETTINGS_VERSION) {
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b0a      	cmp	r3, #10
 8007e38:	d109      	bne.n	8007e4e <read_global_settings+0x2a>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007e3a:	225c      	movs	r2, #92	; 0x5c
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	4807      	ldr	r0, [pc, #28]	; (8007e5c <read_global_settings+0x38>)
 8007e40:	f7fa fa04 	bl	800224c <memcpy_from_eeprom_with_checksum>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <read_global_settings+0x2e>
      return(false);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e002      	b.n	8007e54 <read_global_settings+0x30>
    }
  } else {
    return(false);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <read_global_settings+0x30>
  }
  return(true);
 8007e52:	2301      	movs	r3, #1
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200010b4 	.word	0x200010b4

08007e60 <settings_store_global_setting>:


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007e6c:	f04f 0100 	mov.w	r1, #0
 8007e70:	6838      	ldr	r0, [r7, #0]
 8007e72:	f7f9 f8bb 	bl	8000fec <__aeabi_fcmplt>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <settings_store_global_setting+0x20>
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	e1d3      	b.n	8008228 <settings_store_global_setting+0x3c8>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	2b63      	cmp	r3, #99	; 0x63
 8007e84:	d954      	bls.n	8007f30 <settings_store_global_setting+0xd0>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	3b64      	subs	r3, #100	; 0x64
 8007e8a:	71fb      	strb	r3, [r7, #7]
    uint8_t set_idx = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
    while (set_idx < AXIS_N_SETTINGS) {
 8007e90:	e04a      	b.n	8007f28 <settings_store_global_setting+0xc8>
      if (parameter < N_AXIS) {
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d839      	bhi.n	8007f0c <settings_store_global_setting+0xac>
        // Valid axis setting found.
        switch (set_idx) {
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	f200 81c0 	bhi.w	8008220 <settings_store_global_setting+0x3c0>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <settings_store_global_setting+0x48>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007eb9 	.word	0x08007eb9
 8007eac:	08007ec5 	.word	0x08007ec5
 8007eb0:	08007ed5 	.word	0x08007ed5
 8007eb4:	08007ef7 	.word	0x08007ef7
          case 0:
            #ifdef MAX_STEP_RATE_HZ
            if (value*settings.max_rate[parameter] >(MAX_STEP_RATE_HZ*60.0f)) { return(STATUS_MAX_STEP_RATE_EXCEEDED); }
            #endif
            settings.steps_per_mm[parameter] = value;
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	49af      	ldr	r1, [pc, #700]	; (8008178 <settings_store_global_setting+0x318>)
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            break;
 8007ec2:	e022      	b.n	8007f0a <settings_store_global_setting+0xaa>
          case 1:
            #ifdef MAX_STEP_RATE_HZ
            if (value*settings.steps_per_mm[parameter] > (MAX_STEP_RATE_HZ*60.0f)) { return(STATUS_MAX_STEP_RATE_EXCEEDED); }
            #endif
            settings.max_rate[parameter] = value;
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	4aac      	ldr	r2, [pc, #688]	; (8008178 <settings_store_global_setting+0x318>)
 8007ec8:	3302      	adds	r3, #2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
            break;
 8007ed2:	e01a      	b.n	8007f0a <settings_store_global_setting+0xaa>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007ed4:	79fc      	ldrb	r4, [r7, #7]
 8007ed6:	49a9      	ldr	r1, [pc, #676]	; (800817c <settings_store_global_setting+0x31c>)
 8007ed8:	6838      	ldr	r0, [r7, #0]
 8007eda:	f7f8 fee9 	bl	8000cb0 <__aeabi_fmul>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	49a6      	ldr	r1, [pc, #664]	; (800817c <settings_store_global_setting+0x31c>)
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7f8 fee4 	bl	8000cb0 <__aeabi_fmul>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	4619      	mov	r1, r3
 8007eec:	4aa2      	ldr	r2, [pc, #648]	; (8008178 <settings_store_global_setting+0x318>)
 8007eee:	1da3      	adds	r3, r4, #6
 8007ef0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007ef4:	e009      	b.n	8007f0a <settings_store_global_setting+0xaa>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 8007efe:	499e      	ldr	r1, [pc, #632]	; (8008178 <settings_store_global_setting+0x318>)
 8007f00:	3308      	adds	r3, #8
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	605a      	str	r2, [r3, #4]
 8007f08:	bf00      	nop
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
 8007f0a:	e189      	b.n	8008220 <settings_store_global_setting+0x3c0>
      } else {
        set_idx++;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	d902      	bls.n	8007f1e <settings_store_global_setting+0xbe>
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d101      	bne.n	8007f22 <settings_store_global_setting+0xc2>
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e182      	b.n	8008228 <settings_store_global_setting+0x3c8>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	3b0a      	subs	r3, #10
 8007f26:	71fb      	strb	r3, [r7, #7]
    while (set_idx < AXIS_N_SETTINGS) {
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d9b1      	bls.n	8007e92 <settings_store_global_setting+0x32>
 8007f2e:	e178      	b.n	8008222 <settings_store_global_setting+0x3c2>
      }
    }
  } else {
    // Store non-axis Grbl settings
    uint8_t int_value = truncf(value);
 8007f30:	6838      	ldr	r0, [r7, #0]
 8007f32:	f002 fc9d 	bl	800a870 <truncf>
 8007f36:	4603      	mov	r3, r0
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7f9 f8bb 	bl	80010b4 <__aeabi_f2uiz>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73bb      	strb	r3, [r7, #14]
    switch(parameter) {
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	f200 8169 	bhi.w	800821c <settings_store_global_setting+0x3bc>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <settings_store_global_setting+0xf0>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007fd5 	.word	0x08007fd5
 8007f54:	08007fe9 	.word	0x08007fe9
 8007f58:	08007ff3 	.word	0x08007ff3
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	0800800f 	.word	0x0800800f
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	0800806b 	.word	0x0800806b
 8007f6c:	0800821d 	.word	0x0800821d
 8007f70:	0800821d 	.word	0x0800821d
 8007f74:	0800821d 	.word	0x0800821d
 8007f78:	0800809f 	.word	0x0800809f
 8007f7c:	080080a9 	.word	0x080080a9
 8007f80:	080080b1 	.word	0x080080b1
 8007f84:	080080b9 	.word	0x080080b9
 8007f88:	0800821d 	.word	0x0800821d
 8007f8c:	0800821d 	.word	0x0800821d
 8007f90:	0800821d 	.word	0x0800821d
 8007f94:	0800821d 	.word	0x0800821d
 8007f98:	0800821d 	.word	0x0800821d
 8007f9c:	0800821d 	.word	0x0800821d
 8007fa0:	080080eb 	.word	0x080080eb
 8007fa4:	0800812b 	.word	0x0800812b
 8007fa8:	0800815d 	.word	0x0800815d
 8007fac:	080081a7 	.word	0x080081a7
 8007fb0:	080081b3 	.word	0x080081b3
 8007fb4:	080081bb 	.word	0x080081bb
 8007fb8:	080081c3 	.word	0x080081c3
 8007fbc:	080081cf 	.word	0x080081cf
 8007fc0:	0800821d 	.word	0x0800821d
 8007fc4:	0800821d 	.word	0x0800821d
 8007fc8:	080081d7 	.word	0x080081d7
 8007fcc:	080081e3 	.word	0x080081e3
 8007fd0:	080081ef 	.word	0x080081ef
      case 0:
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d801      	bhi.n	8007fde <settings_store_global_setting+0x17e>
 8007fda:	2306      	movs	r3, #6
 8007fdc:	e124      	b.n	8008228 <settings_store_global_setting+0x3c8>
        settings.pulse_microseconds = int_value; break;
 8007fde:	4a66      	ldr	r2, [pc, #408]	; (8008178 <settings_store_global_setting+0x318>)
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 8007fe6:	e11c      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007fe8:	4a63      	ldr	r2, [pc, #396]	; (8008178 <settings_store_global_setting+0x318>)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
 8007ff0:	e117      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 2:
        settings.step_invert_mask = int_value;
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	4b60      	ldr	r3, [pc, #384]	; (8008178 <settings_store_global_setting+0x318>)
 8007ff8:	865a      	strh	r2, [r3, #50]	; 0x32
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007ffa:	f000 fdf5 	bl	8008be8 <st_generate_step_dir_invert_masks>
        break;
 8007ffe:	e110      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 3:
        settings.dir_invert_mask = int_value;
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	b29a      	uxth	r2, r3
 8008004:	4b5c      	ldr	r3, [pc, #368]	; (8008178 <settings_store_global_setting+0x318>)
 8008006:	869a      	strh	r2, [r3, #52]	; 0x34
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8008008:	f000 fdee 	bl	8008be8 <st_generate_step_dir_invert_masks>
        break;
 800800c:	e109      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 4: // Reset to ensure change. Immediate re-init may cause problems.
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <settings_store_global_setting+0x1c8>
 8008014:	4b58      	ldr	r3, [pc, #352]	; (8008178 <settings_store_global_setting+0x318>)
 8008016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800801a:	f043 0304 	orr.w	r3, r3, #4
 800801e:	b2da      	uxtb	r2, r3
 8008020:	4b55      	ldr	r3, [pc, #340]	; (8008178 <settings_store_global_setting+0x318>)
 8008022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
        break;
 8008026:	e0fc      	b.n	8008222 <settings_store_global_setting+0x3c2>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8008028:	4b53      	ldr	r3, [pc, #332]	; (8008178 <settings_store_global_setting+0x318>)
 800802a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800802e:	f023 0304 	bic.w	r3, r3, #4
 8008032:	b2da      	uxtb	r2, r3
 8008034:	4b50      	ldr	r3, [pc, #320]	; (8008178 <settings_store_global_setting+0x318>)
 8008036:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 800803a:	e0f2      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 5: // Reset to ensure change. Immediate re-init may cause problems.
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <settings_store_global_setting+0x1f6>
 8008042:	4b4d      	ldr	r3, [pc, #308]	; (8008178 <settings_store_global_setting+0x318>)
 8008044:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800804c:	b2da      	uxtb	r2, r3
 800804e:	4b4a      	ldr	r3, [pc, #296]	; (8008178 <settings_store_global_setting+0x318>)
 8008050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
        break;
 8008054:	e0e5      	b.n	8008222 <settings_store_global_setting+0x3c2>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8008056:	4b48      	ldr	r3, [pc, #288]	; (8008178 <settings_store_global_setting+0x318>)
 8008058:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800805c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008060:	b2da      	uxtb	r2, r3
 8008062:	4b45      	ldr	r3, [pc, #276]	; (8008178 <settings_store_global_setting+0x318>)
 8008064:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 8008068:	e0db      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 6: // Reset to ensure change. Immediate re-init may cause problems.
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <settings_store_global_setting+0x224>
 8008070:	4b41      	ldr	r3, [pc, #260]	; (8008178 <settings_store_global_setting+0x318>)
 8008072:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800807a:	b2da      	uxtb	r2, r3
 800807c:	4b3e      	ldr	r3, [pc, #248]	; (8008178 <settings_store_global_setting+0x318>)
 800807e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8008082:	e008      	b.n	8008096 <settings_store_global_setting+0x236>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8008084:	4b3c      	ldr	r3, [pc, #240]	; (8008178 <settings_store_global_setting+0x318>)
 8008086:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800808a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808e:	b2da      	uxtb	r2, r3
 8008090:	4b39      	ldr	r3, [pc, #228]	; (8008178 <settings_store_global_setting+0x318>)
 8008092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        probe_configure_invert_mask(false);
 8008096:	2000      	movs	r0, #0
 8008098:	f7fd feee 	bl	8005e78 <probe_configure_invert_mask>
        break;
 800809c:	e0c1      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 10: settings.status_report_mask = int_value; break;
 800809e:	4a36      	ldr	r2, [pc, #216]	; (8008178 <settings_store_global_setting+0x318>)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
 80080a6:	e0bc      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 11: settings.junction_deviation = value; break;
 80080a8:	4a33      	ldr	r2, [pc, #204]	; (8008178 <settings_store_global_setting+0x318>)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6393      	str	r3, [r2, #56]	; 0x38
 80080ae:	e0b8      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 12: settings.arc_tolerance = value; break;
 80080b0:	4a31      	ldr	r2, [pc, #196]	; (8008178 <settings_store_global_setting+0x318>)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80080b6:	e0b4      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 13:
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <settings_store_global_setting+0x272>
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <settings_store_global_setting+0x318>)
 80080c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080c4:	f043 0301 	orr.w	r3, r3, #1
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <settings_store_global_setting+0x318>)
 80080cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80080d0:	e008      	b.n	80080e4 <settings_store_global_setting+0x284>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 80080d2:	4b29      	ldr	r3, [pc, #164]	; (8008178 <settings_store_global_setting+0x318>)
 80080d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	4b26      	ldr	r3, [pc, #152]	; (8008178 <settings_store_global_setting+0x318>)
 80080e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 80080e4:	f002 f8a2 	bl	800a22c <system_flag_wco_change>
        break;
 80080e8:	e09b      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 20:
        if (int_value) {
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d012      	beq.n	8008116 <settings_store_global_setting+0x2b6>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 80080f0:	4b21      	ldr	r3, [pc, #132]	; (8008178 <settings_store_global_setting+0x318>)
 80080f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80080f6:	f003 0310 	and.w	r3, r3, #16
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <settings_store_global_setting+0x2a2>
 80080fe:	230a      	movs	r3, #10
 8008100:	e092      	b.n	8008228 <settings_store_global_setting+0x3c8>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8008102:	4b1d      	ldr	r3, [pc, #116]	; (8008178 <settings_store_global_setting+0x318>)
 8008104:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008108:	f043 0320 	orr.w	r3, r3, #32
 800810c:	b2da      	uxtb	r2, r3
 800810e:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <settings_store_global_setting+0x318>)
 8008110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
        break;
 8008114:	e085      	b.n	8008222 <settings_store_global_setting+0x3c2>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8008116:	4b18      	ldr	r3, [pc, #96]	; (8008178 <settings_store_global_setting+0x318>)
 8008118:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800811c:	f023 0320 	bic.w	r3, r3, #32
 8008120:	b2da      	uxtb	r2, r3
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <settings_store_global_setting+0x318>)
 8008124:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 8008128:	e07b      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 21:
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <settings_store_global_setting+0x2e4>
 8008130:	4b11      	ldr	r3, [pc, #68]	; (8008178 <settings_store_global_setting+0x318>)
 8008132:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008136:	f043 0308 	orr.w	r3, r3, #8
 800813a:	b2da      	uxtb	r2, r3
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <settings_store_global_setting+0x318>)
 800813e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8008142:	e008      	b.n	8008156 <settings_store_global_setting+0x2f6>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <settings_store_global_setting+0x318>)
 8008146:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800814a:	f023 0308 	bic.w	r3, r3, #8
 800814e:	b2da      	uxtb	r2, r3
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <settings_store_global_setting+0x318>)
 8008152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8008156:	f7fb fe0b 	bl	8003d70 <limits_init>
        break;
 800815a:	e062      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 22:
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <settings_store_global_setting+0x320>
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <settings_store_global_setting+0x318>)
 8008164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008168:	f043 0310 	orr.w	r3, r3, #16
 800816c:	b2da      	uxtb	r2, r3
 800816e:	4b02      	ldr	r3, [pc, #8]	; (8008178 <settings_store_global_setting+0x318>)
 8008170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        else {
          settings.flags &= ~BITFLAG_HOMING_ENABLE;
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
        }
        break;
 8008174:	e055      	b.n	8008222 <settings_store_global_setting+0x3c2>
 8008176:	bf00      	nop
 8008178:	200010b4 	.word	0x200010b4
 800817c:	42700000 	.word	0x42700000
          settings.flags &= ~BITFLAG_HOMING_ENABLE;
 8008180:	4b2b      	ldr	r3, [pc, #172]	; (8008230 <settings_store_global_setting+0x3d0>)
 8008182:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008186:	f023 0310 	bic.w	r3, r3, #16
 800818a:	b2da      	uxtb	r2, r3
 800818c:	4b28      	ldr	r3, [pc, #160]	; (8008230 <settings_store_global_setting+0x3d0>)
 800818e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8008192:	4b27      	ldr	r3, [pc, #156]	; (8008230 <settings_store_global_setting+0x3d0>)
 8008194:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008198:	f023 0320 	bic.w	r3, r3, #32
 800819c:	b2da      	uxtb	r2, r3
 800819e:	4b24      	ldr	r3, [pc, #144]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 80081a4:	e03d      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 23: settings.homing_dir_mask = int_value; break;
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	4b21      	ldr	r3, [pc, #132]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80081b0:	e037      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 24: settings.homing_feed_rate = value; break;
 80081b2:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081b8:	e033      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 25: settings.homing_seek_rate = value; break;
 80081ba:	4a1d      	ldr	r2, [pc, #116]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	6513      	str	r3, [r2, #80]	; 0x50
 80081c0:	e02f      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 26: settings.homing_debounce_delay = int_value; break;
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80081cc:	e029      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 27: settings.homing_pulloff = value; break;
 80081ce:	4a18      	ldr	r2, [pc, #96]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	6593      	str	r3, [r2, #88]	; 0x58
 80081d4:	e025      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80081d6:	4a16      	ldr	r2, [pc, #88]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	6413      	str	r3, [r2, #64]	; 0x40
 80081dc:	f000 f83c 	bl	8008258 <spindle_init>
 80081e0:	e01f      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 80081e2:	4a13      	ldr	r2, [pc, #76]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6453      	str	r3, [r2, #68]	; 0x44
 80081e8:	f000 f836 	bl	8008258 <spindle_init>
 80081ec:	e019      	b.n	8008222 <settings_store_global_setting+0x3c2>
      case 32:
        #ifdef VARIABLE_SPINDLE
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <settings_store_global_setting+0x3a8>
 80081f4:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <settings_store_global_setting+0x3d0>)
 80081f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80081fa:	f043 0302 	orr.w	r3, r3, #2
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <settings_store_global_setting+0x3d0>)
 8008202:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
 8008206:	e00c      	b.n	8008222 <settings_store_global_setting+0x3c2>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8008208:	4b09      	ldr	r3, [pc, #36]	; (8008230 <settings_store_global_setting+0x3d0>)
 800820a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800820e:	f023 0302 	bic.w	r3, r3, #2
 8008212:	b2da      	uxtb	r2, r3
 8008214:	4b06      	ldr	r3, [pc, #24]	; (8008230 <settings_store_global_setting+0x3d0>)
 8008216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        break;
 800821a:	e002      	b.n	8008222 <settings_store_global_setting+0x3c2>
      default:
        return(STATUS_INVALID_STATEMENT);
 800821c:	2303      	movs	r3, #3
 800821e:	e003      	b.n	8008228 <settings_store_global_setting+0x3c8>
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
 8008220:	bf00      	nop
    }
  }
  write_global_settings();
 8008222:	f7ff fca1 	bl	8007b68 <write_global_settings>
  return(STATUS_OK);
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	bd90      	pop	{r4, r7, pc}
 8008230:	200010b4 	.word	0x200010b4

08008234 <settings_init>:


// Initialize the config subsystem
void settings_init() {
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  if(!read_global_settings()) {
 8008238:	f7ff fdf4 	bl	8007e24 <read_global_settings>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d107      	bne.n	8008252 <settings_init+0x1e>
    report_status_message(STATUS_SETTING_READ_FAIL);
 8008242:	2007      	movs	r0, #7
 8008244:	f7fe fc4e 	bl	8006ae4 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 8008248:	20ff      	movs	r0, #255	; 0xff
 800824a:	f7ff fc9d 	bl	8007b88 <settings_restore>
    report_grbl_settings();
 800824e:	f7fe fd03 	bl	8006c58 <report_grbl_settings>
  }
}
 8008252:	bf00      	nop
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 800825e:	4b42      	ldr	r3, [pc, #264]	; (8008368 <spindle_init+0x110>)
 8008260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008262:	4b41      	ldr	r3, [pc, #260]	; (8008368 <spindle_init+0x110>)
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7f8 fc17 	bl	8000a9c <__aeabi_fsub>
 800826e:	4603      	mov	r3, r0
 8008270:	4619      	mov	r1, r3
 8008272:	483e      	ldr	r0, [pc, #248]	; (800836c <spindle_init+0x114>)
 8008274:	f7f8 fdd0 	bl	8000e18 <__aeabi_fdiv>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	4b3c      	ldr	r3, [pc, #240]	; (8008370 <spindle_init+0x118>)
 800827e:	601a      	str	r2, [r3, #0]
  #endif
#endif

#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8008280:	2101      	movs	r1, #1
 8008282:	2008      	movs	r0, #8
 8008284:	f7f9 fb76 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008288:	2303      	movs	r3, #3
 800828a:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800828c:	2310      	movs	r3, #16
 800828e:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8008290:	2301      	movs	r3, #1
 8008292:	83bb      	strh	r3, [r7, #28]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8008294:	f107 031c 	add.w	r3, r7, #28
 8008298:	4619      	mov	r1, r3
 800829a:	4836      	ldr	r0, [pc, #216]	; (8008374 <spindle_init+0x11c>)
 800829c:	f7f9 f900 	bl	80014a0 <GPIO_Init>

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80082a0:	2303      	movs	r3, #3
 80082a2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80082a4:	2310      	movs	r3, #16
 80082a6:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 80082a8:	2302      	movs	r3, #2
 80082aa:	83bb      	strh	r3, [r7, #28]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 80082ac:	f107 031c 	add.w	r3, r7, #28
 80082b0:	4619      	mov	r1, r3
 80082b2:	4830      	ldr	r0, [pc, #192]	; (8008374 <spindle_init+0x11c>)
 80082b4:	f7f9 f8f4 	bl	80014a0 <GPIO_Init>
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80082b8:	2101      	movs	r1, #1
 80082ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80082be:	f7f9 fb59 	bl	8001974 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 80082c2:	463b      	mov	r3, r7
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	605a      	str	r2, [r3, #4]
 80082ca:	609a      	str	r2, [r3, #8]
 80082cc:	60da      	str	r2, [r3, #12]
  TIM_TimeBaseStructInit(&timerInitStructure);
 80082ce:	f107 0310 	add.w	r3, r7, #16
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f9 fc74 	bl	8001bc0 <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = F_CPU / 1000000 - 1; // 1000
 80082d8:	4b27      	ldr	r3, [pc, #156]	; (8008378 <spindle_init+0x120>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a27      	ldr	r2, [pc, #156]	; (800837c <spindle_init+0x124>)
 80082de:	fba2 2303 	umull	r2, r3, r2, r3
 80082e2:	0c9b      	lsrs	r3, r3, #18
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	823b      	strh	r3, [r7, #16]
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80082ec:	2300      	movs	r3, #0
 80082ee:	827b      	strh	r3, [r7, #18]
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
 80082f0:	2363      	movs	r3, #99	; 0x63
 80082f2:	82bb      	strh	r3, [r7, #20]
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80082f4:	2300      	movs	r3, #0
 80082f6:	82fb      	strh	r3, [r7, #22]
  timerInitStructure.TIM_RepetitionCounter = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	763b      	strb	r3, [r7, #24]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	4619      	mov	r1, r3
 8008302:	481f      	ldr	r0, [pc, #124]	; (8008380 <spindle_init+0x128>)
 8008304:	f7f9 fb54 	bl	80019b0 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8008308:	2360      	movs	r3, #96	; 0x60
 800830a:	803b      	strh	r3, [r7, #0]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 800830c:	2300      	movs	r3, #0
 800830e:	80fb      	strh	r3, [r7, #6]
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
 8008310:	2301      	movs	r3, #1
 8008312:	807b      	strh	r3, [r7, #2]
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;
 8008314:	2300      	movs	r3, #0
 8008316:	813b      	strh	r3, [r7, #8]

  TIM_OC1Init(TIM1, &outputChannelInit);
 8008318:	463b      	mov	r3, r7
 800831a:	4619      	mov	r1, r3
 800831c:	4818      	ldr	r0, [pc, #96]	; (8008380 <spindle_init+0x128>)
 800831e:	f7f9 fbc3 	bl	8001aa8 <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8008322:	2108      	movs	r1, #8
 8008324:	4816      	ldr	r0, [pc, #88]	; (8008380 <spindle_init+0x128>)
 8008326:	f7f9 fccb 	bl	8001cc0 <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 800832a:	2100      	movs	r1, #0
 800832c:	4814      	ldr	r0, [pc, #80]	; (8008380 <spindle_init+0x128>)
 800832e:	f7f9 fc7f 	bl	8001c30 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8008332:	2101      	movs	r1, #1
 8008334:	4812      	ldr	r0, [pc, #72]	; (8008380 <spindle_init+0x128>)
 8008336:	f7f9 fc5c 	bl	8001bf2 <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 800833a:	2101      	movs	r1, #1
 800833c:	2004      	movs	r0, #4
 800833e:	f7f9 fb19 	bl	8001974 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008342:	2303      	movs	r3, #3
 8008344:	77bb      	strb	r3, [r7, #30]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8008346:	2318      	movs	r3, #24
 8008348:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 800834a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800834e:	83bb      	strh	r3, [r7, #28]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8008350:	f107 031c 	add.w	r3, r7, #28
 8008354:	4619      	mov	r1, r3
 8008356:	480b      	ldr	r0, [pc, #44]	; (8008384 <spindle_init+0x12c>)
 8008358:	f7f9 f8a2 	bl	80014a0 <GPIO_Init>
#endif
#endif

  spindle_stop();
 800835c:	f000 f834 	bl	80083c8 <spindle_stop>
}
 8008360:	bf00      	nop
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	200010b4 	.word	0x200010b4
 800836c:	42c60000 	.word	0x42c60000
 8008370:	200008f4 	.word	0x200008f4
 8008374:	40010c00 	.word	0x40010c00
 8008378:	20000018 	.word	0x20000018
 800837c:	431bde83 	.word	0x431bde83
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40010800 	.word	0x40010800

08008388 <spindle_get_state>:


uint8_t spindle_get_state()
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
  uint8_t pin = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	71fb      	strb	r3, [r7, #7]
		}
	#endif
#endif

#if defined (STM32F103C8)
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8008392:	480c      	ldr	r0, [pc, #48]	; (80083c4 <spindle_get_state+0x3c>)
 8008394:	f7f9 f940 	bl	8001618 <GPIO_ReadInputData>
 8008398:	4603      	mov	r3, r0
 800839a:	71fb      	strb	r3, [r7, #7]
	#ifdef USE_SPINDLE_ENABLE_PIN
		#ifdef INVERT_SPINDLE_ENABLE_PIN
		  if (bit_isfalse(pin,(1<<SPINDLE_ENABLE_BIT)))
		#else
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d008      	beq.n	80083b8 <spindle_get_state+0x30>
		#endif
		{
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <spindle_get_state+0x2c>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e002      	b.n	80083ba <spindle_get_state+0x32>
		  else { return(SPINDLE_STATE_CW); }
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <spindle_get_state+0x32>
		} else { return(SPINDLE_STATE_DISABLE); }
 80083b8:	2300      	movs	r3, #0
		  if (spindle_compute_pwm_value(gc_state.spindle_speed) == SPINDLE_PWM_OFF_VALUE){return(SPINDLE_STATE_DISABLE);}
	#endif
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
		  else { return(SPINDLE_STATE_CW); }
#endif
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40010c00 	.word	0x40010c00

080083c8 <spindle_stop>:

// Disables the spindle and sets PWM output to zero when PWM variable spindle speed is enabled.
// Called by various main program and ISR routines. Keep routine small, fast, and efficient.
// Called by spindle_init(), spindle_set_speed(), spindle_set_state(), and mc_reset().
void spindle_stop()
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80083cc:	2100      	movs	r1, #0
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <spindle_stop+0x1c>)
 80083d0:	f7f9 fc2e 	bl	8001c30 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 80083d4:	2200      	movs	r2, #0
 80083d6:	2102      	movs	r1, #2
 80083d8:	4803      	ldr	r0, [pc, #12]	; (80083e8 <spindle_stop+0x20>)
 80083da:	f7f9 f951 	bl	8001680 <GPIO_WriteBit>
      #endif
    #endif
#endif
}
 80083de:	bf00      	nop
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40012c00 	.word	0x40012c00
 80083e8:	40010c00 	.word	0x40010c00

080083ec <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	80fb      	strh	r3, [r7, #6]
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 80083f6:	4a09      	ldr	r2, [pc, #36]	; (800841c <spindle_set_speed+0x30>)
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	8693      	strh	r3, [r2, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 80083fc:	88fb      	ldrh	r3, [r7, #6]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <spindle_set_speed+0x20>
			#ifdef AVRTARGET
				SPINDLE_TCCRA_REGISTER &= ~(1 << SPINDLE_COMB_BIT); // Disable PWM. Output voltage is zero.
			#endif
			#if defined (STM32F103C8)
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008402:	2100      	movs	r1, #0
 8008404:	4805      	ldr	r0, [pc, #20]	; (800841c <spindle_set_speed+0x30>)
 8008406:	f7f9 fc13 	bl	8001c30 <TIM_CtrlPWMOutputs>
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
			#endif
			}
		#endif
	}
 800840a:	e003      	b.n	8008414 <spindle_set_speed+0x28>
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 800840c:	2101      	movs	r1, #1
 800840e:	4803      	ldr	r0, [pc, #12]	; (800841c <spindle_set_speed+0x30>)
 8008410:	f7f9 fc0e 	bl	8001c30 <TIM_CtrlPWMOutputs>
	}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40012c00 	.word	0x40012c00

08008420 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8008428:	4b36      	ldr	r3, [pc, #216]	; (8008504 <spindle_compute_pwm_value+0xe4>)
 800842a:	7a9b      	ldrb	r3, [r3, #10]
 800842c:	4618      	mov	r0, r3
 800842e:	f7f8 fbeb 	bl	8000c08 <__aeabi_i2f>
 8008432:	4603      	mov	r3, r0
 8008434:	4934      	ldr	r1, [pc, #208]	; (8008508 <spindle_compute_pwm_value+0xe8>)
 8008436:	4618      	mov	r0, r3
 8008438:	f7f8 fc3a 	bl	8000cb0 <__aeabi_fmul>
 800843c:	4603      	mov	r3, r0
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7f8 fc35 	bl	8000cb0 <__aeabi_fmul>
 8008446:	4603      	mov	r3, r0
 8008448:	607b      	str	r3, [r7, #4]
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 800844a:	4b30      	ldr	r3, [pc, #192]	; (800850c <spindle_compute_pwm_value+0xec>)
 800844c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800844e:	4b2f      	ldr	r3, [pc, #188]	; (800850c <spindle_compute_pwm_value+0xec>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7f8 fddd 	bl	8001014 <__aeabi_fcmpge>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d108      	bne.n	8008472 <spindle_compute_pwm_value+0x52>
 8008460:	4b2a      	ldr	r3, [pc, #168]	; (800850c <spindle_compute_pwm_value+0xec>)
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4618      	mov	r0, r3
 8008468:	f7f8 fdca 	bl	8001000 <__aeabi_fcmple>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d006      	beq.n	8008480 <spindle_compute_pwm_value+0x60>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 8008472:	4b26      	ldr	r3, [pc, #152]	; (800850c <spindle_compute_pwm_value+0xec>)
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	4a23      	ldr	r2, [pc, #140]	; (8008504 <spindle_compute_pwm_value+0xe4>)
 8008478:	6113      	str	r3, [r2, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 800847a:	2364      	movs	r3, #100	; 0x64
 800847c:	81fb      	strh	r3, [r7, #14]
 800847e:	e03b      	b.n	80084f8 <spindle_compute_pwm_value+0xd8>
		}
		else if (rpm <= settings.rpm_min) {
 8008480:	4b22      	ldr	r3, [pc, #136]	; (800850c <spindle_compute_pwm_value+0xec>)
 8008482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 fdc4 	bl	8001014 <__aeabi_fcmpge>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d015      	beq.n	80084be <spindle_compute_pwm_value+0x9e>
			if (rpm == 0.0f) { // S0 disables spindle
 8008492:	f04f 0100 	mov.w	r1, #0
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7f8 fd9e 	bl	8000fd8 <__aeabi_fcmpeq>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d006      	beq.n	80084b0 <spindle_compute_pwm_value+0x90>
				sys.spindle_speed = 0.0f;
 80084a2:	4b18      	ldr	r3, [pc, #96]	; (8008504 <spindle_compute_pwm_value+0xe4>)
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	611a      	str	r2, [r3, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	81fb      	strh	r3, [r7, #14]
 80084ae:	e023      	b.n	80084f8 <spindle_compute_pwm_value+0xd8>
			}
			else { // Set minimum PWM output
				sys.spindle_speed = settings.rpm_min;
 80084b0:	4b16      	ldr	r3, [pc, #88]	; (800850c <spindle_compute_pwm_value+0xec>)
 80084b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b4:	4a13      	ldr	r2, [pc, #76]	; (8008504 <spindle_compute_pwm_value+0xe4>)
 80084b6:	6113      	str	r3, [r2, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	81fb      	strh	r3, [r7, #14]
 80084bc:	e01c      	b.n	80084f8 <spindle_compute_pwm_value+0xd8>
			}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
 80084be:	4a11      	ldr	r2, [pc, #68]	; (8008504 <spindle_compute_pwm_value+0xe4>)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6113      	str	r3, [r2, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 80084c4:	4b11      	ldr	r3, [pc, #68]	; (800850c <spindle_compute_pwm_value+0xec>)
 80084c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7f8 fae6 	bl	8000a9c <__aeabi_fsub>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <spindle_compute_pwm_value+0xf0>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f7f8 fbe8 	bl	8000cb0 <__aeabi_fmul>
 80084e0:	4603      	mov	r3, r0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f002 f922 	bl	800a72c <floorf>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f8 fde2 	bl	80010b4 <__aeabi_f2uiz>
 80084f0:	4603      	mov	r3, r0
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3301      	adds	r3, #1
 80084f6:	81fb      	strh	r3, [r7, #14]
		}
		return(pwm_value);
 80084f8:	89fb      	ldrh	r3, [r7, #14]
	}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20000f00 	.word	0x20000f00
 8008508:	3c23d70a 	.word	0x3c23d70a
 800850c:	200010b4 	.word	0x200010b4
 8008510:	200008f4 	.word	0x200008f4

08008514 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  if (sys.abort) { return; } // Block during abort.
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <spindle_set_state+0x88>)
 8008522:	785b      	ldrb	r3, [r3, #1]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d134      	bne.n	8008592 <spindle_set_state+0x7e>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <spindle_set_state+0x28>
  
    #ifdef VARIABLE_SPINDLE
      sys.spindle_speed = 0.0f;
 800852e:	4b1b      	ldr	r3, [pc, #108]	; (800859c <spindle_set_state+0x88>)
 8008530:	f04f 0200 	mov.w	r2, #0
 8008534:	611a      	str	r2, [r3, #16]
    #endif
    spindle_stop();
 8008536:	f7ff ff47 	bl	80083c8 <spindle_stop>
 800853a:	e026      	b.n	800858a <spindle_set_state+0x76>
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2b10      	cmp	r3, #16
 8008540:	d105      	bne.n	800854e <spindle_set_state+0x3a>
        ResetSpindleDirectionBit();
 8008542:	2200      	movs	r2, #0
 8008544:	2101      	movs	r1, #1
 8008546:	4816      	ldr	r0, [pc, #88]	; (80085a0 <spindle_set_state+0x8c>)
 8008548:	f7f9 f89a 	bl	8001680 <GPIO_WriteBit>
 800854c:	e004      	b.n	8008558 <spindle_set_state+0x44>
	  }
	  else {
      SetSpindleDirectionBit();
 800854e:	2201      	movs	r2, #1
 8008550:	2101      	movs	r1, #1
 8008552:	4813      	ldr	r0, [pc, #76]	; (80085a0 <spindle_set_state+0x8c>)
 8008554:	f7f9 f894 	bl	8001680 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8008558:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <spindle_set_state+0x90>)
 800855a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <spindle_set_state+0x5e>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	2b20      	cmp	r3, #32
 800856a:	d102      	bne.n	8008572 <spindle_set_state+0x5e>
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	603b      	str	r3, [r7, #0]
      }
    spindle_set_speed(spindle_compute_pwm_value(rpm));
 8008572:	6838      	ldr	r0, [r7, #0]
 8008574:	f7ff ff54 	bl	8008420 <spindle_compute_pwm_value>
 8008578:	4603      	mov	r3, r0
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff ff36 	bl	80083ec <spindle_set_speed>
#if (defined(USE_SPINDLE_ENABLE_PIN) && \
        !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || !defined(VARIABLE_SPINDLE)
	  #ifdef INVERT_SPINDLE_ENABLE_PIN
		ResetSpindleEnablebit();
	  #else
		SetSpindleEnablebit();
 8008580:	2201      	movs	r2, #1
 8008582:	2102      	movs	r1, #2
 8008584:	4806      	ldr	r0, [pc, #24]	; (80085a0 <spindle_set_state+0x8c>)
 8008586:	f7f9 f87b 	bl	8001680 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 800858a:	4b04      	ldr	r3, [pc, #16]	; (800859c <spindle_set_state+0x88>)
 800858c:	2200      	movs	r2, #0
 800858e:	731a      	strb	r2, [r3, #12]
 8008590:	e000      	b.n	8008594 <spindle_set_state+0x80>
  if (sys.abort) { return; } // Block during abort.
 8008592:	bf00      	nop
}
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000f00 	.word	0x20000f00
 80085a0:	40010c00 	.word	0x40010c00
 80085a4:	200010b4 	.word	0x200010b4

080085a8 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
    if (sys.state == STATE_CHECK_MODE) { return; }
 80085b4:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <spindle_sync+0x2c>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d007      	beq.n	80085cc <spindle_sync+0x24>
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 80085bc:	f7fd fda4 	bl	8006108 <protocol_buffer_synchronize>
    spindle_set_state(state,rpm);
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff ffa5 	bl	8008514 <spindle_set_state>
 80085ca:	e000      	b.n	80085ce <spindle_sync+0x26>
    if (sys.state == STATE_CHECK_MODE) { return; }
 80085cc:	bf00      	nop
  }
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000f00 	.word	0x20000f00

080085d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80085d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80085dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80085de:	e003      	b.n	80085e8 <LoopCopyDataInit>

080085e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80085e0:	4b0c      	ldr	r3, [pc, #48]	; (8008614 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80085e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80085e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80085e6:	3104      	adds	r1, #4

080085e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80085e8:	480b      	ldr	r0, [pc, #44]	; (8008618 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80085ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80085ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80085f0:	d3f6      	bcc.n	80085e0 <CopyDataInit>
	ldr	r2, =_sbss
 80085f2:	4a0b      	ldr	r2, [pc, #44]	; (8008620 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80085f4:	e002      	b.n	80085fc <LoopFillZerobss>

080085f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80085f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80085f8:	f842 3b04 	str.w	r3, [r2], #4

080085fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80085fc:	4b09      	ldr	r3, [pc, #36]	; (8008624 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80085fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008600:	d3f9      	bcc.n	80085f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008602:	f001 ff29 	bl	800a458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008606:	f001 ffe1 	bl	800a5cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800860a:	f7fb ff45 	bl	8004498 <main>
	bx	lr
 800860e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008610:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8008614:	0800bdf8 	.word	0x0800bdf8
	ldr	r0, =_sdata
 8008618:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800861c:	20000114 	.word	0x20000114
	ldr	r2, =_sbss
 8008620:	20000114 	.word	0x20000114
	ldr	r3, = _ebss
 8008624:	20001110 	.word	0x20001110

08008628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008628:	e7fe      	b.n	8008628 <ADC1_2_IRQHandler>
	...

0800862c <NVIC_EnableIRQ>:
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8008636:	4908      	ldr	r1, [pc, #32]	; (8008658 <NVIC_EnableIRQ+0x2c>)
 8008638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	79fa      	ldrb	r2, [r7, #7]
 8008640:	f002 021f 	and.w	r2, r2, #31
 8008644:	2001      	movs	r0, #1
 8008646:	fa00 f202 	lsl.w	r2, r0, r2
 800864a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr
 8008658:	e000e100 	.word	0xe000e100

0800865c <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8008668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da0b      	bge.n	8008688 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8008670:	490d      	ldr	r1, [pc, #52]	; (80086a8 <NVIC_SetPriority+0x4c>)
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	3b04      	subs	r3, #4
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	0112      	lsls	r2, r2, #4
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	440b      	add	r3, r1
 8008684:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8008686:	e009      	b.n	800869c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008688:	4908      	ldr	r1, [pc, #32]	; (80086ac <NVIC_SetPriority+0x50>)
 800868a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	0112      	lsls	r2, r2, #4
 8008694:	b2d2      	uxtb	r2, r2
 8008696:	440b      	add	r3, r1
 8008698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bc80      	pop	{r7}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	e000ed00 	.word	0xe000ed00
 80086ac:	e000e100 	.word	0xe000e100

080086b0 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
		mc_reset();
		return;
	}
#endif
  // Enable stepper drivers.
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80086b4:	4b24      	ldr	r3, [pc, #144]	; (8008748 <st_wake_up+0x98>)
 80086b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <st_wake_up+0x1e>
  {
	  SetStepperDisableBit();
 80086c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086c6:	4821      	ldr	r0, [pc, #132]	; (800874c <st_wake_up+0x9c>)
 80086c8:	f7f8 ffbe 	bl	8001648 <GPIO_SetBits>
 80086cc:	e004      	b.n	80086d8 <st_wake_up+0x28>
  }
  else 
  { 
	  ResetStepperDisableBit();
 80086ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086d2:	481e      	ldr	r0, [pc, #120]	; (800874c <st_wake_up+0x9c>)
 80086d4:	f7f8 ffc6 	bl	8001664 <GPIO_ResetBits>
  #ifdef STP_DRIVERS_ENABLE_DELAY
  delay_ms(STP_DRIVERS_ENABLE_DELAY);
  #endif

  // Initialize stepper output bits to ensure first ISR call does not step.
  st.step_outbits = step_port_invert_mask;
 80086d8:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <st_wake_up+0xa0>)
 80086da:	881a      	ldrh	r2, [r3, #0]
 80086dc:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <st_wake_up+0xa4>)
 80086de:	821a      	strh	r2, [r3, #16]
	#ifdef STEP_PULSE_DELAY
    TIM3->SR = ~TIM_SR_CC1IF; // clear CC1IF flag
	TIM3->CCR1 = (STEP_PULSE_DELAY - 1) * TICKS_PER_MICROSECOND + 1; //+1 for STEP_PULSE_DELAY=1, -1 to be closer to exact delay
    st.step_pulse_time = (settings.pulse_microseconds + (STEP_PULSE_DELAY - 1)) * TICKS_PER_MICROSECOND + 1;
	#else // Normal operation
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 80086e0:	4b19      	ldr	r3, [pc, #100]	; (8008748 <st_wake_up+0x98>)
 80086e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <st_wake_up+0xa8>)
 80086ea:	6812      	ldr	r2, [r2, #0]
 80086ec:	491b      	ldr	r1, [pc, #108]	; (800875c <st_wake_up+0xac>)
 80086ee:	fba1 1202 	umull	r1, r2, r1, r2
 80086f2:	0c92      	lsrs	r2, r2, #18
 80086f4:	b292      	uxth	r2, r2
 80086f6:	fb02 f303 	mul.w	r3, r2, r3
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	4b15      	ldr	r3, [pc, #84]	; (8008754 <st_wake_up+0xa4>)
 80086fe:	81da      	strh	r2, [r3, #14]
#endif
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008700:	4b17      	ldr	r3, [pc, #92]	; (8008760 <st_wake_up+0xb0>)
 8008702:	4a14      	ldr	r2, [pc, #80]	; (8008754 <st_wake_up+0xa4>)
 8008704:	89d2      	ldrh	r2, [r2, #14]
 8008706:	859a      	strh	r2, [r3, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8008708:	4b15      	ldr	r3, [pc, #84]	; (8008760 <st_wake_up+0xb0>)
 800870a:	2201      	movs	r2, #1
 800870c:	829a      	strh	r2, [r3, #20]
  TIM3->SR = ~TIM_SR_UIF;
 800870e:	4b14      	ldr	r3, [pc, #80]	; (8008760 <st_wake_up+0xb0>)
 8008710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008714:	821a      	strh	r2, [r3, #16]

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 8008716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <st_wake_up+0xa4>)
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	885b      	ldrh	r3, [r3, #2]
 8008720:	3b01      	subs	r3, #1
 8008722:	b29b      	uxth	r3, r3
 8008724:	8593      	strh	r3, [r2, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800872a:	2201      	movs	r2, #1
 800872c:	829a      	strh	r2, [r3, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 800872e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f043 0301 	orr.w	r3, r3, #1
 800873e:	b29b      	uxth	r3, r3
 8008740:	8013      	strh	r3, [r2, #0]
#endif
}
 8008742:	bf00      	nop
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200010b4 	.word	0x200010b4
 800874c:	40010800 	.word	0x40010800
 8008750:	20000a2c 	.word	0x20000a2c
 8008754:	200009fc 	.word	0x200009fc
 8008758:	20000018 	.word	0x20000018
 800875c:	431bde83 	.word	0x431bde83
 8008760:	40000400 	.word	0x40000400

08008764 <st_go_idle>:


// Stepper shutdown
void st_go_idle()
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800876a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800876e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	f023 0301 	bic.w	r3, r3, #1
 800877a:	b29b      	uxth	r3, r3
 800877c:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 800877e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008782:	2200      	movs	r2, #0
 8008784:	849a      	strh	r2, [r3, #36]	; 0x24
#endif

  busy = false;
 8008786:	4b20      	ldr	r3, [pc, #128]	; (8008808 <st_go_idle+0xa4>)
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
 800878c:	2300      	movs	r3, #0
 800878e:	607b      	str	r3, [r7, #4]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008790:	4b1e      	ldr	r3, [pc, #120]	; (800880c <st_go_idle+0xa8>)
 8008792:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008796:	2bff      	cmp	r3, #255	; 0xff
 8008798:	d108      	bne.n	80087ac <st_go_idle+0x48>
 800879a:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <st_go_idle+0xac>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <st_go_idle+0x48>
 80087a4:	4b1b      	ldr	r3, [pc, #108]	; (8008814 <st_go_idle+0xb0>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b80      	cmp	r3, #128	; 0x80
 80087aa:	d10c      	bne.n	80087c6 <st_go_idle+0x62>
 80087ac:	4b19      	ldr	r3, [pc, #100]	; (8008814 <st_go_idle+0xb0>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d008      	beq.n	80087c6 <st_go_idle+0x62>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
 80087b4:	4b15      	ldr	r3, [pc, #84]	; (800880c <st_go_idle+0xa8>)
 80087b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fc fc0b 	bl	8004fd8 <delay_ms>
    pin_state = true; // Override. Disable steppers.
 80087c2:	2301      	movs	r3, #1
 80087c4:	607b      	str	r3, [r7, #4]
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80087c6:	4b11      	ldr	r3, [pc, #68]	; (800880c <st_go_idle+0xa8>)
 80087c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d006      	beq.n	80087e2 <st_go_idle+0x7e>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bf0c      	ite	eq
 80087da:	2301      	moveq	r3, #1
 80087dc:	2300      	movne	r3, #0
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	607b      	str	r3, [r7, #4]
  if (pin_state) 
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <st_go_idle+0x90>
  { 
	  SetStepperDisableBit();
 80087e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ec:	480a      	ldr	r0, [pc, #40]	; (8008818 <st_go_idle+0xb4>)
 80087ee:	f7f8 ff2b 	bl	8001648 <GPIO_SetBits>
  }
  else 
  { 
	  ResetStepperDisableBit();
  }
}
 80087f2:	e004      	b.n	80087fe <st_go_idle+0x9a>
	  ResetStepperDisableBit();
 80087f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087f8:	4807      	ldr	r0, [pc, #28]	; (8008818 <st_go_idle+0xb4>)
 80087fa:	f7f8 ff33 	bl	8001664 <GPIO_ResetBits>
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000a30 	.word	0x20000a30
 800880c:	200010b4 	.word	0x200010b4
 8008810:	20000f30 	.word	0x20000f30
 8008814:	20000f00 	.word	0x20000f00
 8008818:	40010800 	.word	0x40010800

0800881c <TIM2_IRQHandler>:
ISR(TIMER1_COMPA_vect)
#endif
#ifdef WIN32
void Timer1Proc()
#endif
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 8008822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008826:	8a1b      	ldrh	r3, [r3, #16]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 819e 	beq.w	8008b70 <TIM2_IRQHandler+0x354>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 8008834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008838:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800883c:	821a      	strh	r2, [r3, #16]
		TIM2->CNT = 0;
 800883e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008842:	2200      	movs	r2, #0
 8008844:	849a      	strh	r2, [r3, #36]	; 0x24
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8008846:	4b8b      	ldr	r3, [pc, #556]	; (8008a74 <TIM2_IRQHandler+0x258>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	f040 8191 	bne.w	8008b74 <TIM2_IRQHandler+0x358>
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 8008852:	4989      	ldr	r1, [pc, #548]	; (8008a78 <TIM2_IRQHandler+0x25c>)
 8008854:	4b88      	ldr	r3, [pc, #544]	; (8008a78 <TIM2_IRQHandler+0x25c>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800885c:	4b87      	ldr	r3, [pc, #540]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800885e:	8a5b      	ldrh	r3, [r3, #18]
 8008860:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008864:	4313      	orrs	r3, r2
 8008866:	60cb      	str	r3, [r1, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 8008868:	4b85      	ldr	r3, [pc, #532]	; (8008a80 <TIM2_IRQHandler+0x264>)
 800886a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800886e:	821a      	strh	r2, [r3, #16]
    // Then pulse the stepping pins
    #ifdef STEP_PULSE_DELAY
      st.step_bits = st.step_outbits; // Store out_bits to prevent overwriting.
    #else  // Normal operation
		#ifdef DEBUG_TIMING_WITH_FLOOD_AND_MIST
        if (st.step_outbits && (1<< X_STEP_BIT) ) {
 8008870:	4b82      	ldr	r3, [pc, #520]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008872:	8a1b      	ldrh	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <TIM2_IRQHandler+0x64>
        	GPIO_ResetBits(COOLANT_MIST_PORT,1 << COOLANT_MIST_BIT); // added by MS for debug
 8008878:	2108      	movs	r1, #8
 800887a:	4882      	ldr	r0, [pc, #520]	; (8008a84 <TIM2_IRQHandler+0x268>)
 800887c:	f7f8 fef2 	bl	8001664 <GPIO_ResetBits>
		}
        #endif

      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 8008880:	4a7d      	ldr	r2, [pc, #500]	; (8008a78 <TIM2_IRQHandler+0x25c>)
 8008882:	4b7d      	ldr	r3, [pc, #500]	; (8008a78 <TIM2_IRQHandler+0x25c>)
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f023 0315 	bic.w	r3, r3, #21
 800888a:	497c      	ldr	r1, [pc, #496]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800888c:	8a09      	ldrh	r1, [r1, #16]
 800888e:	430b      	orrs	r3, r1
 8008890:	60d3      	str	r3, [r2, #12]
#endif
#ifdef WIN32
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
 8008892:	4a7b      	ldr	r2, [pc, #492]	; (8008a80 <TIM2_IRQHandler+0x264>)
 8008894:	4b7a      	ldr	r3, [pc, #488]	; (8008a80 <TIM2_IRQHandler+0x264>)
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f043 0301 	orr.w	r3, r3, #1
 800889e:	b29b      	uxth	r3, r3
 80088a0:	8013      	strh	r3, [r2, #0]
#endif
  busy = true;
 80088a2:	4b74      	ldr	r3, [pc, #464]	; (8008a74 <TIM2_IRQHandler+0x258>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	701a      	strb	r2, [r3, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 80088a8:	4b74      	ldr	r3, [pc, #464]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d17d      	bne.n	80089ac <TIM2_IRQHandler+0x190>
    // Anything in the buffer? If so, load and initialize next step segment.
    if (segment_buffer_head != segment_buffer_tail) {
 80088b0:	4b75      	ldr	r3, [pc, #468]	; (8008a88 <TIM2_IRQHandler+0x26c>)
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	4b75      	ldr	r3, [pc, #468]	; (8008a8c <TIM2_IRQHandler+0x270>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d068      	beq.n	8008990 <TIM2_IRQHandler+0x174>
      // Initialize new step segment and load number of steps to execute
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 80088be:	4b73      	ldr	r3, [pc, #460]	; (8008a8c <TIM2_IRQHandler+0x270>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4a72      	ldr	r2, [pc, #456]	; (8008a90 <TIM2_IRQHandler+0x274>)
 80088c8:	4413      	add	r3, r2
 80088ca:	4a6c      	ldr	r2, [pc, #432]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088cc:	6293      	str	r3, [r2, #40]	; 0x28
#else
	  nTimer1Out = st.exec_segment->cycles_per_tick;
#endif
#endif
#ifdef STM32F103C8
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80088ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80088d2:	4b6a      	ldr	r3, [pc, #424]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29b      	uxth	r3, r3
 80088dc:	8593      	strh	r3, [r2, #44]	; 0x2c
	  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
	  TIM2->PSC = st.exec_segment->prescaler;
#endif
#endif
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 80088de:	4b67      	ldr	r3, [pc, #412]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	881a      	ldrh	r2, [r3, #0]
 80088e4:	4b65      	ldr	r3, [pc, #404]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088e6:	841a      	strh	r2, [r3, #32]
      // If the new segment starts a new planner block, initialize stepper variables and counters.
      // NOTE: When the segment data index changes, this indicates a new planner block.
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 80088e8:	4b64      	ldr	r3, [pc, #400]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088ea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80088ee:	4b63      	ldr	r3, [pc, #396]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	791b      	ldrb	r3, [r3, #4]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d01f      	beq.n	8008938 <TIM2_IRQHandler+0x11c>
        st.exec_block_index = st.exec_segment->st_block_index;
 80088f8:	4b60      	ldr	r3, [pc, #384]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	791a      	ldrb	r2, [r3, #4]
 80088fe:	4b5f      	ldr	r3, [pc, #380]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008900:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8008904:	4b5d      	ldr	r3, [pc, #372]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008906:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800890a:	461a      	mov	r2, r3
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4a5f      	ldr	r2, [pc, #380]	; (8008a94 <TIM2_IRQHandler+0x278>)
 8008916:	4413      	add	r3, r2
 8008918:	4a58      	ldr	r2, [pc, #352]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800891a:	6253      	str	r3, [r2, #36]	; 0x24
		#elif defined AB_AXIS
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
		#elif defined ABC_AXIS
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = st.counter_c = (st.exec_block->step_event_count >> 1);
		#else
        st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 800891c:	4b57      	ldr	r3, [pc, #348]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	4a55      	ldr	r2, [pc, #340]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008926:	6093      	str	r3, [r2, #8]
 8008928:	4b54      	ldr	r3, [pc, #336]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	4a53      	ldr	r2, [pc, #332]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800892e:	6053      	str	r3, [r2, #4]
 8008930:	4b52      	ldr	r3, [pc, #328]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	4a51      	ldr	r2, [pc, #324]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008936:	6013      	str	r3, [r2, #0]
		#endif
// ---
      }
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8008938:	4b50      	ldr	r3, [pc, #320]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	8a1a      	ldrh	r2, [r3, #16]
 800893e:	4b56      	ldr	r3, [pc, #344]	; (8008a98 <TIM2_IRQHandler+0x27c>)
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	4053      	eors	r3, r2
 8008944:	b29a      	uxth	r2, r3
 8008946:	4b4d      	ldr	r3, [pc, #308]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008948:	825a      	strh	r2, [r3, #18]

      #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
        // With AMASS enabled, adjust Bresenham axis increment counters according to AMASS level.
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 800894a:	4b4c      	ldr	r3, [pc, #304]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a4a      	ldr	r2, [pc, #296]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008952:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008954:	7952      	ldrb	r2, [r2, #5]
 8008956:	40d3      	lsrs	r3, r2
 8008958:	4a48      	ldr	r2, [pc, #288]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800895a:	6153      	str	r3, [r2, #20]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 800895c:	4b47      	ldr	r3, [pc, #284]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	4a46      	ldr	r2, [pc, #280]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008964:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008966:	7952      	ldrb	r2, [r2, #5]
 8008968:	40d3      	lsrs	r3, r2
 800896a:	4a44      	ldr	r2, [pc, #272]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800896c:	6193      	str	r3, [r2, #24]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 800896e:	4b43      	ldr	r3, [pc, #268]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	4a41      	ldr	r2, [pc, #260]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008976:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008978:	7952      	ldrb	r2, [r2, #5]
 800897a:	40d3      	lsrs	r3, r2
 800897c:	4a3f      	ldr	r2, [pc, #252]	; (8008a7c <TIM2_IRQHandler+0x260>)
 800897e:	61d3      	str	r3, [r2, #28]
// ---
      #endif

      #ifdef VARIABLE_SPINDLE
        // Set real-time spindle output as segment is loaded, just prior to the first step.
        spindle_set_speed(st.exec_segment->spindle_pwm);
 8008980:	4b3e      	ldr	r3, [pc, #248]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	799b      	ldrb	r3, [r3, #6]
 8008986:	b29b      	uxth	r3, r3
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fd2f 	bl	80083ec <spindle_set_speed>
 800898e:	e00d      	b.n	80089ac <TIM2_IRQHandler+0x190>
      #endif

    } else {
      // Segment buffer empty. Shutdown.
      st_go_idle();
 8008990:	f7ff fee8 	bl	8008764 <st_go_idle>
      // Ensure pwm is set properly upon completion of rate-controlled motion.
      #ifdef VARIABLE_SPINDLE
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8008994:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	7c9b      	ldrb	r3, [r3, #18]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <TIM2_IRQHandler+0x188>
 800899e:	2000      	movs	r0, #0
 80089a0:	f7ff fd24 	bl	80083ec <spindle_set_speed>
      #endif
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 80089a4:	2004      	movs	r0, #4
 80089a6:	f001 fcbd 	bl	800a324 <system_set_exec_state_flag>
      return; // Nothing to do but exit.
 80089aa:	e0e4      	b.n	8008b76 <TIM2_IRQHandler+0x35a>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80089ac:	4b3b      	ldr	r3, [pc, #236]	; (8008a9c <TIM2_IRQHandler+0x280>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <TIM2_IRQHandler+0x19e>
 80089b6:	f7fd fa9d 	bl	8005ef4 <probe_state_monitor>

  // Reset step out bits.
  st.step_outbits = 0;
 80089ba:	4b30      	ldr	r3, [pc, #192]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089bc:	2200      	movs	r2, #0
 80089be:	821a      	strh	r2, [r3, #16]

  // Execute step displacement profile by Bresenham line algorithm
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
 80089c0:	4b2e      	ldr	r3, [pc, #184]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	4b2d      	ldr	r3, [pc, #180]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	4413      	add	r3, r2
 80089ca:	4a2c      	ldr	r2, [pc, #176]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089cc:	6013      	str	r3, [r2, #0]
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 80089ce:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b2a      	ldr	r3, [pc, #168]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d920      	bls.n	8008a1e <TIM2_IRQHandler+0x202>
    st.step_outbits |= (1<<X_STEP_BIT);
 80089dc:	4b27      	ldr	r3, [pc, #156]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089de:	8a1b      	ldrh	r3, [r3, #16]
 80089e0:	f043 0301 	orr.w	r3, r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	4b25      	ldr	r3, [pc, #148]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089e8:	821a      	strh	r2, [r3, #16]
    st.counter_x -= st.exec_block->step_event_count;
 80089ea:	4b24      	ldr	r3, [pc, #144]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	4b23      	ldr	r3, [pc, #140]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	4a21      	ldr	r2, [pc, #132]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089f8:	6013      	str	r3, [r2, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 80089fa:	4b20      	ldr	r3, [pc, #128]	; (8008a7c <TIM2_IRQHandler+0x260>)
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	8a1b      	ldrh	r3, [r3, #16]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <TIM2_IRQHandler+0x1f8>
 8008a08:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <TIM2_IRQHandler+0x284>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	4a24      	ldr	r2, [pc, #144]	; (8008aa0 <TIM2_IRQHandler+0x284>)
 8008a10:	6013      	str	r3, [r2, #0]
 8008a12:	e004      	b.n	8008a1e <TIM2_IRQHandler+0x202>
    else { sys_position[X_AXIS]++; }
 8008a14:	4b22      	ldr	r3, [pc, #136]	; (8008aa0 <TIM2_IRQHandler+0x284>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	4a21      	ldr	r2, [pc, #132]	; (8008aa0 <TIM2_IRQHandler+0x284>)
 8008a1c:	6013      	str	r3, [r2, #0]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 8008a1e:	4b17      	ldr	r3, [pc, #92]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	4413      	add	r3, r2
 8008a28:	4a14      	ldr	r2, [pc, #80]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a2a:	6053      	str	r3, [r2, #4]
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8008a2c:	4b13      	ldr	r3, [pc, #76]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d939      	bls.n	8008aae <TIM2_IRQHandler+0x292>
    st.step_outbits |= (1<<Y_STEP_BIT);
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a3c:	8a1b      	ldrh	r3, [r3, #16]
 8008a3e:	f043 0304 	orr.w	r3, r3, #4
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a46:	821a      	strh	r2, [r3, #16]
    st.counter_y -= st.exec_block->step_event_count;
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a56:	6053      	str	r3, [r2, #4]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008a58:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <TIM2_IRQHandler+0x260>)
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	8a1b      	ldrh	r3, [r3, #16]
 8008a5e:	f003 0308 	and.w	r3, r3, #8
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01e      	beq.n	8008aa4 <TIM2_IRQHandler+0x288>
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <TIM2_IRQHandler+0x284>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	4a0c      	ldr	r2, [pc, #48]	; (8008aa0 <TIM2_IRQHandler+0x284>)
 8008a6e:	6053      	str	r3, [r2, #4]
 8008a70:	e01d      	b.n	8008aae <TIM2_IRQHandler+0x292>
 8008a72:	bf00      	nop
 8008a74:	20000a30 	.word	0x20000a30
 8008a78:	40010800 	.word	0x40010800
 8008a7c:	200009fc 	.word	0x200009fc
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40010c00 	.word	0x40010c00
 8008a88:	20000a29 	.word	0x20000a29
 8008a8c:	20000a28 	.word	0x20000a28
 8008a90:	200009ac 	.word	0x200009ac
 8008a94:	200008f8 	.word	0x200008f8
 8008a98:	20000a2e 	.word	0x20000a2e
 8008a9c:	20000f16 	.word	0x20000f16
 8008aa0:	20000f24 	.word	0x20000f24
    else { sys_position[Y_AXIS]++; }
 8008aa4:	4b35      	ldr	r3, [pc, #212]	; (8008b7c <TIM2_IRQHandler+0x360>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	4a34      	ldr	r2, [pc, #208]	; (8008b7c <TIM2_IRQHandler+0x360>)
 8008aac:	6053      	str	r3, [r2, #4]
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8008aae:	4b34      	ldr	r3, [pc, #208]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ab0:	689a      	ldr	r2, [r3, #8]
 8008ab2:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	4a31      	ldr	r2, [pc, #196]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008aba:	6093      	str	r3, [r2, #8]
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 8008abc:	4b30      	ldr	r3, [pc, #192]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	4b2f      	ldr	r3, [pc, #188]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d920      	bls.n	8008b0c <TIM2_IRQHandler+0x2f0>
    st.step_outbits |= (1<<Z_STEP_BIT);
 8008aca:	4b2d      	ldr	r3, [pc, #180]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008acc:	8a1b      	ldrh	r3, [r3, #16]
 8008ace:	f043 0310 	orr.w	r3, r3, #16
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	4b2a      	ldr	r3, [pc, #168]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ad6:	821a      	strh	r2, [r3, #16]
    st.counter_z -= st.exec_block->step_event_count;
 8008ad8:	4b29      	ldr	r3, [pc, #164]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	4b28      	ldr	r3, [pc, #160]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008ae6:	6093      	str	r3, [r2, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008ae8:	4b25      	ldr	r3, [pc, #148]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	8a1b      	ldrh	r3, [r3, #16]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <TIM2_IRQHandler+0x2e6>
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <TIM2_IRQHandler+0x360>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <TIM2_IRQHandler+0x360>)
 8008afe:	6093      	str	r3, [r2, #8]
 8008b00:	e004      	b.n	8008b0c <TIM2_IRQHandler+0x2f0>
    else { sys_position[Z_AXIS]++; }
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <TIM2_IRQHandler+0x360>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	3301      	adds	r3, #1
 8008b08:	4a1c      	ldr	r2, [pc, #112]	; (8008b7c <TIM2_IRQHandler+0x360>)
 8008b0a:	6093      	str	r3, [r2, #8]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	; (8008b84 <TIM2_IRQHandler+0x368>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d107      	bne.n	8008b24 <TIM2_IRQHandler+0x308>
 8008b14:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b16:	8a1a      	ldrh	r2, [r3, #16]
 8008b18:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <TIM2_IRQHandler+0x368>)
 8008b1a:	88db      	ldrh	r3, [r3, #6]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b22:	821a      	strh	r2, [r3, #16]

  st.step_count--; // Decrement step events count
 8008b24:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b26:	8c1b      	ldrh	r3, [r3, #32]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	4b14      	ldr	r3, [pc, #80]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b2e:	841a      	strh	r2, [r3, #32]
  if (st.step_count == 0) {
 8008b30:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b32:	8c1b      	ldrh	r3, [r3, #32]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10f      	bne.n	8008b58 <TIM2_IRQHandler+0x33c>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
 8008b38:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	629a      	str	r2, [r3, #40]	; 0x28
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008b3e:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <TIM2_IRQHandler+0x36c>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	3301      	adds	r3, #1
 8008b46:	71fb      	strb	r3, [r7, #7]
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	2b0a      	cmp	r3, #10
 8008b4c:	d101      	bne.n	8008b52 <TIM2_IRQHandler+0x336>
		segment_tail_next = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	71fb      	strb	r3, [r7, #7]
	segment_buffer_tail = segment_tail_next;
 8008b52:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <TIM2_IRQHandler+0x36c>)
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	7013      	strb	r3, [r2, #0]
		segment_buffer_tail = 0; 
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008b58:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b5a:	8a1a      	ldrh	r2, [r3, #16]
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <TIM2_IRQHandler+0x370>)
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	4053      	eors	r3, r2
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <TIM2_IRQHandler+0x364>)
 8008b66:	821a      	strh	r2, [r3, #16]
  busy = false;
 8008b68:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <TIM2_IRQHandler+0x374>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	701a      	strb	r2, [r3, #0]
 8008b6e:	e002      	b.n	8008b76 <TIM2_IRQHandler+0x35a>
		return;
 8008b70:	bf00      	nop
 8008b72:	e000      	b.n	8008b76 <TIM2_IRQHandler+0x35a>
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 8008b74:	bf00      	nop
}
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20000f24 	.word	0x20000f24
 8008b80:	200009fc 	.word	0x200009fc
 8008b84:	20000f00 	.word	0x20000f00
 8008b88:	20000a28 	.word	0x20000a28
 8008b8c:	20000a2c 	.word	0x20000a2c
 8008b90:	20000a30 	.word	0x20000a30

08008b94 <TIM3_IRQHandler>:
ISR(TIMER0_OVF_vect)
#endif
#ifdef WIN32
void Timer0Proc()
#endif
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_bits); // Begin step pulse.
		TIM3->SR = ~TIM_SR_CC1IF; // clear CC1IF flag
	} else
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008b98:	490f      	ldr	r1, [pc, #60]	; (8008bd8 <TIM3_IRQHandler+0x44>)
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <TIM3_IRQHandler+0x44>)
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f023 0215 	bic.w	r2, r3, #21
 8008ba2:	4b0e      	ldr	r3, [pc, #56]	; (8008bdc <TIM3_IRQHandler+0x48>)
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	f003 0315 	and.w	r3, r3, #21
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 8008bae:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <TIM3_IRQHandler+0x4c>)
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <TIM3_IRQHandler+0x4c>)
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	f023 0301 	bic.w	r3, r3, #1
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 8008bbe:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <TIM3_IRQHandler+0x4c>)
 8008bc0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008bc4:	821a      	strh	r2, [r3, #16]
		TIM3->CNT = 0;
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <TIM3_IRQHandler+0x4c>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	849a      	strh	r2, [r3, #36]	; 0x24
#ifdef DEBUG_TIMING_WITH_FLOOD_AND_MIST
  GPIO_SetBits(COOLANT_MIST_PORT,1 << COOLANT_MIST_BIT); // added by MS to debug
 8008bcc:	2108      	movs	r1, #8
 8008bce:	4805      	ldr	r0, [pc, #20]	; (8008be4 <TIM3_IRQHandler+0x50>)
 8008bd0:	f7f8 fd3a 	bl	8001648 <GPIO_SetBits>
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 8008bd4:	bf00      	nop
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40010800 	.word	0x40010800
 8008bdc:	20000a2c 	.word	0x20000a2c
 8008be0:	40000400 	.word	0x40000400
 8008be4:	40010c00 	.word	0x40010c00

08008be8 <st_generate_step_dir_invert_masks>:



// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
  uint8_t idx;
  step_port_invert_mask = 0;
 8008bee:	4b1e      	ldr	r3, [pc, #120]	; (8008c68 <st_generate_step_dir_invert_masks+0x80>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	801a      	strh	r2, [r3, #0]
  dir_port_invert_mask = 0;
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	; (8008c6c <st_generate_step_dir_invert_masks+0x84>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	801a      	strh	r2, [r3, #0]
  for (idx=0; idx<N_AXIS; idx++) {
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	71fb      	strb	r3, [r7, #7]
 8008bfe:	e02a      	b.n	8008c56 <st_generate_step_dir_invert_masks+0x6e>
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008c00:	4b1b      	ldr	r3, [pc, #108]	; (8008c70 <st_generate_step_dir_invert_masks+0x88>)
 8008c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c04:	461a      	mov	r2, r3
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	fa42 f303 	asr.w	r3, r2, r3
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d009      	beq.n	8008c28 <st_generate_step_dir_invert_masks+0x40>
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	4a17      	ldr	r2, [pc, #92]	; (8008c74 <st_generate_step_dir_invert_masks+0x8c>)
 8008c18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008c1c:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <st_generate_step_dir_invert_masks+0x80>)
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <st_generate_step_dir_invert_masks+0x80>)
 8008c26:	801a      	strh	r2, [r3, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008c28:	4b11      	ldr	r3, [pc, #68]	; (8008c70 <st_generate_step_dir_invert_masks+0x88>)
 8008c2a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	fa42 f303 	asr.w	r3, r2, r3
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <st_generate_step_dir_invert_masks+0x68>
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	4a0e      	ldr	r2, [pc, #56]	; (8008c78 <st_generate_step_dir_invert_masks+0x90>)
 8008c40:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008c44:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <st_generate_step_dir_invert_masks+0x84>)
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <st_generate_step_dir_invert_masks+0x84>)
 8008c4e:	801a      	strh	r2, [r3, #0]
  for (idx=0; idx<N_AXIS; idx++) {
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	3301      	adds	r3, #1
 8008c54:	71fb      	strb	r3, [r7, #7]
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d9d1      	bls.n	8008c00 <st_generate_step_dir_invert_masks+0x18>
  }
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	20000a2c 	.word	0x20000a2c
 8008c6c:	20000a2e 	.word	0x20000a2e
 8008c70:	200010b4 	.word	0x200010b4
 8008c74:	0800b9e4 	.word	0x0800b9e4
 8008c78:	0800b9ec 	.word	0x0800b9ec

08008c7c <st_reset>:


// Reset and clear stepper subsystem variables
void st_reset()
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  // Initialize stepper driver idle state.
  st_go_idle();
 8008c80:	f7ff fd70 	bl	8008764 <st_go_idle>
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 8008c84:	2238      	movs	r2, #56	; 0x38
 8008c86:	2100      	movs	r1, #0
 8008c88:	4821      	ldr	r0, [pc, #132]	; (8008d10 <st_reset+0x94>)
 8008c8a:	f001 fcd2 	bl	800a632 <memset>
  memset(&st, 0, sizeof(stepper_t));
 8008c8e:	222c      	movs	r2, #44	; 0x2c
 8008c90:	2100      	movs	r1, #0
 8008c92:	4820      	ldr	r0, [pc, #128]	; (8008d14 <st_reset+0x98>)
 8008c94:	f001 fccd 	bl	800a632 <memset>
  st.exec_segment = NULL;
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <st_reset+0x98>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	629a      	str	r2, [r3, #40]	; 0x28
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8008c9e:	4b1e      	ldr	r3, [pc, #120]	; (8008d18 <st_reset+0x9c>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
  segment_buffer_tail = 0;
 8008ca4:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <st_reset+0xa0>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	701a      	strb	r2, [r3, #0]
  segment_buffer_head = 0; // empty = tail
 8008caa:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <st_reset+0xa4>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
  segment_next_head = 1;
 8008cb0:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <st_reset+0xa8>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	701a      	strb	r2, [r3, #0]
  busy = false;
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <st_reset+0xac>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]

  st_generate_step_dir_invert_masks();
 8008cbc:	f7ff ff94 	bl	8008be8 <st_generate_step_dir_invert_masks>
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8008cc0:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <st_reset+0xb0>)
 8008cc2:	881a      	ldrh	r2, [r3, #0]
 8008cc4:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <st_reset+0x98>)
 8008cc6:	825a      	strh	r2, [r3, #18]
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8008cc8:	bf00      	nop
 8008cca:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <st_reset+0xb4>)
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1f8      	bne.n	8008cca <st_reset+0x4e>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008cd8:	4b15      	ldr	r3, [pc, #84]	; (8008d30 <st_reset+0xb4>)
 8008cda:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008cde:	821a      	strh	r2, [r3, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008ce0:	4914      	ldr	r1, [pc, #80]	; (8008d34 <st_reset+0xb8>)
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <st_reset+0xb8>)
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	f023 0215 	bic.w	r2, r3, #21
 8008cea:	4b13      	ldr	r3, [pc, #76]	; (8008d38 <st_reset+0xbc>)
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	f003 0315 	and.w	r3, r3, #21
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60cb      	str	r3, [r1, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8008cf6:	490f      	ldr	r1, [pc, #60]	; (8008d34 <st_reset+0xb8>)
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <st_reset+0xb8>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8008d00:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <st_reset+0xb0>)
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60cb      	str	r3, [r1, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008d0c:	bf00      	nop
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000a3c 	.word	0x20000a3c
 8008d14:	200009fc 	.word	0x200009fc
 8008d18:	20000a34 	.word	0x20000a34
 8008d1c:	20000a28 	.word	0x20000a28
 8008d20:	20000a29 	.word	0x20000a29
 8008d24:	20000a2a 	.word	0x20000a2a
 8008d28:	20000a30 	.word	0x20000a30
 8008d2c:	20000a2e 	.word	0x20000a2e
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40010800 	.word	0x40010800
 8008d38:	20000a2c 	.word	0x20000a2c

08008d3c <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 8008d42:	2101      	movs	r1, #1
 8008d44:	2004      	movs	r0, #4
 8008d46:	f7f8 fe15 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8008d4e:	2310      	movs	r3, #16
 8008d50:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 8008d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d56:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4839      	ldr	r0, [pc, #228]	; (8008e44 <stepper_init+0x108>)
 8008d5e:	f7f8 fb9f 	bl	80014a0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 8008d62:	2101      	movs	r1, #1
 8008d64:	2004      	movs	r0, #4
 8008d66:	f7f8 fe05 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 8008d6a:	2315      	movs	r3, #21
 8008d6c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4834      	ldr	r0, [pc, #208]	; (8008e44 <stepper_init+0x108>)
 8008d74:	f7f8 fb94 	bl	80014a0 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 8008d78:	2101      	movs	r1, #1
 8008d7a:	2004      	movs	r0, #4
 8008d7c:	f7f8 fdfa 	bl	8001974 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008d80:	232a      	movs	r3, #42	; 0x2a
 8008d82:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008d84:	1d3b      	adds	r3, r7, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	482e      	ldr	r0, [pc, #184]	; (8008e44 <stepper_init+0x108>)
 8008d8a:	f7f8 fb89 	bl	80014a0 <GPIO_Init>

	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008d8e:	4a2e      	ldr	r2, [pc, #184]	; (8008e48 <stepper_init+0x10c>)
 8008d90:	4b2d      	ldr	r3, [pc, #180]	; (8008e48 <stepper_init+0x10c>)
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	61d3      	str	r3, [r2, #28]
	TIM_Configuration(TIM2, 1, 1, 1);
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	2101      	movs	r1, #1
 8008da0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008da4:	f000 fe66 	bl	8009a74 <TIM_Configuration>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 8008da8:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <stepper_init+0x10c>)
 8008daa:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <stepper_init+0x10c>)
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f043 0302 	orr.w	r3, r3, #2
 8008db2:	61d3      	str	r3, [r2, #28]
	TIM_Configuration(TIM3, 1, 1, 1);
 8008db4:	2301      	movs	r3, #1
 8008db6:	2201      	movs	r2, #1
 8008db8:	2101      	movs	r1, #1
 8008dba:	4824      	ldr	r0, [pc, #144]	; (8008e4c <stepper_init+0x110>)
 8008dbc:	f000 fe5a 	bl	8009a74 <TIM_Configuration>

	TIM2->CR1 &= ~TIM_CR1_CEN;
 8008dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	8013      	strh	r3, [r2, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ddc:	8a1b      	ldrh	r3, [r3, #16]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8213      	strh	r3, [r2, #16]
	TIM2->CNT = 0;
 8008de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dec:	2200      	movs	r2, #0
 8008dee:	849a      	strh	r2, [r3, #36]	; 0x24

	TIM3->CR1 &= ~TIM_CR1_CEN;
 8008df0:	4a16      	ldr	r2, [pc, #88]	; (8008e4c <stepper_init+0x110>)
 8008df2:	4b16      	ldr	r3, [pc, #88]	; (8008e4c <stepper_init+0x110>)
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f023 0301 	bic.w	r3, r3, #1
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	8013      	strh	r3, [r2, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008e00:	4a12      	ldr	r2, [pc, #72]	; (8008e4c <stepper_init+0x110>)
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <stepper_init+0x110>)
 8008e04:	8a1b      	ldrh	r3, [r3, #16]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	f023 0303 	bic.w	r3, r3, #3
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	8213      	strh	r3, [r2, #16]
	TIM3->CNT = 0;
 8008e10:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <stepper_init+0x110>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	849a      	strh	r2, [r3, #36]	; 0x24
	//
#ifdef STEP_PULSE_DELAY
	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
#endif

	NVIC_SetPriority(TIM3_IRQn, 0);
 8008e16:	2100      	movs	r1, #0
 8008e18:	201d      	movs	r0, #29
 8008e1a:	f7ff fc1f 	bl	800865c <NVIC_SetPriority>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8008e1e:	2101      	movs	r1, #1
 8008e20:	201c      	movs	r0, #28
 8008e22:	f7ff fc1b 	bl	800865c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8008e26:	201d      	movs	r0, #29
 8008e28:	f7ff fc00 	bl	800862c <NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 8008e2c:	201c      	movs	r0, #28
 8008e2e:	f7ff fbfd 	bl	800862c <NVIC_EnableIRQ>
#ifdef DEBUG_TIMING_WITH_FLOOD_AND_MIST
  GPIO_SetBits(COOLANT_MIST_PORT,1 << COOLANT_MIST_BIT); // added by MS to debug
 8008e32:	2108      	movs	r1, #8
 8008e34:	4806      	ldr	r0, [pc, #24]	; (8008e50 <stepper_init+0x114>)
 8008e36:	f7f8 fc07 	bl	8001648 <GPIO_SetBits>
	QueryPerformanceFrequency(&Win32Frequency);

	_beginthread(Timer1Thread, 0, NULL);
	_beginthread(Timer0Thread, 0, NULL);
#endif
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	40010800 	.word	0x40010800
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40010c00 	.word	0x40010c00

08008e54 <st_update_plan_block_parameters>:


// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters()
{
 8008e54:	b598      	push	{r3, r4, r7, lr}
 8008e56:	af00      	add	r7, sp, #0
  if (pl_block != NULL) { // Ignore if at start of a new block.
 8008e58:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <st_update_plan_block_parameters+0x3c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d015      	beq.n	8008e8c <st_update_plan_block_parameters+0x38>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008e60:	4b0c      	ldr	r3, [pc, #48]	; (8008e94 <st_update_plan_block_parameters+0x40>)
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	4b0a      	ldr	r3, [pc, #40]	; (8008e94 <st_update_plan_block_parameters+0x40>)
 8008e6c:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008e6e:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <st_update_plan_block_parameters+0x3c>)
 8008e70:	681c      	ldr	r4, [r3, #0]
 8008e72:	4b08      	ldr	r3, [pc, #32]	; (8008e94 <st_update_plan_block_parameters+0x40>)
 8008e74:	69da      	ldr	r2, [r3, #28]
 8008e76:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <st_update_plan_block_parameters+0x40>)
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7f7 ff17 	bl	8000cb0 <__aeabi_fmul>
 8008e82:	4603      	mov	r3, r0
 8008e84:	6163      	str	r3, [r4, #20]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008e86:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <st_update_plan_block_parameters+0x3c>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	bd98      	pop	{r3, r4, r7, pc}
 8008e90:	20000a34 	.word	0x20000a34
 8008e94:	20000a3c 	.word	0x20000a3c

08008e98 <st_next_block_index>:


// Increments the step segment buffer block data ring buffer.
static uint8_t st_next_block_index(uint8_t block_index)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	71fb      	strb	r3, [r7, #7]
  block_index++;
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8008ea8:	79fb      	ldrb	r3, [r7, #7]
 8008eaa:	2b09      	cmp	r3, #9
 8008eac:	d101      	bne.n	8008eb2 <st_next_block_index+0x1a>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e000      	b.n	8008eb4 <st_next_block_index+0x1c>
  return(block_index);
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr
	...

08008ec0 <st_prep_buffer>:
   longer than the time it takes the stepper algorithm to empty it before refilling it.
   Currently, the segment buffer conservatively holds roughly up to 40-50 msec of steps.
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer()
{
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b097      	sub	sp, #92	; 0x5c
 8008ec4:	af00      	add	r7, sp, #0
  // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008ec6:	4b9a      	ldr	r3, [pc, #616]	; (8009130 <st_prep_buffer+0x270>)
 8008ec8:	791b      	ldrb	r3, [r3, #4]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 859d 	bne.w	8009a0e <st_prep_buffer+0xb4e>

  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008ed4:	f000 bd92 	b.w	80099fc <st_prep_buffer+0xb3c>

    // Determine if we need to load a new planner block or if the block needs to be recomputed.
    if (pl_block == NULL) {
 8008ed8:	4b96      	ldr	r3, [pc, #600]	; (8009134 <st_prep_buffer+0x274>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 826e 	bne.w	80093be <st_prep_buffer+0x4fe>

      // Query planner for a queued block
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8008ee2:	4b93      	ldr	r3, [pc, #588]	; (8009130 <st_prep_buffer+0x270>)
 8008ee4:	791b      	ldrb	r3, [r3, #4]
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <st_prep_buffer+0x3a>
 8008eee:	f7fc fad3 	bl	8005498 <plan_get_system_motion_block>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b8f      	ldr	r3, [pc, #572]	; (8009134 <st_prep_buffer+0x274>)
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e004      	b.n	8008f04 <st_prep_buffer+0x44>
      else { pl_block = plan_get_current_block(); }
 8008efa:	f7fc fadf 	bl	80054bc <plan_get_current_block>
 8008efe:	4602      	mov	r2, r0
 8008f00:	4b8c      	ldr	r3, [pc, #560]	; (8009134 <st_prep_buffer+0x274>)
 8008f02:	601a      	str	r2, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8008f04:	4b8b      	ldr	r3, [pc, #556]	; (8009134 <st_prep_buffer+0x274>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 8582 	beq.w	8009a12 <st_prep_buffer+0xb52>

      // Check if we need to only recompute the velocity profile or load a new block.
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 8008f0e:	4b8a      	ldr	r3, [pc, #552]	; (8009138 <st_prep_buffer+0x278>)
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <st_prep_buffer+0x62>

        #ifdef PARKING_ENABLE
          if (prep.recalculate_flag & PREP_FLAG_PARKING) { prep.recalculate_flag &= ~(PREP_FLAG_RECALCULATE); }
          else { prep.recalculate_flag = false; }
        #else
          prep.recalculate_flag = false;
 8008f1a:	4b87      	ldr	r3, [pc, #540]	; (8009138 <st_prep_buffer+0x278>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	705a      	strb	r2, [r3, #1]
 8008f20:	e0ad      	b.n	800907e <st_prep_buffer+0x1be>
        #endif

      } else {

        // Load the Bresenham stepping data for the block.
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 8008f22:	4b85      	ldr	r3, [pc, #532]	; (8009138 <st_prep_buffer+0x278>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff ffb6 	bl	8008e98 <st_next_block_index>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4b81      	ldr	r3, [pc, #516]	; (8009138 <st_prep_buffer+0x278>)
 8008f32:	701a      	strb	r2, [r3, #0]

        // Prepare and copy Bresenham algorithm segment data from the new planner block, so that
        // when the segment buffer completes the planner block, it may be discarded when the
        // segment buffer finishes the prepped block, but the stepper ISR is still executing it.
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8008f34:	4b80      	ldr	r3, [pc, #512]	; (8009138 <st_prep_buffer+0x278>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4a7e      	ldr	r2, [pc, #504]	; (800913c <st_prep_buffer+0x27c>)
 8008f44:	4413      	add	r3, r2
 8008f46:	4a7e      	ldr	r2, [pc, #504]	; (8009140 <st_prep_buffer+0x280>)
 8008f48:	6013      	str	r3, [r2, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8008f4a:	4b7d      	ldr	r3, [pc, #500]	; (8009140 <st_prep_buffer+0x280>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a79      	ldr	r2, [pc, #484]	; (8009134 <st_prep_buffer+0x274>)
 8008f50:	6812      	ldr	r2, [r2, #0]
 8008f52:	8a12      	ldrh	r2, [r2, #16]
 8008f54:	821a      	strh	r2, [r3, #16]
          st_prep_block->step_event_count = (pl_block->step_event_count << 1);
        #else
          // With AMASS enabled, simply bit-shift multiply all Bresenham data by the max AMASS
          // level, such that we never divide beyond the original data anywhere in the algorithm.
          // If the original data is divided, we can lose a step from integer roundoff.
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8008f56:	2300      	movs	r3, #0
 8008f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008f5c:	e011      	b.n	8008f82 <st_prep_buffer+0xc2>
 8008f5e:	4b78      	ldr	r3, [pc, #480]	; (8009140 <st_prep_buffer+0x280>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008f66:	4973      	ldr	r1, [pc, #460]	; (8009134 <st_prep_buffer+0x274>)
 8008f68:	6809      	ldr	r1, [r1, #0]
 8008f6a:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8008f6e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008f72:	00c9      	lsls	r1, r1, #3
 8008f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8008f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d9e9      	bls.n	8008f5e <st_prep_buffer+0x9e>
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 8008f8a:	4b6d      	ldr	r3, [pc, #436]	; (8009140 <st_prep_buffer+0x280>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a69      	ldr	r2, [pc, #420]	; (8009134 <st_prep_buffer+0x274>)
 8008f90:	6812      	ldr	r2, [r2, #0]
 8008f92:	68d2      	ldr	r2, [r2, #12]
 8008f94:	00d2      	lsls	r2, r2, #3
 8008f96:	60da      	str	r2, [r3, #12]
        #endif

        // Initialize segment buffer data for generating the segments.
        prep.steps_remaining = (float)pl_block->step_event_count;
 8008f98:	4b66      	ldr	r3, [pc, #408]	; (8009134 <st_prep_buffer+0x274>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f7 fe2e 	bl	8000c00 <__aeabi_ui2f>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	4b64      	ldr	r3, [pc, #400]	; (8009138 <st_prep_buffer+0x278>)
 8008fa8:	609a      	str	r2, [r3, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8008faa:	4b63      	ldr	r3, [pc, #396]	; (8009138 <st_prep_buffer+0x278>)
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	4b61      	ldr	r3, [pc, #388]	; (8009134 <st_prep_buffer+0x274>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f7f7 ff2e 	bl	8000e18 <__aeabi_fdiv>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4b5d      	ldr	r3, [pc, #372]	; (8009138 <st_prep_buffer+0x278>)
 8008fc2:	60da      	str	r2, [r3, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8008fc4:	4b5c      	ldr	r3, [pc, #368]	; (8009138 <st_prep_buffer+0x278>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	485e      	ldr	r0, [pc, #376]	; (8009144 <st_prep_buffer+0x284>)
 8008fcc:	f7f7 ff24 	bl	8000e18 <__aeabi_fdiv>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4b58      	ldr	r3, [pc, #352]	; (8009138 <st_prep_buffer+0x278>)
 8008fd6:	611a      	str	r2, [r3, #16]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8008fd8:	4b57      	ldr	r3, [pc, #348]	; (8009138 <st_prep_buffer+0x278>)
 8008fda:	f04f 0200 	mov.w	r2, #0
 8008fde:	605a      	str	r2, [r3, #4]

        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8008fe0:	4b53      	ldr	r3, [pc, #332]	; (8009130 <st_prep_buffer+0x270>)
 8008fe2:	791b      	ldrb	r3, [r3, #4]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d105      	bne.n	8008ff8 <st_prep_buffer+0x138>
 8008fec:	4b52      	ldr	r3, [pc, #328]	; (8009138 <st_prep_buffer+0x278>)
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d017      	beq.n	8009028 <st_prep_buffer+0x168>
          // New block loaded mid-hold. Override planner block entry speed to enforce deceleration.
          prep.current_speed = prep.exit_speed;
 8008ff8:	4b4f      	ldr	r3, [pc, #316]	; (8009138 <st_prep_buffer+0x278>)
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	4a4e      	ldr	r2, [pc, #312]	; (8009138 <st_prep_buffer+0x278>)
 8008ffe:	61d3      	str	r3, [r2, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009000:	4b4c      	ldr	r3, [pc, #304]	; (8009134 <st_prep_buffer+0x274>)
 8009002:	681c      	ldr	r4, [r3, #0]
 8009004:	4b4c      	ldr	r3, [pc, #304]	; (8009138 <st_prep_buffer+0x278>)
 8009006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009008:	4b4b      	ldr	r3, [pc, #300]	; (8009138 <st_prep_buffer+0x278>)
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7f7 fe4e 	bl	8000cb0 <__aeabi_fmul>
 8009014:	4603      	mov	r3, r0
 8009016:	6163      	str	r3, [r4, #20]
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8009018:	4b47      	ldr	r3, [pc, #284]	; (8009138 <st_prep_buffer+0x278>)
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	f023 0308 	bic.w	r3, r3, #8
 8009020:	b2da      	uxtb	r2, r3
 8009022:	4b45      	ldr	r3, [pc, #276]	; (8009138 <st_prep_buffer+0x278>)
 8009024:	705a      	strb	r2, [r3, #1]
 8009026:	e008      	b.n	800903a <st_prep_buffer+0x17a>
        } else {
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8009028:	4b42      	ldr	r3, [pc, #264]	; (8009134 <st_prep_buffer+0x274>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	4618      	mov	r0, r3
 8009030:	f001 fc32 	bl	800a898 <sqrtf>
 8009034:	4602      	mov	r2, r0
 8009036:	4b40      	ldr	r3, [pc, #256]	; (8009138 <st_prep_buffer+0x278>)
 8009038:	61da      	str	r2, [r3, #28]
        }
#ifdef VARIABLE_SPINDLE
        // Setup laser mode variables. PWM rate adjusted motions will always complete a motion with the
        // spindle off. 
        st_prep_block->is_pwm_rate_adjusted = false;
 800903a:	4b41      	ldr	r3, [pc, #260]	; (8009140 <st_prep_buffer+0x280>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2200      	movs	r2, #0
 8009040:	749a      	strb	r2, [r3, #18]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009042:	4b41      	ldr	r3, [pc, #260]	; (8009148 <st_prep_buffer+0x288>)
 8009044:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d016      	beq.n	800907e <st_prep_buffer+0x1be>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 8009050:	4b38      	ldr	r3, [pc, #224]	; (8009134 <st_prep_buffer+0x274>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	7c9b      	ldrb	r3, [r3, #18]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00f      	beq.n	800907e <st_prep_buffer+0x1be>
            // Pre-compute inverse programmed rate to speed up PWM updating per step segment.
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 800905e:	4b35      	ldr	r3, [pc, #212]	; (8009134 <st_prep_buffer+0x274>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4619      	mov	r1, r3
 8009066:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800906a:	f7f7 fed5 	bl	8000e18 <__aeabi_fdiv>
 800906e:	4603      	mov	r3, r0
 8009070:	461a      	mov	r2, r3
 8009072:	4b31      	ldr	r3, [pc, #196]	; (8009138 <st_prep_buffer+0x278>)
 8009074:	631a      	str	r2, [r3, #48]	; 0x30
            st_prep_block->is_pwm_rate_adjusted = true;
 8009076:	4b32      	ldr	r3, [pc, #200]	; (8009140 <st_prep_buffer+0x280>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2201      	movs	r2, #1
 800907c:	749a      	strb	r2, [r3, #18]
			 Compute the velocity profile of a new planner block based on its entry and exit
			 speeds, or recompute the profile of a partially-completed planner block if the
			 planner has updated it. For a commanded forced-deceleration, such as from a feed
			 hold, override the planner velocities and decelerate to the target exit speed.
			*/
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 800907e:	4b2e      	ldr	r3, [pc, #184]	; (8009138 <st_prep_buffer+0x278>)
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	619a      	str	r2, [r3, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009086:	4b2b      	ldr	r3, [pc, #172]	; (8009134 <st_prep_buffer+0x274>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69db      	ldr	r3, [r3, #28]
 800908c:	4619      	mov	r1, r3
 800908e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8009092:	f7f7 fec1 	bl	8000e18 <__aeabi_fdiv>
 8009096:	4603      	mov	r3, r0
 8009098:	617b      	str	r3, [r7, #20]
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 800909a:	4b25      	ldr	r3, [pc, #148]	; (8009130 <st_prep_buffer+0x270>)
 800909c:	791b      	ldrb	r3, [r3, #4]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d052      	beq.n	800914c <st_prep_buffer+0x28c>
				// Compute velocity profile parameters for a feed hold in-progress. This profile overrides
				// the planner block profile, enforcing a deceleration to zero speed.
				prep.ramp_type = RAMP_DECEL;
 80090a6:	4b24      	ldr	r3, [pc, #144]	; (8009138 <st_prep_buffer+0x278>)
 80090a8:	2202      	movs	r2, #2
 80090aa:	751a      	strb	r2, [r3, #20]
				// Compute decelerate distance relative to end of block.
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 80090ac:	4b21      	ldr	r3, [pc, #132]	; (8009134 <st_prep_buffer+0x274>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a1c      	ldr	r4, [r3, #32]
 80090b2:	4b20      	ldr	r3, [pc, #128]	; (8009134 <st_prep_buffer+0x274>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	6979      	ldr	r1, [r7, #20]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f7 fdf8 	bl	8000cb0 <__aeabi_fmul>
 80090c0:	4603      	mov	r3, r0
 80090c2:	4619      	mov	r1, r3
 80090c4:	4620      	mov	r0, r4
 80090c6:	f7f7 fce9 	bl	8000a9c <__aeabi_fsub>
 80090ca:	4603      	mov	r3, r0
 80090cc:	613b      	str	r3, [r7, #16]
				if (decel_dist < 0.0f) {
 80090ce:	f04f 0100 	mov.w	r1, #0
 80090d2:	6938      	ldr	r0, [r7, #16]
 80090d4:	f7f7 ff8a 	bl	8000fec <__aeabi_fcmplt>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01f      	beq.n	800911e <st_prep_buffer+0x25e>
					// Deceleration through entire planner block. End of feed hold is not in this block.
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 80090de:	4b15      	ldr	r3, [pc, #84]	; (8009134 <st_prep_buffer+0x274>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695c      	ldr	r4, [r3, #20]
 80090e4:	4b13      	ldr	r3, [pc, #76]	; (8009134 <st_prep_buffer+0x274>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	4619      	mov	r1, r3
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f7 fcd7 	bl	8000aa0 <__addsf3>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <st_prep_buffer+0x274>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7f7 fdd6 	bl	8000cb0 <__aeabi_fmul>
 8009104:	4603      	mov	r3, r0
 8009106:	4619      	mov	r1, r3
 8009108:	4620      	mov	r0, r4
 800910a:	f7f7 fcc7 	bl	8000a9c <__aeabi_fsub>
 800910e:	4603      	mov	r3, r0
 8009110:	4618      	mov	r0, r3
 8009112:	f001 fbc1 	bl	800a898 <sqrtf>
 8009116:	4602      	mov	r2, r0
 8009118:	4b07      	ldr	r3, [pc, #28]	; (8009138 <st_prep_buffer+0x278>)
 800911a:	625a      	str	r2, [r3, #36]	; 0x24
 800911c:	e148      	b.n	80093b0 <st_prep_buffer+0x4f0>
				} else {
					prep.mm_complete = decel_dist; // End of feed hold.
 800911e:	4a06      	ldr	r2, [pc, #24]	; (8009138 <st_prep_buffer+0x278>)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	6193      	str	r3, [r2, #24]
					prep.exit_speed = 0.0f;
 8009124:	4b04      	ldr	r3, [pc, #16]	; (8009138 <st_prep_buffer+0x278>)
 8009126:	f04f 0200 	mov.w	r2, #0
 800912a:	625a      	str	r2, [r3, #36]	; 0x24
 800912c:	e140      	b.n	80093b0 <st_prep_buffer+0x4f0>
 800912e:	bf00      	nop
 8009130:	20000f00 	.word	0x20000f00
 8009134:	20000a34 	.word	0x20000a34
 8009138:	20000a3c 	.word	0x20000a3c
 800913c:	200008f8 	.word	0x200008f8
 8009140:	20000a38 	.word	0x20000a38
 8009144:	3fa00000 	.word	0x3fa00000
 8009148:	200010b4 	.word	0x200010b4
				}
			} else { // [Normal Operation]
				// Compute or recompute velocity profile parameters of the prepped planner block.
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 800914c:	4b91      	ldr	r3, [pc, #580]	; (8009394 <st_prep_buffer+0x4d4>)
 800914e:	2200      	movs	r2, #0
 8009150:	751a      	strb	r2, [r3, #20]
				prep.accelerate_until = pl_block->millimeters;
 8009152:	4b91      	ldr	r3, [pc, #580]	; (8009398 <st_prep_buffer+0x4d8>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	4a8e      	ldr	r2, [pc, #568]	; (8009394 <st_prep_buffer+0x4d4>)
 800915a:	6293      	str	r3, [r2, #40]	; 0x28

				float exit_speed_sqr;
				float nominal_speed;
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800915c:	4b8f      	ldr	r3, [pc, #572]	; (800939c <st_prep_buffer+0x4dc>)
 800915e:	791b      	ldrb	r3, [r3, #4]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d006      	beq.n	8009176 <st_prep_buffer+0x2b6>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	653b      	str	r3, [r7, #80]	; 0x50
 800916e:	4a89      	ldr	r2, [pc, #548]	; (8009394 <st_prep_buffer+0x4d4>)
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	6253      	str	r3, [r2, #36]	; 0x24
 8009174:	e008      	b.n	8009188 <st_prep_buffer+0x2c8>
        } else {
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 8009176:	f7fc f9bd 	bl	80054f4 <plan_get_exec_block_exit_speed_sqr>
 800917a:	6538      	str	r0, [r7, #80]	; 0x50
          prep.exit_speed = sqrtf(exit_speed_sqr);
 800917c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800917e:	f001 fb8b 	bl	800a898 <sqrtf>
 8009182:	4602      	mov	r2, r0
 8009184:	4b83      	ldr	r3, [pc, #524]	; (8009394 <st_prep_buffer+0x4d4>)
 8009186:	625a      	str	r2, [r3, #36]	; 0x24
        }

        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 8009188:	4b83      	ldr	r3, [pc, #524]	; (8009398 <st_prep_buffer+0x4d8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7fc f9e9 	bl	8005564 <plan_compute_profile_nominal_speed>
 8009192:	60f8      	str	r0, [r7, #12]
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 8009194:	68f9      	ldr	r1, [r7, #12]
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7f7 fd8a 	bl	8000cb0 <__aeabi_fmul>
 800919c:	4603      	mov	r3, r0
 800919e:	60bb      	str	r3, [r7, #8]
				float intersect_distance =
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80091a0:	4b7d      	ldr	r3, [pc, #500]	; (8009398 <st_prep_buffer+0x4d8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6a1c      	ldr	r4, [r3, #32]
 80091a6:	4b7c      	ldr	r3, [pc, #496]	; (8009398 <st_prep_buffer+0x4d8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f7 fc74 	bl	8000a9c <__aeabi_fsub>
 80091b4:	4603      	mov	r3, r0
 80091b6:	6979      	ldr	r1, [r7, #20]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7f7 fd79 	bl	8000cb0 <__aeabi_fmul>
 80091be:	4603      	mov	r3, r0
 80091c0:	4619      	mov	r1, r3
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7f7 fc6c 	bl	8000aa0 <__addsf3>
 80091c8:	4603      	mov	r3, r0
				float intersect_distance =
 80091ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f7 fd6e 	bl	8000cb0 <__aeabi_fmul>
 80091d4:	4603      	mov	r3, r0
 80091d6:	607b      	str	r3, [r7, #4]

        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 80091d8:	4b6f      	ldr	r3, [pc, #444]	; (8009398 <st_prep_buffer+0x4d8>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7f7 ff21 	bl	8001028 <__aeabi_fcmpgt>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d05f      	beq.n	80092ac <st_prep_buffer+0x3ec>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80091ec:	4b6a      	ldr	r3, [pc, #424]	; (8009398 <st_prep_buffer+0x4d8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6a1c      	ldr	r4, [r3, #32]
 80091f2:	4b69      	ldr	r3, [pc, #420]	; (8009398 <st_prep_buffer+0x4d8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f7 fc4e 	bl	8000a9c <__aeabi_fsub>
 8009200:	4603      	mov	r3, r0
 8009202:	6979      	ldr	r1, [r7, #20]
 8009204:	4618      	mov	r0, r3
 8009206:	f7f7 fd53 	bl	8000cb0 <__aeabi_fmul>
 800920a:	4603      	mov	r3, r0
 800920c:	4619      	mov	r1, r3
 800920e:	4620      	mov	r0, r4
 8009210:	f7f7 fc44 	bl	8000a9c <__aeabi_fsub>
 8009214:	4603      	mov	r3, r0
 8009216:	461a      	mov	r2, r3
 8009218:	4b5e      	ldr	r3, [pc, #376]	; (8009394 <st_prep_buffer+0x4d4>)
 800921a:	629a      	str	r2, [r3, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 800921c:	4b5d      	ldr	r3, [pc, #372]	; (8009394 <st_prep_buffer+0x4d4>)
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f04f 0100 	mov.w	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f7f7 feeb 	bl	8001000 <__aeabi_fcmple>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d029      	beq.n	8009284 <st_prep_buffer+0x3c4>
            prep.ramp_type = RAMP_DECEL;
 8009230:	4b58      	ldr	r3, [pc, #352]	; (8009394 <st_prep_buffer+0x4d4>)
 8009232:	2202      	movs	r2, #2
 8009234:	751a      	strb	r2, [r3, #20]
            // prep.decelerate_after = pl_block->millimeters;
            // prep.maximum_speed = prep.current_speed;

            // Compute override block exit speed since it doesn't match the planner exit speed.
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009236:	4b58      	ldr	r3, [pc, #352]	; (8009398 <st_prep_buffer+0x4d8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	695c      	ldr	r4, [r3, #20]
 800923c:	4b56      	ldr	r3, [pc, #344]	; (8009398 <st_prep_buffer+0x4d8>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	4619      	mov	r1, r3
 8009244:	4618      	mov	r0, r3
 8009246:	f7f7 fc2b 	bl	8000aa0 <__addsf3>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	4b52      	ldr	r3, [pc, #328]	; (8009398 <st_prep_buffer+0x4d8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f7f7 fd2a 	bl	8000cb0 <__aeabi_fmul>
 800925c:	4603      	mov	r3, r0
 800925e:	4619      	mov	r1, r3
 8009260:	4620      	mov	r0, r4
 8009262:	f7f7 fc1b 	bl	8000a9c <__aeabi_fsub>
 8009266:	4603      	mov	r3, r0
 8009268:	4618      	mov	r0, r3
 800926a:	f001 fb15 	bl	800a898 <sqrtf>
 800926e:	4602      	mov	r2, r0
 8009270:	4b48      	ldr	r3, [pc, #288]	; (8009394 <st_prep_buffer+0x4d4>)
 8009272:	625a      	str	r2, [r3, #36]	; 0x24
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 8009274:	4b47      	ldr	r3, [pc, #284]	; (8009394 <st_prep_buffer+0x4d4>)
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	f043 0308 	orr.w	r3, r3, #8
 800927c:	b2da      	uxtb	r2, r3
 800927e:	4b45      	ldr	r3, [pc, #276]	; (8009394 <st_prep_buffer+0x4d4>)
 8009280:	705a      	strb	r2, [r3, #1]
 8009282:	e095      	b.n	80093b0 <st_prep_buffer+0x4f0>
            // Can be tricky since entry speed will be current speed, as in feed holds.
            // Also, look into near-zero speed handling issues with this.

          } else {
            // Decelerate to cruise or cruise-decelerate types. Guaranteed to intersect updated plan.
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8009284:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009286:	68b8      	ldr	r0, [r7, #8]
 8009288:	f7f7 fc08 	bl	8000a9c <__aeabi_fsub>
 800928c:	4603      	mov	r3, r0
 800928e:	6979      	ldr	r1, [r7, #20]
 8009290:	4618      	mov	r0, r3
 8009292:	f7f7 fd0d 	bl	8000cb0 <__aeabi_fmul>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
 800929a:	4b3e      	ldr	r3, [pc, #248]	; (8009394 <st_prep_buffer+0x4d4>)
 800929c:	62da      	str	r2, [r3, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 800929e:	4a3d      	ldr	r2, [pc, #244]	; (8009394 <st_prep_buffer+0x4d4>)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6213      	str	r3, [r2, #32]
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 80092a4:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <st_prep_buffer+0x4d4>)
 80092a6:	2203      	movs	r2, #3
 80092a8:	751a      	strb	r2, [r3, #20]
 80092aa:	e081      	b.n	80093b0 <st_prep_buffer+0x4f0>
          }
				} else if (intersect_distance > 0.0f) {
 80092ac:	f04f 0100 	mov.w	r1, #0
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7f7 feb9 	bl	8001028 <__aeabi_fcmpgt>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d071      	beq.n	80093a0 <st_prep_buffer+0x4e0>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 80092bc:	4b36      	ldr	r3, [pc, #216]	; (8009398 <st_prep_buffer+0x4d8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 feaf 	bl	8001028 <__aeabi_fcmpgt>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d05d      	beq.n	800938c <st_prep_buffer+0x4cc>
						// NOTE: For acceleration-cruise and cruise-only types, following calculation will be 0.0.
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80092d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092d2:	68b8      	ldr	r0, [r7, #8]
 80092d4:	f7f7 fbe2 	bl	8000a9c <__aeabi_fsub>
 80092d8:	4603      	mov	r3, r0
 80092da:	6979      	ldr	r1, [r7, #20]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f7 fce7 	bl	8000cb0 <__aeabi_fmul>
 80092e2:	4603      	mov	r3, r0
 80092e4:	461a      	mov	r2, r3
 80092e6:	4b2b      	ldr	r3, [pc, #172]	; (8009394 <st_prep_buffer+0x4d4>)
 80092e8:	62da      	str	r2, [r3, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80092ea:	4b2a      	ldr	r3, [pc, #168]	; (8009394 <st_prep_buffer+0x4d4>)
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7f7 fe7b 	bl	8000fec <__aeabi_fcmplt>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d028      	beq.n	800934e <st_prep_buffer+0x48e>
							prep.maximum_speed = nominal_speed;
 80092fc:	4a25      	ldr	r2, [pc, #148]	; (8009394 <st_prep_buffer+0x4d4>)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6213      	str	r3, [r2, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 8009302:	4b25      	ldr	r3, [pc, #148]	; (8009398 <st_prep_buffer+0x4d8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	4618      	mov	r0, r3
 800930c:	f7f7 fe64 	bl	8000fd8 <__aeabi_fcmpeq>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <st_prep_buffer+0x45e>
								// Cruise-deceleration or cruise-only type.
								prep.ramp_type = RAMP_CRUISE;
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <st_prep_buffer+0x4d4>)
 8009318:	2201      	movs	r2, #1
 800931a:	751a      	strb	r2, [r3, #20]
 800931c:	e048      	b.n	80093b0 <st_prep_buffer+0x4f0>
							} else {
								// Full-trapezoid or acceleration-cruise types
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 800931e:	4b1d      	ldr	r3, [pc, #116]	; (8009394 <st_prep_buffer+0x4d4>)
 8009320:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009322:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <st_prep_buffer+0x4d8>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	4619      	mov	r1, r3
 800932a:	68b8      	ldr	r0, [r7, #8]
 800932c:	f7f7 fbb6 	bl	8000a9c <__aeabi_fsub>
 8009330:	4603      	mov	r3, r0
 8009332:	6979      	ldr	r1, [r7, #20]
 8009334:	4618      	mov	r0, r3
 8009336:	f7f7 fcbb 	bl	8000cb0 <__aeabi_fmul>
 800933a:	4603      	mov	r3, r0
 800933c:	4619      	mov	r1, r3
 800933e:	4620      	mov	r0, r4
 8009340:	f7f7 fbac 	bl	8000a9c <__aeabi_fsub>
 8009344:	4603      	mov	r3, r0
 8009346:	461a      	mov	r2, r3
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <st_prep_buffer+0x4d4>)
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
 800934c:	e030      	b.n	80093b0 <st_prep_buffer+0x4f0>
							}
						} else { // Triangle type
							prep.accelerate_until = intersect_distance;
 800934e:	4a11      	ldr	r2, [pc, #68]	; (8009394 <st_prep_buffer+0x4d4>)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6293      	str	r3, [r2, #40]	; 0x28
							prep.decelerate_after = intersect_distance;
 8009354:	4a0f      	ldr	r2, [pc, #60]	; (8009394 <st_prep_buffer+0x4d4>)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	62d3      	str	r3, [r2, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 800935a:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <st_prep_buffer+0x4d8>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69db      	ldr	r3, [r3, #28]
 8009360:	4619      	mov	r1, r3
 8009362:	4618      	mov	r0, r3
 8009364:	f7f7 fb9c 	bl	8000aa0 <__addsf3>
 8009368:	4603      	mov	r3, r0
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4618      	mov	r0, r3
 800936e:	f7f7 fc9f 	bl	8000cb0 <__aeabi_fmul>
 8009372:	4603      	mov	r3, r0
 8009374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009376:	4618      	mov	r0, r3
 8009378:	f7f7 fb92 	bl	8000aa0 <__addsf3>
 800937c:	4603      	mov	r3, r0
 800937e:	4618      	mov	r0, r3
 8009380:	f001 fa8a 	bl	800a898 <sqrtf>
 8009384:	4602      	mov	r2, r0
 8009386:	4b03      	ldr	r3, [pc, #12]	; (8009394 <st_prep_buffer+0x4d4>)
 8009388:	621a      	str	r2, [r3, #32]
 800938a:	e011      	b.n	80093b0 <st_prep_buffer+0x4f0>
						}
					} else { // Deceleration-only type
            prep.ramp_type = RAMP_DECEL;
 800938c:	4b01      	ldr	r3, [pc, #4]	; (8009394 <st_prep_buffer+0x4d4>)
 800938e:	2202      	movs	r2, #2
 8009390:	751a      	strb	r2, [r3, #20]
 8009392:	e00d      	b.n	80093b0 <st_prep_buffer+0x4f0>
 8009394:	20000a3c 	.word	0x20000a3c
 8009398:	20000a34 	.word	0x20000a34
 800939c:	20000f00 	.word	0x20000f00
            // prep.decelerate_after = pl_block->millimeters;
            // prep.maximum_speed = prep.current_speed;
					}
				} else { // Acceleration-only type
					prep.accelerate_until = 0.0f;
 80093a0:	4b87      	ldr	r3, [pc, #540]	; (80095c0 <st_prep_buffer+0x700>)
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	629a      	str	r2, [r3, #40]	; 0x28
					// prep.decelerate_after = 0.0f;
					prep.maximum_speed = prep.exit_speed;
 80093a8:	4b85      	ldr	r3, [pc, #532]	; (80095c0 <st_prep_buffer+0x700>)
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	4a84      	ldr	r2, [pc, #528]	; (80095c0 <st_prep_buffer+0x700>)
 80093ae:	6213      	str	r3, [r2, #32]
				}
			}
      
      #ifdef VARIABLE_SPINDLE
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 80093b0:	4b84      	ldr	r3, [pc, #528]	; (80095c4 <st_prep_buffer+0x704>)
 80093b2:	791b      	ldrb	r3, [r3, #4]
 80093b4:	f043 0308 	orr.w	r3, r3, #8
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	4b82      	ldr	r3, [pc, #520]	; (80095c4 <st_prep_buffer+0x704>)
 80093bc:	711a      	strb	r2, [r3, #4]
      #endif
    }
    
    // Initialize new segment
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80093be:	4b82      	ldr	r3, [pc, #520]	; (80095c8 <st_prep_buffer+0x708>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4a81      	ldr	r2, [pc, #516]	; (80095cc <st_prep_buffer+0x70c>)
 80093c6:	4413      	add	r3, r2
 80093c8:	633b      	str	r3, [r7, #48]	; 0x30

    // Set new segment to point to the current segment data block.
    prep_segment->st_block_index = prep.st_block_index;
 80093ca:	4b7d      	ldr	r3, [pc, #500]	; (80095c0 <st_prep_buffer+0x700>)
 80093cc:	781a      	ldrb	r2, [r3, #0]
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	711a      	strb	r2, [r3, #4]
      acceleration ramp, cruising state, and deceleration ramp. Each ramp's travel distance
      may range from zero to the length of the block. Velocity profiles can end either at
      the end of planner block (typical) or mid-block at the end of a forced deceleration,
      such as from a feed hold.
    */
    float dt_max = DT_SEGMENT; // Maximum segment time
 80093d2:	4b7f      	ldr	r3, [pc, #508]	; (80095d0 <st_prep_buffer+0x710>)
 80093d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    float dt = 0.0f; // Initialize segment time
 80093d6:	f04f 0300 	mov.w	r3, #0
 80093da:	64bb      	str	r3, [r7, #72]	; 0x48
    float time_var = dt_max; // Time worker variable
 80093dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093de:	647b      	str	r3, [r7, #68]	; 0x44
    float mm_var; // mm-Distance worker variable
    float speed_var; // Speed worker variable
    float mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 80093e0:	4b7c      	ldr	r3, [pc, #496]	; (80095d4 <st_prep_buffer+0x714>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	643b      	str	r3, [r7, #64]	; 0x40
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 80093e8:	4b75      	ldr	r3, [pc, #468]	; (80095c0 <st_prep_buffer+0x700>)
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	4619      	mov	r1, r3
 80093ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80093f0:	f7f7 fb54 	bl	8000a9c <__aeabi_fsub>
 80093f4:	4603      	mov	r3, r0
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (minimum_mm < 0.0f) { minimum_mm = 0.0f; }
 80093f8:	f04f 0100 	mov.w	r1, #0
 80093fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093fe:	f7f7 fdf5 	bl	8000fec <__aeabi_fcmplt>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d100      	bne.n	800940a <st_prep_buffer+0x54a>
 8009408:	e002      	b.n	8009410 <st_prep_buffer+0x550>
 800940a:	f04f 0300 	mov.w	r3, #0
 800940e:	63fb      	str	r3, [r7, #60]	; 0x3c

    do {
      switch (prep.ramp_type) {
 8009410:	4b6b      	ldr	r3, [pc, #428]	; (80095c0 <st_prep_buffer+0x700>)
 8009412:	7d1b      	ldrb	r3, [r3, #20]
 8009414:	2b01      	cmp	r3, #1
 8009416:	f000 80df 	beq.w	80095d8 <st_prep_buffer+0x718>
 800941a:	2b03      	cmp	r3, #3
 800941c:	d002      	beq.n	8009424 <st_prep_buffer+0x564>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d064      	beq.n	80094ec <st_prep_buffer+0x62c>
 8009422:	e109      	b.n	8009638 <st_prep_buffer+0x778>
        case RAMP_DECEL_OVERRIDE:
          speed_var = pl_block->acceleration*time_var;
 8009424:	4b6b      	ldr	r3, [pc, #428]	; (80095d4 <st_prep_buffer+0x714>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800942c:	4618      	mov	r0, r3
 800942e:	f7f7 fc3f 	bl	8000cb0 <__aeabi_fmul>
 8009432:	4603      	mov	r3, r0
 8009434:	62fb      	str	r3, [r7, #44]	; 0x2c
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8009436:	4b62      	ldr	r3, [pc, #392]	; (80095c0 <st_prep_buffer+0x700>)
 8009438:	69da      	ldr	r2, [r3, #28]
 800943a:	4b61      	ldr	r3, [pc, #388]	; (80095c0 <st_prep_buffer+0x700>)
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	4619      	mov	r1, r3
 8009440:	4610      	mov	r0, r2
 8009442:	f7f7 fb2b 	bl	8000a9c <__aeabi_fsub>
 8009446:	4603      	mov	r3, r0
 8009448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800944a:	4618      	mov	r0, r3
 800944c:	f7f7 fdd8 	bl	8001000 <__aeabi_fcmple>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d027      	beq.n	80094a6 <st_prep_buffer+0x5e6>
            // Cruise or cruise-deceleration types only for deceleration override.
						mm_remaining = prep.accelerate_until;
 8009456:	4b5a      	ldr	r3, [pc, #360]	; (80095c0 <st_prep_buffer+0x700>)
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	643b      	str	r3, [r7, #64]	; 0x40
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800945c:	4b5d      	ldr	r3, [pc, #372]	; (80095d4 <st_prep_buffer+0x714>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 fb19 	bl	8000a9c <__aeabi_fsub>
 800946a:	4603      	mov	r3, r0
 800946c:	4619      	mov	r1, r3
 800946e:	4618      	mov	r0, r3
 8009470:	f7f7 fb16 	bl	8000aa0 <__addsf3>
 8009474:	4603      	mov	r3, r0
 8009476:	461c      	mov	r4, r3
 8009478:	4b51      	ldr	r3, [pc, #324]	; (80095c0 <st_prep_buffer+0x700>)
 800947a:	69da      	ldr	r2, [r3, #28]
 800947c:	4b50      	ldr	r3, [pc, #320]	; (80095c0 <st_prep_buffer+0x700>)
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7f7 fb0c 	bl	8000aa0 <__addsf3>
 8009488:	4603      	mov	r3, r0
 800948a:	4619      	mov	r1, r3
 800948c:	4620      	mov	r0, r4
 800948e:	f7f7 fcc3 	bl	8000e18 <__aeabi_fdiv>
 8009492:	4603      	mov	r3, r0
 8009494:	647b      	str	r3, [r7, #68]	; 0x44
            prep.ramp_type = RAMP_CRUISE;
 8009496:	4b4a      	ldr	r3, [pc, #296]	; (80095c0 <st_prep_buffer+0x700>)
 8009498:	2201      	movs	r2, #1
 800949a:	751a      	strb	r2, [r3, #20]
            prep.current_speed = prep.maximum_speed;
 800949c:	4b48      	ldr	r3, [pc, #288]	; (80095c0 <st_prep_buffer+0x700>)
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	4a47      	ldr	r2, [pc, #284]	; (80095c0 <st_prep_buffer+0x700>)
 80094a2:	61d3      	str	r3, [r2, #28]
          } else { // Mid-deceleration override ramp.
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
            prep.current_speed -= speed_var;
          }
          break;
 80094a4:	e12b      	b.n	80096fe <st_prep_buffer+0x83e>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 80094a6:	4b46      	ldr	r3, [pc, #280]	; (80095c0 <st_prep_buffer+0x700>)
 80094a8:	69dc      	ldr	r4, [r3, #28]
 80094aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80094ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094b0:	f7f7 fbfe 	bl	8000cb0 <__aeabi_fmul>
 80094b4:	4603      	mov	r3, r0
 80094b6:	4619      	mov	r1, r3
 80094b8:	4620      	mov	r0, r4
 80094ba:	f7f7 faef 	bl	8000a9c <__aeabi_fsub>
 80094be:	4603      	mov	r3, r0
 80094c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f7 fbf4 	bl	8000cb0 <__aeabi_fmul>
 80094c8:	4603      	mov	r3, r0
 80094ca:	4619      	mov	r1, r3
 80094cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80094ce:	f7f7 fae5 	bl	8000a9c <__aeabi_fsub>
 80094d2:	4603      	mov	r3, r0
 80094d4:	643b      	str	r3, [r7, #64]	; 0x40
            prep.current_speed -= speed_var;
 80094d6:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <st_prep_buffer+0x700>)
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094dc:	4618      	mov	r0, r3
 80094de:	f7f7 fadd 	bl	8000a9c <__aeabi_fsub>
 80094e2:	4603      	mov	r3, r0
 80094e4:	461a      	mov	r2, r3
 80094e6:	4b36      	ldr	r3, [pc, #216]	; (80095c0 <st_prep_buffer+0x700>)
 80094e8:	61da      	str	r2, [r3, #28]
          break;
 80094ea:	e108      	b.n	80096fe <st_prep_buffer+0x83e>
        case RAMP_ACCEL:
          // NOTE: Acceleration ramp only computes during first do-while loop.
          speed_var = pl_block->acceleration*time_var;
 80094ec:	4b39      	ldr	r3, [pc, #228]	; (80095d4 <st_prep_buffer+0x714>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f7 fbdb 	bl	8000cb0 <__aeabi_fmul>
 80094fa:	4603      	mov	r3, r0
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 80094fe:	4b30      	ldr	r3, [pc, #192]	; (80095c0 <st_prep_buffer+0x700>)
 8009500:	69dc      	ldr	r4, [r3, #28]
 8009502:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009508:	f7f7 fbd2 	bl	8000cb0 <__aeabi_fmul>
 800950c:	4603      	mov	r3, r0
 800950e:	4619      	mov	r1, r3
 8009510:	4620      	mov	r0, r4
 8009512:	f7f7 fac5 	bl	8000aa0 <__addsf3>
 8009516:	4603      	mov	r3, r0
 8009518:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800951a:	4618      	mov	r0, r3
 800951c:	f7f7 fbc8 	bl	8000cb0 <__aeabi_fmul>
 8009520:	4603      	mov	r3, r0
 8009522:	4619      	mov	r1, r3
 8009524:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009526:	f7f7 fab9 	bl	8000a9c <__aeabi_fsub>
 800952a:	4603      	mov	r3, r0
 800952c:	643b      	str	r3, [r7, #64]	; 0x40
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 800952e:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <st_prep_buffer+0x700>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009534:	4618      	mov	r0, r3
 8009536:	f7f7 fd77 	bl	8001028 <__aeabi_fcmpgt>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d034      	beq.n	80095aa <st_prep_buffer+0x6ea>
            // Acceleration-cruise, acceleration-deceleration ramp junction, or end of block.
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8009540:	4b1f      	ldr	r3, [pc, #124]	; (80095c0 <st_prep_buffer+0x700>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	643b      	str	r3, [r7, #64]	; 0x40
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8009546:	4b23      	ldr	r3, [pc, #140]	; (80095d4 <st_prep_buffer+0x714>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800954e:	4618      	mov	r0, r3
 8009550:	f7f7 faa4 	bl	8000a9c <__aeabi_fsub>
 8009554:	4603      	mov	r3, r0
 8009556:	4619      	mov	r1, r3
 8009558:	4618      	mov	r0, r3
 800955a:	f7f7 faa1 	bl	8000aa0 <__addsf3>
 800955e:	4603      	mov	r3, r0
 8009560:	461c      	mov	r4, r3
 8009562:	4b17      	ldr	r3, [pc, #92]	; (80095c0 <st_prep_buffer+0x700>)
 8009564:	69da      	ldr	r2, [r3, #28]
 8009566:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <st_prep_buffer+0x700>)
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f7f7 fa97 	bl	8000aa0 <__addsf3>
 8009572:	4603      	mov	r3, r0
 8009574:	4619      	mov	r1, r3
 8009576:	4620      	mov	r0, r4
 8009578:	f7f7 fc4e 	bl	8000e18 <__aeabi_fdiv>
 800957c:	4603      	mov	r3, r0
 800957e:	647b      	str	r3, [r7, #68]	; 0x44
            if (mm_remaining == prep.decelerate_after) { prep.ramp_type = RAMP_DECEL; }
 8009580:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <st_prep_buffer+0x700>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009586:	4618      	mov	r0, r3
 8009588:	f7f7 fd26 	bl	8000fd8 <__aeabi_fcmpeq>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <st_prep_buffer+0x6da>
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <st_prep_buffer+0x700>)
 8009594:	2202      	movs	r2, #2
 8009596:	751a      	strb	r2, [r3, #20]
 8009598:	e002      	b.n	80095a0 <st_prep_buffer+0x6e0>
            else { prep.ramp_type = RAMP_CRUISE; }
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <st_prep_buffer+0x700>)
 800959c:	2201      	movs	r2, #1
 800959e:	751a      	strb	r2, [r3, #20]
            prep.current_speed = prep.maximum_speed;
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <st_prep_buffer+0x700>)
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	4a06      	ldr	r2, [pc, #24]	; (80095c0 <st_prep_buffer+0x700>)
 80095a6:	61d3      	str	r3, [r2, #28]
          } else { // Acceleration only.
            prep.current_speed += speed_var;
          }
          break;
 80095a8:	e0a9      	b.n	80096fe <st_prep_buffer+0x83e>
            prep.current_speed += speed_var;
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <st_prep_buffer+0x700>)
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7f7 fa75 	bl	8000aa0 <__addsf3>
 80095b6:	4603      	mov	r3, r0
 80095b8:	461a      	mov	r2, r3
 80095ba:	4b01      	ldr	r3, [pc, #4]	; (80095c0 <st_prep_buffer+0x700>)
 80095bc:	61da      	str	r2, [r3, #28]
          break;
 80095be:	e09e      	b.n	80096fe <st_prep_buffer+0x83e>
 80095c0:	20000a3c 	.word	0x20000a3c
 80095c4:	20000f00 	.word	0x20000f00
 80095c8:	20000a29 	.word	0x20000a29
 80095cc:	200009ac 	.word	0x200009ac
 80095d0:	38aec33e 	.word	0x38aec33e
 80095d4:	20000a34 	.word	0x20000a34
        case RAMP_CRUISE:
          // NOTE: mm_var used to retain the last mm_remaining for incomplete segment time_var calculations.
          // NOTE: If maximum_speed*time_var value is too low, round-off can cause mm_var to not change. To
          //   prevent this, simply enforce a minimum speed threshold in the planner.
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 80095d8:	4b7b      	ldr	r3, [pc, #492]	; (80097c8 <st_prep_buffer+0x908>)
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095de:	4618      	mov	r0, r3
 80095e0:	f7f7 fb66 	bl	8000cb0 <__aeabi_fmul>
 80095e4:	4603      	mov	r3, r0
 80095e6:	4619      	mov	r1, r3
 80095e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80095ea:	f7f7 fa57 	bl	8000a9c <__aeabi_fsub>
 80095ee:	4603      	mov	r3, r0
 80095f0:	62bb      	str	r3, [r7, #40]	; 0x28
          if (mm_var < prep.decelerate_after) { // End of cruise.
 80095f2:	4b75      	ldr	r3, [pc, #468]	; (80097c8 <st_prep_buffer+0x908>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f7 fd15 	bl	8001028 <__aeabi_fcmpgt>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d016      	beq.n	8009632 <st_prep_buffer+0x772>
            // Cruise-deceleration junction or end of block.
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8009604:	4b70      	ldr	r3, [pc, #448]	; (80097c8 <st_prep_buffer+0x908>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4619      	mov	r1, r3
 800960a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800960c:	f7f7 fa46 	bl	8000a9c <__aeabi_fsub>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	4b6c      	ldr	r3, [pc, #432]	; (80097c8 <st_prep_buffer+0x908>)
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	4619      	mov	r1, r3
 800961a:	4610      	mov	r0, r2
 800961c:	f7f7 fbfc 	bl	8000e18 <__aeabi_fdiv>
 8009620:	4603      	mov	r3, r0
 8009622:	647b      	str	r3, [r7, #68]	; 0x44
            mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 8009624:	4b68      	ldr	r3, [pc, #416]	; (80097c8 <st_prep_buffer+0x908>)
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	643b      	str	r3, [r7, #64]	; 0x40
            prep.ramp_type = RAMP_DECEL;
 800962a:	4b67      	ldr	r3, [pc, #412]	; (80097c8 <st_prep_buffer+0x908>)
 800962c:	2202      	movs	r2, #2
 800962e:	751a      	strb	r2, [r3, #20]
          } else { // Cruising only.
            mm_remaining = mm_var;
          }
          break;
 8009630:	e065      	b.n	80096fe <st_prep_buffer+0x83e>
            mm_remaining = mm_var;
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	643b      	str	r3, [r7, #64]	; 0x40
          break;
 8009636:	e062      	b.n	80096fe <st_prep_buffer+0x83e>
        default: // case RAMP_DECEL:
          // NOTE: mm_var used as a misc worker variable to prevent errors when near zero speed.
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8009638:	4b64      	ldr	r3, [pc, #400]	; (80097cc <st_prep_buffer+0x90c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009640:	4618      	mov	r0, r3
 8009642:	f7f7 fb35 	bl	8000cb0 <__aeabi_fmul>
 8009646:	4603      	mov	r3, r0
 8009648:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800964a:	4b5f      	ldr	r3, [pc, #380]	; (80097c8 <st_prep_buffer+0x908>)
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009650:	4618      	mov	r0, r3
 8009652:	f7f7 fce9 	bl	8001028 <__aeabi_fcmpgt>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d02d      	beq.n	80096b8 <st_prep_buffer+0x7f8>
            // Compute distance from end of segment to end of block.
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 800965c:	4b5a      	ldr	r3, [pc, #360]	; (80097c8 <st_prep_buffer+0x908>)
 800965e:	69dc      	ldr	r4, [r3, #28]
 8009660:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009666:	f7f7 fb23 	bl	8000cb0 <__aeabi_fmul>
 800966a:	4603      	mov	r3, r0
 800966c:	4619      	mov	r1, r3
 800966e:	4620      	mov	r0, r4
 8009670:	f7f7 fa14 	bl	8000a9c <__aeabi_fsub>
 8009674:	4603      	mov	r3, r0
 8009676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009678:	4618      	mov	r0, r3
 800967a:	f7f7 fb19 	bl	8000cb0 <__aeabi_fmul>
 800967e:	4603      	mov	r3, r0
 8009680:	4619      	mov	r1, r3
 8009682:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009684:	f7f7 fa0a 	bl	8000a9c <__aeabi_fsub>
 8009688:	4603      	mov	r3, r0
 800968a:	62bb      	str	r3, [r7, #40]	; 0x28
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800968c:	4b4e      	ldr	r3, [pc, #312]	; (80097c8 <st_prep_buffer+0x908>)
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009692:	4618      	mov	r0, r3
 8009694:	f7f7 fcaa 	bl	8000fec <__aeabi_fcmplt>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00c      	beq.n	80096b8 <st_prep_buffer+0x7f8>
              mm_remaining = mm_var;
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	643b      	str	r3, [r7, #64]	; 0x40
              prep.current_speed -= speed_var;
 80096a2:	4b49      	ldr	r3, [pc, #292]	; (80097c8 <st_prep_buffer+0x908>)
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7f7 f9f7 	bl	8000a9c <__aeabi_fsub>
 80096ae:	4603      	mov	r3, r0
 80096b0:	461a      	mov	r2, r3
 80096b2:	4b45      	ldr	r3, [pc, #276]	; (80097c8 <st_prep_buffer+0x908>)
 80096b4:	61da      	str	r2, [r3, #28]
              break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 80096b6:	e022      	b.n	80096fe <st_prep_buffer+0x83e>
            }
          }
          // Otherwise, at end of block or end of forced-deceleration.
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 80096b8:	4b43      	ldr	r3, [pc, #268]	; (80097c8 <st_prep_buffer+0x908>)
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	4619      	mov	r1, r3
 80096be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80096c0:	f7f7 f9ec 	bl	8000a9c <__aeabi_fsub>
 80096c4:	4603      	mov	r3, r0
 80096c6:	4619      	mov	r1, r3
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f7 f9e9 	bl	8000aa0 <__addsf3>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461c      	mov	r4, r3
 80096d2:	4b3d      	ldr	r3, [pc, #244]	; (80097c8 <st_prep_buffer+0x908>)
 80096d4:	69da      	ldr	r2, [r3, #28]
 80096d6:	4b3c      	ldr	r3, [pc, #240]	; (80097c8 <st_prep_buffer+0x908>)
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f7f7 f9df 	bl	8000aa0 <__addsf3>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4619      	mov	r1, r3
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7f7 fb96 	bl	8000e18 <__aeabi_fdiv>
 80096ec:	4603      	mov	r3, r0
 80096ee:	647b      	str	r3, [r7, #68]	; 0x44
          mm_remaining = prep.mm_complete;
 80096f0:	4b35      	ldr	r3, [pc, #212]	; (80097c8 <st_prep_buffer+0x908>)
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	643b      	str	r3, [r7, #64]	; 0x40
          prep.current_speed = prep.exit_speed;
 80096f6:	4b34      	ldr	r3, [pc, #208]	; (80097c8 <st_prep_buffer+0x908>)
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	4a33      	ldr	r2, [pc, #204]	; (80097c8 <st_prep_buffer+0x908>)
 80096fc:	61d3      	str	r3, [r2, #28]
      }
      dt += time_var; // Add computed ramp time to total segment time.
 80096fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009700:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009702:	f7f7 f9cd 	bl	8000aa0 <__addsf3>
 8009706:	4603      	mov	r3, r0
 8009708:	64bb      	str	r3, [r7, #72]	; 0x48
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800970a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800970c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800970e:	f7f7 fc6d 	bl	8000fec <__aeabi_fcmplt>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d006      	beq.n	8009726 <st_prep_buffer+0x866>
 8009718:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800971a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800971c:	f7f7 f9be 	bl	8000a9c <__aeabi_fsub>
 8009720:	4603      	mov	r3, r0
 8009722:	647b      	str	r3, [r7, #68]	; 0x44
 8009724:	e013      	b.n	800974e <st_prep_buffer+0x88e>
      else {
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8009726:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009728:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800972a:	f7f7 fc7d 	bl	8001028 <__aeabi_fcmpgt>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d100      	bne.n	8009736 <st_prep_buffer+0x876>
          // Increase segment time to ensure at least one step in segment. Override and loop
          // through distance calculations until minimum_mm or mm_complete.
          dt_max += DT_SEGMENT;
          time_var = dt_max - dt;
        } else {
          break; // **Complete** Exit loop. Segment execution time maxed.
 8009734:	e015      	b.n	8009762 <st_prep_buffer+0x8a2>
          dt_max += DT_SEGMENT;
 8009736:	4926      	ldr	r1, [pc, #152]	; (80097d0 <st_prep_buffer+0x910>)
 8009738:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800973a:	f7f7 f9b1 	bl	8000aa0 <__addsf3>
 800973e:	4603      	mov	r3, r0
 8009740:	64fb      	str	r3, [r7, #76]	; 0x4c
          time_var = dt_max - dt;
 8009742:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009744:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009746:	f7f7 f9a9 	bl	8000a9c <__aeabi_fsub>
 800974a:	4603      	mov	r3, r0
 800974c:	647b      	str	r3, [r7, #68]	; 0x44
        }
      }
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800974e:	4b1e      	ldr	r3, [pc, #120]	; (80097c8 <st_prep_buffer+0x908>)
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009754:	4618      	mov	r0, r3
 8009756:	f7f7 fc49 	bl	8000fec <__aeabi_fcmplt>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	f47f ae57 	bne.w	8009410 <st_prep_buffer+0x550>
    #ifdef VARIABLE_SPINDLE
      /* -----------------------------------------------------------------------------------
        Compute spindle speed PWM output for step segment
      */

      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <st_prep_buffer+0x914>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	7c9b      	ldrb	r3, [r3, #18]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d105      	bne.n	8009778 <st_prep_buffer+0x8b8>
 800976c:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <st_prep_buffer+0x918>)
 800976e:	791b      	ldrb	r3, [r3, #4]
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	2b00      	cmp	r3, #0
 8009776:	d040      	beq.n	80097fa <st_prep_buffer+0x93a>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8009778:	4b14      	ldr	r3, [pc, #80]	; (80097cc <st_prep_buffer+0x90c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	7c9b      	ldrb	r3, [r3, #18]
 800977e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009782:	2b00      	cmp	r3, #0
 8009784:	d02a      	beq.n	80097dc <st_prep_buffer+0x91c>
          float rpm = pl_block->spindle_speed;
 8009786:	4b11      	ldr	r3, [pc, #68]	; (80097cc <st_prep_buffer+0x90c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978c:	63bb      	str	r3, [r7, #56]	; 0x38
          // NOTE: Feed and rapid overrides are independent of PWM value and do not alter laser power/rate.        
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 800978e:	4b11      	ldr	r3, [pc, #68]	; (80097d4 <st_prep_buffer+0x914>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	7c9b      	ldrb	r3, [r3, #18]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00e      	beq.n	80097b6 <st_prep_buffer+0x8f6>
 8009798:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <st_prep_buffer+0x908>)
 800979a:	69da      	ldr	r2, [r3, #28]
 800979c:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <st_prep_buffer+0x908>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7f7 fa84 	bl	8000cb0 <__aeabi_fmul>
 80097a8:	4603      	mov	r3, r0
 80097aa:	4619      	mov	r1, r3
 80097ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ae:	f7f7 fa7f 	bl	8000cb0 <__aeabi_fmul>
 80097b2:	4603      	mov	r3, r0
 80097b4:	63bb      	str	r3, [r7, #56]	; 0x38
          // If current_speed is zero, then may need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE)
          // but this would be instantaneous only and during a motion. May not matter at all.
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 80097b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097b8:	f7fe fe32 	bl	8008420 <spindle_compute_pwm_value>
 80097bc:	4603      	mov	r3, r0
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	4b01      	ldr	r3, [pc, #4]	; (80097c8 <st_prep_buffer+0x908>)
 80097c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80097c6:	e011      	b.n	80097ec <st_prep_buffer+0x92c>
 80097c8:	20000a3c 	.word	0x20000a3c
 80097cc:	20000a34 	.word	0x20000a34
 80097d0:	38aec33e 	.word	0x38aec33e
 80097d4:	20000a38 	.word	0x20000a38
 80097d8:	20000f00 	.word	0x20000f00
        }
        else {
          sys.spindle_speed = 0.0;
 80097dc:	4b8f      	ldr	r3, [pc, #572]	; (8009a1c <st_prep_buffer+0xb5c>)
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	611a      	str	r2, [r3, #16]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 80097e4:	4b8e      	ldr	r3, [pc, #568]	; (8009a20 <st_prep_buffer+0xb60>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80097ec:	4b8b      	ldr	r3, [pc, #556]	; (8009a1c <st_prep_buffer+0xb5c>)
 80097ee:	791b      	ldrb	r3, [r3, #4]
 80097f0:	f023 0308 	bic.w	r3, r3, #8
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	4b89      	ldr	r3, [pc, #548]	; (8009a1c <st_prep_buffer+0xb5c>)
 80097f8:	711a      	strb	r2, [r3, #4]
      }
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 80097fa:	4b89      	ldr	r3, [pc, #548]	; (8009a20 <st_prep_buffer+0xb60>)
 80097fc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	719a      	strb	r2, [r3, #6]
       However, since floats have only 7.2 significant digits, long moves with extremely
       high step counts can exceed the precision of floats, which can lead to lost steps.
       Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
       supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
    */
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8009804:	4b86      	ldr	r3, [pc, #536]	; (8009a20 <st_prep_buffer+0xb60>)
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800980a:	4618      	mov	r0, r3
 800980c:	f7f7 fa50 	bl	8000cb0 <__aeabi_fmul>
 8009810:	4603      	mov	r3, r0
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8009814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009816:	f000 ff15 	bl	800a644 <ceilf>
 800981a:	6238      	str	r0, [r7, #32]
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 800981c:	4b80      	ldr	r3, [pc, #512]	; (8009a20 <st_prep_buffer+0xb60>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	4618      	mov	r0, r3
 8009822:	f000 ff0f 	bl	800a644 <ceilf>
 8009826:	61f8      	str	r0, [r7, #28]
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8009828:	6a39      	ldr	r1, [r7, #32]
 800982a:	69f8      	ldr	r0, [r7, #28]
 800982c:	f7f7 f936 	bl	8000a9c <__aeabi_fsub>
 8009830:	4603      	mov	r3, r0
 8009832:	4618      	mov	r0, r3
 8009834:	f7f7 fc3e 	bl	80010b4 <__aeabi_f2uiz>
 8009838:	4603      	mov	r3, r0
 800983a:	b29a      	uxth	r2, r3
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	801a      	strh	r2, [r3, #0]

    // Bail if we are at the end of a feed hold and don't have a step to execute.
    if (prep_segment->n_step == 0) {
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10d      	bne.n	8009864 <st_prep_buffer+0x9a4>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8009848:	4b74      	ldr	r3, [pc, #464]	; (8009a1c <st_prep_buffer+0xb5c>)
 800984a:	791b      	ldrb	r3, [r3, #4]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <st_prep_buffer+0x9a4>
        // Less than one step to decelerate to zero speed, but already very close. AMASS
        // requires full steps to execute. So, just bail.
        bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 8009854:	4b71      	ldr	r3, [pc, #452]	; (8009a1c <st_prep_buffer+0xb5c>)
 8009856:	791b      	ldrb	r3, [r3, #4]
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	b2da      	uxtb	r2, r3
 800985e:	4b6f      	ldr	r3, [pc, #444]	; (8009a1c <st_prep_buffer+0xb5c>)
 8009860:	711a      	strb	r2, [r3, #4]
        #ifdef PARKING_ENABLE
          if (!(prep.recalculate_flag & PREP_FLAG_PARKING)) { prep.recalculate_flag |= PREP_FLAG_HOLD_PARTIAL_BLOCK; }
        #endif
        return; // Segment not generated, but current step data still retained.
 8009862:	e0d7      	b.n	8009a14 <st_prep_buffer+0xb54>
    // compensate, we track the time to execute the previous segment's partial step and simply
    // apply it with the partial step distance to the current segment, so that it minutely
    // adjusts the whole segment rate to keep step output exact. These rate adjustments are
    // typically very small and do not adversely effect performance, but ensures that Grbl
    // outputs the exact acceleration and velocity profiles as computed by the planner.
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8009864:	4b6e      	ldr	r3, [pc, #440]	; (8009a20 <st_prep_buffer+0xb60>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4619      	mov	r1, r3
 800986a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800986c:	f7f7 f918 	bl	8000aa0 <__addsf3>
 8009870:	4603      	mov	r3, r0
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8009874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009876:	69f8      	ldr	r0, [r7, #28]
 8009878:	f7f7 f910 	bl	8000a9c <__aeabi_fsub>
 800987c:	4603      	mov	r3, r0
 800987e:	4619      	mov	r1, r3
 8009880:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009882:	f7f7 fac9 	bl	8000e18 <__aeabi_fdiv>
 8009886:	4603      	mov	r3, r0
 8009888:	61bb      	str	r3, [r7, #24]

    // Compute CPU cycles per step for the prepped segment.
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 800988a:	4b66      	ldr	r3, [pc, #408]	; (8009a24 <st_prep_buffer+0xb64>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a66      	ldr	r2, [pc, #408]	; (8009a28 <st_prep_buffer+0xb68>)
 8009890:	fba2 2303 	umull	r2, r3, r2, r3
 8009894:	0c9b      	lsrs	r3, r3, #18
 8009896:	4a65      	ldr	r2, [pc, #404]	; (8009a2c <st_prep_buffer+0xb6c>)
 8009898:	fb02 f303 	mul.w	r3, r2, r3
 800989c:	4618      	mov	r0, r3
 800989e:	f7f7 f9af 	bl	8000c00 <__aeabi_ui2f>
 80098a2:	4603      	mov	r3, r0
 80098a4:	69b9      	ldr	r1, [r7, #24]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7f7 fa02 	bl	8000cb0 <__aeabi_fmul>
 80098ac:	4603      	mov	r3, r0
 80098ae:	4960      	ldr	r1, [pc, #384]	; (8009a30 <st_prep_buffer+0xb70>)
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f7 f9fd 	bl	8000cb0 <__aeabi_fmul>
 80098b6:	4603      	mov	r3, r0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fec3 	bl	800a644 <ceilf>
 80098be:	4603      	mov	r3, r0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f7 fbf7 	bl	80010b4 <__aeabi_f2uiz>
 80098c6:	4603      	mov	r3, r0
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34

    #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
      // Compute step timing and multi-axis smoothing level.
      // NOTE: AMASS overdrives the timer with each level, so only one prescalar is required.
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 80098ca:	4b56      	ldr	r3, [pc, #344]	; (8009a24 <st_prep_buffer+0xb64>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a59      	ldr	r2, [pc, #356]	; (8009a34 <st_prep_buffer+0xb74>)
 80098d0:	fba2 2303 	umull	r2, r3, r2, r3
 80098d4:	0a5a      	lsrs	r2, r3, #9
 80098d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d8:	429a      	cmp	r2, r3
 80098da:	d903      	bls.n	80098e4 <st_prep_buffer+0xa24>
 80098dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098de:	2200      	movs	r2, #0
 80098e0:	715a      	strb	r2, [r3, #5]
 80098e2:	e02c      	b.n	800993e <st_prep_buffer+0xa7e>
      else {
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 80098e4:	4b4f      	ldr	r3, [pc, #316]	; (8009a24 <st_prep_buffer+0xb64>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a52      	ldr	r2, [pc, #328]	; (8009a34 <st_prep_buffer+0xb74>)
 80098ea:	fba2 2303 	umull	r2, r3, r2, r3
 80098ee:	0a1a      	lsrs	r2, r3, #8
 80098f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d903      	bls.n	80098fe <st_prep_buffer+0xa3e>
 80098f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f8:	2201      	movs	r2, #1
 80098fa:	715a      	strb	r2, [r3, #5]
 80098fc:	e00f      	b.n	800991e <st_prep_buffer+0xa5e>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 80098fe:	4b49      	ldr	r3, [pc, #292]	; (8009a24 <st_prep_buffer+0xb64>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a4c      	ldr	r2, [pc, #304]	; (8009a34 <st_prep_buffer+0xb74>)
 8009904:	fba2 2303 	umull	r2, r3, r2, r3
 8009908:	09da      	lsrs	r2, r3, #7
 800990a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800990c:	429a      	cmp	r2, r3
 800990e:	d903      	bls.n	8009918 <st_prep_buffer+0xa58>
 8009910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009912:	2202      	movs	r2, #2
 8009914:	715a      	strb	r2, [r3, #5]
 8009916:	e002      	b.n	800991e <st_prep_buffer+0xa5e>
        else { prep_segment->amass_level = 3; }
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	2203      	movs	r2, #3
 800991c:	715a      	strb	r2, [r3, #5]
        cycles >>= prep_segment->amass_level;
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	795b      	ldrb	r3, [r3, #5]
 8009922:	461a      	mov	r2, r3
 8009924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009926:	40d3      	lsrs	r3, r2
 8009928:	637b      	str	r3, [r7, #52]	; 0x34
        prep_segment->n_step <<= prep_segment->amass_level;
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	795b      	ldrb	r3, [r3, #5]
 8009934:	fa02 f303 	lsl.w	r3, r2, r3
 8009938:	b29a      	uxth	r2, r3
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	801a      	strh	r2, [r3, #0]
      }
      if (cycles < (1UL << 16)) { prep_segment->cycles_per_tick = cycles; } // < 65536 (4.1ms @ 16MHz)
 800993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009944:	d204      	bcs.n	8009950 <st_prep_buffer+0xa90>
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	b29a      	uxth	r2, r3
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	805a      	strh	r2, [r3, #2]
 800994e:	e003      	b.n	8009958 <st_prep_buffer+0xa98>
      else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009956:	805a      	strh	r2, [r3, #2]
        }
      }
    #endif

    // Segment complete! Increment segment buffer indices, so stepper ISR can immediately execute it.
    segment_buffer_head = segment_next_head;
 8009958:	4b37      	ldr	r3, [pc, #220]	; (8009a38 <st_prep_buffer+0xb78>)
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <st_prep_buffer+0xb7c>)
 800995e:	701a      	strb	r2, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8009960:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <st_prep_buffer+0xb78>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	3301      	adds	r3, #1
 8009966:	b2da      	uxtb	r2, r3
 8009968:	4b33      	ldr	r3, [pc, #204]	; (8009a38 <st_prep_buffer+0xb78>)
 800996a:	701a      	strb	r2, [r3, #0]
 800996c:	4b32      	ldr	r3, [pc, #200]	; (8009a38 <st_prep_buffer+0xb78>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b0a      	cmp	r3, #10
 8009972:	d102      	bne.n	800997a <st_prep_buffer+0xaba>
 8009974:	4b30      	ldr	r3, [pc, #192]	; (8009a38 <st_prep_buffer+0xb78>)
 8009976:	2200      	movs	r2, #0
 8009978:	701a      	strb	r2, [r3, #0]

    // Update the appropriate planner and segment data.
    pl_block->millimeters = mm_remaining;
 800997a:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <st_prep_buffer+0xb80>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009980:	621a      	str	r2, [r3, #32]
    prep.steps_remaining = n_steps_remaining;
 8009982:	4a27      	ldr	r2, [pc, #156]	; (8009a20 <st_prep_buffer+0xb60>)
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	6093      	str	r3, [r2, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8009988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800998a:	6a38      	ldr	r0, [r7, #32]
 800998c:	f7f7 f886 	bl	8000a9c <__aeabi_fsub>
 8009990:	4603      	mov	r3, r0
 8009992:	69b9      	ldr	r1, [r7, #24]
 8009994:	4618      	mov	r0, r3
 8009996:	f7f7 f98b 	bl	8000cb0 <__aeabi_fmul>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	4b20      	ldr	r3, [pc, #128]	; (8009a20 <st_prep_buffer+0xb60>)
 80099a0:	605a      	str	r2, [r3, #4]

    // Check for exit conditions and flag to load next planner block.
    if (mm_remaining == prep.mm_complete) {
 80099a2:	4b1f      	ldr	r3, [pc, #124]	; (8009a20 <st_prep_buffer+0xb60>)
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f7 fb15 	bl	8000fd8 <__aeabi_fcmpeq>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d100      	bne.n	80099b6 <st_prep_buffer+0xaf6>
 80099b4:	e022      	b.n	80099fc <st_prep_buffer+0xb3c>
      // End of planner block or forced-termination. No more distance to be executed.
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 80099b6:	f04f 0100 	mov.w	r1, #0
 80099ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80099bc:	f7f7 fb34 	bl	8001028 <__aeabi_fcmpgt>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d007      	beq.n	80099d6 <st_prep_buffer+0xb16>
        // Reset prep parameters for resuming and then bail. Allow the stepper ISR to complete
        // the segment queue, where realtime protocol will set new state upon receiving the
        // cycle stop flag from the ISR. Prep_segment is blocked until then.
        bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80099c6:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <st_prep_buffer+0xb5c>)
 80099c8:	791b      	ldrb	r3, [r3, #4]
 80099ca:	f043 0301 	orr.w	r3, r3, #1
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	4b12      	ldr	r3, [pc, #72]	; (8009a1c <st_prep_buffer+0xb5c>)
 80099d2:	711a      	strb	r2, [r3, #4]
        #ifdef PARKING_ENABLE
          if (!(prep.recalculate_flag & PREP_FLAG_PARKING)) { prep.recalculate_flag |= PREP_FLAG_HOLD_PARTIAL_BLOCK; }
        #endif
        return; // Bail!
 80099d4:	e01e      	b.n	8009a14 <st_prep_buffer+0xb54>
      } else { // End of planner block
        // The planner block is complete. All steps are set to be executed in the segment buffer.
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80099d6:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <st_prep_buffer+0xb5c>)
 80099d8:	791b      	ldrb	r3, [r3, #4]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d007      	beq.n	80099f2 <st_prep_buffer+0xb32>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80099e2:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <st_prep_buffer+0xb5c>)
 80099e4:	791b      	ldrb	r3, [r3, #4]
 80099e6:	f043 0301 	orr.w	r3, r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <st_prep_buffer+0xb5c>)
 80099ee:	711a      	strb	r2, [r3, #4]
          return;
 80099f0:	e010      	b.n	8009a14 <st_prep_buffer+0xb54>
        }
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 80099f2:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <st_prep_buffer+0xb80>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
        plan_discard_current_block();
 80099f8:	f7fb fd28 	bl	800544c <plan_discard_current_block>
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 80099fc:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <st_prep_buffer+0xb84>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <st_prep_buffer+0xb78>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	f47f aa66 	bne.w	8008ed8 <st_prep_buffer+0x18>
 8009a0c:	e002      	b.n	8009a14 <st_prep_buffer+0xb54>
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <st_prep_buffer+0xb54>
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8009a12:	bf00      	nop
      }
    }

  }
}
 8009a14:	375c      	adds	r7, #92	; 0x5c
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd90      	pop	{r4, r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000f00 	.word	0x20000f00
 8009a20:	20000a3c 	.word	0x20000a3c
 8009a24:	20000018 	.word	0x20000018
 8009a28:	431bde83 	.word	0x431bde83
 8009a2c:	000f4240 	.word	0x000f4240
 8009a30:	42700000 	.word	0x42700000
 8009a34:	10624dd3 	.word	0x10624dd3
 8009a38:	20000a2a 	.word	0x20000a2a
 8009a3c:	20000a29 	.word	0x20000a29
 8009a40:	20000a34 	.word	0x20000a34
 8009a44:	20000a28 	.word	0x20000a28

08009a48 <st_get_realtime_rate>:
// Called by realtime status reporting to fetch the current speed being executed. This value
// however is not exactly the current speed, but the speed computed in the last step segment
// in the segment buffer. It will always be behind by up to the number of segment blocks (-1)
// divided by the ACCELERATION TICKS PER SECOND in seconds.
float st_get_realtime_rate()
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8009a4c:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <st_get_realtime_rate+0x24>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <st_get_realtime_rate+0x16>
    return prep.current_speed;
 8009a58:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <st_get_realtime_rate+0x28>)
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	e001      	b.n	8009a62 <st_get_realtime_rate+0x1a>
  }
  return 0.0f;
 8009a5e:	f04f 0300 	mov.w	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000f00 	.word	0x20000f00
 8009a70:	20000a3c 	.word	0x20000a3c

08009a74 <TIM_Configuration>:
#ifdef STM32F103C8
void TIM_Configuration(TIM_TypeDef* TIMER, u16 Period, u16 Prescaler, u8 PP)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	461a      	mov	r2, r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	817b      	strh	r3, [r7, #10]
 8009a86:	460b      	mov	r3, r1
 8009a88:	813b      	strh	r3, [r7, #8]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	71fb      	strb	r3, [r7, #7]
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8009a8e:	897b      	ldrh	r3, [r7, #10]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8009a96:	893b      	ldrh	r3, [r7, #8]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8009aa6:	f107 0314 	add.w	r3, r7, #20
 8009aaa:	4619      	mov	r1, r3
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f7f7 ff7f 	bl	80019b0 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7f8 f91e 	bl	8001cf6 <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8009aba:	2201      	movs	r2, #1
 8009abc:	2101      	movs	r1, #1
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7f8 f8db 	bl	8001c7a <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7f8 f893 	bl	8001bf2 <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8009acc:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009ad0:	f7f7 fb10 	bl	80010f4 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ada:	d102      	bne.n	8009ae2 <TIM_Configuration+0x6e>
 8009adc:	231c      	movs	r3, #28
 8009ade:	743b      	strb	r3, [r7, #16]
 8009ae0:	e00c      	b.n	8009afc <TIM_Configuration+0x88>
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4a0d      	ldr	r2, [pc, #52]	; (8009b1c <TIM_Configuration+0xa8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d102      	bne.n	8009af0 <TIM_Configuration+0x7c>
 8009aea:	231d      	movs	r3, #29
 8009aec:	743b      	strb	r3, [r7, #16]
 8009aee:	e005      	b.n	8009afc <TIM_Configuration+0x88>
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4a0b      	ldr	r2, [pc, #44]	; (8009b20 <TIM_Configuration+0xac>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d101      	bne.n	8009afc <TIM_Configuration+0x88>
 8009af8:	231e      	movs	r3, #30
 8009afa:	743b      	strb	r3, [r7, #16]

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
 8009afc:	79fb      	ldrb	r3, [r7, #7]
 8009afe:	747b      	strb	r3, [r7, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8009b00:	2301      	movs	r3, #1
 8009b02:	74bb      	strb	r3, [r7, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	74fb      	strb	r3, [r7, #19]
	NVIC_Init(&NVIC_InitStructure);
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7f7 fb03 	bl	8001118 <NVIC_Init>
}
 8009b12:	bf00      	nop
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	40000400 	.word	0x40000400
 8009b20:	40000800 	.word	0x40000800

08009b24 <NVIC_ClearPendingIRQ>:
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8009b2e:	4909      	ldr	r1, [pc, #36]	; (8009b54 <NVIC_ClearPendingIRQ+0x30>)
 8009b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b34:	095b      	lsrs	r3, r3, #5
 8009b36:	79fa      	ldrb	r2, [r7, #7]
 8009b38:	f002 021f 	and.w	r2, r2, #31
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8009b42:	3360      	adds	r3, #96	; 0x60
 8009b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bc80      	pop	{r7}
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	e000e100 	.word	0xe000e100

08009b58 <system_init>:

#include "grbl.h"


void system_init()
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
  CONTROL_PCMSK |= CONTROL_MASK;  // Enable specific pins of the Pin Change Interrupt
  PCICR |= (1 << CONTROL_INT);   // Enable Pin Change Interrupt
#endif
#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8009b5e:	2101      	movs	r1, #1
 8009b60:	2009      	movs	r0, #9
 8009b62:	f7f7 ff07 	bl	8001974 <RCC_APB2PeriphClockCmd>
#ifdef ABC_AXIS
  // Full SWJ Disabled (JTAG-DP + SW-DP)
  // SWD will work only with "flash under reset" option
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // to enable PA15, PB3, PB4, PA13, PA14 pins
#else
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 8009b66:	2101      	movs	r1, #1
 8009b68:	481e      	ldr	r0, [pc, #120]	; (8009be4 <system_init+0x8c>)
 8009b6a:	f7f7 fda1 	bl	80016b0 <GPIO_PinRemapConfig>
#endif
// ---
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	73bb      	strb	r3, [r7, #14]
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009b72:	2348      	movs	r3, #72	; 0x48
 8009b74:	73fb      	strb	r3, [r7, #15]
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009b76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009b7a:	81bb      	strh	r3, [r7, #12]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	4619      	mov	r1, r3
 8009b82:	4819      	ldr	r0, [pc, #100]	; (8009be8 <system_init+0x90>)
 8009b84:	f7f7 fc8c 	bl	80014a0 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 8009b88:	2105      	movs	r1, #5
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	f7f7 fe00 	bl	8001790 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8009b90:	2106      	movs	r1, #6
 8009b92:	2001      	movs	r0, #1
 8009b94:	f7f7 fdfc 	bl	8001790 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 8009b98:	2107      	movs	r1, #7
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	f7f7 fdf8 	bl	8001790 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 8009ba0:	2108      	movs	r1, #8
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	f7f7 fdf4 	bl	8001790 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 8009ba8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009bac:	607b      	str	r3, [r7, #4]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8009bae:	2300      	movs	r3, #0
 8009bb0:	723b      	strb	r3, [r7, #8]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8009bb2:	2310      	movs	r3, #16
 8009bb4:	727b      	strb	r3, [r7, #9]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	72bb      	strb	r3, [r7, #10]
  EXTI_Init(&EXTI_InitStructure);
 8009bba:	1d3b      	adds	r3, r7, #4
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7f7 fb0d 	bl	80011dc <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 8009bc2:	2317      	movs	r3, #23
 8009bc4:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	707b      	strb	r3, [r7, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
 8009bca:	2302      	movs	r3, #2
 8009bcc:	70bb      	strb	r3, [r7, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
 8009bce:	2301      	movs	r3, #1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  NVIC_Init(&NVIC_InitStructure);
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7f7 fa9f 	bl	8001118 <NVIC_Init>
#endif
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	00300200 	.word	0x00300200
 8009be8:	40010c00 	.word	0x40010c00

08009bec <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
  uint8_t control_state = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 8009bf6:	481a      	ldr	r0, [pc, #104]	; (8009c60 <system_control_get_state+0x74>)
 8009bf8:	f7f7 fd0e 	bl	8001618 <GPIO_ReadInputData>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	80bb      	strh	r3, [r7, #4]
#endif

  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
 8009c00:	88bb      	ldrh	r3, [r7, #4]
 8009c02:	f483 73f0 	eor.w	r3, r3, #480	; 0x1e0
 8009c06:	80bb      	strh	r3, [r7, #4]
  #endif

  if (pin) {
 8009c08:	88bb      	ldrh	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d023      	beq.n	8009c56 <system_control_get_state+0x6a>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) {
 8009c0e:	88bb      	ldrh	r3, [r7, #4]
 8009c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <system_control_get_state+0x34>
    	  control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR;
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	71fb      	strb	r3, [r7, #7]
      }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8009c20:	88bb      	ldrh	r3, [r7, #4]
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d103      	bne.n	8009c32 <system_control_get_state+0x46>
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	f043 0302 	orr.w	r3, r3, #2
 8009c30:	71fb      	strb	r3, [r7, #7]
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009c32:	88bb      	ldrh	r3, [r7, #4]
 8009c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <system_control_get_state+0x58>
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	f043 0304 	orr.w	r3, r3, #4
 8009c42:	71fb      	strb	r3, [r7, #7]
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009c44:	88bb      	ldrh	r3, [r7, #4]
 8009c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <system_control_get_state+0x6a>
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	f043 0308 	orr.w	r3, r3, #8
 8009c54:	71fb      	strb	r3, [r7, #7]
  }
  return(control_state);
 8009c56:	79fb      	ldrb	r3, [r7, #7]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	40010c00 	.word	0x40010c00

08009c64 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8009c6a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8009c6e:	f7f7 fb4b 	bl	8001308 <EXTI_ClearITPendingBit>
    uint8_t pin = system_control_get_state();
 8009c72:	f7ff ffbb 	bl	8009bec <system_control_get_state>
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
	if (pin) 
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d025      	beq.n	8009ccc <EXTI9_5_IRQHandler+0x68>
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d002      	beq.n	8009c90 <EXTI9_5_IRQHandler+0x2c>
		{
			mc_reset();
 8009c8a:	f7fb f867 	bl	8004d5c <mc_reset>
 8009c8e:	e01a      	b.n	8009cc6 <EXTI9_5_IRQHandler+0x62>
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d008      	beq.n	8009cac <EXTI9_5_IRQHandler+0x48>
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8009c9a:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <EXTI9_5_IRQHandler+0x70>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f043 0302 	orr.w	r3, r3, #2
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <EXTI9_5_IRQHandler+0x70>)
 8009ca8:	701a      	strb	r2, [r3, #0]
 8009caa:	e00c      	b.n	8009cc6 <EXTI9_5_IRQHandler+0x62>
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_FEED_HOLD))
		{
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
		}
#else
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_SAFETY_DOOR))
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d007      	beq.n	8009cc6 <EXTI9_5_IRQHandler+0x62>
		{
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 8009cb6:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <EXTI9_5_IRQHandler+0x70>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	f043 0320 	orr.w	r3, r3, #32
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <EXTI9_5_IRQHandler+0x70>)
 8009cc4:	701a      	strb	r2, [r3, #0]
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8009cc6:	2017      	movs	r0, #23
 8009cc8:	f7ff ff2c 	bl	8009b24 <NVIC_ClearPendingIRQ>
}
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20000f15 	.word	0x20000f15

08009cd8 <system_check_safety_door_ajar>:
#endif

// Returns if safety door is ajar(T) or closed(F), based on pin state.
uint8_t system_check_safety_door_ajar()
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
 8009cdc:	f7ff ff86 	bl	8009bec <system_control_get_state>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	b2db      	uxtb	r3, r3
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	bd80      	pop	{r7, pc}

08009cec <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
 8009cf8:	e020      	b.n	8009d3c <system_execute_startup+0x50>
    if (!(settings_read_startup_line(n, line))) {
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe f81e 	bl	8007d40 <settings_read_startup_line>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <system_execute_startup+0x2e>
      line[0] = 0;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 8009d10:	2107      	movs	r1, #7
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7fd fa40 	bl	8007198 <report_execute_startup_message>
 8009d18:	e00d      	b.n	8009d36 <system_execute_startup+0x4a>
    } else {
      if (line[0] != 0) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d009      	beq.n	8009d36 <system_execute_startup+0x4a>
        uint8_t status_code = gc_execute_line(line);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7f8 faf4 	bl	8002310 <gc_execute_line>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73bb      	strb	r3, [r7, #14]
        report_execute_startup_message(line,status_code);
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7fd fa31 	bl	8007198 <report_execute_startup_message>
  for (n=0; n < N_STARTUP_LINE; n++) {
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d9db      	bls.n	8009cfa <system_execute_startup+0xe>
      }
    }
  }
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <system_execute_line>:
// next line during a cycle, so for switches like block delete, the switch only effects
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint8_t char_counter = 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	75bb      	strb	r3, [r7, #22]
  uint8_t helper_var = 0; // Helper variable
 8009d58:	2300      	movs	r3, #0
 8009d5a:	75fb      	strb	r3, [r7, #23]
  float parameter, value;
  switch( line[char_counter] ) {
 8009d5c:	7dbb      	ldrb	r3, [r7, #22]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4413      	add	r3, r2
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b43      	cmp	r3, #67	; 0x43
 8009d68:	d026      	beq.n	8009db8 <system_execute_line+0x6c>
 8009d6a:	2b43      	cmp	r3, #67	; 0x43
 8009d6c:	dc04      	bgt.n	8009d78 <system_execute_line+0x2c>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d009      	beq.n	8009d86 <system_execute_line+0x3a>
 8009d72:	2b24      	cmp	r3, #36	; 0x24
 8009d74:	d020      	beq.n	8009db8 <system_execute_line+0x6c>
 8009d76:	e06d      	b.n	8009e54 <system_execute_line+0x108>
 8009d78:	2b4a      	cmp	r3, #74	; 0x4a
 8009d7a:	d007      	beq.n	8009d8c <system_execute_line+0x40>
 8009d7c:	2b58      	cmp	r3, #88	; 0x58
 8009d7e:	d01b      	beq.n	8009db8 <system_execute_line+0x6c>
 8009d80:	2b47      	cmp	r3, #71	; 0x47
 8009d82:	d019      	beq.n	8009db8 <system_execute_line+0x6c>
 8009d84:	e066      	b.n	8009e54 <system_execute_line+0x108>
    case 0 : report_grbl_help(); break;
 8009d86:	f7fc ff5d 	bl	8006c44 <report_grbl_help>
 8009d8a:	e246      	b.n	800a21a <system_execute_line+0x4ce>
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 8009d8c:	4bb2      	ldr	r3, [pc, #712]	; (800a058 <system_execute_line+0x30c>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <system_execute_line+0x54>
 8009d94:	4bb0      	ldr	r3, [pc, #704]	; (800a058 <system_execute_line+0x30c>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d001      	beq.n	8009da0 <system_execute_line+0x54>
 8009d9c:	2308      	movs	r3, #8
 8009d9e:	e23d      	b.n	800a21c <system_execute_line+0x4d0>
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3302      	adds	r3, #2
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	2b3d      	cmp	r3, #61	; 0x3d
 8009da8:	d001      	beq.n	8009dae <system_execute_line+0x62>
 8009daa:	2303      	movs	r3, #3
 8009dac:	e236      	b.n	800a21c <system_execute_line+0x4d0>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7f8 faae 	bl	8002310 <gc_execute_line>
 8009db4:	4603      	mov	r3, r0
 8009db6:	e231      	b.n	800a21c <system_execute_line+0x4d0>
      break;
    case '$': case 'G': case 'C': case 'X':
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3302      	adds	r3, #2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <system_execute_line+0x7a>
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e22a      	b.n	800a21c <system_execute_line+0x4d0>
      switch( line[1] ) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b43      	cmp	r3, #67	; 0x43
 8009dce:	d017      	beq.n	8009e00 <system_execute_line+0xb4>
 8009dd0:	2b43      	cmp	r3, #67	; 0x43
 8009dd2:	dc02      	bgt.n	8009dda <system_execute_line+0x8e>
 8009dd4:	2b24      	cmp	r3, #36	; 0x24
 8009dd6:	d005      	beq.n	8009de4 <system_execute_line+0x98>
            sys.state = STATE_IDLE;
            // Don't run startup script. Prevents stored moves in startup from causing accidents.
          } // Otherwise, no effect.
          break;
      }
      break;
 8009dd8:	e21f      	b.n	800a21a <system_execute_line+0x4ce>
      switch( line[1] ) {
 8009dda:	2b47      	cmp	r3, #71	; 0x47
 8009ddc:	d00d      	beq.n	8009dfa <system_execute_line+0xae>
 8009dde:	2b58      	cmp	r3, #88	; 0x58
 8009de0:	d025      	beq.n	8009e2e <system_execute_line+0xe2>
      break;
 8009de2:	e21a      	b.n	800a21a <system_execute_line+0x4ce>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 8009de4:	4b9c      	ldr	r3, [pc, #624]	; (800a058 <system_execute_line+0x30c>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	f003 0318 	and.w	r3, r3, #24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <system_execute_line+0xa8>
 8009df0:	2308      	movs	r3, #8
 8009df2:	e213      	b.n	800a21c <system_execute_line+0x4d0>
          else { report_grbl_settings(); }
 8009df4:	f7fc ff30 	bl	8006c58 <report_grbl_settings>
          break;
 8009df8:	e02b      	b.n	8009e52 <system_execute_line+0x106>
          report_gcode_modes();
 8009dfa:	f7fd f8ef 	bl	8006fdc <report_gcode_modes>
          break;
 8009dfe:	e028      	b.n	8009e52 <system_execute_line+0x106>
          if ( sys.state == STATE_CHECK_MODE ) {
 8009e00:	4b95      	ldr	r3, [pc, #596]	; (800a058 <system_execute_line+0x30c>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d105      	bne.n	8009e14 <system_execute_line+0xc8>
            mc_reset();
 8009e08:	f7fa ffa8 	bl	8004d5c <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 8009e0c:	2005      	movs	r0, #5
 8009e0e:	f7fc fe9f 	bl	8006b50 <report_feedback_message>
          break;
 8009e12:	e01e      	b.n	8009e52 <system_execute_line+0x106>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 8009e14:	4b90      	ldr	r3, [pc, #576]	; (800a058 <system_execute_line+0x30c>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <system_execute_line+0xd4>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	e1fd      	b.n	800a21c <system_execute_line+0x4d0>
            sys.state = STATE_CHECK_MODE;
 8009e20:	4b8d      	ldr	r3, [pc, #564]	; (800a058 <system_execute_line+0x30c>)
 8009e22:	2202      	movs	r2, #2
 8009e24:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 8009e26:	2004      	movs	r0, #4
 8009e28:	f7fc fe92 	bl	8006b50 <report_feedback_message>
          break;
 8009e2c:	e011      	b.n	8009e52 <system_execute_line+0x106>
          if (sys.state == STATE_ALARM) {
 8009e2e:	4b8a      	ldr	r3, [pc, #552]	; (800a058 <system_execute_line+0x30c>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d10c      	bne.n	8009e50 <system_execute_line+0x104>
            if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); }
 8009e36:	f7ff ff4f 	bl	8009cd8 <system_check_safety_door_ajar>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <system_execute_line+0xf8>
 8009e40:	230d      	movs	r3, #13
 8009e42:	e1eb      	b.n	800a21c <system_execute_line+0x4d0>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 8009e44:	2003      	movs	r0, #3
 8009e46:	f7fc fe83 	bl	8006b50 <report_feedback_message>
            sys.state = STATE_IDLE;
 8009e4a:	4b83      	ldr	r3, [pc, #524]	; (800a058 <system_execute_line+0x30c>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	701a      	strb	r2, [r3, #0]
          break;
 8009e50:	bf00      	nop
      break;
 8009e52:	e1e2      	b.n	800a21a <system_execute_line+0x4ce>
    default :
      // Block any system command that requires the state as IDLE/ALARM. (i.e. EEPROM, homing)
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8009e54:	4b80      	ldr	r3, [pc, #512]	; (800a058 <system_execute_line+0x30c>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d005      	beq.n	8009e68 <system_execute_line+0x11c>
 8009e5c:	4b7e      	ldr	r3, [pc, #504]	; (800a058 <system_execute_line+0x30c>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d001      	beq.n	8009e68 <system_execute_line+0x11c>
 8009e64:	2308      	movs	r3, #8
 8009e66:	e1d9      	b.n	800a21c <system_execute_line+0x4d0>
      switch( line[1] ) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	3b23      	subs	r3, #35	; 0x23
 8009e70:	2b30      	cmp	r3, #48	; 0x30
 8009e72:	f200 8157 	bhi.w	800a124 <system_execute_line+0x3d8>
 8009e76:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <system_execute_line+0x130>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009f41 	.word	0x08009f41
 8009e80:	0800a125 	.word	0x0800a125
 8009e84:	0800a125 	.word	0x0800a125
 8009e88:	0800a125 	.word	0x0800a125
 8009e8c:	0800a125 	.word	0x0800a125
 8009e90:	0800a125 	.word	0x0800a125
 8009e94:	0800a125 	.word	0x0800a125
 8009e98:	0800a125 	.word	0x0800a125
 8009e9c:	0800a125 	.word	0x0800a125
 8009ea0:	0800a125 	.word	0x0800a125
 8009ea4:	0800a125 	.word	0x0800a125
 8009ea8:	0800a125 	.word	0x0800a125
 8009eac:	0800a125 	.word	0x0800a125
 8009eb0:	0800a125 	.word	0x0800a125
 8009eb4:	0800a125 	.word	0x0800a125
 8009eb8:	0800a125 	.word	0x0800a125
 8009ebc:	0800a125 	.word	0x0800a125
 8009ec0:	0800a125 	.word	0x0800a125
 8009ec4:	0800a125 	.word	0x0800a125
 8009ec8:	0800a125 	.word	0x0800a125
 8009ecc:	0800a125 	.word	0x0800a125
 8009ed0:	0800a125 	.word	0x0800a125
 8009ed4:	0800a125 	.word	0x0800a125
 8009ed8:	0800a125 	.word	0x0800a125
 8009edc:	0800a125 	.word	0x0800a125
 8009ee0:	0800a125 	.word	0x0800a125
 8009ee4:	0800a125 	.word	0x0800a125
 8009ee8:	0800a125 	.word	0x0800a125
 8009eec:	0800a125 	.word	0x0800a125
 8009ef0:	0800a125 	.word	0x0800a125
 8009ef4:	0800a125 	.word	0x0800a125
 8009ef8:	0800a125 	.word	0x0800a125
 8009efc:	0800a125 	.word	0x0800a125
 8009f00:	0800a125 	.word	0x0800a125
 8009f04:	0800a125 	.word	0x0800a125
 8009f08:	0800a125 	.word	0x0800a125
 8009f0c:	0800a125 	.word	0x0800a125
 8009f10:	08009f55 	.word	0x08009f55
 8009f14:	08009fe3 	.word	0x08009fe3
 8009f18:	0800a125 	.word	0x0800a125
 8009f1c:	0800a125 	.word	0x0800a125
 8009f20:	0800a125 	.word	0x0800a125
 8009f24:	0800a125 	.word	0x0800a125
 8009f28:	0800a0c9 	.word	0x0800a0c9
 8009f2c:	0800a125 	.word	0x0800a125
 8009f30:	0800a125 	.word	0x0800a125
 8009f34:	0800a125 	.word	0x0800a125
 8009f38:	0800a061 	.word	0x0800a061
 8009f3c:	08009fb9 	.word	0x08009fb9
        case '#' : // Print Grbl NGC parameters
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3302      	adds	r3, #2
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <system_execute_line+0x202>
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	e166      	b.n	800a21c <system_execute_line+0x4d0>
          else { report_ngc_parameters(); }
 8009f4e:	f7fc ffe5 	bl	8006f1c <report_ngc_parameters>
          break;
 8009f52:	e162      	b.n	800a21a <system_execute_line+0x4ce>
        case 'H' : // Perform homing cycle [IDLE/ALARM]
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009f54:	4b41      	ldr	r3, [pc, #260]	; (800a05c <system_execute_line+0x310>)
 8009f56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <system_execute_line+0x21a>
 8009f62:	2305      	movs	r3, #5
 8009f64:	e15a      	b.n	800a21c <system_execute_line+0x4d0>
          if (system_check_safety_door_ajar()) { return(STATUS_CHECK_DOOR); } // Block if safety door is ajar.
 8009f66:	f7ff feb7 	bl	8009cd8 <system_check_safety_door_ajar>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <system_execute_line+0x228>
 8009f70:	230d      	movs	r3, #13
 8009f72:	e153      	b.n	800a21c <system_execute_line+0x4d0>
          sys.state = STATE_HOMING; // Set system state variable
 8009f74:	4b38      	ldr	r3, [pc, #224]	; (800a058 <system_execute_line+0x30c>)
 8009f76:	2204      	movs	r2, #4
 8009f78:	701a      	strb	r2, [r3, #0]
          if (line[2] == 0) {
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3302      	adds	r3, #2
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d108      	bne.n	8009f96 <system_execute_line+0x24a>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 8009f84:	2000      	movs	r0, #0
 8009f86:	f7fa fe35 	bl	8004bf4 <mc_homing_cycle>
// ---
                default: return(STATUS_INVALID_STATEMENT);
              }
          #endif
          } else { return(STATUS_INVALID_STATEMENT); }
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 8009f8a:	4b33      	ldr	r3, [pc, #204]	; (800a058 <system_execute_line+0x30c>)
 8009f8c:	785b      	ldrb	r3, [r3, #1]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f040 8142 	bne.w	800a218 <system_execute_line+0x4cc>
 8009f94:	e001      	b.n	8009f9a <system_execute_line+0x24e>
          } else { return(STATUS_INVALID_STATEMENT); }
 8009f96:	2303      	movs	r3, #3
 8009f98:	e140      	b.n	800a21c <system_execute_line+0x4d0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8009f9a:	4b2f      	ldr	r3, [pc, #188]	; (800a058 <system_execute_line+0x30c>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8009fa0:	f7fe fbe0 	bl	8008764 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f040 8134 	bne.w	800a218 <system_execute_line+0x4cc>
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff fe9b 	bl	8009cec <system_execute_startup>
          }
          break;
 8009fb6:	e12f      	b.n	800a218 <system_execute_line+0x4cc>
        case 'S' : // Puts Grbl to sleep [IDLE/ALARM]
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3302      	adds	r3, #2
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b4c      	cmp	r3, #76	; 0x4c
 8009fc0:	d109      	bne.n	8009fd6 <system_execute_line+0x28a>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b50      	cmp	r3, #80	; 0x50
 8009fca:	d104      	bne.n	8009fd6 <system_execute_line+0x28a>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <system_execute_line+0x28e>
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e120      	b.n	800a21c <system_execute_line+0x4d0>
          system_set_exec_state_flag(EXEC_SLEEP); // Set to execute sleep mode immediately
 8009fda:	2080      	movs	r0, #128	; 0x80
 8009fdc:	f000 f9a2 	bl	800a324 <system_set_exec_state_flag>
          break;
 8009fe0:	e11b      	b.n	800a21a <system_execute_line+0x4ce>
        case 'I' : // Print or store build info. [IDLE/ALARM]
          if ( line[++char_counter] == 0 ) {
 8009fe2:	7dbb      	ldrb	r3, [r7, #22]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	75bb      	strb	r3, [r7, #22]
 8009fea:	7dbb      	ldrb	r3, [r7, #22]
 8009fec:	461a      	mov	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d106      	bne.n	800a006 <system_execute_line+0x2ba>
            settings_read_build_info(line);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7fd fec7 	bl	8007d8c <settings_read_build_info>
            report_build_info(line);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fd f8e2 	bl	80071c8 <report_build_info>
                line[char_counter-helper_var] = line[char_counter];
              } while (line[char_counter++] != 0);
              settings_store_build_info(line);
          #endif
          }
          break;
 800a004:	e109      	b.n	800a21a <system_execute_line+0x4ce>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800a006:	7dbb      	ldrb	r3, [r7, #22]
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	b2d2      	uxtb	r2, r2
 800a00c:	75ba      	strb	r2, [r7, #22]
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b3d      	cmp	r3, #61	; 0x3d
 800a018:	d001      	beq.n	800a01e <system_execute_line+0x2d2>
 800a01a:	2303      	movs	r3, #3
 800a01c:	e0fe      	b.n	800a21c <system_execute_line+0x4d0>
              helper_var = char_counter; // Set helper variable as counter to start of user info line.
 800a01e:	7dbb      	ldrb	r3, [r7, #22]
 800a020:	75fb      	strb	r3, [r7, #23]
                line[char_counter-helper_var] = line[char_counter];
 800a022:	7dbb      	ldrb	r3, [r7, #22]
 800a024:	461a      	mov	r2, r3
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	461a      	mov	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4413      	add	r3, r2
 800a030:	7dba      	ldrb	r2, [r7, #22]
 800a032:	4611      	mov	r1, r2
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	440a      	add	r2, r1
 800a038:	7812      	ldrb	r2, [r2, #0]
 800a03a:	701a      	strb	r2, [r3, #0]
              } while (line[char_counter++] != 0);
 800a03c:	7dbb      	ldrb	r3, [r7, #22]
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	b2d2      	uxtb	r2, r2
 800a042:	75ba      	strb	r2, [r7, #22]
 800a044:	461a      	mov	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4413      	add	r3, r2
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e8      	bne.n	800a022 <system_execute_line+0x2d6>
              settings_store_build_info(line);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7fd fd61 	bl	8007b18 <settings_store_build_info>
          break;
 800a056:	e0e0      	b.n	800a21a <system_execute_line+0x4ce>
 800a058:	20000f00 	.word	0x20000f00
 800a05c:	200010b4 	.word	0x200010b4
        case 'R' : // Restore defaults [IDLE/ALARM]
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3302      	adds	r3, #2
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b53      	cmp	r3, #83	; 0x53
 800a068:	d10e      	bne.n	800a088 <system_execute_line+0x33c>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3303      	adds	r3, #3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b54      	cmp	r3, #84	; 0x54
 800a072:	d109      	bne.n	800a088 <system_execute_line+0x33c>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3304      	adds	r3, #4
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b3d      	cmp	r3, #61	; 0x3d
 800a07c:	d104      	bne.n	800a088 <system_execute_line+0x33c>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3306      	adds	r3, #6
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <system_execute_line+0x340>
 800a088:	2303      	movs	r3, #3
 800a08a:	e0c7      	b.n	800a21c <system_execute_line+0x4d0>
          switch (line[5]) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3305      	adds	r3, #5
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b24      	cmp	r3, #36	; 0x24
 800a094:	d004      	beq.n	800a0a0 <system_execute_line+0x354>
 800a096:	2b2a      	cmp	r3, #42	; 0x2a
 800a098:	d00a      	beq.n	800a0b0 <system_execute_line+0x364>
 800a09a:	2b23      	cmp	r3, #35	; 0x23
 800a09c:	d004      	beq.n	800a0a8 <system_execute_line+0x35c>
 800a09e:	e00b      	b.n	800a0b8 <system_execute_line+0x36c>
            #ifdef ENABLE_RESTORE_EEPROM_DEFAULT_SETTINGS
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f7fd fd71 	bl	8007b88 <settings_restore>
 800a0a6:	e009      	b.n	800a0bc <system_execute_line+0x370>
            #endif
            #ifdef ENABLE_RESTORE_EEPROM_CLEAR_PARAMETERS
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800a0a8:	2002      	movs	r0, #2
 800a0aa:	f7fd fd6d 	bl	8007b88 <settings_restore>
 800a0ae:	e005      	b.n	800a0bc <system_execute_line+0x370>
            #endif
            #ifdef ENABLE_RESTORE_EEPROM_WIPE_ALL
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800a0b0:	20ff      	movs	r0, #255	; 0xff
 800a0b2:	f7fd fd69 	bl	8007b88 <settings_restore>
 800a0b6:	e001      	b.n	800a0bc <system_execute_line+0x370>
            #endif
            default: return(STATUS_INVALID_STATEMENT);
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e0af      	b.n	800a21c <system_execute_line+0x4d0>
          }
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 800a0bc:	2009      	movs	r0, #9
 800a0be:	f7fc fd47 	bl	8006b50 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 800a0c2:	f7fa fe4b 	bl	8004d5c <mc_reset>
          break;
 800a0c6:	e0a8      	b.n	800a21a <system_execute_line+0x4ce>
        case 'N' : // Startup lines. [IDLE/ALARM]
          if ( line[++char_counter] == 0 ) { // Print startup lines
 800a0c8:	7dbb      	ldrb	r3, [r7, #22]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	75bb      	strb	r3, [r7, #22]
 800a0d0:	7dbb      	ldrb	r3, [r7, #22]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d11a      	bne.n	800a114 <system_execute_line+0x3c8>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]
 800a0e2:	e013      	b.n	800a10c <system_execute_line+0x3c0>
              if (!(settings_read_startup_line(helper_var, line))) {
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fd fe29 	bl	8007d40 <settings_read_startup_line>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <system_execute_line+0x3b0>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800a0f4:	2007      	movs	r0, #7
 800a0f6:	f7fc fcf5 	bl	8006ae4 <report_status_message>
 800a0fa:	e004      	b.n	800a106 <system_execute_line+0x3ba>
              } else {
                report_startup_line(helper_var,line);
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	f7fd f82d 	bl	8007160 <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	3301      	adds	r3, #1
 800a10a:	75fb      	strb	r3, [r7, #23]
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d9e8      	bls.n	800a0e4 <system_execute_line+0x398>
              }
            }
            break;
 800a112:	e082      	b.n	800a21a <system_execute_line+0x4ce>
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800a114:	4b43      	ldr	r3, [pc, #268]	; (800a224 <system_execute_line+0x4d8>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <system_execute_line+0x3d4>
 800a11c:	2308      	movs	r3, #8
 800a11e:	e07d      	b.n	800a21c <system_execute_line+0x4d0>
            helper_var = true;  // Set helper_var to flag storing method.
 800a120:	2301      	movs	r3, #1
 800a122:	75fb      	strb	r3, [r7, #23]
            // No break. Continues into default: to read remaining command characters.
          }
        default :  // Storing setting methods [IDLE/ALARM]
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800a124:	f107 0210 	add.w	r2, r7, #16
 800a128:	f107 0316 	add.w	r3, r7, #22
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7fa fe4a 	bl	8004dc8 <read_float>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <system_execute_line+0x3f2>
 800a13a:	2302      	movs	r3, #2
 800a13c:	e06e      	b.n	800a21c <system_execute_line+0x4d0>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800a13e:	7dbb      	ldrb	r3, [r7, #22]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	75ba      	strb	r2, [r7, #22]
 800a146:	461a      	mov	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4413      	add	r3, r2
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b3d      	cmp	r3, #61	; 0x3d
 800a150:	d001      	beq.n	800a156 <system_execute_line+0x40a>
 800a152:	2303      	movs	r3, #3
 800a154:	e062      	b.n	800a21c <system_execute_line+0x4d0>
          if (helper_var) { // Store startup line
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d032      	beq.n	800a1c2 <system_execute_line+0x476>
            // Prepare sending gcode block to gcode parser by shifting all characters
            helper_var = char_counter; // Set helper variable as counter to start of gcode block
 800a15c:	7dbb      	ldrb	r3, [r7, #22]
 800a15e:	75fb      	strb	r3, [r7, #23]
            do {
              line[char_counter-helper_var] = line[char_counter];
 800a160:	7dbb      	ldrb	r3, [r7, #22]
 800a162:	461a      	mov	r2, r3
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	461a      	mov	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	7dba      	ldrb	r2, [r7, #22]
 800a170:	4611      	mov	r1, r2
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	440a      	add	r2, r1
 800a176:	7812      	ldrb	r2, [r2, #0]
 800a178:	701a      	strb	r2, [r3, #0]
            } while (line[char_counter++] != 0);
 800a17a:	7dbb      	ldrb	r3, [r7, #22]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	b2d2      	uxtb	r2, r2
 800a180:	75ba      	strb	r2, [r7, #22]
 800a182:	461a      	mov	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4413      	add	r3, r2
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e8      	bne.n	800a160 <system_execute_line+0x414>
            // Execute gcode block to ensure block is valid.
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7f8 f8be 	bl	8002310 <gc_execute_line>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]
            if (helper_var) { return(helper_var); }
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <system_execute_line+0x456>
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
 800a1a0:	e03c      	b.n	800a21c <system_execute_line+0x4d0>
            else {
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fb63 	bl	800a870 <truncf>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7f6 ff81 	bl	80010b4 <__aeabi_f2uiz>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75fb      	strb	r3, [r7, #23]
              settings_store_startup_line(helper_var,line);
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fd fc92 	bl	8007ae4 <settings_store_startup_line>
 800a1c0:	e02b      	b.n	800a21a <system_execute_line+0x4ce>
            }
          } else { // Store global setting.
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800a1c2:	f107 020c 	add.w	r2, r7, #12
 800a1c6:	f107 0316 	add.w	r3, r7, #22
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7fa fdfb 	bl	8004dc8 <read_float>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <system_execute_line+0x490>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e01f      	b.n	800a21c <system_execute_line+0x4d0>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800a1dc:	7dbb      	ldrb	r3, [r7, #22]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d107      	bne.n	800a1fa <system_execute_line+0x4ae>
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	490e      	ldr	r1, [pc, #56]	; (800a228 <system_execute_line+0x4dc>)
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7f6 ff1a 	bl	8001028 <__aeabi_fcmpgt>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <system_execute_line+0x4b2>
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e00e      	b.n	800a21c <system_execute_line+0x4d0>
            return(settings_store_global_setting((uint8_t)parameter, value));
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	4618      	mov	r0, r3
 800a202:	f7f6 ff57 	bl	80010b4 <__aeabi_f2uiz>
 800a206:	4603      	mov	r3, r0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fd fe26 	bl	8007e60 <settings_store_global_setting>
 800a214:	4603      	mov	r3, r0
 800a216:	e001      	b.n	800a21c <system_execute_line+0x4d0>
          break;
 800a218:	bf00      	nop
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000f00 	.word	0x20000f00
 800a228:	437f0000 	.word	0x437f0000

0800a22c <system_flag_wco_change>:



void system_flag_wco_change()
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  #ifdef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE
    protocol_buffer_synchronize();
 800a230:	f7fb ff6a 	bl	8006108 <protocol_buffer_synchronize>
  #endif
  sys.report_wco_counter = 0;
 800a234:	4b02      	ldr	r3, [pc, #8]	; (800a240 <system_flag_wco_change+0x14>)
 800a236:	2200      	movs	r2, #0
 800a238:	735a      	strb	r2, [r3, #13]
}
 800a23a:	bf00      	nop
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000f00 	.word	0x20000f00

0800a244 <system_convert_axis_steps_to_mpos>:

// Returns machine position of axis 'idx'. Must be sent a 'step' array.
// NOTE: If motor steps and machine position are not in the same coordinate frame, this function
//   serves as a central place to compute the transformation.
float system_convert_axis_steps_to_mpos(int32_t *steps, uint8_t idx)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
      pos = (float)system_convert_corexy_to_y_axis_steps(steps) / settings.steps_per_mm[idx];
    } else {
      pos = steps[idx]/settings.steps_per_mm[idx];
    }
  #else
    pos = steps[idx]/settings.steps_per_mm[idx];
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	4413      	add	r3, r2
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7f6 fcd4 	bl	8000c08 <__aeabi_i2f>
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	4a06      	ldr	r2, [pc, #24]	; (800a27c <system_convert_axis_steps_to_mpos+0x38>)
 800a264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a268:	4619      	mov	r1, r3
 800a26a:	f7f6 fdd5 	bl	8000e18 <__aeabi_fdiv>
 800a26e:	4603      	mov	r3, r0
 800a270:	60fb      	str	r3, [r7, #12]
  #endif
  return(pos);
 800a272:	68fb      	ldr	r3, [r7, #12]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	200010b4 	.word	0x200010b4

0800a280 <system_convert_array_steps_to_mpos>:


void system_convert_array_steps_to_mpos(float *position, int32_t *steps)
{
 800a280:	b590      	push	{r4, r7, lr}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]
 800a28e:	e00d      	b.n	800a2ac <system_convert_array_steps_to_mpos+0x2c>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	18d4      	adds	r4, r2, r3
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	4619      	mov	r1, r3
 800a29c:	6838      	ldr	r0, [r7, #0]
 800a29e:	f7ff ffd1 	bl	800a244 <system_convert_axis_steps_to_mpos>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	6023      	str	r3, [r4, #0]
  for (idx=0; idx<N_AXIS; idx++) {
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d9ee      	bls.n	800a290 <system_convert_array_steps_to_mpos+0x10>
  }
  return;
 800a2b2:	bf00      	nop
}
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd90      	pop	{r4, r7, pc}
	...

0800a2bc <system_check_travel_limits>:
#endif


// Checks and reports if target array exceeds machine travel limits.
uint8_t system_check_travel_limits(float *target)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
 800a2c8:	e022      	b.n	800a310 <system_check_travel_limits+0x54>
      } else {
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
      }
    #else
      // NOTE: max_travel is stored as negative
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f04f 0100 	mov.w	r1, #0
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f6 fea5 	bl	8001028 <__aeabi_fcmpgt>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d110      	bne.n	800a306 <system_check_travel_limits+0x4a>
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	7bfb      	ldrb	r3, [r7, #15]
 800a2f0:	4a0b      	ldr	r2, [pc, #44]	; (800a320 <system_check_travel_limits+0x64>)
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	4413      	add	r3, r2
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	f7f6 fe76 	bl	8000fec <__aeabi_fcmplt>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <system_check_travel_limits+0x4e>
 800a306:	2301      	movs	r3, #1
 800a308:	e006      	b.n	800a318 <system_check_travel_limits+0x5c>
  for (idx=0; idx<N_AXIS; idx++) {
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	3301      	adds	r3, #1
 800a30e:	73fb      	strb	r3, [r7, #15]
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d9d9      	bls.n	800a2ca <system_check_travel_limits+0xe>
    #endif
  }
  return(false);
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	200010b4 	.word	0x200010b4

0800a324 <system_set_exec_state_flag>:
#ifdef WIN32
extern CRITICAL_SECTION CriticalSection;
#endif

// Special handlers for setting and clearing Grbl's real-time execution flags.
void system_set_exec_state_flag(uint8_t mask) {
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 800a32e:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <system_set_exec_state_flag+0x28>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	b2da      	uxtb	r2, r3
 800a336:	79fb      	ldrb	r3, [r7, #7]
 800a338:	4313      	orrs	r3, r2
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	4b03      	ldr	r3, [pc, #12]	; (800a34c <system_set_exec_state_flag+0x28>)
 800a33e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a340:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	bc80      	pop	{r7}
 800a34a:	4770      	bx	lr
 800a34c:	20000f15 	.word	0x20000f15

0800a350 <system_clear_exec_state_flag>:

void system_clear_exec_state_flag(uint8_t mask) {
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a35a:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 800a35c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a360:	43db      	mvns	r3, r3
 800a362:	b25a      	sxtb	r2, r3
 800a364:	4b07      	ldr	r3, [pc, #28]	; (800a384 <system_clear_exec_state_flag+0x34>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	4013      	ands	r3, r2
 800a36e:	b25b      	sxtb	r3, r3
 800a370:	b2da      	uxtb	r2, r3
 800a372:	4b04      	ldr	r3, [pc, #16]	; (800a384 <system_clear_exec_state_flag+0x34>)
 800a374:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a376:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bc80      	pop	{r7}
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20000f15 	.word	0x20000f15

0800a388 <system_set_exec_alarm>:

void system_set_exec_alarm(uint8_t code) {
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a392:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 800a394:	4a04      	ldr	r2, [pc, #16]	; (800a3a8 <system_set_exec_alarm+0x20>)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 800a39a:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bc80      	pop	{r7}
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20000f30 	.word	0x20000f30

0800a3ac <system_clear_exec_alarm>:

void system_clear_exec_alarm() {
 800a3ac:	b480      	push	{r7}
 800a3ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 800a3b0:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <system_clear_exec_alarm+0x18>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a3b8:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a3ba:	bf00      	nop
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000f30 	.word	0x20000f30

0800a3c8 <system_set_exec_motion_override_flag>:

void system_set_exec_motion_override_flag(uint8_t mask) {
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a3d2:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 800a3d4:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <system_set_exec_motion_override_flag+0x28>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <system_set_exec_motion_override_flag+0x28>)
 800a3e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a3e4:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr
 800a3f0:	20000efc 	.word	0x20000efc

0800a3f4 <system_set_exec_accessory_override_flag>:

void system_set_exec_accessory_override_flag(uint8_t mask) {
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i");
 800a3fe:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 800a400:	4b06      	ldr	r3, [pc, #24]	; (800a41c <system_set_exec_accessory_override_flag+0x28>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	b2da      	uxtb	r2, r3
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	4313      	orrs	r3, r2
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	4b03      	ldr	r3, [pc, #12]	; (800a41c <system_set_exec_accessory_override_flag+0x28>)
 800a40e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a410:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr
 800a41c:	20000f14 	.word	0x20000f14

0800a420 <system_clear_exec_motion_overrides>:

void system_clear_exec_motion_overrides() {
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 800a424:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 800a426:	4b04      	ldr	r3, [pc, #16]	; (800a438 <system_clear_exec_motion_overrides+0x18>)
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a42c:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	bc80      	pop	{r7}
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000efc 	.word	0x20000efc

0800a43c <system_clear_exec_accessory_overrides>:

void system_clear_exec_accessory_overrides() {
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i");
 800a440:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 800a442:	4b04      	ldr	r3, [pc, #16]	; (800a454 <system_clear_exec_accessory_overrides+0x18>)
 800a444:	2200      	movs	r2, #0
 800a446:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 800a448:	b662      	cpsie	i
  __enable_irq();
#endif
}
 800a44a:	bf00      	nop
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bc80      	pop	{r7}
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20000f14 	.word	0x20000f14

0800a458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a45c:	4a15      	ldr	r2, [pc, #84]	; (800a4b4 <SystemInit+0x5c>)
 800a45e:	4b15      	ldr	r3, [pc, #84]	; (800a4b4 <SystemInit+0x5c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f043 0301 	orr.w	r3, r3, #1
 800a466:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800a468:	4912      	ldr	r1, [pc, #72]	; (800a4b4 <SystemInit+0x5c>)
 800a46a:	4b12      	ldr	r3, [pc, #72]	; (800a4b4 <SystemInit+0x5c>)
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	4b12      	ldr	r3, [pc, #72]	; (800a4b8 <SystemInit+0x60>)
 800a470:	4013      	ands	r3, r2
 800a472:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a474:	4a0f      	ldr	r2, [pc, #60]	; (800a4b4 <SystemInit+0x5c>)
 800a476:	4b0f      	ldr	r3, [pc, #60]	; (800a4b4 <SystemInit+0x5c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a47e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a482:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a484:	4a0b      	ldr	r2, [pc, #44]	; (800a4b4 <SystemInit+0x5c>)
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <SystemInit+0x5c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a48e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800a490:	4a08      	ldr	r2, [pc, #32]	; (800a4b4 <SystemInit+0x5c>)
 800a492:	4b08      	ldr	r3, [pc, #32]	; (800a4b4 <SystemInit+0x5c>)
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a49a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800a49c:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <SystemInit+0x5c>)
 800a49e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a4a2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800a4a4:	f000 f80c 	bl	800a4c0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a4a8:	4b04      	ldr	r3, [pc, #16]	; (800a4bc <SystemInit+0x64>)
 800a4aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a4ae:	609a      	str	r2, [r3, #8]
#endif 
}
 800a4b0:	bf00      	nop
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40021000 	.word	0x40021000
 800a4b8:	f8ff0000 	.word	0xf8ff0000
 800a4bc:	e000ed00 	.word	0xe000ed00

0800a4c0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800a4c4:	f000 f802 	bl	800a4cc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800a4c8:	bf00      	nop
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	607b      	str	r3, [r7, #4]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800a4da:	4a3a      	ldr	r2, [pc, #232]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a4dc:	4b39      	ldr	r3, [pc, #228]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4e4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800a4e6:	4b37      	ldr	r3, [pc, #220]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d103      	bne.n	800a504 <SetSysClockTo72+0x38>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a502:	d1f0      	bne.n	800a4e6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800a504:	4b2f      	ldr	r3, [pc, #188]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800a510:	2301      	movs	r3, #1
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	e001      	b.n	800a51a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800a516:	2300      	movs	r3, #0
 800a518:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d14b      	bne.n	800a5b8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800a520:	4a29      	ldr	r2, [pc, #164]	; (800a5c8 <SetSysClockTo72+0xfc>)
 800a522:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <SetSysClockTo72+0xfc>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f043 0310 	orr.w	r3, r3, #16
 800a52a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800a52c:	4a26      	ldr	r2, [pc, #152]	; (800a5c8 <SetSysClockTo72+0xfc>)
 800a52e:	4b26      	ldr	r3, [pc, #152]	; (800a5c8 <SetSysClockTo72+0xfc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f023 0303 	bic.w	r3, r3, #3
 800a536:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800a538:	4a23      	ldr	r2, [pc, #140]	; (800a5c8 <SetSysClockTo72+0xfc>)
 800a53a:	4b23      	ldr	r3, [pc, #140]	; (800a5c8 <SetSysClockTo72+0xfc>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f043 0302 	orr.w	r3, r3, #2
 800a542:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800a544:	4a1f      	ldr	r2, [pc, #124]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a546:	4b1f      	ldr	r3, [pc, #124]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800a54c:	4a1d      	ldr	r2, [pc, #116]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a54e:	4b1d      	ldr	r3, [pc, #116]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800a554:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a556:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a55e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800a560:	4a18      	ldr	r2, [pc, #96]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a562:	4b18      	ldr	r3, [pc, #96]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a56a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800a56c:	4a15      	ldr	r2, [pc, #84]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a56e:	4b15      	ldr	r3, [pc, #84]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800a576:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800a578:	4a12      	ldr	r2, [pc, #72]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a57a:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a582:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800a584:	bf00      	nop
 800a586:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0f9      	beq.n	800a586 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800a592:	4a0c      	ldr	r2, [pc, #48]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a594:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f023 0303 	bic.w	r3, r3, #3
 800a59c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800a59e:	4a09      	ldr	r2, [pc, #36]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a5a0:	4b08      	ldr	r3, [pc, #32]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f043 0302 	orr.w	r3, r3, #2
 800a5a8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800a5aa:	bf00      	nop
 800a5ac:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <SetSysClockTo72+0xf8>)
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f003 030c 	and.w	r3, r3, #12
 800a5b4:	2b08      	cmp	r3, #8
 800a5b6:	d1f9      	bne.n	800a5ac <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	40021000 	.word	0x40021000
 800a5c8:	40022000 	.word	0x40022000

0800a5cc <__libc_init_array>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	4e0c      	ldr	r6, [pc, #48]	; (800a604 <__libc_init_array+0x38>)
 800a5d2:	4c0d      	ldr	r4, [pc, #52]	; (800a608 <__libc_init_array+0x3c>)
 800a5d4:	1ba4      	subs	r4, r4, r6
 800a5d6:	10a4      	asrs	r4, r4, #2
 800a5d8:	42a5      	cmp	r5, r4
 800a5da:	d109      	bne.n	800a5f0 <__libc_init_array+0x24>
 800a5dc:	f001 f8e6 	bl	800b7ac <_init>
 800a5e0:	2500      	movs	r5, #0
 800a5e2:	4e0a      	ldr	r6, [pc, #40]	; (800a60c <__libc_init_array+0x40>)
 800a5e4:	4c0a      	ldr	r4, [pc, #40]	; (800a610 <__libc_init_array+0x44>)
 800a5e6:	1ba4      	subs	r4, r4, r6
 800a5e8:	10a4      	asrs	r4, r4, #2
 800a5ea:	42a5      	cmp	r5, r4
 800a5ec:	d105      	bne.n	800a5fa <__libc_init_array+0x2e>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5f4:	4798      	blx	r3
 800a5f6:	3501      	adds	r5, #1
 800a5f8:	e7ee      	b.n	800a5d8 <__libc_init_array+0xc>
 800a5fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5fe:	4798      	blx	r3
 800a600:	3501      	adds	r5, #1
 800a602:	e7f2      	b.n	800a5ea <__libc_init_array+0x1e>
 800a604:	0800bdf0 	.word	0x0800bdf0
 800a608:	0800bdf0 	.word	0x0800bdf0
 800a60c:	0800bdf0 	.word	0x0800bdf0
 800a610:	0800bdf4 	.word	0x0800bdf4

0800a614 <memcmp>:
 800a614:	b510      	push	{r4, lr}
 800a616:	3901      	subs	r1, #1
 800a618:	4402      	add	r2, r0
 800a61a:	4290      	cmp	r0, r2
 800a61c:	d101      	bne.n	800a622 <memcmp+0xe>
 800a61e:	2000      	movs	r0, #0
 800a620:	bd10      	pop	{r4, pc}
 800a622:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a626:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a62a:	42a3      	cmp	r3, r4
 800a62c:	d0f5      	beq.n	800a61a <memcmp+0x6>
 800a62e:	1b18      	subs	r0, r3, r4
 800a630:	bd10      	pop	{r4, pc}

0800a632 <memset>:
 800a632:	4603      	mov	r3, r0
 800a634:	4402      	add	r2, r0
 800a636:	4293      	cmp	r3, r2
 800a638:	d100      	bne.n	800a63c <memset+0xa>
 800a63a:	4770      	bx	lr
 800a63c:	f803 1b01 	strb.w	r1, [r3], #1
 800a640:	e7f9      	b.n	800a636 <memset+0x4>
	...

0800a644 <ceilf>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a64a:	0df5      	lsrs	r5, r6, #23
 800a64c:	3d7f      	subs	r5, #127	; 0x7f
 800a64e:	2d16      	cmp	r5, #22
 800a650:	4601      	mov	r1, r0
 800a652:	4604      	mov	r4, r0
 800a654:	dc26      	bgt.n	800a6a4 <ceilf+0x60>
 800a656:	2d00      	cmp	r5, #0
 800a658:	da0e      	bge.n	800a678 <ceilf+0x34>
 800a65a:	4918      	ldr	r1, [pc, #96]	; (800a6bc <ceilf+0x78>)
 800a65c:	f7f6 fa20 	bl	8000aa0 <__addsf3>
 800a660:	2100      	movs	r1, #0
 800a662:	f7f6 fce1 	bl	8001028 <__aeabi_fcmpgt>
 800a666:	b128      	cbz	r0, 800a674 <ceilf+0x30>
 800a668:	2c00      	cmp	r4, #0
 800a66a:	db23      	blt.n	800a6b4 <ceilf+0x70>
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	bf18      	it	ne
 800a670:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800a674:	4621      	mov	r1, r4
 800a676:	e01b      	b.n	800a6b0 <ceilf+0x6c>
 800a678:	4e11      	ldr	r6, [pc, #68]	; (800a6c0 <ceilf+0x7c>)
 800a67a:	412e      	asrs	r6, r5
 800a67c:	4230      	tst	r0, r6
 800a67e:	d017      	beq.n	800a6b0 <ceilf+0x6c>
 800a680:	490e      	ldr	r1, [pc, #56]	; (800a6bc <ceilf+0x78>)
 800a682:	f7f6 fa0d 	bl	8000aa0 <__addsf3>
 800a686:	2100      	movs	r1, #0
 800a688:	f7f6 fcce 	bl	8001028 <__aeabi_fcmpgt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d0f1      	beq.n	800a674 <ceilf+0x30>
 800a690:	2c00      	cmp	r4, #0
 800a692:	bfc2      	ittt	gt
 800a694:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800a698:	fa43 f505 	asrgt.w	r5, r3, r5
 800a69c:	1964      	addgt	r4, r4, r5
 800a69e:	ea24 0406 	bic.w	r4, r4, r6
 800a6a2:	e7e7      	b.n	800a674 <ceilf+0x30>
 800a6a4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a6a8:	d302      	bcc.n	800a6b0 <ceilf+0x6c>
 800a6aa:	f7f6 f9f9 	bl	8000aa0 <__addsf3>
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a6b8:	e7dc      	b.n	800a674 <ceilf+0x30>
 800a6ba:	bf00      	nop
 800a6bc:	7149f2ca 	.word	0x7149f2ca
 800a6c0:	007fffff 	.word	0x007fffff

0800a6c4 <cosf>:
 800a6c4:	b507      	push	{r0, r1, r2, lr}
 800a6c6:	4a18      	ldr	r2, [pc, #96]	; (800a728 <cosf+0x64>)
 800a6c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	4601      	mov	r1, r0
 800a6d0:	dc03      	bgt.n	800a6da <cosf+0x16>
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	f000 fb64 	bl	800ada0 <__kernel_cosf>
 800a6d8:	e004      	b.n	800a6e4 <cosf+0x20>
 800a6da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6de:	db04      	blt.n	800a6ea <cosf+0x26>
 800a6e0:	f7f6 f9dc 	bl	8000a9c <__aeabi_fsub>
 800a6e4:	b003      	add	sp, #12
 800a6e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6ea:	4669      	mov	r1, sp
 800a6ec:	f000 f9ae 	bl	800aa4c <__ieee754_rem_pio2f>
 800a6f0:	f000 0203 	and.w	r2, r0, #3
 800a6f4:	2a01      	cmp	r2, #1
 800a6f6:	d005      	beq.n	800a704 <cosf+0x40>
 800a6f8:	2a02      	cmp	r2, #2
 800a6fa:	d00a      	beq.n	800a712 <cosf+0x4e>
 800a6fc:	b972      	cbnz	r2, 800a71c <cosf+0x58>
 800a6fe:	9901      	ldr	r1, [sp, #4]
 800a700:	9800      	ldr	r0, [sp, #0]
 800a702:	e7e7      	b.n	800a6d4 <cosf+0x10>
 800a704:	9901      	ldr	r1, [sp, #4]
 800a706:	9800      	ldr	r0, [sp, #0]
 800a708:	f000 fe6c 	bl	800b3e4 <__kernel_sinf>
 800a70c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a710:	e7e8      	b.n	800a6e4 <cosf+0x20>
 800a712:	9901      	ldr	r1, [sp, #4]
 800a714:	9800      	ldr	r0, [sp, #0]
 800a716:	f000 fb43 	bl	800ada0 <__kernel_cosf>
 800a71a:	e7f7      	b.n	800a70c <cosf+0x48>
 800a71c:	2201      	movs	r2, #1
 800a71e:	9901      	ldr	r1, [sp, #4]
 800a720:	9800      	ldr	r0, [sp, #0]
 800a722:	f000 fe5f 	bl	800b3e4 <__kernel_sinf>
 800a726:	e7dd      	b.n	800a6e4 <cosf+0x20>
 800a728:	3f490fd8 	.word	0x3f490fd8

0800a72c <floorf>:
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a732:	0df5      	lsrs	r5, r6, #23
 800a734:	3d7f      	subs	r5, #127	; 0x7f
 800a736:	2d16      	cmp	r5, #22
 800a738:	4601      	mov	r1, r0
 800a73a:	4604      	mov	r4, r0
 800a73c:	dc26      	bgt.n	800a78c <floorf+0x60>
 800a73e:	2d00      	cmp	r5, #0
 800a740:	da0e      	bge.n	800a760 <floorf+0x34>
 800a742:	4917      	ldr	r1, [pc, #92]	; (800a7a0 <floorf+0x74>)
 800a744:	f7f6 f9ac 	bl	8000aa0 <__addsf3>
 800a748:	2100      	movs	r1, #0
 800a74a:	f7f6 fc6d 	bl	8001028 <__aeabi_fcmpgt>
 800a74e:	b128      	cbz	r0, 800a75c <floorf+0x30>
 800a750:	2c00      	cmp	r4, #0
 800a752:	da23      	bge.n	800a79c <floorf+0x70>
 800a754:	4b13      	ldr	r3, [pc, #76]	; (800a7a4 <floorf+0x78>)
 800a756:	2e00      	cmp	r6, #0
 800a758:	bf18      	it	ne
 800a75a:	461c      	movne	r4, r3
 800a75c:	4621      	mov	r1, r4
 800a75e:	e01b      	b.n	800a798 <floorf+0x6c>
 800a760:	4e11      	ldr	r6, [pc, #68]	; (800a7a8 <floorf+0x7c>)
 800a762:	412e      	asrs	r6, r5
 800a764:	4230      	tst	r0, r6
 800a766:	d017      	beq.n	800a798 <floorf+0x6c>
 800a768:	490d      	ldr	r1, [pc, #52]	; (800a7a0 <floorf+0x74>)
 800a76a:	f7f6 f999 	bl	8000aa0 <__addsf3>
 800a76e:	2100      	movs	r1, #0
 800a770:	f7f6 fc5a 	bl	8001028 <__aeabi_fcmpgt>
 800a774:	2800      	cmp	r0, #0
 800a776:	d0f1      	beq.n	800a75c <floorf+0x30>
 800a778:	2c00      	cmp	r4, #0
 800a77a:	bfbe      	ittt	lt
 800a77c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800a780:	fa43 f505 	asrlt.w	r5, r3, r5
 800a784:	1964      	addlt	r4, r4, r5
 800a786:	ea24 0406 	bic.w	r4, r4, r6
 800a78a:	e7e7      	b.n	800a75c <floorf+0x30>
 800a78c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a790:	d302      	bcc.n	800a798 <floorf+0x6c>
 800a792:	f7f6 f985 	bl	8000aa0 <__addsf3>
 800a796:	4601      	mov	r1, r0
 800a798:	4608      	mov	r0, r1
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	2400      	movs	r4, #0
 800a79e:	e7dd      	b.n	800a75c <floorf+0x30>
 800a7a0:	7149f2ca 	.word	0x7149f2ca
 800a7a4:	bf800000 	.word	0xbf800000
 800a7a8:	007fffff 	.word	0x007fffff

0800a7ac <lroundf>:
 800a7ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	bfb4      	ite	lt
 800a7ba:	f04f 34ff 	movlt.w	r4, #4294967295
 800a7be:	2401      	movge	r4, #1
 800a7c0:	2a1e      	cmp	r2, #30
 800a7c2:	dc1b      	bgt.n	800a7fc <lroundf+0x50>
 800a7c4:	2a00      	cmp	r2, #0
 800a7c6:	da04      	bge.n	800a7d2 <lroundf+0x26>
 800a7c8:	3201      	adds	r2, #1
 800a7ca:	bf18      	it	ne
 800a7cc:	2400      	movne	r4, #0
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	2a16      	cmp	r2, #22
 800a7d4:	bfd8      	it	le
 800a7d6:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800a7da:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800a7de:	bfd8      	it	le
 800a7e0:	4113      	asrle	r3, r2
 800a7e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a7e6:	bfcd      	iteet	gt
 800a7e8:	3b96      	subgt	r3, #150	; 0x96
 800a7ea:	185b      	addle	r3, r3, r1
 800a7ec:	f1c2 0217 	rsble	r2, r2, #23
 800a7f0:	fa01 f303 	lslgt.w	r3, r1, r3
 800a7f4:	bfd8      	it	le
 800a7f6:	40d3      	lsrle	r3, r2
 800a7f8:	435c      	muls	r4, r3
 800a7fa:	e7e8      	b.n	800a7ce <lroundf+0x22>
 800a7fc:	f7f6 fc34 	bl	8001068 <__aeabi_f2iz>
 800a800:	4604      	mov	r4, r0
 800a802:	e7e4      	b.n	800a7ce <lroundf+0x22>

0800a804 <sinf>:
 800a804:	b507      	push	{r0, r1, r2, lr}
 800a806:	4a19      	ldr	r2, [pc, #100]	; (800a86c <sinf+0x68>)
 800a808:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a80c:	4293      	cmp	r3, r2
 800a80e:	4601      	mov	r1, r0
 800a810:	dc04      	bgt.n	800a81c <sinf+0x18>
 800a812:	2200      	movs	r2, #0
 800a814:	2100      	movs	r1, #0
 800a816:	f000 fde5 	bl	800b3e4 <__kernel_sinf>
 800a81a:	e004      	b.n	800a826 <sinf+0x22>
 800a81c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a820:	db04      	blt.n	800a82c <sinf+0x28>
 800a822:	f7f6 f93b 	bl	8000a9c <__aeabi_fsub>
 800a826:	b003      	add	sp, #12
 800a828:	f85d fb04 	ldr.w	pc, [sp], #4
 800a82c:	4669      	mov	r1, sp
 800a82e:	f000 f90d 	bl	800aa4c <__ieee754_rem_pio2f>
 800a832:	f000 0003 	and.w	r0, r0, #3
 800a836:	2801      	cmp	r0, #1
 800a838:	d006      	beq.n	800a848 <sinf+0x44>
 800a83a:	2802      	cmp	r0, #2
 800a83c:	d009      	beq.n	800a852 <sinf+0x4e>
 800a83e:	b980      	cbnz	r0, 800a862 <sinf+0x5e>
 800a840:	2201      	movs	r2, #1
 800a842:	9901      	ldr	r1, [sp, #4]
 800a844:	9800      	ldr	r0, [sp, #0]
 800a846:	e7e6      	b.n	800a816 <sinf+0x12>
 800a848:	9901      	ldr	r1, [sp, #4]
 800a84a:	9800      	ldr	r0, [sp, #0]
 800a84c:	f000 faa8 	bl	800ada0 <__kernel_cosf>
 800a850:	e7e9      	b.n	800a826 <sinf+0x22>
 800a852:	2201      	movs	r2, #1
 800a854:	9901      	ldr	r1, [sp, #4]
 800a856:	9800      	ldr	r0, [sp, #0]
 800a858:	f000 fdc4 	bl	800b3e4 <__kernel_sinf>
 800a85c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a860:	e7e1      	b.n	800a826 <sinf+0x22>
 800a862:	9901      	ldr	r1, [sp, #4]
 800a864:	9800      	ldr	r0, [sp, #0]
 800a866:	f000 fa9b 	bl	800ada0 <__kernel_cosf>
 800a86a:	e7f7      	b.n	800a85c <sinf+0x58>
 800a86c:	3f490fd8 	.word	0x3f490fd8

0800a870 <truncf>:
 800a870:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a874:	3b7f      	subs	r3, #127	; 0x7f
 800a876:	2b16      	cmp	r3, #22
 800a878:	4602      	mov	r2, r0
 800a87a:	dc08      	bgt.n	800a88e <truncf+0x1e>
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	da02      	bge.n	800a886 <truncf+0x16>
 800a880:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a884:	4770      	bx	lr
 800a886:	4802      	ldr	r0, [pc, #8]	; (800a890 <truncf+0x20>)
 800a888:	4118      	asrs	r0, r3
 800a88a:	ea22 0000 	bic.w	r0, r2, r0
 800a88e:	4770      	bx	lr
 800a890:	007fffff 	.word	0x007fffff

0800a894 <atan2f>:
 800a894:	f000 b84a 	b.w	800a92c <__ieee754_atan2f>

0800a898 <sqrtf>:
 800a898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89a:	b08b      	sub	sp, #44	; 0x2c
 800a89c:	4604      	mov	r4, r0
 800a89e:	f000 fa2d 	bl	800acfc <__ieee754_sqrtf>
 800a8a2:	4b20      	ldr	r3, [pc, #128]	; (800a924 <sqrtf+0x8c>)
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	f993 5000 	ldrsb.w	r5, [r3]
 800a8aa:	1c6b      	adds	r3, r5, #1
 800a8ac:	d02a      	beq.n	800a904 <sqrtf+0x6c>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7f6 fbc3 	bl	800103c <__aeabi_fcmpun>
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	bb20      	cbnz	r0, 800a904 <sqrtf+0x6c>
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f7f6 fb95 	bl	8000fec <__aeabi_fcmplt>
 800a8c2:	b1f8      	cbz	r0, 800a904 <sqrtf+0x6c>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4b17      	ldr	r3, [pc, #92]	; (800a928 <sqrtf+0x90>)
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	9708      	str	r7, [sp, #32]
 800a8d0:	f7f5 fda2 	bl	8000418 <__aeabi_f2d>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	b99d      	cbnz	r5, 800a90a <sqrtf+0x72>
 800a8e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8e6:	4668      	mov	r0, sp
 800a8e8:	f000 fdf2 	bl	800b4d0 <matherr>
 800a8ec:	b1a8      	cbz	r0, 800a91a <sqrtf+0x82>
 800a8ee:	9b08      	ldr	r3, [sp, #32]
 800a8f0:	b11b      	cbz	r3, 800a8fa <sqrtf+0x62>
 800a8f2:	f000 ff55 	bl	800b7a0 <__errno>
 800a8f6:	9b08      	ldr	r3, [sp, #32]
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8fe:	f7f6 f879 	bl	80009f4 <__aeabi_d2f>
 800a902:	4606      	mov	r6, r0
 800a904:	4630      	mov	r0, r6
 800a906:	b00b      	add	sp, #44	; 0x2c
 800a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a90a:	4610      	mov	r0, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	f7f5 ff01 	bl	8000714 <__aeabi_ddiv>
 800a912:	2d02      	cmp	r5, #2
 800a914:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a918:	d1e5      	bne.n	800a8e6 <sqrtf+0x4e>
 800a91a:	f000 ff41 	bl	800b7a0 <__errno>
 800a91e:	2321      	movs	r3, #33	; 0x21
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	e7e4      	b.n	800a8ee <sqrtf+0x56>
 800a924:	2000001c 	.word	0x2000001c
 800a928:	0800b9fa 	.word	0x0800b9fa

0800a92c <__ieee754_atan2f>:
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a932:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a936:	4603      	mov	r3, r0
 800a938:	dc05      	bgt.n	800a946 <__ieee754_atan2f+0x1a>
 800a93a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a93e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a942:	4607      	mov	r7, r0
 800a944:	dd04      	ble.n	800a950 <__ieee754_atan2f+0x24>
 800a946:	4618      	mov	r0, r3
 800a948:	f7f6 f8aa 	bl	8000aa0 <__addsf3>
 800a94c:	4603      	mov	r3, r0
 800a94e:	e010      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a950:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800a954:	d103      	bne.n	800a95e <__ieee754_atan2f+0x32>
 800a956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a95a:	f000 bdbb 	b.w	800b4d4 <atanf>
 800a95e:	178c      	asrs	r4, r1, #30
 800a960:	f004 0402 	and.w	r4, r4, #2
 800a964:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a968:	b92a      	cbnz	r2, 800a976 <__ieee754_atan2f+0x4a>
 800a96a:	2c02      	cmp	r4, #2
 800a96c:	d023      	beq.n	800a9b6 <__ieee754_atan2f+0x8a>
 800a96e:	2c03      	cmp	r4, #3
 800a970:	d023      	beq.n	800a9ba <__ieee754_atan2f+0x8e>
 800a972:	4618      	mov	r0, r3
 800a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a976:	b91e      	cbnz	r6, 800a980 <__ieee754_atan2f+0x54>
 800a978:	2f00      	cmp	r7, #0
 800a97a:	da53      	bge.n	800aa24 <__ieee754_atan2f+0xf8>
 800a97c:	4b2a      	ldr	r3, [pc, #168]	; (800aa28 <__ieee754_atan2f+0xfc>)
 800a97e:	e7f8      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a980:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800a984:	d11b      	bne.n	800a9be <__ieee754_atan2f+0x92>
 800a986:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a98a:	d10b      	bne.n	800a9a4 <__ieee754_atan2f+0x78>
 800a98c:	2c02      	cmp	r4, #2
 800a98e:	d005      	beq.n	800a99c <__ieee754_atan2f+0x70>
 800a990:	2c03      	cmp	r4, #3
 800a992:	d005      	beq.n	800a9a0 <__ieee754_atan2f+0x74>
 800a994:	2c01      	cmp	r4, #1
 800a996:	d141      	bne.n	800aa1c <__ieee754_atan2f+0xf0>
 800a998:	4b24      	ldr	r3, [pc, #144]	; (800aa2c <__ieee754_atan2f+0x100>)
 800a99a:	e7ea      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a99c:	4b24      	ldr	r3, [pc, #144]	; (800aa30 <__ieee754_atan2f+0x104>)
 800a99e:	e7e8      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a9a0:	4b24      	ldr	r3, [pc, #144]	; (800aa34 <__ieee754_atan2f+0x108>)
 800a9a2:	e7e6      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a9a4:	2c02      	cmp	r4, #2
 800a9a6:	d006      	beq.n	800a9b6 <__ieee754_atan2f+0x8a>
 800a9a8:	2c03      	cmp	r4, #3
 800a9aa:	d006      	beq.n	800a9ba <__ieee754_atan2f+0x8e>
 800a9ac:	2c01      	cmp	r4, #1
 800a9ae:	d137      	bne.n	800aa20 <__ieee754_atan2f+0xf4>
 800a9b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9b4:	e7dd      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a9b6:	4b20      	ldr	r3, [pc, #128]	; (800aa38 <__ieee754_atan2f+0x10c>)
 800a9b8:	e7db      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a9ba:	4b20      	ldr	r3, [pc, #128]	; (800aa3c <__ieee754_atan2f+0x110>)
 800a9bc:	e7d9      	b.n	800a972 <__ieee754_atan2f+0x46>
 800a9be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800a9c2:	d0d9      	beq.n	800a978 <__ieee754_atan2f+0x4c>
 800a9c4:	1b92      	subs	r2, r2, r6
 800a9c6:	15d2      	asrs	r2, r2, #23
 800a9c8:	2a3c      	cmp	r2, #60	; 0x3c
 800a9ca:	dc17      	bgt.n	800a9fc <__ieee754_atan2f+0xd0>
 800a9cc:	2900      	cmp	r1, #0
 800a9ce:	da01      	bge.n	800a9d4 <__ieee754_atan2f+0xa8>
 800a9d0:	323c      	adds	r2, #60	; 0x3c
 800a9d2:	db15      	blt.n	800aa00 <__ieee754_atan2f+0xd4>
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f6 fa1f 	bl	8000e18 <__aeabi_fdiv>
 800a9da:	f000 fe8b 	bl	800b6f4 <fabsf>
 800a9de:	f000 fd79 	bl	800b4d4 <atanf>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2c01      	cmp	r4, #1
 800a9e6:	d00d      	beq.n	800aa04 <__ieee754_atan2f+0xd8>
 800a9e8:	2c02      	cmp	r4, #2
 800a9ea:	d00e      	beq.n	800aa0a <__ieee754_atan2f+0xde>
 800a9ec:	2c00      	cmp	r4, #0
 800a9ee:	d0c0      	beq.n	800a972 <__ieee754_atan2f+0x46>
 800a9f0:	4913      	ldr	r1, [pc, #76]	; (800aa40 <__ieee754_atan2f+0x114>)
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7f6 f854 	bl	8000aa0 <__addsf3>
 800a9f8:	490f      	ldr	r1, [pc, #60]	; (800aa38 <__ieee754_atan2f+0x10c>)
 800a9fa:	e00c      	b.n	800aa16 <__ieee754_atan2f+0xea>
 800a9fc:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <__ieee754_atan2f+0x118>)
 800a9fe:	e7f1      	b.n	800a9e4 <__ieee754_atan2f+0xb8>
 800aa00:	2300      	movs	r3, #0
 800aa02:	e7ef      	b.n	800a9e4 <__ieee754_atan2f+0xb8>
 800aa04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa08:	e7b3      	b.n	800a972 <__ieee754_atan2f+0x46>
 800aa0a:	490d      	ldr	r1, [pc, #52]	; (800aa40 <__ieee754_atan2f+0x114>)
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f6 f847 	bl	8000aa0 <__addsf3>
 800aa12:	4601      	mov	r1, r0
 800aa14:	4808      	ldr	r0, [pc, #32]	; (800aa38 <__ieee754_atan2f+0x10c>)
 800aa16:	f7f6 f841 	bl	8000a9c <__aeabi_fsub>
 800aa1a:	e797      	b.n	800a94c <__ieee754_atan2f+0x20>
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <__ieee754_atan2f+0x11c>)
 800aa1e:	e7a8      	b.n	800a972 <__ieee754_atan2f+0x46>
 800aa20:	2300      	movs	r3, #0
 800aa22:	e7a6      	b.n	800a972 <__ieee754_atan2f+0x46>
 800aa24:	4b07      	ldr	r3, [pc, #28]	; (800aa44 <__ieee754_atan2f+0x118>)
 800aa26:	e7a4      	b.n	800a972 <__ieee754_atan2f+0x46>
 800aa28:	bfc90fdb 	.word	0xbfc90fdb
 800aa2c:	bf490fdb 	.word	0xbf490fdb
 800aa30:	4016cbe4 	.word	0x4016cbe4
 800aa34:	c016cbe4 	.word	0xc016cbe4
 800aa38:	40490fdb 	.word	0x40490fdb
 800aa3c:	c0490fdb 	.word	0xc0490fdb
 800aa40:	33bbbd2e 	.word	0x33bbbd2e
 800aa44:	3fc90fdb 	.word	0x3fc90fdb
 800aa48:	3f490fdb 	.word	0x3f490fdb

0800aa4c <__ieee754_rem_pio2f>:
 800aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	4a9d      	ldr	r2, [pc, #628]	; (800acc8 <__ieee754_rem_pio2f+0x27c>)
 800aa52:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800aa56:	4295      	cmp	r5, r2
 800aa58:	b087      	sub	sp, #28
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	dc04      	bgt.n	800aa6a <__ieee754_rem_pio2f+0x1e>
 800aa60:	2300      	movs	r3, #0
 800aa62:	6020      	str	r0, [r4, #0]
 800aa64:	604b      	str	r3, [r1, #4]
 800aa66:	2600      	movs	r6, #0
 800aa68:	e01a      	b.n	800aaa0 <__ieee754_rem_pio2f+0x54>
 800aa6a:	4a98      	ldr	r2, [pc, #608]	; (800accc <__ieee754_rem_pio2f+0x280>)
 800aa6c:	4295      	cmp	r5, r2
 800aa6e:	dc4b      	bgt.n	800ab08 <__ieee754_rem_pio2f+0xbc>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	4997      	ldr	r1, [pc, #604]	; (800acd0 <__ieee754_rem_pio2f+0x284>)
 800aa74:	f025 050f 	bic.w	r5, r5, #15
 800aa78:	4e96      	ldr	r6, [pc, #600]	; (800acd4 <__ieee754_rem_pio2f+0x288>)
 800aa7a:	dd23      	ble.n	800aac4 <__ieee754_rem_pio2f+0x78>
 800aa7c:	f7f6 f80e 	bl	8000a9c <__aeabi_fsub>
 800aa80:	42b5      	cmp	r5, r6
 800aa82:	4607      	mov	r7, r0
 800aa84:	d010      	beq.n	800aaa8 <__ieee754_rem_pio2f+0x5c>
 800aa86:	4994      	ldr	r1, [pc, #592]	; (800acd8 <__ieee754_rem_pio2f+0x28c>)
 800aa88:	f7f6 f808 	bl	8000a9c <__aeabi_fsub>
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	6020      	str	r0, [r4, #0]
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7f6 f803 	bl	8000a9c <__aeabi_fsub>
 800aa96:	4990      	ldr	r1, [pc, #576]	; (800acd8 <__ieee754_rem_pio2f+0x28c>)
 800aa98:	f7f6 f800 	bl	8000a9c <__aeabi_fsub>
 800aa9c:	2601      	movs	r6, #1
 800aa9e:	6060      	str	r0, [r4, #4]
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	b007      	add	sp, #28
 800aaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa8:	498c      	ldr	r1, [pc, #560]	; (800acdc <__ieee754_rem_pio2f+0x290>)
 800aaaa:	f7f5 fff7 	bl	8000a9c <__aeabi_fsub>
 800aaae:	498c      	ldr	r1, [pc, #560]	; (800ace0 <__ieee754_rem_pio2f+0x294>)
 800aab0:	4605      	mov	r5, r0
 800aab2:	f7f5 fff3 	bl	8000a9c <__aeabi_fsub>
 800aab6:	4601      	mov	r1, r0
 800aab8:	6020      	str	r0, [r4, #0]
 800aaba:	4628      	mov	r0, r5
 800aabc:	f7f5 ffee 	bl	8000a9c <__aeabi_fsub>
 800aac0:	4987      	ldr	r1, [pc, #540]	; (800ace0 <__ieee754_rem_pio2f+0x294>)
 800aac2:	e7e9      	b.n	800aa98 <__ieee754_rem_pio2f+0x4c>
 800aac4:	f7f5 ffec 	bl	8000aa0 <__addsf3>
 800aac8:	42b5      	cmp	r5, r6
 800aaca:	4607      	mov	r7, r0
 800aacc:	d00e      	beq.n	800aaec <__ieee754_rem_pio2f+0xa0>
 800aace:	4982      	ldr	r1, [pc, #520]	; (800acd8 <__ieee754_rem_pio2f+0x28c>)
 800aad0:	f7f5 ffe6 	bl	8000aa0 <__addsf3>
 800aad4:	4601      	mov	r1, r0
 800aad6:	6020      	str	r0, [r4, #0]
 800aad8:	4638      	mov	r0, r7
 800aada:	f7f5 ffdf 	bl	8000a9c <__aeabi_fsub>
 800aade:	497e      	ldr	r1, [pc, #504]	; (800acd8 <__ieee754_rem_pio2f+0x28c>)
 800aae0:	f7f5 ffde 	bl	8000aa0 <__addsf3>
 800aae4:	f04f 36ff 	mov.w	r6, #4294967295
 800aae8:	6060      	str	r0, [r4, #4]
 800aaea:	e7d9      	b.n	800aaa0 <__ieee754_rem_pio2f+0x54>
 800aaec:	497b      	ldr	r1, [pc, #492]	; (800acdc <__ieee754_rem_pio2f+0x290>)
 800aaee:	f7f5 ffd7 	bl	8000aa0 <__addsf3>
 800aaf2:	497b      	ldr	r1, [pc, #492]	; (800ace0 <__ieee754_rem_pio2f+0x294>)
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	f7f5 ffd3 	bl	8000aa0 <__addsf3>
 800aafa:	4601      	mov	r1, r0
 800aafc:	6020      	str	r0, [r4, #0]
 800aafe:	4628      	mov	r0, r5
 800ab00:	f7f5 ffcc 	bl	8000a9c <__aeabi_fsub>
 800ab04:	4976      	ldr	r1, [pc, #472]	; (800ace0 <__ieee754_rem_pio2f+0x294>)
 800ab06:	e7eb      	b.n	800aae0 <__ieee754_rem_pio2f+0x94>
 800ab08:	4a76      	ldr	r2, [pc, #472]	; (800ace4 <__ieee754_rem_pio2f+0x298>)
 800ab0a:	4295      	cmp	r5, r2
 800ab0c:	f300 808c 	bgt.w	800ac28 <__ieee754_rem_pio2f+0x1dc>
 800ab10:	f000 fdf0 	bl	800b6f4 <fabsf>
 800ab14:	4974      	ldr	r1, [pc, #464]	; (800ace8 <__ieee754_rem_pio2f+0x29c>)
 800ab16:	4680      	mov	r8, r0
 800ab18:	f7f6 f8ca 	bl	8000cb0 <__aeabi_fmul>
 800ab1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ab20:	f7f5 ffbe 	bl	8000aa0 <__addsf3>
 800ab24:	f7f6 faa0 	bl	8001068 <__aeabi_f2iz>
 800ab28:	4606      	mov	r6, r0
 800ab2a:	f7f6 f86d 	bl	8000c08 <__aeabi_i2f>
 800ab2e:	4968      	ldr	r1, [pc, #416]	; (800acd0 <__ieee754_rem_pio2f+0x284>)
 800ab30:	4682      	mov	sl, r0
 800ab32:	f7f6 f8bd 	bl	8000cb0 <__aeabi_fmul>
 800ab36:	4601      	mov	r1, r0
 800ab38:	4640      	mov	r0, r8
 800ab3a:	f7f5 ffaf 	bl	8000a9c <__aeabi_fsub>
 800ab3e:	4966      	ldr	r1, [pc, #408]	; (800acd8 <__ieee754_rem_pio2f+0x28c>)
 800ab40:	4680      	mov	r8, r0
 800ab42:	4650      	mov	r0, sl
 800ab44:	f7f6 f8b4 	bl	8000cb0 <__aeabi_fmul>
 800ab48:	2e1f      	cmp	r6, #31
 800ab4a:	4681      	mov	r9, r0
 800ab4c:	dc0c      	bgt.n	800ab68 <__ieee754_rem_pio2f+0x11c>
 800ab4e:	4a67      	ldr	r2, [pc, #412]	; (800acec <__ieee754_rem_pio2f+0x2a0>)
 800ab50:	1e71      	subs	r1, r6, #1
 800ab52:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ab56:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d004      	beq.n	800ab68 <__ieee754_rem_pio2f+0x11c>
 800ab5e:	4649      	mov	r1, r9
 800ab60:	4640      	mov	r0, r8
 800ab62:	f7f5 ff9b 	bl	8000a9c <__aeabi_fsub>
 800ab66:	e009      	b.n	800ab7c <__ieee754_rem_pio2f+0x130>
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	f7f5 ff96 	bl	8000a9c <__aeabi_fsub>
 800ab70:	15ed      	asrs	r5, r5, #23
 800ab72:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ab76:	1aeb      	subs	r3, r5, r3
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	dc01      	bgt.n	800ab80 <__ieee754_rem_pio2f+0x134>
 800ab7c:	6020      	str	r0, [r4, #0]
 800ab7e:	e024      	b.n	800abca <__ieee754_rem_pio2f+0x17e>
 800ab80:	4956      	ldr	r1, [pc, #344]	; (800acdc <__ieee754_rem_pio2f+0x290>)
 800ab82:	4650      	mov	r0, sl
 800ab84:	f7f6 f894 	bl	8000cb0 <__aeabi_fmul>
 800ab88:	4681      	mov	r9, r0
 800ab8a:	4601      	mov	r1, r0
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	f7f5 ff85 	bl	8000a9c <__aeabi_fsub>
 800ab92:	4601      	mov	r1, r0
 800ab94:	4683      	mov	fp, r0
 800ab96:	4640      	mov	r0, r8
 800ab98:	f7f5 ff80 	bl	8000a9c <__aeabi_fsub>
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f5 ff7d 	bl	8000a9c <__aeabi_fsub>
 800aba2:	4680      	mov	r8, r0
 800aba4:	494e      	ldr	r1, [pc, #312]	; (800ace0 <__ieee754_rem_pio2f+0x294>)
 800aba6:	4650      	mov	r0, sl
 800aba8:	f7f6 f882 	bl	8000cb0 <__aeabi_fmul>
 800abac:	4641      	mov	r1, r8
 800abae:	f7f5 ff75 	bl	8000a9c <__aeabi_fsub>
 800abb2:	4601      	mov	r1, r0
 800abb4:	4681      	mov	r9, r0
 800abb6:	4658      	mov	r0, fp
 800abb8:	f7f5 ff70 	bl	8000a9c <__aeabi_fsub>
 800abbc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800abc0:	1aed      	subs	r5, r5, r3
 800abc2:	2d19      	cmp	r5, #25
 800abc4:	dc15      	bgt.n	800abf2 <__ieee754_rem_pio2f+0x1a6>
 800abc6:	46d8      	mov	r8, fp
 800abc8:	6020      	str	r0, [r4, #0]
 800abca:	6825      	ldr	r5, [r4, #0]
 800abcc:	4640      	mov	r0, r8
 800abce:	4629      	mov	r1, r5
 800abd0:	f7f5 ff64 	bl	8000a9c <__aeabi_fsub>
 800abd4:	4649      	mov	r1, r9
 800abd6:	f7f5 ff61 	bl	8000a9c <__aeabi_fsub>
 800abda:	2f00      	cmp	r7, #0
 800abdc:	6060      	str	r0, [r4, #4]
 800abde:	f6bf af5f 	bge.w	800aaa0 <__ieee754_rem_pio2f+0x54>
 800abe2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800abe6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800abea:	6025      	str	r5, [r4, #0]
 800abec:	6060      	str	r0, [r4, #4]
 800abee:	4276      	negs	r6, r6
 800abf0:	e756      	b.n	800aaa0 <__ieee754_rem_pio2f+0x54>
 800abf2:	493f      	ldr	r1, [pc, #252]	; (800acf0 <__ieee754_rem_pio2f+0x2a4>)
 800abf4:	4650      	mov	r0, sl
 800abf6:	f7f6 f85b 	bl	8000cb0 <__aeabi_fmul>
 800abfa:	4605      	mov	r5, r0
 800abfc:	4601      	mov	r1, r0
 800abfe:	4658      	mov	r0, fp
 800ac00:	f7f5 ff4c 	bl	8000a9c <__aeabi_fsub>
 800ac04:	4601      	mov	r1, r0
 800ac06:	4680      	mov	r8, r0
 800ac08:	4658      	mov	r0, fp
 800ac0a:	f7f5 ff47 	bl	8000a9c <__aeabi_fsub>
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 ff44 	bl	8000a9c <__aeabi_fsub>
 800ac14:	4605      	mov	r5, r0
 800ac16:	4937      	ldr	r1, [pc, #220]	; (800acf4 <__ieee754_rem_pio2f+0x2a8>)
 800ac18:	4650      	mov	r0, sl
 800ac1a:	f7f6 f849 	bl	8000cb0 <__aeabi_fmul>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 ff3c 	bl	8000a9c <__aeabi_fsub>
 800ac24:	4681      	mov	r9, r0
 800ac26:	e79a      	b.n	800ab5e <__ieee754_rem_pio2f+0x112>
 800ac28:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ac2c:	db05      	blt.n	800ac3a <__ieee754_rem_pio2f+0x1ee>
 800ac2e:	4601      	mov	r1, r0
 800ac30:	f7f5 ff34 	bl	8000a9c <__aeabi_fsub>
 800ac34:	6060      	str	r0, [r4, #4]
 800ac36:	6020      	str	r0, [r4, #0]
 800ac38:	e715      	b.n	800aa66 <__ieee754_rem_pio2f+0x1a>
 800ac3a:	15ee      	asrs	r6, r5, #23
 800ac3c:	3e86      	subs	r6, #134	; 0x86
 800ac3e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800ac42:	4628      	mov	r0, r5
 800ac44:	f7f6 fa10 	bl	8001068 <__aeabi_f2iz>
 800ac48:	f7f5 ffde 	bl	8000c08 <__aeabi_i2f>
 800ac4c:	4601      	mov	r1, r0
 800ac4e:	9003      	str	r0, [sp, #12]
 800ac50:	4628      	mov	r0, r5
 800ac52:	f7f5 ff23 	bl	8000a9c <__aeabi_fsub>
 800ac56:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ac5a:	f7f6 f829 	bl	8000cb0 <__aeabi_fmul>
 800ac5e:	4680      	mov	r8, r0
 800ac60:	f7f6 fa02 	bl	8001068 <__aeabi_f2iz>
 800ac64:	f7f5 ffd0 	bl	8000c08 <__aeabi_i2f>
 800ac68:	4601      	mov	r1, r0
 800ac6a:	9004      	str	r0, [sp, #16]
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	4640      	mov	r0, r8
 800ac70:	f7f5 ff14 	bl	8000a9c <__aeabi_fsub>
 800ac74:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800ac78:	f7f6 f81a 	bl	8000cb0 <__aeabi_fmul>
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	9005      	str	r0, [sp, #20]
 800ac80:	f7f6 f9aa 	bl	8000fd8 <__aeabi_fcmpeq>
 800ac84:	b1e8      	cbz	r0, 800acc2 <__ieee754_rem_pio2f+0x276>
 800ac86:	2100      	movs	r1, #0
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f7f6 f9a5 	bl	8000fd8 <__aeabi_fcmpeq>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	bf14      	ite	ne
 800ac92:	2301      	movne	r3, #1
 800ac94:	2302      	moveq	r3, #2
 800ac96:	4a18      	ldr	r2, [pc, #96]	; (800acf8 <__ieee754_rem_pio2f+0x2ac>)
 800ac98:	4621      	mov	r1, r4
 800ac9a:	9201      	str	r2, [sp, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	a803      	add	r0, sp, #12
 800aca0:	9200      	str	r2, [sp, #0]
 800aca2:	4632      	mov	r2, r6
 800aca4:	f000 f910 	bl	800aec8 <__kernel_rem_pio2f>
 800aca8:	2f00      	cmp	r7, #0
 800acaa:	4606      	mov	r6, r0
 800acac:	f6bf aef8 	bge.w	800aaa0 <__ieee754_rem_pio2f+0x54>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	e795      	b.n	800abee <__ieee754_rem_pio2f+0x1a2>
 800acc2:	2303      	movs	r3, #3
 800acc4:	e7e7      	b.n	800ac96 <__ieee754_rem_pio2f+0x24a>
 800acc6:	bf00      	nop
 800acc8:	3f490fd8 	.word	0x3f490fd8
 800accc:	4016cbe3 	.word	0x4016cbe3
 800acd0:	3fc90f80 	.word	0x3fc90f80
 800acd4:	3fc90fd0 	.word	0x3fc90fd0
 800acd8:	37354443 	.word	0x37354443
 800acdc:	37354400 	.word	0x37354400
 800ace0:	2e85a308 	.word	0x2e85a308
 800ace4:	43490f80 	.word	0x43490f80
 800ace8:	3f22f984 	.word	0x3f22f984
 800acec:	0800ba00 	.word	0x0800ba00
 800acf0:	2e85a300 	.word	0x2e85a300
 800acf4:	248d3132 	.word	0x248d3132
 800acf8:	0800ba80 	.word	0x0800ba80

0800acfc <__ieee754_sqrtf>:
 800acfc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ad00:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	4603      	mov	r3, r0
 800ad08:	4604      	mov	r4, r0
 800ad0a:	d309      	bcc.n	800ad20 <__ieee754_sqrtf+0x24>
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	f7f5 ffcf 	bl	8000cb0 <__aeabi_fmul>
 800ad12:	4601      	mov	r1, r0
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7f5 fec3 	bl	8000aa0 <__addsf3>
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	2a00      	cmp	r2, #0
 800ad22:	d0fb      	beq.n	800ad1c <__ieee754_sqrtf+0x20>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	da06      	bge.n	800ad36 <__ieee754_sqrtf+0x3a>
 800ad28:	4601      	mov	r1, r0
 800ad2a:	f7f5 feb7 	bl	8000a9c <__aeabi_fsub>
 800ad2e:	4601      	mov	r1, r0
 800ad30:	f7f6 f872 	bl	8000e18 <__aeabi_fdiv>
 800ad34:	e7f1      	b.n	800ad1a <__ieee754_sqrtf+0x1e>
 800ad36:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ad3a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800ad3e:	d204      	bcs.n	800ad4a <__ieee754_sqrtf+0x4e>
 800ad40:	2200      	movs	r2, #0
 800ad42:	0219      	lsls	r1, r3, #8
 800ad44:	d529      	bpl.n	800ad9a <__ieee754_sqrtf+0x9e>
 800ad46:	3a01      	subs	r2, #1
 800ad48:	1aa4      	subs	r4, r4, r2
 800ad4a:	3c7f      	subs	r4, #127	; 0x7f
 800ad4c:	07e2      	lsls	r2, r4, #31
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	ea4f 0164 	mov.w	r1, r4, asr #1
 800ad56:	4616      	mov	r6, r2
 800ad58:	f04f 0419 	mov.w	r4, #25
 800ad5c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800ad60:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad68:	bf48      	it	mi
 800ad6a:	005b      	lslmi	r3, r3, #1
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	1835      	adds	r5, r6, r0
 800ad70:	429d      	cmp	r5, r3
 800ad72:	bfde      	ittt	le
 800ad74:	182e      	addle	r6, r5, r0
 800ad76:	1b5b      	suble	r3, r3, r5
 800ad78:	1812      	addle	r2, r2, r0
 800ad7a:	3c01      	subs	r4, #1
 800ad7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad80:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ad84:	d1f3      	bne.n	800ad6e <__ieee754_sqrtf+0x72>
 800ad86:	b113      	cbz	r3, 800ad8e <__ieee754_sqrtf+0x92>
 800ad88:	3201      	adds	r2, #1
 800ad8a:	f022 0201 	bic.w	r2, r2, #1
 800ad8e:	1054      	asrs	r4, r2, #1
 800ad90:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800ad94:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800ad98:	e7c0      	b.n	800ad1c <__ieee754_sqrtf+0x20>
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	3201      	adds	r2, #1
 800ad9e:	e7d0      	b.n	800ad42 <__ieee754_sqrtf+0x46>

0800ada0 <__kernel_cosf>:
 800ada0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ada4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800ada8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800adac:	4606      	mov	r6, r0
 800adae:	460f      	mov	r7, r1
 800adb0:	da03      	bge.n	800adba <__kernel_cosf+0x1a>
 800adb2:	f7f6 f959 	bl	8001068 <__aeabi_f2iz>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d070      	beq.n	800ae9c <__kernel_cosf+0xfc>
 800adba:	4631      	mov	r1, r6
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7f5 ff77 	bl	8000cb0 <__aeabi_fmul>
 800adc2:	4605      	mov	r5, r0
 800adc4:	4937      	ldr	r1, [pc, #220]	; (800aea4 <__kernel_cosf+0x104>)
 800adc6:	f7f5 ff73 	bl	8000cb0 <__aeabi_fmul>
 800adca:	4937      	ldr	r1, [pc, #220]	; (800aea8 <__kernel_cosf+0x108>)
 800adcc:	f7f5 fe68 	bl	8000aa0 <__addsf3>
 800add0:	4629      	mov	r1, r5
 800add2:	f7f5 ff6d 	bl	8000cb0 <__aeabi_fmul>
 800add6:	4935      	ldr	r1, [pc, #212]	; (800aeac <__kernel_cosf+0x10c>)
 800add8:	f7f5 fe60 	bl	8000a9c <__aeabi_fsub>
 800addc:	4629      	mov	r1, r5
 800adde:	f7f5 ff67 	bl	8000cb0 <__aeabi_fmul>
 800ade2:	4933      	ldr	r1, [pc, #204]	; (800aeb0 <__kernel_cosf+0x110>)
 800ade4:	f7f5 fe5c 	bl	8000aa0 <__addsf3>
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 ff61 	bl	8000cb0 <__aeabi_fmul>
 800adee:	4931      	ldr	r1, [pc, #196]	; (800aeb4 <__kernel_cosf+0x114>)
 800adf0:	f7f5 fe54 	bl	8000a9c <__aeabi_fsub>
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7f5 ff5b 	bl	8000cb0 <__aeabi_fmul>
 800adfa:	492f      	ldr	r1, [pc, #188]	; (800aeb8 <__kernel_cosf+0x118>)
 800adfc:	f7f5 fe50 	bl	8000aa0 <__addsf3>
 800ae00:	4629      	mov	r1, r5
 800ae02:	f7f5 ff55 	bl	8000cb0 <__aeabi_fmul>
 800ae06:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <__kernel_cosf+0x11c>)
 800ae08:	4680      	mov	r8, r0
 800ae0a:	429c      	cmp	r4, r3
 800ae0c:	dc1d      	bgt.n	800ae4a <__kernel_cosf+0xaa>
 800ae0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ae12:	4628      	mov	r0, r5
 800ae14:	f7f5 ff4c 	bl	8000cb0 <__aeabi_fmul>
 800ae18:	4641      	mov	r1, r8
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f7f5 ff47 	bl	8000cb0 <__aeabi_fmul>
 800ae22:	4639      	mov	r1, r7
 800ae24:	4605      	mov	r5, r0
 800ae26:	4630      	mov	r0, r6
 800ae28:	f7f5 ff42 	bl	8000cb0 <__aeabi_fmul>
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f7f5 fe34 	bl	8000a9c <__aeabi_fsub>
 800ae34:	4601      	mov	r1, r0
 800ae36:	4620      	mov	r0, r4
 800ae38:	f7f5 fe30 	bl	8000a9c <__aeabi_fsub>
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ae42:	f7f5 fe2b 	bl	8000a9c <__aeabi_fsub>
 800ae46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <__kernel_cosf+0x120>)
 800ae4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ae50:	429c      	cmp	r4, r3
 800ae52:	bfcc      	ite	gt
 800ae54:	4c1b      	ldrgt	r4, [pc, #108]	; (800aec4 <__kernel_cosf+0x124>)
 800ae56:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	f7f5 fe1e 	bl	8000a9c <__aeabi_fsub>
 800ae60:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ae64:	4681      	mov	r9, r0
 800ae66:	4628      	mov	r0, r5
 800ae68:	f7f5 ff22 	bl	8000cb0 <__aeabi_fmul>
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	f7f5 fe15 	bl	8000a9c <__aeabi_fsub>
 800ae72:	4641      	mov	r1, r8
 800ae74:	4604      	mov	r4, r0
 800ae76:	4628      	mov	r0, r5
 800ae78:	f7f5 ff1a 	bl	8000cb0 <__aeabi_fmul>
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4605      	mov	r5, r0
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7f5 ff15 	bl	8000cb0 <__aeabi_fmul>
 800ae86:	4601      	mov	r1, r0
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f7f5 fe07 	bl	8000a9c <__aeabi_fsub>
 800ae8e:	4601      	mov	r1, r0
 800ae90:	4620      	mov	r0, r4
 800ae92:	f7f5 fe03 	bl	8000a9c <__aeabi_fsub>
 800ae96:	4601      	mov	r1, r0
 800ae98:	4648      	mov	r0, r9
 800ae9a:	e7d2      	b.n	800ae42 <__kernel_cosf+0xa2>
 800ae9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800aea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea4:	ad47d74e 	.word	0xad47d74e
 800aea8:	310f74f6 	.word	0x310f74f6
 800aeac:	3493f27c 	.word	0x3493f27c
 800aeb0:	37d00d01 	.word	0x37d00d01
 800aeb4:	3ab60b61 	.word	0x3ab60b61
 800aeb8:	3d2aaaab 	.word	0x3d2aaaab
 800aebc:	3e999999 	.word	0x3e999999
 800aec0:	3f480000 	.word	0x3f480000
 800aec4:	3e900000 	.word	0x3e900000

0800aec8 <__kernel_rem_pio2f>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	b0d9      	sub	sp, #356	; 0x164
 800aece:	9304      	str	r3, [sp, #16]
 800aed0:	9101      	str	r1, [sp, #4]
 800aed2:	4bb4      	ldr	r3, [pc, #720]	; (800b1a4 <__kernel_rem_pio2f+0x2dc>)
 800aed4:	9962      	ldr	r1, [sp, #392]	; 0x188
 800aed6:	1ed4      	subs	r4, r2, #3
 800aed8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aedc:	2500      	movs	r5, #0
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	9b04      	ldr	r3, [sp, #16]
 800aee2:	f04f 0b00 	mov.w	fp, #0
 800aee6:	3b01      	subs	r3, #1
 800aee8:	9303      	str	r3, [sp, #12]
 800aeea:	2308      	movs	r3, #8
 800aeec:	fb94 f4f3 	sdiv	r4, r4, r3
 800aef0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800aef4:	1c66      	adds	r6, r4, #1
 800aef6:	9b02      	ldr	r3, [sp, #8]
 800aef8:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800aefc:	9a03      	ldr	r2, [sp, #12]
 800aefe:	9005      	str	r0, [sp, #20]
 800af00:	eb03 0802 	add.w	r8, r3, r2
 800af04:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800af06:	1aa7      	subs	r7, r4, r2
 800af08:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800af0c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800af10:	4545      	cmp	r5, r8
 800af12:	dd10      	ble.n	800af36 <__kernel_rem_pio2f+0x6e>
 800af14:	2500      	movs	r5, #0
 800af16:	f04f 0b00 	mov.w	fp, #0
 800af1a:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800af1e:	9b02      	ldr	r3, [sp, #8]
 800af20:	429d      	cmp	r5, r3
 800af22:	dc28      	bgt.n	800af76 <__kernel_rem_pio2f+0xae>
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	46d9      	mov	r9, fp
 800af28:	eb03 0805 	add.w	r8, r3, r5
 800af2c:	ab1c      	add	r3, sp, #112	; 0x70
 800af2e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800af32:	2700      	movs	r7, #0
 800af34:	e018      	b.n	800af68 <__kernel_rem_pio2f+0xa0>
 800af36:	42ef      	cmn	r7, r5
 800af38:	d407      	bmi.n	800af4a <__kernel_rem_pio2f+0x82>
 800af3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800af3e:	f7f5 fe63 	bl	8000c08 <__aeabi_i2f>
 800af42:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800af46:	3501      	adds	r5, #1
 800af48:	e7e2      	b.n	800af10 <__kernel_rem_pio2f+0x48>
 800af4a:	4658      	mov	r0, fp
 800af4c:	e7f9      	b.n	800af42 <__kernel_rem_pio2f+0x7a>
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800af54:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800af58:	f7f5 feaa 	bl	8000cb0 <__aeabi_fmul>
 800af5c:	4601      	mov	r1, r0
 800af5e:	4648      	mov	r0, r9
 800af60:	f7f5 fd9e 	bl	8000aa0 <__addsf3>
 800af64:	4681      	mov	r9, r0
 800af66:	3701      	adds	r7, #1
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	429f      	cmp	r7, r3
 800af6c:	ddef      	ble.n	800af4e <__kernel_rem_pio2f+0x86>
 800af6e:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800af72:	3501      	adds	r5, #1
 800af74:	e7d3      	b.n	800af1e <__kernel_rem_pio2f+0x56>
 800af76:	9b02      	ldr	r3, [sp, #8]
 800af78:	aa08      	add	r2, sp, #32
 800af7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800af82:	9f02      	ldr	r7, [sp, #8]
 800af84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af88:	9306      	str	r3, [sp, #24]
 800af8a:	46ba      	mov	sl, r7
 800af8c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800af90:	ab58      	add	r3, sp, #352	; 0x160
 800af92:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800af96:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800af9a:	ad07      	add	r5, sp, #28
 800af9c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800afa0:	f1ba 0f00 	cmp.w	sl, #0
 800afa4:	dc57      	bgt.n	800b056 <__kernel_rem_pio2f+0x18e>
 800afa6:	4631      	mov	r1, r6
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fba7 	bl	800b6fc <scalbnf>
 800afae:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800afb2:	4604      	mov	r4, r0
 800afb4:	f7f5 fe7c 	bl	8000cb0 <__aeabi_fmul>
 800afb8:	f7ff fbb8 	bl	800a72c <floorf>
 800afbc:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800afc0:	f7f5 fe76 	bl	8000cb0 <__aeabi_fmul>
 800afc4:	4601      	mov	r1, r0
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7f5 fd68 	bl	8000a9c <__aeabi_fsub>
 800afcc:	4604      	mov	r4, r0
 800afce:	f7f6 f84b 	bl	8001068 <__aeabi_f2iz>
 800afd2:	4680      	mov	r8, r0
 800afd4:	f7f5 fe18 	bl	8000c08 <__aeabi_i2f>
 800afd8:	4601      	mov	r1, r0
 800afda:	4620      	mov	r0, r4
 800afdc:	f7f5 fd5e 	bl	8000a9c <__aeabi_fsub>
 800afe0:	2e00      	cmp	r6, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	dd55      	ble.n	800b092 <__kernel_rem_pio2f+0x1ca>
 800afe6:	1e7b      	subs	r3, r7, #1
 800afe8:	aa08      	add	r2, sp, #32
 800afea:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800afee:	f1c6 0208 	rsb	r2, r6, #8
 800aff2:	fa45 f002 	asr.w	r0, r5, r2
 800aff6:	4480      	add	r8, r0
 800aff8:	4090      	lsls	r0, r2
 800affa:	1a2d      	subs	r5, r5, r0
 800affc:	aa08      	add	r2, sp, #32
 800affe:	f1c6 0007 	rsb	r0, r6, #7
 800b002:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b006:	4105      	asrs	r5, r0
 800b008:	2d00      	cmp	r5, #0
 800b00a:	dd50      	ble.n	800b0ae <__kernel_rem_pio2f+0x1e6>
 800b00c:	2200      	movs	r2, #0
 800b00e:	4691      	mov	r9, r2
 800b010:	f108 0801 	add.w	r8, r8, #1
 800b014:	4297      	cmp	r7, r2
 800b016:	f300 8085 	bgt.w	800b124 <__kernel_rem_pio2f+0x25c>
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	dd05      	ble.n	800b02a <__kernel_rem_pio2f+0x162>
 800b01e:	2e01      	cmp	r6, #1
 800b020:	f000 8097 	beq.w	800b152 <__kernel_rem_pio2f+0x28a>
 800b024:	2e02      	cmp	r6, #2
 800b026:	f000 809e 	beq.w	800b166 <__kernel_rem_pio2f+0x29e>
 800b02a:	2d02      	cmp	r5, #2
 800b02c:	d13f      	bne.n	800b0ae <__kernel_rem_pio2f+0x1e6>
 800b02e:	4621      	mov	r1, r4
 800b030:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b034:	f7f5 fd32 	bl	8000a9c <__aeabi_fsub>
 800b038:	4604      	mov	r4, r0
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d036      	beq.n	800b0ae <__kernel_rem_pio2f+0x1e6>
 800b040:	4631      	mov	r1, r6
 800b042:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b046:	f000 fb59 	bl	800b6fc <scalbnf>
 800b04a:	4601      	mov	r1, r0
 800b04c:	4620      	mov	r0, r4
 800b04e:	f7f5 fd25 	bl	8000a9c <__aeabi_fsub>
 800b052:	4604      	mov	r4, r0
 800b054:	e02b      	b.n	800b0ae <__kernel_rem_pio2f+0x1e6>
 800b056:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7f5 fe28 	bl	8000cb0 <__aeabi_fmul>
 800b060:	f7f6 f802 	bl	8001068 <__aeabi_f2iz>
 800b064:	f7f5 fdd0 	bl	8000c08 <__aeabi_i2f>
 800b068:	4641      	mov	r1, r8
 800b06a:	4683      	mov	fp, r0
 800b06c:	f7f5 fe20 	bl	8000cb0 <__aeabi_fmul>
 800b070:	4601      	mov	r1, r0
 800b072:	4620      	mov	r0, r4
 800b074:	f7f5 fd12 	bl	8000a9c <__aeabi_fsub>
 800b078:	f7f5 fff6 	bl	8001068 <__aeabi_f2iz>
 800b07c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b080:	f845 0f04 	str.w	r0, [r5, #4]!
 800b084:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b088:	4658      	mov	r0, fp
 800b08a:	f7f5 fd09 	bl	8000aa0 <__addsf3>
 800b08e:	4604      	mov	r4, r0
 800b090:	e786      	b.n	800afa0 <__kernel_rem_pio2f+0xd8>
 800b092:	d105      	bne.n	800b0a0 <__kernel_rem_pio2f+0x1d8>
 800b094:	1e7b      	subs	r3, r7, #1
 800b096:	aa08      	add	r2, sp, #32
 800b098:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b09c:	122d      	asrs	r5, r5, #8
 800b09e:	e7b3      	b.n	800b008 <__kernel_rem_pio2f+0x140>
 800b0a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b0a4:	f7f5 ffb6 	bl	8001014 <__aeabi_fcmpge>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d139      	bne.n	800b120 <__kernel_rem_pio2f+0x258>
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f7f5 ff91 	bl	8000fd8 <__aeabi_fcmpeq>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f000 8098 	beq.w	800b1ec <__kernel_rem_pio2f+0x324>
 800b0bc:	1e7c      	subs	r4, r7, #1
 800b0be:	4623      	mov	r3, r4
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	9902      	ldr	r1, [sp, #8]
 800b0c4:	428b      	cmp	r3, r1
 800b0c6:	da55      	bge.n	800b174 <__kernel_rem_pio2f+0x2ac>
 800b0c8:	2a00      	cmp	r2, #0
 800b0ca:	d16e      	bne.n	800b1aa <__kernel_rem_pio2f+0x2e2>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	f06f 0103 	mvn.w	r1, #3
 800b0d2:	fb01 f203 	mul.w	r2, r1, r3
 800b0d6:	9807      	ldr	r0, [sp, #28]
 800b0d8:	5882      	ldr	r2, [r0, r2]
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d050      	beq.n	800b180 <__kernel_rem_pio2f+0x2b8>
 800b0de:	f06f 0803 	mvn.w	r8, #3
 800b0e2:	9a04      	ldr	r2, [sp, #16]
 800b0e4:	1c7d      	adds	r5, r7, #1
 800b0e6:	19d4      	adds	r4, r2, r7
 800b0e8:	aa58      	add	r2, sp, #352	; 0x160
 800b0ea:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b0ee:	3cf4      	subs	r4, #244	; 0xf4
 800b0f0:	441f      	add	r7, r3
 800b0f2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b0f6:	42bd      	cmp	r5, r7
 800b0f8:	f73f af47 	bgt.w	800af8a <__kernel_rem_pio2f+0xc2>
 800b0fc:	9b06      	ldr	r3, [sp, #24]
 800b0fe:	f04f 0a00 	mov.w	sl, #0
 800b102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b106:	f7f5 fd7f 	bl	8000c08 <__aeabi_i2f>
 800b10a:	f04f 0b00 	mov.w	fp, #0
 800b10e:	f844 0f04 	str.w	r0, [r4, #4]!
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	459a      	cmp	sl, r3
 800b116:	dd35      	ble.n	800b184 <__kernel_rem_pio2f+0x2bc>
 800b118:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800b11c:	3501      	adds	r5, #1
 800b11e:	e7ea      	b.n	800b0f6 <__kernel_rem_pio2f+0x22e>
 800b120:	2502      	movs	r5, #2
 800b122:	e773      	b.n	800b00c <__kernel_rem_pio2f+0x144>
 800b124:	ab08      	add	r3, sp, #32
 800b126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12a:	f1b9 0f00 	cmp.w	r9, #0
 800b12e:	d109      	bne.n	800b144 <__kernel_rem_pio2f+0x27c>
 800b130:	b12b      	cbz	r3, 800b13e <__kernel_rem_pio2f+0x276>
 800b132:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b136:	a908      	add	r1, sp, #32
 800b138:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b13c:	2301      	movs	r3, #1
 800b13e:	3201      	adds	r2, #1
 800b140:	4699      	mov	r9, r3
 800b142:	e767      	b.n	800b014 <__kernel_rem_pio2f+0x14c>
 800b144:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b148:	a908      	add	r1, sp, #32
 800b14a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b14e:	464b      	mov	r3, r9
 800b150:	e7f5      	b.n	800b13e <__kernel_rem_pio2f+0x276>
 800b152:	1e7a      	subs	r2, r7, #1
 800b154:	ab08      	add	r3, sp, #32
 800b156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15e:	a908      	add	r1, sp, #32
 800b160:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b164:	e761      	b.n	800b02a <__kernel_rem_pio2f+0x162>
 800b166:	1e7a      	subs	r2, r7, #1
 800b168:	ab08      	add	r3, sp, #32
 800b16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b172:	e7f4      	b.n	800b15e <__kernel_rem_pio2f+0x296>
 800b174:	a908      	add	r1, sp, #32
 800b176:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	430a      	orrs	r2, r1
 800b17e:	e7a0      	b.n	800b0c2 <__kernel_rem_pio2f+0x1fa>
 800b180:	3301      	adds	r3, #1
 800b182:	e7a6      	b.n	800b0d2 <__kernel_rem_pio2f+0x20a>
 800b184:	fb08 f30a 	mul.w	r3, r8, sl
 800b188:	9a05      	ldr	r2, [sp, #20]
 800b18a:	58e0      	ldr	r0, [r4, r3]
 800b18c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800b190:	f7f5 fd8e 	bl	8000cb0 <__aeabi_fmul>
 800b194:	4601      	mov	r1, r0
 800b196:	4658      	mov	r0, fp
 800b198:	f7f5 fc82 	bl	8000aa0 <__addsf3>
 800b19c:	f10a 0a01 	add.w	sl, sl, #1
 800b1a0:	4683      	mov	fp, r0
 800b1a2:	e7b6      	b.n	800b112 <__kernel_rem_pio2f+0x24a>
 800b1a4:	0800bdc4 	.word	0x0800bdc4
 800b1a8:	3c01      	subs	r4, #1
 800b1aa:	ab08      	add	r3, sp, #32
 800b1ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b1b0:	3e08      	subs	r6, #8
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0f8      	beq.n	800b1a8 <__kernel_rem_pio2f+0x2e0>
 800b1b6:	4631      	mov	r1, r6
 800b1b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b1bc:	f000 fa9e 	bl	800b6fc <scalbnf>
 800b1c0:	46a1      	mov	r9, r4
 800b1c2:	4682      	mov	sl, r0
 800b1c4:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800b1c8:	ae44      	add	r6, sp, #272	; 0x110
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	da3f      	bge.n	800b250 <__kernel_rem_pio2f+0x388>
 800b1d0:	2700      	movs	r7, #0
 800b1d2:	f04f 0b00 	mov.w	fp, #0
 800b1d6:	4b82      	ldr	r3, [pc, #520]	; (800b3e0 <__kernel_rem_pio2f+0x518>)
 800b1d8:	aa30      	add	r2, sp, #192	; 0xc0
 800b1da:	ebb4 0a07 	subs.w	sl, r4, r7
 800b1de:	d462      	bmi.n	800b2a6 <__kernel_rem_pio2f+0x3de>
 800b1e0:	a944      	add	r1, sp, #272	; 0x110
 800b1e2:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800b1e6:	46d9      	mov	r9, fp
 800b1e8:	2600      	movs	r6, #0
 800b1ea:	e053      	b.n	800b294 <__kernel_rem_pio2f+0x3cc>
 800b1ec:	4271      	negs	r1, r6
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 fa84 	bl	800b6fc <scalbnf>
 800b1f4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	f7f5 ff0b 	bl	8001014 <__aeabi_fcmpge>
 800b1fe:	b1f8      	cbz	r0, 800b240 <__kernel_rem_pio2f+0x378>
 800b200:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b204:	4620      	mov	r0, r4
 800b206:	f7f5 fd53 	bl	8000cb0 <__aeabi_fmul>
 800b20a:	f7f5 ff2d 	bl	8001068 <__aeabi_f2iz>
 800b20e:	f7f5 fcfb 	bl	8000c08 <__aeabi_i2f>
 800b212:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b216:	4681      	mov	r9, r0
 800b218:	f7f5 fd4a 	bl	8000cb0 <__aeabi_fmul>
 800b21c:	4601      	mov	r1, r0
 800b21e:	4620      	mov	r0, r4
 800b220:	f7f5 fc3c 	bl	8000a9c <__aeabi_fsub>
 800b224:	f7f5 ff20 	bl	8001068 <__aeabi_f2iz>
 800b228:	ab08      	add	r3, sp, #32
 800b22a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b22e:	4648      	mov	r0, r9
 800b230:	f7f5 ff1a 	bl	8001068 <__aeabi_f2iz>
 800b234:	1c7c      	adds	r4, r7, #1
 800b236:	ab08      	add	r3, sp, #32
 800b238:	3608      	adds	r6, #8
 800b23a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b23e:	e7ba      	b.n	800b1b6 <__kernel_rem_pio2f+0x2ee>
 800b240:	4620      	mov	r0, r4
 800b242:	f7f5 ff11 	bl	8001068 <__aeabi_f2iz>
 800b246:	ab08      	add	r3, sp, #32
 800b248:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b24c:	463c      	mov	r4, r7
 800b24e:	e7b2      	b.n	800b1b6 <__kernel_rem_pio2f+0x2ee>
 800b250:	ab08      	add	r3, sp, #32
 800b252:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800b256:	f7f5 fcd7 	bl	8000c08 <__aeabi_i2f>
 800b25a:	4651      	mov	r1, sl
 800b25c:	f7f5 fd28 	bl	8000cb0 <__aeabi_fmul>
 800b260:	4639      	mov	r1, r7
 800b262:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800b266:	4650      	mov	r0, sl
 800b268:	f7f5 fd22 	bl	8000cb0 <__aeabi_fmul>
 800b26c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b270:	4682      	mov	sl, r0
 800b272:	e7aa      	b.n	800b1ca <__kernel_rem_pio2f+0x302>
 800b274:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b278:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800b27c:	9204      	str	r2, [sp, #16]
 800b27e:	9303      	str	r3, [sp, #12]
 800b280:	f7f5 fd16 	bl	8000cb0 <__aeabi_fmul>
 800b284:	4601      	mov	r1, r0
 800b286:	4648      	mov	r0, r9
 800b288:	f7f5 fc0a 	bl	8000aa0 <__addsf3>
 800b28c:	4681      	mov	r9, r0
 800b28e:	9a04      	ldr	r2, [sp, #16]
 800b290:	9b03      	ldr	r3, [sp, #12]
 800b292:	3601      	adds	r6, #1
 800b294:	9902      	ldr	r1, [sp, #8]
 800b296:	428e      	cmp	r6, r1
 800b298:	dc01      	bgt.n	800b29e <__kernel_rem_pio2f+0x3d6>
 800b29a:	42be      	cmp	r6, r7
 800b29c:	ddea      	ble.n	800b274 <__kernel_rem_pio2f+0x3ac>
 800b29e:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800b2a2:	3701      	adds	r7, #1
 800b2a4:	e799      	b.n	800b1da <__kernel_rem_pio2f+0x312>
 800b2a6:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d826      	bhi.n	800b2fa <__kernel_rem_pio2f+0x432>
 800b2ac:	e8df f003 	tbb	[pc, r3]
 800b2b0:	2a02021c 	.word	0x2a02021c
 800b2b4:	4626      	mov	r6, r4
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	af30      	add	r7, sp, #192	; 0xc0
 800b2ba:	2e00      	cmp	r6, #0
 800b2bc:	da40      	bge.n	800b340 <__kernel_rem_pio2f+0x478>
 800b2be:	2d00      	cmp	r5, #0
 800b2c0:	d044      	beq.n	800b34c <__kernel_rem_pio2f+0x484>
 800b2c2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800b2c6:	9a01      	ldr	r2, [sp, #4]
 800b2c8:	af58      	add	r7, sp, #352	; 0x160
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	6013      	str	r3, [r2, #0]
 800b2ce:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800b2d2:	f7f5 fbe3 	bl	8000a9c <__aeabi_fsub>
 800b2d6:	2601      	movs	r6, #1
 800b2d8:	42b4      	cmp	r4, r6
 800b2da:	da39      	bge.n	800b350 <__kernel_rem_pio2f+0x488>
 800b2dc:	b10d      	cbz	r5, 800b2e2 <__kernel_rem_pio2f+0x41a>
 800b2de:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	6058      	str	r0, [r3, #4]
 800b2e6:	e008      	b.n	800b2fa <__kernel_rem_pio2f+0x432>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	ae30      	add	r6, sp, #192	; 0xc0
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	da21      	bge.n	800b334 <__kernel_rem_pio2f+0x46c>
 800b2f0:	b10d      	cbz	r5, 800b2f6 <__kernel_rem_pio2f+0x42e>
 800b2f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	6018      	str	r0, [r3, #0]
 800b2fa:	f008 0007 	and.w	r0, r8, #7
 800b2fe:	b059      	add	sp, #356	; 0x164
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800b308:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800b30c:	4637      	mov	r7, r6
 800b30e:	46a1      	mov	r9, r4
 800b310:	f1b9 0f00 	cmp.w	r9, #0
 800b314:	dc22      	bgt.n	800b35c <__kernel_rem_pio2f+0x494>
 800b316:	4627      	mov	r7, r4
 800b318:	2f01      	cmp	r7, #1
 800b31a:	dc38      	bgt.n	800b38e <__kernel_rem_pio2f+0x4c6>
 800b31c:	2000      	movs	r0, #0
 800b31e:	2c01      	cmp	r4, #1
 800b320:	dc4c      	bgt.n	800b3bc <__kernel_rem_pio2f+0x4f4>
 800b322:	2d00      	cmp	r5, #0
 800b324:	d150      	bne.n	800b3c8 <__kernel_rem_pio2f+0x500>
 800b326:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b32e:	6053      	str	r3, [r2, #4]
 800b330:	6090      	str	r0, [r2, #8]
 800b332:	e7e2      	b.n	800b2fa <__kernel_rem_pio2f+0x432>
 800b334:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800b338:	f7f5 fbb2 	bl	8000aa0 <__addsf3>
 800b33c:	3c01      	subs	r4, #1
 800b33e:	e7d5      	b.n	800b2ec <__kernel_rem_pio2f+0x424>
 800b340:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800b344:	f7f5 fbac 	bl	8000aa0 <__addsf3>
 800b348:	3e01      	subs	r6, #1
 800b34a:	e7b6      	b.n	800b2ba <__kernel_rem_pio2f+0x3f2>
 800b34c:	4603      	mov	r3, r0
 800b34e:	e7ba      	b.n	800b2c6 <__kernel_rem_pio2f+0x3fe>
 800b350:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800b354:	f7f5 fba4 	bl	8000aa0 <__addsf3>
 800b358:	3601      	adds	r6, #1
 800b35a:	e7bd      	b.n	800b2d8 <__kernel_rem_pio2f+0x410>
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	9303      	str	r3, [sp, #12]
 800b368:	9202      	str	r2, [sp, #8]
 800b36a:	f7f5 fb99 	bl	8000aa0 <__addsf3>
 800b36e:	9a02      	ldr	r2, [sp, #8]
 800b370:	4601      	mov	r1, r0
 800b372:	4683      	mov	fp, r0
 800b374:	4610      	mov	r0, r2
 800b376:	f7f5 fb91 	bl	8000a9c <__aeabi_fsub>
 800b37a:	9b03      	ldr	r3, [sp, #12]
 800b37c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b380:	4619      	mov	r1, r3
 800b382:	f7f5 fb8d 	bl	8000aa0 <__addsf3>
 800b386:	6038      	str	r0, [r7, #0]
 800b388:	f847 bd04 	str.w	fp, [r7, #-4]!
 800b38c:	e7c0      	b.n	800b310 <__kernel_rem_pio2f+0x448>
 800b38e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b392:	f8d6 b000 	ldr.w	fp, [r6]
 800b396:	4618      	mov	r0, r3
 800b398:	4659      	mov	r1, fp
 800b39a:	9302      	str	r3, [sp, #8]
 800b39c:	f7f5 fb80 	bl	8000aa0 <__addsf3>
 800b3a0:	9b02      	ldr	r3, [sp, #8]
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	4681      	mov	r9, r0
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f5 fb78 	bl	8000a9c <__aeabi_fsub>
 800b3ac:	4659      	mov	r1, fp
 800b3ae:	f7f5 fb77 	bl	8000aa0 <__addsf3>
 800b3b2:	3f01      	subs	r7, #1
 800b3b4:	6030      	str	r0, [r6, #0]
 800b3b6:	f846 9d04 	str.w	r9, [r6, #-4]!
 800b3ba:	e7ad      	b.n	800b318 <__kernel_rem_pio2f+0x450>
 800b3bc:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800b3c0:	f7f5 fb6e 	bl	8000aa0 <__addsf3>
 800b3c4:	3c01      	subs	r4, #1
 800b3c6:	e7aa      	b.n	800b31e <__kernel_rem_pio2f+0x456>
 800b3c8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b3ca:	9a01      	ldr	r2, [sp, #4]
 800b3cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800b3d4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b3d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3dc:	6053      	str	r3, [r2, #4]
 800b3de:	e7a7      	b.n	800b330 <__kernel_rem_pio2f+0x468>
 800b3e0:	0800bd98 	.word	0x0800bd98

0800b3e4 <__kernel_sinf>:
 800b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b3ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	4691      	mov	r9, r2
 800b3f6:	da03      	bge.n	800b400 <__kernel_sinf+0x1c>
 800b3f8:	f7f5 fe36 	bl	8001068 <__aeabi_f2iz>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d035      	beq.n	800b46c <__kernel_sinf+0x88>
 800b400:	4621      	mov	r1, r4
 800b402:	4620      	mov	r0, r4
 800b404:	f7f5 fc54 	bl	8000cb0 <__aeabi_fmul>
 800b408:	4605      	mov	r5, r0
 800b40a:	4601      	mov	r1, r0
 800b40c:	4620      	mov	r0, r4
 800b40e:	f7f5 fc4f 	bl	8000cb0 <__aeabi_fmul>
 800b412:	4929      	ldr	r1, [pc, #164]	; (800b4b8 <__kernel_sinf+0xd4>)
 800b414:	4606      	mov	r6, r0
 800b416:	4628      	mov	r0, r5
 800b418:	f7f5 fc4a 	bl	8000cb0 <__aeabi_fmul>
 800b41c:	4927      	ldr	r1, [pc, #156]	; (800b4bc <__kernel_sinf+0xd8>)
 800b41e:	f7f5 fb3d 	bl	8000a9c <__aeabi_fsub>
 800b422:	4629      	mov	r1, r5
 800b424:	f7f5 fc44 	bl	8000cb0 <__aeabi_fmul>
 800b428:	4925      	ldr	r1, [pc, #148]	; (800b4c0 <__kernel_sinf+0xdc>)
 800b42a:	f7f5 fb39 	bl	8000aa0 <__addsf3>
 800b42e:	4629      	mov	r1, r5
 800b430:	f7f5 fc3e 	bl	8000cb0 <__aeabi_fmul>
 800b434:	4923      	ldr	r1, [pc, #140]	; (800b4c4 <__kernel_sinf+0xe0>)
 800b436:	f7f5 fb31 	bl	8000a9c <__aeabi_fsub>
 800b43a:	4629      	mov	r1, r5
 800b43c:	f7f5 fc38 	bl	8000cb0 <__aeabi_fmul>
 800b440:	4921      	ldr	r1, [pc, #132]	; (800b4c8 <__kernel_sinf+0xe4>)
 800b442:	f7f5 fb2d 	bl	8000aa0 <__addsf3>
 800b446:	4680      	mov	r8, r0
 800b448:	f1b9 0f00 	cmp.w	r9, #0
 800b44c:	d111      	bne.n	800b472 <__kernel_sinf+0x8e>
 800b44e:	4601      	mov	r1, r0
 800b450:	4628      	mov	r0, r5
 800b452:	f7f5 fc2d 	bl	8000cb0 <__aeabi_fmul>
 800b456:	491d      	ldr	r1, [pc, #116]	; (800b4cc <__kernel_sinf+0xe8>)
 800b458:	f7f5 fb20 	bl	8000a9c <__aeabi_fsub>
 800b45c:	4631      	mov	r1, r6
 800b45e:	f7f5 fc27 	bl	8000cb0 <__aeabi_fmul>
 800b462:	4601      	mov	r1, r0
 800b464:	4620      	mov	r0, r4
 800b466:	f7f5 fb1b 	bl	8000aa0 <__addsf3>
 800b46a:	4604      	mov	r4, r0
 800b46c:	4620      	mov	r0, r4
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b476:	4638      	mov	r0, r7
 800b478:	f7f5 fc1a 	bl	8000cb0 <__aeabi_fmul>
 800b47c:	4641      	mov	r1, r8
 800b47e:	4681      	mov	r9, r0
 800b480:	4630      	mov	r0, r6
 800b482:	f7f5 fc15 	bl	8000cb0 <__aeabi_fmul>
 800b486:	4601      	mov	r1, r0
 800b488:	4648      	mov	r0, r9
 800b48a:	f7f5 fb07 	bl	8000a9c <__aeabi_fsub>
 800b48e:	4629      	mov	r1, r5
 800b490:	f7f5 fc0e 	bl	8000cb0 <__aeabi_fmul>
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 fb01 	bl	8000a9c <__aeabi_fsub>
 800b49a:	490c      	ldr	r1, [pc, #48]	; (800b4cc <__kernel_sinf+0xe8>)
 800b49c:	4605      	mov	r5, r0
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7f5 fc06 	bl	8000cb0 <__aeabi_fmul>
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f7f5 fafa 	bl	8000aa0 <__addsf3>
 800b4ac:	4601      	mov	r1, r0
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7f5 faf4 	bl	8000a9c <__aeabi_fsub>
 800b4b4:	e7d9      	b.n	800b46a <__kernel_sinf+0x86>
 800b4b6:	bf00      	nop
 800b4b8:	2f2ec9d3 	.word	0x2f2ec9d3
 800b4bc:	32d72f34 	.word	0x32d72f34
 800b4c0:	3638ef1b 	.word	0x3638ef1b
 800b4c4:	39500d01 	.word	0x39500d01
 800b4c8:	3c088889 	.word	0x3c088889
 800b4cc:	3e2aaaab 	.word	0x3e2aaaab

0800b4d0 <matherr>:
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	4770      	bx	lr

0800b4d4 <atanf>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b4dc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	4607      	mov	r7, r0
 800b4e4:	db0e      	blt.n	800b504 <atanf+0x30>
 800b4e6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b4ea:	dd04      	ble.n	800b4f6 <atanf+0x22>
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	f7f5 fad7 	bl	8000aa0 <__addsf3>
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	e003      	b.n	800b4fe <atanf+0x2a>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f300 80d2 	bgt.w	800b6a0 <atanf+0x1cc>
 800b4fc:	4c69      	ldr	r4, [pc, #420]	; (800b6a4 <atanf+0x1d0>)
 800b4fe:	4620      	mov	r0, r4
 800b500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b504:	4b68      	ldr	r3, [pc, #416]	; (800b6a8 <atanf+0x1d4>)
 800b506:	429d      	cmp	r5, r3
 800b508:	dc0e      	bgt.n	800b528 <atanf+0x54>
 800b50a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b50e:	da08      	bge.n	800b522 <atanf+0x4e>
 800b510:	4966      	ldr	r1, [pc, #408]	; (800b6ac <atanf+0x1d8>)
 800b512:	f7f5 fac5 	bl	8000aa0 <__addsf3>
 800b516:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b51a:	f7f5 fd85 	bl	8001028 <__aeabi_fcmpgt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1ed      	bne.n	800b4fe <atanf+0x2a>
 800b522:	f04f 36ff 	mov.w	r6, #4294967295
 800b526:	e01c      	b.n	800b562 <atanf+0x8e>
 800b528:	f000 f8e4 	bl	800b6f4 <fabsf>
 800b52c:	4b60      	ldr	r3, [pc, #384]	; (800b6b0 <atanf+0x1dc>)
 800b52e:	4604      	mov	r4, r0
 800b530:	429d      	cmp	r5, r3
 800b532:	dc7c      	bgt.n	800b62e <atanf+0x15a>
 800b534:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b538:	429d      	cmp	r5, r3
 800b53a:	dc67      	bgt.n	800b60c <atanf+0x138>
 800b53c:	4601      	mov	r1, r0
 800b53e:	f7f5 faaf 	bl	8000aa0 <__addsf3>
 800b542:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b546:	f7f5 faa9 	bl	8000a9c <__aeabi_fsub>
 800b54a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b54e:	4605      	mov	r5, r0
 800b550:	4620      	mov	r0, r4
 800b552:	f7f5 faa5 	bl	8000aa0 <__addsf3>
 800b556:	4601      	mov	r1, r0
 800b558:	4628      	mov	r0, r5
 800b55a:	f7f5 fc5d 	bl	8000e18 <__aeabi_fdiv>
 800b55e:	2600      	movs	r6, #0
 800b560:	4604      	mov	r4, r0
 800b562:	4621      	mov	r1, r4
 800b564:	4620      	mov	r0, r4
 800b566:	f7f5 fba3 	bl	8000cb0 <__aeabi_fmul>
 800b56a:	4601      	mov	r1, r0
 800b56c:	4680      	mov	r8, r0
 800b56e:	f7f5 fb9f 	bl	8000cb0 <__aeabi_fmul>
 800b572:	4605      	mov	r5, r0
 800b574:	494f      	ldr	r1, [pc, #316]	; (800b6b4 <atanf+0x1e0>)
 800b576:	f7f5 fb9b 	bl	8000cb0 <__aeabi_fmul>
 800b57a:	494f      	ldr	r1, [pc, #316]	; (800b6b8 <atanf+0x1e4>)
 800b57c:	f7f5 fa90 	bl	8000aa0 <__addsf3>
 800b580:	4629      	mov	r1, r5
 800b582:	f7f5 fb95 	bl	8000cb0 <__aeabi_fmul>
 800b586:	494d      	ldr	r1, [pc, #308]	; (800b6bc <atanf+0x1e8>)
 800b588:	f7f5 fa8a 	bl	8000aa0 <__addsf3>
 800b58c:	4629      	mov	r1, r5
 800b58e:	f7f5 fb8f 	bl	8000cb0 <__aeabi_fmul>
 800b592:	494b      	ldr	r1, [pc, #300]	; (800b6c0 <atanf+0x1ec>)
 800b594:	f7f5 fa84 	bl	8000aa0 <__addsf3>
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f5 fb89 	bl	8000cb0 <__aeabi_fmul>
 800b59e:	4949      	ldr	r1, [pc, #292]	; (800b6c4 <atanf+0x1f0>)
 800b5a0:	f7f5 fa7e 	bl	8000aa0 <__addsf3>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f5 fb83 	bl	8000cb0 <__aeabi_fmul>
 800b5aa:	4947      	ldr	r1, [pc, #284]	; (800b6c8 <atanf+0x1f4>)
 800b5ac:	f7f5 fa78 	bl	8000aa0 <__addsf3>
 800b5b0:	4641      	mov	r1, r8
 800b5b2:	f7f5 fb7d 	bl	8000cb0 <__aeabi_fmul>
 800b5b6:	4945      	ldr	r1, [pc, #276]	; (800b6cc <atanf+0x1f8>)
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f7f5 fb78 	bl	8000cb0 <__aeabi_fmul>
 800b5c0:	4943      	ldr	r1, [pc, #268]	; (800b6d0 <atanf+0x1fc>)
 800b5c2:	f7f5 fa6b 	bl	8000a9c <__aeabi_fsub>
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	f7f5 fb72 	bl	8000cb0 <__aeabi_fmul>
 800b5cc:	4941      	ldr	r1, [pc, #260]	; (800b6d4 <atanf+0x200>)
 800b5ce:	f7f5 fa65 	bl	8000a9c <__aeabi_fsub>
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	f7f5 fb6c 	bl	8000cb0 <__aeabi_fmul>
 800b5d8:	493f      	ldr	r1, [pc, #252]	; (800b6d8 <atanf+0x204>)
 800b5da:	f7f5 fa5f 	bl	8000a9c <__aeabi_fsub>
 800b5de:	4629      	mov	r1, r5
 800b5e0:	f7f5 fb66 	bl	8000cb0 <__aeabi_fmul>
 800b5e4:	493d      	ldr	r1, [pc, #244]	; (800b6dc <atanf+0x208>)
 800b5e6:	f7f5 fa59 	bl	8000a9c <__aeabi_fsub>
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f5 fb60 	bl	8000cb0 <__aeabi_fmul>
 800b5f0:	1c73      	adds	r3, r6, #1
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	d139      	bne.n	800b66c <atanf+0x198>
 800b5f8:	f7f5 fa52 	bl	8000aa0 <__addsf3>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	f7f5 fb57 	bl	8000cb0 <__aeabi_fmul>
 800b602:	4601      	mov	r1, r0
 800b604:	4620      	mov	r0, r4
 800b606:	f7f5 fa49 	bl	8000a9c <__aeabi_fsub>
 800b60a:	e772      	b.n	800b4f2 <atanf+0x1e>
 800b60c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b610:	f7f5 fa44 	bl	8000a9c <__aeabi_fsub>
 800b614:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b618:	4605      	mov	r5, r0
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7f5 fa40 	bl	8000aa0 <__addsf3>
 800b620:	4601      	mov	r1, r0
 800b622:	4628      	mov	r0, r5
 800b624:	f7f5 fbf8 	bl	8000e18 <__aeabi_fdiv>
 800b628:	2601      	movs	r6, #1
 800b62a:	4604      	mov	r4, r0
 800b62c:	e799      	b.n	800b562 <atanf+0x8e>
 800b62e:	4b2c      	ldr	r3, [pc, #176]	; (800b6e0 <atanf+0x20c>)
 800b630:	429d      	cmp	r5, r3
 800b632:	dc14      	bgt.n	800b65e <atanf+0x18a>
 800b634:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b638:	f7f5 fa30 	bl	8000a9c <__aeabi_fsub>
 800b63c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b640:	4605      	mov	r5, r0
 800b642:	4620      	mov	r0, r4
 800b644:	f7f5 fb34 	bl	8000cb0 <__aeabi_fmul>
 800b648:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b64c:	f7f5 fa28 	bl	8000aa0 <__addsf3>
 800b650:	4601      	mov	r1, r0
 800b652:	4628      	mov	r0, r5
 800b654:	f7f5 fbe0 	bl	8000e18 <__aeabi_fdiv>
 800b658:	2602      	movs	r6, #2
 800b65a:	4604      	mov	r4, r0
 800b65c:	e781      	b.n	800b562 <atanf+0x8e>
 800b65e:	4601      	mov	r1, r0
 800b660:	4820      	ldr	r0, [pc, #128]	; (800b6e4 <atanf+0x210>)
 800b662:	f7f5 fbd9 	bl	8000e18 <__aeabi_fdiv>
 800b666:	2603      	movs	r6, #3
 800b668:	4604      	mov	r4, r0
 800b66a:	e77a      	b.n	800b562 <atanf+0x8e>
 800b66c:	f7f5 fa18 	bl	8000aa0 <__addsf3>
 800b670:	4621      	mov	r1, r4
 800b672:	f7f5 fb1d 	bl	8000cb0 <__aeabi_fmul>
 800b676:	4b1c      	ldr	r3, [pc, #112]	; (800b6e8 <atanf+0x214>)
 800b678:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b67c:	f7f5 fa0e 	bl	8000a9c <__aeabi_fsub>
 800b680:	4621      	mov	r1, r4
 800b682:	f7f5 fa0b 	bl	8000a9c <__aeabi_fsub>
 800b686:	4b19      	ldr	r3, [pc, #100]	; (800b6ec <atanf+0x218>)
 800b688:	4601      	mov	r1, r0
 800b68a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b68e:	f7f5 fa05 	bl	8000a9c <__aeabi_fsub>
 800b692:	2f00      	cmp	r7, #0
 800b694:	4604      	mov	r4, r0
 800b696:	f6bf af32 	bge.w	800b4fe <atanf+0x2a>
 800b69a:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b69e:	e72e      	b.n	800b4fe <atanf+0x2a>
 800b6a0:	4c13      	ldr	r4, [pc, #76]	; (800b6f0 <atanf+0x21c>)
 800b6a2:	e72c      	b.n	800b4fe <atanf+0x2a>
 800b6a4:	bfc90fdb 	.word	0xbfc90fdb
 800b6a8:	3edfffff 	.word	0x3edfffff
 800b6ac:	7149f2ca 	.word	0x7149f2ca
 800b6b0:	3f97ffff 	.word	0x3f97ffff
 800b6b4:	3c8569d7 	.word	0x3c8569d7
 800b6b8:	3d4bda59 	.word	0x3d4bda59
 800b6bc:	3d886b35 	.word	0x3d886b35
 800b6c0:	3dba2e6e 	.word	0x3dba2e6e
 800b6c4:	3e124925 	.word	0x3e124925
 800b6c8:	3eaaaaab 	.word	0x3eaaaaab
 800b6cc:	bd15a221 	.word	0xbd15a221
 800b6d0:	3d6ef16b 	.word	0x3d6ef16b
 800b6d4:	3d9d8795 	.word	0x3d9d8795
 800b6d8:	3de38e38 	.word	0x3de38e38
 800b6dc:	3e4ccccd 	.word	0x3e4ccccd
 800b6e0:	401bffff 	.word	0x401bffff
 800b6e4:	bf800000 	.word	0xbf800000
 800b6e8:	0800bde0 	.word	0x0800bde0
 800b6ec:	0800bdd0 	.word	0x0800bdd0
 800b6f0:	3fc90fdb 	.word	0x3fc90fdb

0800b6f4 <fabsf>:
 800b6f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b6f8:	4770      	bx	lr
	...

0800b6fc <scalbnf>:
 800b6fc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800b700:	b510      	push	{r4, lr}
 800b702:	4602      	mov	r2, r0
 800b704:	460c      	mov	r4, r1
 800b706:	d028      	beq.n	800b75a <scalbnf+0x5e>
 800b708:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b70c:	d304      	bcc.n	800b718 <scalbnf+0x1c>
 800b70e:	4601      	mov	r1, r0
 800b710:	f7f5 f9c6 	bl	8000aa0 <__addsf3>
 800b714:	4602      	mov	r2, r0
 800b716:	e020      	b.n	800b75a <scalbnf+0x5e>
 800b718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b71c:	d215      	bcs.n	800b74a <scalbnf+0x4e>
 800b71e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800b722:	f7f5 fac5 	bl	8000cb0 <__aeabi_fmul>
 800b726:	4b18      	ldr	r3, [pc, #96]	; (800b788 <scalbnf+0x8c>)
 800b728:	4602      	mov	r2, r0
 800b72a:	429c      	cmp	r4, r3
 800b72c:	db22      	blt.n	800b774 <scalbnf+0x78>
 800b72e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b732:	3b19      	subs	r3, #25
 800b734:	4423      	add	r3, r4
 800b736:	2bfe      	cmp	r3, #254	; 0xfe
 800b738:	dd09      	ble.n	800b74e <scalbnf+0x52>
 800b73a:	4611      	mov	r1, r2
 800b73c:	4813      	ldr	r0, [pc, #76]	; (800b78c <scalbnf+0x90>)
 800b73e:	f000 f829 	bl	800b794 <copysignf>
 800b742:	4912      	ldr	r1, [pc, #72]	; (800b78c <scalbnf+0x90>)
 800b744:	f7f5 fab4 	bl	8000cb0 <__aeabi_fmul>
 800b748:	e7e4      	b.n	800b714 <scalbnf+0x18>
 800b74a:	0ddb      	lsrs	r3, r3, #23
 800b74c:	e7f2      	b.n	800b734 <scalbnf+0x38>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	dd05      	ble.n	800b75e <scalbnf+0x62>
 800b752:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b756:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800b75a:	4610      	mov	r0, r2
 800b75c:	bd10      	pop	{r4, pc}
 800b75e:	f113 0f16 	cmn.w	r3, #22
 800b762:	da09      	bge.n	800b778 <scalbnf+0x7c>
 800b764:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b768:	429c      	cmp	r4, r3
 800b76a:	4611      	mov	r1, r2
 800b76c:	dce6      	bgt.n	800b73c <scalbnf+0x40>
 800b76e:	4808      	ldr	r0, [pc, #32]	; (800b790 <scalbnf+0x94>)
 800b770:	f000 f810 	bl	800b794 <copysignf>
 800b774:	4906      	ldr	r1, [pc, #24]	; (800b790 <scalbnf+0x94>)
 800b776:	e7e5      	b.n	800b744 <scalbnf+0x48>
 800b778:	3319      	adds	r3, #25
 800b77a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b77e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800b782:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b786:	e7dd      	b.n	800b744 <scalbnf+0x48>
 800b788:	ffff3cb0 	.word	0xffff3cb0
 800b78c:	7149f2ca 	.word	0x7149f2ca
 800b790:	0da24260 	.word	0x0da24260

0800b794 <copysignf>:
 800b794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b798:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b79c:	4308      	orrs	r0, r1
 800b79e:	4770      	bx	lr

0800b7a0 <__errno>:
 800b7a0:	4b01      	ldr	r3, [pc, #4]	; (800b7a8 <__errno+0x8>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000020 	.word	0x20000020

0800b7ac <_init>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	bf00      	nop
 800b7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b2:	bc08      	pop	{r3}
 800b7b4:	469e      	mov	lr, r3
 800b7b6:	4770      	bx	lr

0800b7b8 <_fini>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	bf00      	nop
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr
